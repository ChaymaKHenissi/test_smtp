
Nx_TCP_Echo_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08017c2c  08017c2c  00027c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018014  08018014  000300fc  2**0
                  CONTENTS
  4 .ARM          00000008  08018014  08018014  00028014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801801c  0801801c  000300fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801801c  0801801c  0002801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018020  08018020  00028020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08018024  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300fc  2**0
                  CONTENTS
 10 .bss          0000af80  200000fc  200000fc  000300fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b07c  2000b07c  000300fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   001d0b8e  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00021bfc  00000000  00000000  00200cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e58  00000000  00000000  002228b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f98  00000000  00000000  00225710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047d82  00000000  00000000  002276a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007f6c5  00000000  00000000  0026f42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001029ba  00000000  00000000  002eeaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  003f14a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086e0  00000000  00000000  003f14fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017c14 	.word	0x08017c14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000100 	.word	0x20000100
 80001ec:	08017c14 	.word	0x08017c14

080001f0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001f0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001f2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001f6:	4919      	ldr	r1, [pc, #100]	; (800025c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001f8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001fc:	4818      	ldr	r0, [pc, #96]	; (8000260 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001fe:	4917      	ldr	r1, [pc, #92]	; (800025c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000200:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000202:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000206:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000208:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800020c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800020e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000212:	4915      	ldr	r1, [pc, #84]	; (8000268 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000214:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000216:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800021a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800021c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000220:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000224:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000228:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800022c:	490f      	ldr	r1, [pc, #60]	; (800026c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800022e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000232:	4770      	bx	lr

08000234 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000234:	f7ff bffe 	b.w	8000234 <__tx_BadHandler>

08000238 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000238:	f7ff bffe 	b.w	8000238 <__tx_HardfaultHandler>

0800023c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800023c:	f7ff bffe 	b.w	800023c <__tx_SVCallHandler>

08000240 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000240:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000242:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000246:	4770      	bx	lr

08000248 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000248:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800024a:	f000 f891 	bl	8000370 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800024e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000252:	4770      	bx	lr

08000254 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000254:	f7ff bffe 	b.w	8000254 <__tx_NMIHandler>

08000258 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000258:	f7ff bffe 	b.w	8000258 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800025c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000260:	2000aaf0 	.word	0x2000aaf0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000264:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000268:	001b773f 	.word	0x001b773f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800026c:	40ff0000 	.word	0x40ff0000

08000270 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000270:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000274:	4a2a      	ldr	r2, [pc, #168]	; (8000320 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000276:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000278:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800027c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000280:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000284:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000286:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800028a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800028e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000292:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000296:	f3bf 8f6f 	isb	sy

0800029a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800029a:	e7fe      	b.n	800029a <__tx_wait_here>

0800029c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800029c:	4821      	ldr	r0, [pc, #132]	; (8000324 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800029e:	4a22      	ldr	r2, [pc, #136]	; (8000328 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002a0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002a4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002a6:	b191      	cbz	r1, 80002ce <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002a8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002aa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ae:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002b6:	d101      	bne.n	80002bc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002b8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002bc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002bc:	4c1b      	ldr	r4, [pc, #108]	; (800032c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002be:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002c2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002c4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002c8:	b10d      	cbz	r5, 80002ce <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ca:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002cc:	6023      	str	r3, [r4, #0]

080002ce <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ce:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002d0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002d2:	b1b1      	cbz	r1, 8000302 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002d4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002d6:	b662      	cpsie	i

080002d8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002d8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002da:	4c14      	ldr	r4, [pc, #80]	; (800032c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002dc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002de:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002e2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002e4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002ea:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002f2:	d101      	bne.n	80002f8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002f4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002f8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002f8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002fc:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000300:	4770      	bx	lr

08000302 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000302:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000304:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000306:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000308:	b909      	cbnz	r1, 800030e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800030c:	e7f9      	b.n	8000302 <__tx_ts_wait>

0800030e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800030e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000312:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000316:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800031c:	e7dc      	b.n	80002d8 <__tx_ts_restore>

0800031e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800031e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000320:	2000aaf4 	.word	0x2000aaf4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000324:	2000aaf8 	.word	0x2000aaf8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000328:	2000aafc 	.word	0x2000aafc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032c:	2000ab8c 	.word	0x2000ab8c

08000330 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000330:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000332:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000336:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800033a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800033e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000340:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000344:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000346:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000348:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800034a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800034c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800034e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000350:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000352:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000354:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000356:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000358:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800035c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000362:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000364:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800036a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800036c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800036e:	4770      	bx	lr

08000370 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000370:	4922      	ldr	r1, [pc, #136]	; (80003fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000372:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000374:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000378:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800037c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800037e:	b13a      	cbz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000380:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000384:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000386:	b91a      	cbnz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800038a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800038e:	6018      	str	r0, [r3, #0]

08000390 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000390:	491d      	ldr	r1, [pc, #116]	; (8000408 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000392:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000394:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000396:	b122      	cbz	r2, 80003a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800039a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800039e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003a0:	e008      	b.n	80003b4 <__tx_timer_done>

080003a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003ac:	d101      	bne.n	80003b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003b0:	6818      	ldr	r0, [r3, #0]

080003b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003b2:	6008      	str	r0, [r1, #0]

080003b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003b8:	b912      	cbnz	r2, 80003c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ba:	4914      	ldr	r1, [pc, #80]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003be:	b1d0      	cbz	r0, 80003f6 <__tx_timer_nothing_expired>

080003c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003c4:	4911      	ldr	r1, [pc, #68]	; (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003c8:	b108      	cbz	r0, 80003ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ca:	f015 fa13 	bl	80157f4 <_tx_timer_expiration_process>

080003ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003d2:	b172      	cbz	r2, 80003f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003d4:	f015 f8a8 	bl	8015528 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003dc:	b949      	cbnz	r1, 80003f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003e6:	480f      	ldr	r0, [pc, #60]	; (8000424 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003ee:	d000      	beq.n	80003f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003f0:	6002      	str	r2, [r0, #0]

080003f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	2000b068 	.word	0x2000b068
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000400:	2000ab8c 	.word	0x2000ab8c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000404:	2000b064 	.word	0x2000b064
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000408:	2000ab04 	.word	0x2000ab04
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800040c:	2000ab88 	.word	0x2000ab88
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000410:	2000ab94 	.word	0x2000ab94
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000414:	2000ac50 	.word	0x2000ac50
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000418:	2000aaf4 	.word	0x2000aaf4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800041c:	2000aaf8 	.word	0x2000aaf8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000420:	2000aafc 	.word	0x2000aafc
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000424:	e000ed04 	.word	0xe000ed04
	...

08000430 <memchr>:
 8000430:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000434:	2a10      	cmp	r2, #16
 8000436:	db2b      	blt.n	8000490 <memchr+0x60>
 8000438:	f010 0f07 	tst.w	r0, #7
 800043c:	d008      	beq.n	8000450 <memchr+0x20>
 800043e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000442:	3a01      	subs	r2, #1
 8000444:	428b      	cmp	r3, r1
 8000446:	d02d      	beq.n	80004a4 <memchr+0x74>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	b342      	cbz	r2, 80004a0 <memchr+0x70>
 800044e:	d1f6      	bne.n	800043e <memchr+0xe>
 8000450:	b4f0      	push	{r4, r5, r6, r7}
 8000452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800045a:	f022 0407 	bic.w	r4, r2, #7
 800045e:	f07f 0700 	mvns.w	r7, #0
 8000462:	2300      	movs	r3, #0
 8000464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000468:	3c08      	subs	r4, #8
 800046a:	ea85 0501 	eor.w	r5, r5, r1
 800046e:	ea86 0601 	eor.w	r6, r6, r1
 8000472:	fa85 f547 	uadd8	r5, r5, r7
 8000476:	faa3 f587 	sel	r5, r3, r7
 800047a:	fa86 f647 	uadd8	r6, r6, r7
 800047e:	faa5 f687 	sel	r6, r5, r7
 8000482:	b98e      	cbnz	r6, 80004a8 <memchr+0x78>
 8000484:	d1ee      	bne.n	8000464 <memchr+0x34>
 8000486:	bcf0      	pop	{r4, r5, r6, r7}
 8000488:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800048c:	f002 0207 	and.w	r2, r2, #7
 8000490:	b132      	cbz	r2, 80004a0 <memchr+0x70>
 8000492:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000496:	3a01      	subs	r2, #1
 8000498:	ea83 0301 	eor.w	r3, r3, r1
 800049c:	b113      	cbz	r3, 80004a4 <memchr+0x74>
 800049e:	d1f8      	bne.n	8000492 <memchr+0x62>
 80004a0:	2000      	movs	r0, #0
 80004a2:	4770      	bx	lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4770      	bx	lr
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	bf06      	itte	eq
 80004ac:	4635      	moveq	r5, r6
 80004ae:	3803      	subeq	r0, #3
 80004b0:	3807      	subne	r0, #7
 80004b2:	f015 0f01 	tst.w	r5, #1
 80004b6:	d107      	bne.n	80004c8 <memchr+0x98>
 80004b8:	3001      	adds	r0, #1
 80004ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004be:	bf02      	ittt	eq
 80004c0:	3001      	addeq	r0, #1
 80004c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004c6:	3001      	addeq	r0, #1
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	3801      	subs	r0, #1
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__aeabi_uldivmod>:
 80004d0:	b953      	cbnz	r3, 80004e8 <__aeabi_uldivmod+0x18>
 80004d2:	b94a      	cbnz	r2, 80004e8 <__aeabi_uldivmod+0x18>
 80004d4:	2900      	cmp	r1, #0
 80004d6:	bf08      	it	eq
 80004d8:	2800      	cmpeq	r0, #0
 80004da:	bf1c      	itt	ne
 80004dc:	f04f 31ff 	movne.w	r1, #4294967295
 80004e0:	f04f 30ff 	movne.w	r0, #4294967295
 80004e4:	f000 b96e 	b.w	80007c4 <__aeabi_idiv0>
 80004e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f0:	f000 f806 	bl	8000500 <__udivmoddi4>
 80004f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004fc:	b004      	add	sp, #16
 80004fe:	4770      	bx	lr

08000500 <__udivmoddi4>:
 8000500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000504:	9d08      	ldr	r5, [sp, #32]
 8000506:	4604      	mov	r4, r0
 8000508:	468c      	mov	ip, r1
 800050a:	2b00      	cmp	r3, #0
 800050c:	f040 8083 	bne.w	8000616 <__udivmoddi4+0x116>
 8000510:	428a      	cmp	r2, r1
 8000512:	4617      	mov	r7, r2
 8000514:	d947      	bls.n	80005a6 <__udivmoddi4+0xa6>
 8000516:	fab2 f282 	clz	r2, r2
 800051a:	b142      	cbz	r2, 800052e <__udivmoddi4+0x2e>
 800051c:	f1c2 0020 	rsb	r0, r2, #32
 8000520:	fa24 f000 	lsr.w	r0, r4, r0
 8000524:	4091      	lsls	r1, r2
 8000526:	4097      	lsls	r7, r2
 8000528:	ea40 0c01 	orr.w	ip, r0, r1
 800052c:	4094      	lsls	r4, r2
 800052e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000532:	0c23      	lsrs	r3, r4, #16
 8000534:	fbbc f6f8 	udiv	r6, ip, r8
 8000538:	fa1f fe87 	uxth.w	lr, r7
 800053c:	fb08 c116 	mls	r1, r8, r6, ip
 8000540:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000544:	fb06 f10e 	mul.w	r1, r6, lr
 8000548:	4299      	cmp	r1, r3
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x60>
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000552:	f080 8119 	bcs.w	8000788 <__udivmoddi4+0x288>
 8000556:	4299      	cmp	r1, r3
 8000558:	f240 8116 	bls.w	8000788 <__udivmoddi4+0x288>
 800055c:	3e02      	subs	r6, #2
 800055e:	443b      	add	r3, r7
 8000560:	1a5b      	subs	r3, r3, r1
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000570:	fb00 fe0e 	mul.w	lr, r0, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x8c>
 8000578:	193c      	adds	r4, r7, r4
 800057a:	f100 33ff 	add.w	r3, r0, #4294967295
 800057e:	f080 8105 	bcs.w	800078c <__udivmoddi4+0x28c>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f240 8102 	bls.w	800078c <__udivmoddi4+0x28c>
 8000588:	3802      	subs	r0, #2
 800058a:	443c      	add	r4, r7
 800058c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	2600      	movs	r6, #0
 8000596:	b11d      	cbz	r5, 80005a0 <__udivmoddi4+0xa0>
 8000598:	40d4      	lsrs	r4, r2
 800059a:	2300      	movs	r3, #0
 800059c:	e9c5 4300 	strd	r4, r3, [r5]
 80005a0:	4631      	mov	r1, r6
 80005a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a6:	b902      	cbnz	r2, 80005aa <__udivmoddi4+0xaa>
 80005a8:	deff      	udf	#255	; 0xff
 80005aa:	fab2 f282 	clz	r2, r2
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d150      	bne.n	8000654 <__udivmoddi4+0x154>
 80005b2:	1bcb      	subs	r3, r1, r7
 80005b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005b8:	fa1f f887 	uxth.w	r8, r7
 80005bc:	2601      	movs	r6, #1
 80005be:	fbb3 fcfe 	udiv	ip, r3, lr
 80005c2:	0c21      	lsrs	r1, r4, #16
 80005c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80005c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005cc:	fb08 f30c 	mul.w	r3, r8, ip
 80005d0:	428b      	cmp	r3, r1
 80005d2:	d907      	bls.n	80005e4 <__udivmoddi4+0xe4>
 80005d4:	1879      	adds	r1, r7, r1
 80005d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005da:	d202      	bcs.n	80005e2 <__udivmoddi4+0xe2>
 80005dc:	428b      	cmp	r3, r1
 80005de:	f200 80e9 	bhi.w	80007b4 <__udivmoddi4+0x2b4>
 80005e2:	4684      	mov	ip, r0
 80005e4:	1ac9      	subs	r1, r1, r3
 80005e6:	b2a3      	uxth	r3, r4
 80005e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80005f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80005f4:	fb08 f800 	mul.w	r8, r8, r0
 80005f8:	45a0      	cmp	r8, r4
 80005fa:	d907      	bls.n	800060c <__udivmoddi4+0x10c>
 80005fc:	193c      	adds	r4, r7, r4
 80005fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000602:	d202      	bcs.n	800060a <__udivmoddi4+0x10a>
 8000604:	45a0      	cmp	r8, r4
 8000606:	f200 80d9 	bhi.w	80007bc <__udivmoddi4+0x2bc>
 800060a:	4618      	mov	r0, r3
 800060c:	eba4 0408 	sub.w	r4, r4, r8
 8000610:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000614:	e7bf      	b.n	8000596 <__udivmoddi4+0x96>
 8000616:	428b      	cmp	r3, r1
 8000618:	d909      	bls.n	800062e <__udivmoddi4+0x12e>
 800061a:	2d00      	cmp	r5, #0
 800061c:	f000 80b1 	beq.w	8000782 <__udivmoddi4+0x282>
 8000620:	2600      	movs	r6, #0
 8000622:	e9c5 0100 	strd	r0, r1, [r5]
 8000626:	4630      	mov	r0, r6
 8000628:	4631      	mov	r1, r6
 800062a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062e:	fab3 f683 	clz	r6, r3
 8000632:	2e00      	cmp	r6, #0
 8000634:	d14a      	bne.n	80006cc <__udivmoddi4+0x1cc>
 8000636:	428b      	cmp	r3, r1
 8000638:	d302      	bcc.n	8000640 <__udivmoddi4+0x140>
 800063a:	4282      	cmp	r2, r0
 800063c:	f200 80b8 	bhi.w	80007b0 <__udivmoddi4+0x2b0>
 8000640:	1a84      	subs	r4, r0, r2
 8000642:	eb61 0103 	sbc.w	r1, r1, r3
 8000646:	2001      	movs	r0, #1
 8000648:	468c      	mov	ip, r1
 800064a:	2d00      	cmp	r5, #0
 800064c:	d0a8      	beq.n	80005a0 <__udivmoddi4+0xa0>
 800064e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000652:	e7a5      	b.n	80005a0 <__udivmoddi4+0xa0>
 8000654:	f1c2 0320 	rsb	r3, r2, #32
 8000658:	fa20 f603 	lsr.w	r6, r0, r3
 800065c:	4097      	lsls	r7, r2
 800065e:	fa01 f002 	lsl.w	r0, r1, r2
 8000662:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000666:	40d9      	lsrs	r1, r3
 8000668:	4330      	orrs	r0, r6
 800066a:	0c03      	lsrs	r3, r0, #16
 800066c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000670:	fa1f f887 	uxth.w	r8, r7
 8000674:	fb0e 1116 	mls	r1, lr, r6, r1
 8000678:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800067c:	fb06 f108 	mul.w	r1, r6, r8
 8000680:	4299      	cmp	r1, r3
 8000682:	fa04 f402 	lsl.w	r4, r4, r2
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x19c>
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	f106 3cff 	add.w	ip, r6, #4294967295
 800068e:	f080 808d 	bcs.w	80007ac <__udivmoddi4+0x2ac>
 8000692:	4299      	cmp	r1, r3
 8000694:	f240 808a 	bls.w	80007ac <__udivmoddi4+0x2ac>
 8000698:	3e02      	subs	r6, #2
 800069a:	443b      	add	r3, r7
 800069c:	1a5b      	subs	r3, r3, r1
 800069e:	b281      	uxth	r1, r0
 80006a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80006a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80006a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ac:	fb00 f308 	mul.w	r3, r0, r8
 80006b0:	428b      	cmp	r3, r1
 80006b2:	d907      	bls.n	80006c4 <__udivmoddi4+0x1c4>
 80006b4:	1879      	adds	r1, r7, r1
 80006b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80006ba:	d273      	bcs.n	80007a4 <__udivmoddi4+0x2a4>
 80006bc:	428b      	cmp	r3, r1
 80006be:	d971      	bls.n	80007a4 <__udivmoddi4+0x2a4>
 80006c0:	3802      	subs	r0, #2
 80006c2:	4439      	add	r1, r7
 80006c4:	1acb      	subs	r3, r1, r3
 80006c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80006ca:	e778      	b.n	80005be <__udivmoddi4+0xbe>
 80006cc:	f1c6 0c20 	rsb	ip, r6, #32
 80006d0:	fa03 f406 	lsl.w	r4, r3, r6
 80006d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80006d8:	431c      	orrs	r4, r3
 80006da:	fa20 f70c 	lsr.w	r7, r0, ip
 80006de:	fa01 f306 	lsl.w	r3, r1, r6
 80006e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80006e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80006ea:	431f      	orrs	r7, r3
 80006ec:	0c3b      	lsrs	r3, r7, #16
 80006ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80006f2:	fa1f f884 	uxth.w	r8, r4
 80006f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80006fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80006fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000702:	458a      	cmp	sl, r1
 8000704:	fa02 f206 	lsl.w	r2, r2, r6
 8000708:	fa00 f306 	lsl.w	r3, r0, r6
 800070c:	d908      	bls.n	8000720 <__udivmoddi4+0x220>
 800070e:	1861      	adds	r1, r4, r1
 8000710:	f109 30ff 	add.w	r0, r9, #4294967295
 8000714:	d248      	bcs.n	80007a8 <__udivmoddi4+0x2a8>
 8000716:	458a      	cmp	sl, r1
 8000718:	d946      	bls.n	80007a8 <__udivmoddi4+0x2a8>
 800071a:	f1a9 0902 	sub.w	r9, r9, #2
 800071e:	4421      	add	r1, r4
 8000720:	eba1 010a 	sub.w	r1, r1, sl
 8000724:	b2bf      	uxth	r7, r7
 8000726:	fbb1 f0fe 	udiv	r0, r1, lr
 800072a:	fb0e 1110 	mls	r1, lr, r0, r1
 800072e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000732:	fb00 f808 	mul.w	r8, r0, r8
 8000736:	45b8      	cmp	r8, r7
 8000738:	d907      	bls.n	800074a <__udivmoddi4+0x24a>
 800073a:	19e7      	adds	r7, r4, r7
 800073c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000740:	d22e      	bcs.n	80007a0 <__udivmoddi4+0x2a0>
 8000742:	45b8      	cmp	r8, r7
 8000744:	d92c      	bls.n	80007a0 <__udivmoddi4+0x2a0>
 8000746:	3802      	subs	r0, #2
 8000748:	4427      	add	r7, r4
 800074a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800074e:	eba7 0708 	sub.w	r7, r7, r8
 8000752:	fba0 8902 	umull	r8, r9, r0, r2
 8000756:	454f      	cmp	r7, r9
 8000758:	46c6      	mov	lr, r8
 800075a:	4649      	mov	r1, r9
 800075c:	d31a      	bcc.n	8000794 <__udivmoddi4+0x294>
 800075e:	d017      	beq.n	8000790 <__udivmoddi4+0x290>
 8000760:	b15d      	cbz	r5, 800077a <__udivmoddi4+0x27a>
 8000762:	ebb3 020e 	subs.w	r2, r3, lr
 8000766:	eb67 0701 	sbc.w	r7, r7, r1
 800076a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800076e:	40f2      	lsrs	r2, r6
 8000770:	ea4c 0202 	orr.w	r2, ip, r2
 8000774:	40f7      	lsrs	r7, r6
 8000776:	e9c5 2700 	strd	r2, r7, [r5]
 800077a:	2600      	movs	r6, #0
 800077c:	4631      	mov	r1, r6
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	462e      	mov	r6, r5
 8000784:	4628      	mov	r0, r5
 8000786:	e70b      	b.n	80005a0 <__udivmoddi4+0xa0>
 8000788:	4606      	mov	r6, r0
 800078a:	e6e9      	b.n	8000560 <__udivmoddi4+0x60>
 800078c:	4618      	mov	r0, r3
 800078e:	e6fd      	b.n	800058c <__udivmoddi4+0x8c>
 8000790:	4543      	cmp	r3, r8
 8000792:	d2e5      	bcs.n	8000760 <__udivmoddi4+0x260>
 8000794:	ebb8 0e02 	subs.w	lr, r8, r2
 8000798:	eb69 0104 	sbc.w	r1, r9, r4
 800079c:	3801      	subs	r0, #1
 800079e:	e7df      	b.n	8000760 <__udivmoddi4+0x260>
 80007a0:	4608      	mov	r0, r1
 80007a2:	e7d2      	b.n	800074a <__udivmoddi4+0x24a>
 80007a4:	4660      	mov	r0, ip
 80007a6:	e78d      	b.n	80006c4 <__udivmoddi4+0x1c4>
 80007a8:	4681      	mov	r9, r0
 80007aa:	e7b9      	b.n	8000720 <__udivmoddi4+0x220>
 80007ac:	4666      	mov	r6, ip
 80007ae:	e775      	b.n	800069c <__udivmoddi4+0x19c>
 80007b0:	4630      	mov	r0, r6
 80007b2:	e74a      	b.n	800064a <__udivmoddi4+0x14a>
 80007b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80007b8:	4439      	add	r1, r7
 80007ba:	e713      	b.n	80005e4 <__udivmoddi4+0xe4>
 80007bc:	3802      	subs	r0, #2
 80007be:	443c      	add	r4, r7
 80007c0:	e724      	b.n	800060c <__udivmoddi4+0x10c>
 80007c2:	bf00      	nop

080007c4 <__aeabi_idiv0>:
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007d0:	2334      	movs	r3, #52	; 0x34
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <tx_application_define+0x74>)
 80007da:	4919      	ldr	r1, [pc, #100]	; (8000840 <tx_application_define+0x78>)
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <tx_application_define+0x7c>)
 80007de:	f015 fab3 	bl	8015d48 <_txe_byte_pool_create>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 80007e8:	f000 f9ca 	bl	8000b80 <Error_Handler>
 80007ec:	e009      	b.n	8000802 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <tx_application_define+0x7c>)
 80007f0:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f000 f82e 	bl	8000854 <App_ThreadX_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      Error_Handler();
 80007fe:	f000 f9bf 	bl	8000b80 <Error_Handler>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000802:	2334      	movs	r3, #52	; 0x34
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <tx_application_define+0x80>)
 800080c:	490f      	ldr	r1, [pc, #60]	; (800084c <tx_application_define+0x84>)
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <tx_application_define+0x88>)
 8000810:	f015 fa9a 	bl	8015d48 <_txe_byte_pool_create>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <tx_application_define+0x58>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Error */
    Error_Handler();
 800081a:	f000 f9b1 	bl	8000b80 <Error_Handler>

    /* USER CODE END MX_NetXDuo_Init_Success */

  }

}
 800081e:	e009      	b.n	8000834 <tx_application_define+0x6c>
    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <tx_application_define+0x88>)
 8000822:	60fb      	str	r3, [r7, #12]
    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f000 fc3f 	bl	80010a8 <MX_NetXDuo_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <tx_application_define+0x6c>
      Error_Handler();
 8000830:	f000 f9a6 	bl	8000b80 <Error_Handler>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000118 	.word	0x20000118
 8000840:	08017c2c 	.word	0x08017c2c
 8000844:	20000518 	.word	0x20000518
 8000848:	2000054c 	.word	0x2000054c
 800084c:	08017c40 	.word	0x08017c40
 8000850:	20007d4c 	.word	0x20007d4c

08000854 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000864:	68fb      	ldr	r3, [r7, #12]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000876:	f012 ff7f 	bl	8013778 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f001 f8ef 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f80d 	bl	80008a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED_GREEN);
 800088a:	2000      	movs	r0, #0
 800088c:	f001 f854 	bl	8001938 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000890:	2002      	movs	r0, #2
 8000892:	f001 f851 	bl	8001938 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 f8e3 	bl	8000a60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800089a:	f000 f8b7 	bl	8000a0c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800089e:	f7ff ffe8 	bl	8000872 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <main+0x24>

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f016 f916 	bl	8016ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <SystemClock_Config+0xdc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a2b      	ldr	r2, [pc, #172]	; (8000980 <SystemClock_Config+0xdc>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <SystemClock_Config+0xdc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <SystemClock_Config+0xe0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <SystemClock_Config+0xe0>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <SystemClock_Config+0xe0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000904:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000914:	2308      	movs	r3, #8
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000918:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000922:	2303      	movs	r3, #3
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fa90 	bl	8002e50 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000936:	f000 f923 	bl	8000b80 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800093a:	f002 fa39 	bl	8002db0 <HAL_PWREx_EnableOverDrive>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000944:	f000 f91c 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094c:	2302      	movs	r3, #2
 800094e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000954:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2105      	movs	r1, #5
 8000966:	4618      	mov	r0, r3
 8000968:	f002 fcea 	bl	8003340 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000972:	f000 f905 	bl	8000b80 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	; 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_ETH_Init+0x78>)
 800098e:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <MX_ETH_Init+0x7c>)
 8000990:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_ETH_Init+0x78>)
 8000994:	2201      	movs	r2, #1
 8000996:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_ETH_Init+0x78>)
 800099a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_ETH_Init+0x78>)
 80009a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_ETH_Init+0x78>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_ETH_Init+0x80>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x11;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_ETH_Init+0x80>)
 80009b6:	2211      	movs	r2, #17
 80009b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0x83;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_ETH_Init+0x80>)
 80009bc:	2283      	movs	r2, #131	; 0x83
 80009be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x45;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_ETH_Init+0x80>)
 80009c2:	2245      	movs	r2, #69	; 0x45
 80009c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x26;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_ETH_Init+0x80>)
 80009c8:	2226      	movs	r2, #38	; 0x26
 80009ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x20;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_ETH_Init+0x80>)
 80009ce:	2220      	movs	r2, #32
 80009d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_ETH_Init+0x78>)
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <MX_ETH_Init+0x80>)
 80009d6:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_ETH_Init+0x78>)
 80009da:	2201      	movs	r2, #1
 80009dc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_ETH_Init+0x78>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_ETH_Init+0x78>)
 80009e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009ea:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_ETH_Init+0x78>)
 80009ee:	f001 f981 	bl	8001cf4 <HAL_ETH_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80009f8:	f000 f8c2 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20007f48 	.word	0x20007f48
 8000a04:	40028000 	.word	0x40028000
 8000a08:	20007d80 	.word	0x20007d80

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART3_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART3_UART_Init+0x4c>)
 8000a44:	f003 f958 	bl	8003cf8 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f897 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20007f04 	.word	0x20007f04
 8000a5c:	40004800 	.word	0x40004800

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

}
 8000b0e:	bf00      	nop
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000b28:	1d39      	adds	r1, r7, #4
 8000b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <__io_putchar+0x20>)
 8000b32:	f003 f92e 	bl	8003d92 <HAL_UART_Transmit>

  return ch;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20007f04 	.word	0x20007f04

08000b44 <Success_Handler>:
/**
* @brief  This function is executed in case of success.
* @retval None
*/
void Success_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Success_Handler_Debug */
  BSP_LED_Off(LED_RED);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f000 ff45 	bl	80019d8 <BSP_LED_Off>
  while(1)
  {
    BSP_LED_Toggle(LED_GREEN);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 ff5c 	bl	8001a0c <BSP_LED_Toggle>
    tx_thread_sleep(50);
 8000b54:	2032      	movs	r0, #50	; 0x32
 8000b56:	f014 fa15 	bl	8014f84 <_tx_thread_sleep>
    BSP_LED_Toggle(LED_GREEN);
 8000b5a:	e7f8      	b.n	8000b4e <Success_Handler+0xa>

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6e:	f000 ff9b 	bl	8001aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40001000 	.word	0x40001000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED_GREEN);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 ff27 	bl	80019d8 <BSP_LED_Off>
  while (1)
  {
    BSP_LED_Toggle(LED_RED);
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 ff3e 	bl	8001a0c <BSP_LED_Toggle>
    HAL_Delay(200);
 8000b90:	20c8      	movs	r0, #200	; 0xc8
 8000b92:	f000 ffa9 	bl	8001ae8 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 8000b96:	e7f8      	b.n	8000b8a <Error_Handler+0xa>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a59      	ldr	r2, [pc, #356]	; (8000d6c <HAL_ETH_MspInit+0x184>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	f040 80ac 	bne.w	8000d64 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
 8000c10:	4b57      	ldr	r3, [pc, #348]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a56      	ldr	r2, [pc, #344]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c36:	6313      	str	r3, [r2, #48]	; 0x30
 8000c38:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	4b49      	ldr	r3, [pc, #292]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a48      	ldr	r2, [pc, #288]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a41      	ldr	r2, [pc, #260]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4a3a      	ldr	r2, [pc, #232]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_ETH_MspInit+0x188>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cd0:	2332      	movs	r3, #50	; 0x32
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce0:	230b      	movs	r3, #11
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4822      	ldr	r0, [pc, #136]	; (8000d74 <HAL_ETH_MspInit+0x18c>)
 8000cec:	f001 fe80 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cf0:	2386      	movs	r3, #134	; 0x86
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d00:	230b      	movs	r3, #11
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481b      	ldr	r0, [pc, #108]	; (8000d78 <HAL_ETH_MspInit+0x190>)
 8000d0c:	f001 fe70 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <HAL_ETH_MspInit+0x194>)
 8000d2e:	f001 fe5f 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <HAL_ETH_MspInit+0x198>)
 8000d50:	f001 fe4e 	bl	80029f0 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2107      	movs	r1, #7
 8000d58:	203d      	movs	r0, #61	; 0x3d
 8000d5a:	f000 ffa1 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000d5e:	203d      	movs	r0, #61	; 0x3d
 8000d60:	f000 ffba 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3738      	adds	r7, #56	; 0x38
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40028000 	.word	0x40028000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40021800 	.word	0x40021800

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_UART_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12c      	bne.n	8000e00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_UART_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df0:	2307      	movs	r3, #7
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_UART_MspInit+0x8c>)
 8000dfc:	f001 fdf8 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40004800 	.word	0x40004800
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020c00 	.word	0x40020c00

08000e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	2036      	movs	r0, #54	; 0x36
 8000e2a:	f000 ff39 	bl	8001ca0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e2e:	2036      	movs	r0, #54	; 0x36
 8000e30:	f000 ff52 	bl	8001cd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_InitTick+0xa4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <HAL_InitTick+0xa4>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6413      	str	r3, [r2, #64]	; 0x40
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <HAL_InitTick+0xa4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e50:	f107 0210 	add.w	r2, r7, #16
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fc6c 	bl	8003738 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e60:	f002 fc42 	bl	80036e8 <HAL_RCC_GetPCLK1Freq>
 8000e64:	4603      	mov	r3, r0
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	0c9b      	lsrs	r3, r3, #18
 8000e74:	3b01      	subs	r3, #1
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_InitTick+0xb0>)
 8000e7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e9a:	f002 fc7f 	bl	800379c <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d104      	bne.n	8000eae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <HAL_InitTick+0xac>)
 8000ea6:	f002 fcd3 	bl	8003850 <HAL_TIM_Base_Start_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3730      	adds	r7, #48	; 0x30
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	431bde83 	.word	0x431bde83
 8000ec0:	20007f90 	.word	0x20007f90
 8000ec4:	40001000 	.word	0x40001000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <TIM6_DAC_IRQHandler+0x10>)
 8000efa:	f002 fd19 	bl	8003930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20007f90 	.word	0x20007f90

08000f08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <ETH_IRQHandler+0x10>)
 8000f0e:	f000 ff63 	bl	8001dd8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20007f48 	.word	0x20007f48

08000f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	return 1;
 8000f20:	2301      	movs	r3, #1
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_kill>:

int _kill(int pid, int sig)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f36:	f015 fd83 	bl	8016a40 <__errno>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2216      	movs	r2, #22
 8000f3e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_exit>:

void _exit (int status)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffe7 	bl	8000f2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f5e:	e7fe      	b.n	8000f5e <_exit+0x12>

08000f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f72:	f3af 8000 	nop.w
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
	}

return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e009      	b.n	8000fc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fdb3 	bl	8000b20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf1      	blt.n	8000fac <_write+0x12>
	}
	return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_close>:

int _close(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffa:	605a      	str	r2, [r3, #4]
	return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f015 fce8 	bl	8016a40 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20030000 	.word	0x20030000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20007d88 	.word	0x20007d88
 80010a4:	2000b080 	.word	0x2000b080

080010a8 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af08      	add	r7, sp, #32
 80010ae:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_NetXDuo_MEM_POOL */
  /* USER CODE END MX_NetXDuo_MEM_POOL */

  /* USER CODE BEGIN MX_NetXDuo_Init */
  printf("Nx_TCP_Echo_Client application started..\n");
 80010b8:	486f      	ldr	r0, [pc, #444]	; (8001278 <MX_NetXDuo_Init+0x1d0>)
 80010ba:	f015 fda1 	bl	8016c00 <puts>

  /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,  NX_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80010be:	2300      	movs	r3, #0
 80010c0:	f643 6258 	movw	r2, #15960	; 0x3e58
 80010c4:	496d      	ldr	r1, [pc, #436]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 80010c6:	68b8      	ldr	r0, [r7, #8]
 80010c8:	f014 fdca 	bl	8015c60 <_txe_byte_allocate>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_NetXDuo_Init+0x2e>
  {
    return TX_POOL_ERROR;
 80010d2:	2302      	movs	r3, #2
 80010d4:	e0cb      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Create the Packet pool to be used for packet allocation */
  ret = nx_packet_pool_create(&AppPool, "Main Packet Pool", PAYLOAD_SIZE, pointer, NX_PACKET_POOL_SIZE);
 80010d6:	4b69      	ldr	r3, [pc, #420]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	223c      	movs	r2, #60	; 0x3c
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	f643 6258 	movw	r2, #15960	; 0x3e58
 80010e2:	9200      	str	r2, [sp, #0]
 80010e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80010e8:	4965      	ldr	r1, [pc, #404]	; (8001280 <MX_NetXDuo_Init+0x1d8>)
 80010ea:	4866      	ldr	r0, [pc, #408]	; (8001284 <MX_NetXDuo_Init+0x1dc>)
 80010ec:	f010 ff96 	bl	801201c <_nxe_packet_pool_create>
 80010f0:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_NetXDuo_Init+0x54>
  {
    return NX_NOT_ENABLED;
 80010f8:	2314      	movs	r3, #20
 80010fa:	e0b8      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,   2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80010fc:	2300      	movs	r3, #0
 80010fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001102:	495e      	ldr	r1, [pc, #376]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 8001104:	68b8      	ldr	r0, [r7, #8]
 8001106:	f014 fdab 	bl	8015c60 <_txe_byte_allocate>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_NetXDuo_Init+0x6c>
  {
    return TX_POOL_ERROR;
 8001110:	2302      	movs	r3, #2
 8001112:	e0ac      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Create the main NX_IP instance */
  ret = nx_ip_create(&IpInstance, "Main Ip instance", NULL_ADDRESS, NULL_ADDRESS, &AppPool,nx_stm32_eth_driver,
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f240 72cc 	movw	r2, #1996	; 0x7cc
 800111c:	9205      	str	r2, [sp, #20]
 800111e:	220a      	movs	r2, #10
 8001120:	9204      	str	r2, [sp, #16]
 8001122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001126:	9203      	str	r2, [sp, #12]
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <MX_NetXDuo_Init+0x1e0>)
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	4b55      	ldr	r3, [pc, #340]	; (8001284 <MX_NetXDuo_Init+0x1dc>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	2200      	movs	r2, #0
 8001136:	4955      	ldr	r1, [pc, #340]	; (800128c <MX_NetXDuo_Init+0x1e4>)
 8001138:	4855      	ldr	r0, [pc, #340]	; (8001290 <MX_NetXDuo_Init+0x1e8>)
 800113a:	f010 fde3 	bl	8011d04 <_nxe_ip_create>
 800113e:	60f8      	str	r0, [r7, #12]
                     pointer, 2 * DEFAULT_MEMORY_SIZE, DEFAULT_PRIORITY);

  if (ret != NX_SUCCESS)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_NetXDuo_Init+0xa2>
  {
    return NX_NOT_ENABLED;
 8001146:	2314      	movs	r3, #20
 8001148:	e091      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800114a:	2300      	movs	r3, #0
 800114c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001150:	494a      	ldr	r1, [pc, #296]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f014 fd84 	bl	8015c60 <_txe_byte_allocate>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_NetXDuo_Init+0xba>
  {
    return TX_POOL_ERROR;
 800115e:	2302      	movs	r3, #2
 8001160:	e085      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /*  Enable the ARP protocol and provide the ARP cache size for the IP instance */
  ret = nx_arp_enable(&IpInstance, (VOID *)pointer, DEFAULT_MEMORY_SIZE);
 8001162:	4b46      	ldr	r3, [pc, #280]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116a:	4619      	mov	r1, r3
 800116c:	4848      	ldr	r0, [pc, #288]	; (8001290 <MX_NetXDuo_Init+0x1e8>)
 800116e:	f010 fcbb 	bl	8011ae8 <_nxe_arp_enable>
 8001172:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_NetXDuo_Init+0xd6>
  {
    return NX_NOT_ENABLED;
 800117a:	2314      	movs	r3, #20
 800117c:	e077      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Enable the ICMP */
  ret = nx_icmp_enable(&IpInstance);
 800117e:	4844      	ldr	r0, [pc, #272]	; (8001290 <MX_NetXDuo_Init+0x1e8>)
 8001180:	f010 fcfe 	bl	8011b80 <_nxe_icmp_enable>
 8001184:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_NetXDuo_Init+0xe8>
  {
    return NX_NOT_ENABLED;
 800118c:	2314      	movs	r3, #20
 800118e:	e06e      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Enable the UDP protocol required for  DHCP communication */
  ret = nx_udp_enable(&IpInstance);
 8001190:	483f      	ldr	r0, [pc, #252]	; (8001290 <MX_NetXDuo_Init+0x1e8>)
 8001192:	f011 fb77 	bl	8012884 <_nxe_udp_enable>
 8001196:	60f8      	str	r0, [r7, #12]

  /* Enable the TCP protocol */
  ret = nx_tcp_enable(&IpInstance);
 8001198:	483d      	ldr	r0, [pc, #244]	; (8001290 <MX_NetXDuo_Init+0x1e8>)
 800119a:	f011 f959 	bl	8012450 <_nxe_tcp_enable>
 800119e:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_NetXDuo_Init+0x102>
  {
    return NX_NOT_ENABLED;
 80011a6:	2314      	movs	r3, #20
 80011a8:	e061      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80011aa:	2300      	movs	r3, #0
 80011ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b0:	4932      	ldr	r1, [pc, #200]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f014 fd54 	bl	8015c60 <_txe_byte_allocate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_NetXDuo_Init+0x11a>
  {
    return TX_POOL_ERROR;
 80011be:	2302      	movs	r3, #2
 80011c0:	e055      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Create the main thread */
  ret = tx_thread_create(&AppMainThread, "App Main thread", App_Main_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	22b4      	movs	r2, #180	; 0xb4
 80011c8:	9206      	str	r2, [sp, #24]
 80011ca:	2201      	movs	r2, #1
 80011cc:	9205      	str	r2, [sp, #20]
 80011ce:	2200      	movs	r2, #0
 80011d0:	9204      	str	r2, [sp, #16]
 80011d2:	220a      	movs	r2, #10
 80011d4:	9203      	str	r2, [sp, #12]
 80011d6:	220a      	movs	r2, #10
 80011d8:	9202      	str	r2, [sp, #8]
 80011da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2300      	movs	r3, #0
 80011e4:	4a2b      	ldr	r2, [pc, #172]	; (8001294 <MX_NetXDuo_Init+0x1ec>)
 80011e6:	492c      	ldr	r1, [pc, #176]	; (8001298 <MX_NetXDuo_Init+0x1f0>)
 80011e8:	482c      	ldr	r0, [pc, #176]	; (800129c <MX_NetXDuo_Init+0x1f4>)
 80011ea:	f015 f9c9 	bl	8016580 <_txe_thread_create>
 80011ee:	60f8      	str	r0, [r7, #12]
                         DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_NetXDuo_Init+0x152>
  {
    return NX_NOT_ENABLED;
 80011f6:	2314      	movs	r3, #20
 80011f8:	e039      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* Allocate the memory for TCP server thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80011fa:	2300      	movs	r3, #0
 80011fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001200:	491e      	ldr	r1, [pc, #120]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f014 fd2c 	bl	8015c60 <_txe_byte_allocate>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_NetXDuo_Init+0x16a>
  {
    return TX_POOL_ERROR;
 800120e:	2302      	movs	r3, #2
 8001210:	e02d      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* create the TCP server thread */
  ret = tx_thread_create(&AppTCPThread, "App TCP Thread", App_TCP_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_NetXDuo_Init+0x1d4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	22b4      	movs	r2, #180	; 0xb4
 8001218:	9206      	str	r2, [sp, #24]
 800121a:	2200      	movs	r2, #0
 800121c:	9205      	str	r2, [sp, #20]
 800121e:	2200      	movs	r2, #0
 8001220:	9204      	str	r2, [sp, #16]
 8001222:	220a      	movs	r2, #10
 8001224:	9203      	str	r2, [sp, #12]
 8001226:	220a      	movs	r2, #10
 8001228:	9202      	str	r2, [sp, #8]
 800122a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <MX_NetXDuo_Init+0x1f8>)
 8001236:	491b      	ldr	r1, [pc, #108]	; (80012a4 <MX_NetXDuo_Init+0x1fc>)
 8001238:	481b      	ldr	r0, [pc, #108]	; (80012a8 <MX_NetXDuo_Init+0x200>)
 800123a:	f015 f9a1 	bl	8016580 <_txe_thread_create>
 800123e:	60f8      	str	r0, [r7, #12]
                         DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);

  if (ret != TX_SUCCESS)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_NetXDuo_Init+0x1a2>
  {
    return NX_NOT_ENABLED;
 8001246:	2314      	movs	r3, #20
 8001248:	e011      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* create the DHCP client */
  ret = nx_dhcp_create(&DHCPClient, &IpInstance, "DHCP Client");
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <MX_NetXDuo_Init+0x204>)
 800124c:	4910      	ldr	r1, [pc, #64]	; (8001290 <MX_NetXDuo_Init+0x1e8>)
 800124e:	4818      	ldr	r0, [pc, #96]	; (80012b0 <MX_NetXDuo_Init+0x208>)
 8001250:	f004 f91c 	bl	800548c <_nxe_dhcp_create>
 8001254:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_NetXDuo_Init+0x1b8>
  {
    return NX_NOT_ENABLED;
 800125c:	2314      	movs	r3, #20
 800125e:	e006      	b.n	800126e <MX_NetXDuo_Init+0x1c6>
  }

  /* set DHCP notification callback  */

  tx_semaphore_create(&Semaphore, "App Semaphore", 0);
 8001260:	2320      	movs	r3, #32
 8001262:	2200      	movs	r2, #0
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <MX_NetXDuo_Init+0x20c>)
 8001266:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MX_NetXDuo_Init+0x210>)
 8001268:	f015 f894 	bl	8016394 <_txe_semaphore_create>
  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 800126c:	68fb      	ldr	r3, [r7, #12]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	08017c54 	.word	0x08017c54
 800127c:	200089c4 	.word	0x200089c4
 8001280:	08017c80 	.word	0x08017c80
 8001284:	200081bc 	.word	0x200081bc
 8001288:	08004325 	.word	0x08004325
 800128c:	08017c94 	.word	0x08017c94
 8001290:	200081f8 	.word	0x200081f8
 8001294:	080012bd 	.word	0x080012bd
 8001298:	08017ca8 	.word	0x08017ca8
 800129c:	20007fd8 	.word	0x20007fd8
 80012a0:	08001395 	.word	0x08001395
 80012a4:	08017cb8 	.word	0x08017cb8
 80012a8:	2000a93c 	.word	0x2000a93c
 80012ac:	08017cc8 	.word	0x08017cc8
 80012b0:	200089e8 	.word	0x200089e8
 80012b4:	08017cd4 	.word	0x08017cd4
 80012b8:	200089c8 	.word	0x200089c8

080012bc <App_Main_Thread_Entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID App_Main_Thread_Entry(ULONG thread_input)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	6078      	str	r0, [r7, #4]
  UINT ret;

  ret = nx_ip_address_change_notify(&IpInstance, ip_address_change_notify_callback, NULL);
 80012c4:	2200      	movs	r2, #0
 80012c6:	4923      	ldr	r1, [pc, #140]	; (8001354 <App_Main_Thread_Entry+0x98>)
 80012c8:	4823      	ldr	r0, [pc, #140]	; (8001358 <App_Main_Thread_Entry+0x9c>)
 80012ca:	f010 fc99 	bl	8011c00 <_nxe_ip_address_change_notify>
 80012ce:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <App_Main_Thread_Entry+0x1e>
  {
    Error_Handler();
 80012d6:	f7ff fc53 	bl	8000b80 <Error_Handler>
  }

  ret = nx_dhcp_start(&DHCPClient);
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <App_Main_Thread_Entry+0xa0>)
 80012dc:	f004 faac 	bl	8005838 <_nxe_dhcp_start>
 80012e0:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <App_Main_Thread_Entry+0x30>
  {
    Error_Handler();
 80012e8:	f7ff fc4a 	bl	8000b80 <Error_Handler>
  }

  /* wait until an IP address is ready */
  if (tx_semaphore_get(&Semaphore, TX_WAIT_FOREVER) != TX_SUCCESS)
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	481b      	ldr	r0, [pc, #108]	; (8001360 <App_Main_Thread_Entry+0xa4>)
 80012f2:	f015 f8e5 	bl	80164c0 <_txe_semaphore_get>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <App_Main_Thread_Entry+0x44>
  {
    Error_Handler();
 80012fc:	f7ff fc40 	bl	8000b80 <Error_Handler>
  }

  ret = nx_ip_address_get(&IpInstance, &IpAddress, &NetMask);
 8001300:	4a18      	ldr	r2, [pc, #96]	; (8001364 <App_Main_Thread_Entry+0xa8>)
 8001302:	4919      	ldr	r1, [pc, #100]	; (8001368 <App_Main_Thread_Entry+0xac>)
 8001304:	4814      	ldr	r0, [pc, #80]	; (8001358 <App_Main_Thread_Entry+0x9c>)
 8001306:	f010 fcb9 	bl	8011c7c <_nxe_ip_address_get>
 800130a:	60f8      	str	r0, [r7, #12]

  if (ret != TX_SUCCESS)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <App_Main_Thread_Entry+0x5a>
  {
    Error_Handler();
 8001312:	f7ff fc35 	bl	8000b80 <Error_Handler>
  }

  PRINT_IP_ADDRESS(IpAddress);
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <App_Main_Thread_Entry+0xac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0e19      	lsrs	r1, r3, #24
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <App_Main_Thread_Entry+0xac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0c1b      	lsrs	r3, r3, #16
 8001322:	b2d8      	uxtb	r0, r3
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <App_Main_Thread_Entry+0xac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <App_Main_Thread_Entry+0xac>)
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	490c      	ldr	r1, [pc, #48]	; (800136c <App_Main_Thread_Entry+0xb0>)
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <App_Main_Thread_Entry+0xb4>)
 800133e:	f015 fbd9 	bl	8016af4 <iprintf>

  /* the network is correctly initialized, start the TCP server thread */
  tx_thread_resume(&AppTCPThread);
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <App_Main_Thread_Entry+0xb8>)
 8001344:	f015 fa56 	bl	80167f4 <_txe_thread_resume>

  /* this thread is not needed any more, relinquish it */
  tx_thread_relinquish();
 8001348:	f015 fa38 	bl	80167bc <_txe_thread_relinquish>

  return;
 800134c:	bf00      	nop
}
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	08001379 	.word	0x08001379
 8001358:	200081f8 	.word	0x200081f8
 800135c:	200089e8 	.word	0x200089e8
 8001360:	200089c8 	.word	0x200089c8
 8001364:	2000808c 	.word	0x2000808c
 8001368:	2000a938 	.word	0x2000a938
 800136c:	08017ce4 	.word	0x08017ce4
 8001370:	08017cf0 	.word	0x08017cf0
 8001374:	2000a93c 	.word	0x2000a93c

08001378 <ip_address_change_notify_callback>:
* @param ip_instance: NX_IP instance registered for this callback.
* @param ptr: VOID* user data pointer
* @retval none
*/
static VOID ip_address_change_notify_callback(NX_IP *ip_instance, VOID *ptr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  tx_semaphore_put(&Semaphore);
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <ip_address_change_notify_callback+0x18>)
 8001384:	f015 f8de 	bl	8016544 <_txe_semaphore_put>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200089c8 	.word	0x200089c8

08001394 <App_TCP_Thread_Entry>:
* @param thread_input: thread user data
* @retval none
*/

static VOID App_TCP_Thread_Entry(ULONG thread_input)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800139a:	af06      	add	r7, sp, #24
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	6018      	str	r0, [r3, #0]
  UINT ret;
  UINT count = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

  NX_PACKET *server_packet;
  NX_PACKET *data_packet;

  /* create the TCP socket */
  ret = nx_tcp_socket_create(&IpInstance, &TCPSocket, "TCP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY,
 80013a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80013aa:	9305      	str	r3, [sp, #20]
 80013ac:	2300      	movs	r3, #0
 80013ae:	9304      	str	r3, [sp, #16]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <App_TCP_Thread_Entry+0x210>)
 80013c6:	4978      	ldr	r1, [pc, #480]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 80013c8:	4878      	ldr	r0, [pc, #480]	; (80015ac <App_TCP_Thread_Entry+0x218>)
 80013ca:	f011 f879 	bl	80124c0 <_nxe_tcp_socket_create>
 80013ce:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
                             NX_IP_TIME_TO_LIVE, WINDOW_SIZE, NX_NULL, NX_NULL);
  if (ret != NX_SUCCESS)
 80013d2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <App_TCP_Thread_Entry+0x4a>
  {
    Error_Handler();
 80013da:	f7ff fbd1 	bl	8000b80 <Error_Handler>
  }

  /* bind the client socket for the DEFAULT_PORT */
  ret =  nx_tcp_client_socket_bind(&TCPSocket, DEFAULT_PORT, NX_WAIT_FOREVER);
 80013de:	f04f 32ff 	mov.w	r2, #4294967295
 80013e2:	f241 7170 	movw	r1, #6000	; 0x1770
 80013e6:	4870      	ldr	r0, [pc, #448]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 80013e8:	f010 ff52 	bl	8012290 <_nxe_tcp_client_socket_bind>
 80013ec:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

  if (ret != NX_SUCCESS)
 80013f0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <App_TCP_Thread_Entry+0x68>
  {
    Error_Handler();
 80013f8:	f7ff fbc2 	bl	8000b80 <Error_Handler>
  }

  /* connect to the remote server on the specified port */
  ret = nx_tcp_client_socket_connect(&TCPSocket, TCP_SERVER_ADDRESS, TCP_SERVER_PORT, NX_WAIT_FOREVER);
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	f241 7271 	movw	r2, #6001	; 0x1771
 8001404:	496a      	ldr	r1, [pc, #424]	; (80015b0 <App_TCP_Thread_Entry+0x21c>)
 8001406:	4868      	ldr	r0, [pc, #416]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 8001408:	f010 ff88 	bl	801231c <_nxe_tcp_client_socket_connect>
 800140c:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

  if (ret != NX_SUCCESS)
 8001410:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8088 	beq.w	800152a <App_TCP_Thread_Entry+0x196>
  {
    Error_Handler();
 800141a:	f7ff fbb1 	bl	8000b80 <Error_Handler>
  }

  while(count++ < MAX_PACKET_COUNT)
 800141e:	e084      	b.n	800152a <App_TCP_Thread_Entry+0x196>
  {
    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f015 fb5a 	bl	8016ae4 <memset>

    /* allocate the packet to send over the TCP socket */
    ret = nx_packet_allocate(&AppPool, &data_packet, NX_TCP_PACKET, TX_WAIT_FOREVER);
 8001430:	f107 010c 	add.w	r1, r7, #12
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2238      	movs	r2, #56	; 0x38
 800143a:	485e      	ldr	r0, [pc, #376]	; (80015b4 <App_TCP_Thread_Entry+0x220>)
 800143c:	f010 fd32 	bl	8011ea4 <_nxe_packet_allocate>
 8001440:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

    if (ret != NX_SUCCESS)
 8001444:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001448:	2b00      	cmp	r3, #0
 800144a:	d177      	bne.n	800153c <App_TCP_Thread_Entry+0x1a8>
    {
      break;
    }

    /* append the message to send into the packet */
    ret = nx_packet_data_append(data_packet, (VOID *)DEFAULT_MESSAGE, sizeof(DEFAULT_MESSAGE), &AppPool, TX_WAIT_FOREVER);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <App_TCP_Thread_Entry+0x220>)
 800145a:	221f      	movs	r2, #31
 800145c:	4956      	ldr	r1, [pc, #344]	; (80015b8 <App_TCP_Thread_Entry+0x224>)
 800145e:	f010 fd67 	bl	8011f30 <_nxe_packet_data_append>
 8001462:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

    if (ret != NX_SUCCESS)
 8001466:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <App_TCP_Thread_Entry+0xe6>
    {
      nx_packet_release(data_packet);
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4618      	mov	r0, r3
 8001474:	f010 fe9c 	bl	80121b0 <_nxe_packet_release>
      break;
 8001478:	e065      	b.n	8001546 <App_TCP_Thread_Entry+0x1b2>
    }

    /* send the packet over the TCP socket */
    ret = nx_tcp_socket_send(&TCPSocket, data_packet, DEFAULT_TIMEOUT);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001482:	4619      	mov	r1, r3
 8001484:	4848      	ldr	r0, [pc, #288]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 8001486:	f011 f97d 	bl	8012784 <_nxe_tcp_socket_send>
 800148a:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

    if (ret != NX_SUCCESS)
 800148e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001492:	2b00      	cmp	r3, #0
 8001494:	d154      	bne.n	8001540 <App_TCP_Thread_Entry+0x1ac>
    {
      break;
    }

    /* wait for the server response */
    ret = nx_tcp_socket_receive(&TCPSocket, &server_packet, DEFAULT_TIMEOUT);
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800149e:	4619      	mov	r1, r3
 80014a0:	4841      	ldr	r0, [pc, #260]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 80014a2:	f011 f92b 	bl	80126fc <_nxe_tcp_socket_receive>
 80014a6:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220

    if (ret == NX_SUCCESS)
 80014aa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d148      	bne.n	8001544 <App_TCP_Thread_Entry+0x1b0>
    {
      /* get the server IP address and  port */
      nx_udp_source_extract(server_packet, &source_ip_address, &source_port);
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f107 0214 	add.w	r2, r7, #20
 80014bc:	f107 0118 	add.w	r1, r7, #24
 80014c0:	4618      	mov	r0, r3
 80014c2:	f011 fa17 	bl	80128f4 <_nxe_udp_source_extract>

      /* retrieve the data sent by the server */
      nx_packet_data_retrieve(server_packet, data_buffer, &bytes_read);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 80014d0:	f107 011c 	add.w	r1, r7, #28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f010 fd85 	bl	8011fe4 <_nxe_packet_data_retrieve>

      /* print the received data */
      PRINT_DATA(source_ip_address, source_port, data_buffer);
 80014da:	f107 0318 	add.w	r3, r7, #24
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0e18      	lsrs	r0, r3, #24
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	b2dc      	uxtb	r4, r3
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b2dd      	uxtb	r5, r3
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f107 0214 	add.w	r2, r7, #20
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	f107 011c 	add.w	r1, r7, #28
 8001508:	9102      	str	r1, [sp, #8]
 800150a:	9201      	str	r2, [sp, #4]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	462b      	mov	r3, r5
 8001510:	4622      	mov	r2, r4
 8001512:	4601      	mov	r1, r0
 8001514:	4829      	ldr	r0, [pc, #164]	; (80015bc <App_TCP_Thread_Entry+0x228>)
 8001516:	f015 faed 	bl	8016af4 <iprintf>

      /* release the server packet */
      nx_packet_release(server_packet);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4618      	mov	r0, r3
 8001520:	f010 fe46 	bl	80121b0 <_nxe_packet_release>

      /* toggle the green led on success */
      BSP_LED_Toggle(LED_GREEN);
 8001524:	2000      	movs	r0, #0
 8001526:	f000 fa71 	bl	8001a0c <BSP_LED_Toggle>
  while(count++ < MAX_PACKET_COUNT)
 800152a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8001534:	2b63      	cmp	r3, #99	; 0x63
 8001536:	f67f af73 	bls.w	8001420 <App_TCP_Thread_Entry+0x8c>
 800153a:	e004      	b.n	8001546 <App_TCP_Thread_Entry+0x1b2>
      break;
 800153c:	bf00      	nop
 800153e:	e002      	b.n	8001546 <App_TCP_Thread_Entry+0x1b2>
      break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <App_TCP_Thread_Entry+0x1b2>
    }
    else
    {
      /* no message received exit the loop */
      break;
 8001544:	bf00      	nop
    }
  }

  /* release the allocated packets */
  nx_packet_release(server_packet);
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4618      	mov	r0, r3
 800154c:	f010 fe30 	bl	80121b0 <_nxe_packet_release>

  /* disconnect the socket */
  nx_tcp_socket_disconnect(&TCPSocket, DEFAULT_TIMEOUT);
 8001550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 8001556:	f011 f893 	bl	8012680 <_nxe_tcp_socket_disconnect>

  /* unbind the socket */
  nx_tcp_client_socket_unbind(&TCPSocket);
 800155a:	4813      	ldr	r0, [pc, #76]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 800155c:	f010 ff3c 	bl	80123d8 <_nxe_tcp_client_socket_unbind>

  /* delete the socket */
  nx_tcp_socket_delete(&TCPSocket);
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <App_TCP_Thread_Entry+0x214>)
 8001562:	f011 f851 	bl	8012608 <_nxe_tcp_socket_delete>

  /* print test summary on the UART */
  if (count == MAX_PACKET_COUNT + 1)
 8001566:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800156a:	2b65      	cmp	r3, #101	; 0x65
 800156c:	d10a      	bne.n	8001584 <App_TCP_Thread_Entry+0x1f0>
  {
    printf("\n-------------------------------------\n\tSUCCESS : %u / %u packets sent\n-------------------------------------\n", count - 1, MAX_PACKET_COUNT);
 800156e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001572:	3b01      	subs	r3, #1
 8001574:	2264      	movs	r2, #100	; 0x64
 8001576:	4619      	mov	r1, r3
 8001578:	4811      	ldr	r0, [pc, #68]	; (80015c0 <App_TCP_Thread_Entry+0x22c>)
 800157a:	f015 fabb 	bl	8016af4 <iprintf>
    Success_Handler();
 800157e:	f7ff fae1 	bl	8000b44 <Success_Handler>
  else
  {
    printf("\n-------------------------------------\n\tFAIL : %u / %u packets sent\n-------------------------------------\n", count - 1, MAX_PACKET_COUNT);
    Error_Handler();
  }
}
 8001582:	e009      	b.n	8001598 <App_TCP_Thread_Entry+0x204>
    printf("\n-------------------------------------\n\tFAIL : %u / %u packets sent\n-------------------------------------\n", count - 1, MAX_PACKET_COUNT);
 8001584:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001588:	3b01      	subs	r3, #1
 800158a:	2264      	movs	r2, #100	; 0x64
 800158c:	4619      	mov	r1, r3
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <App_TCP_Thread_Entry+0x230>)
 8001590:	f015 fab0 	bl	8016af4 <iprintf>
    Error_Handler();
 8001594:	f7ff faf4 	bl	8000b80 <Error_Handler>
}
 8001598:	bf00      	nop
 800159a:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800159e:	46bd      	mov	sp, r7
 80015a0:	bdb0      	pop	{r4, r5, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08017d0c 	.word	0x08017d0c
 80015a8:	20008090 	.word	0x20008090
 80015ac:	200081f8 	.word	0x200081f8
 80015b0:	0a9d056a 	.word	0x0a9d056a
 80015b4:	200081bc 	.word	0x200081bc
 80015b8:	08017d20 	.word	0x08017d20
 80015bc:	08017d40 	.word	0x08017d40
 80015c0:	08017d60 	.word	0x08017d60
 80015c4:	08017dd0 	.word	0x08017dd0

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e4:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f2:	f000 fa25 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f015 fa29 	bl	8016a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff f940 	bl	800087e <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001600:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800160c:	08018024 	.word	0x08018024
  ldr r2, =_sbss
 8001610:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001614:	2000b07c 	.word	0x2000b07c

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>

0800161a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <LAN8742_RegisterBusIO+0x28>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <LAN8742_RegisterBusIO+0x28>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <LAN8742_RegisterBusIO+0x28>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e014      	b.n	8001672 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d17c      	bne.n	8001798 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2220      	movs	r2, #32
 80016b0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e01c      	b.n	80016f2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f107 0208 	add.w	r2, r7, #8
 80016c0:	2112      	movs	r1, #18
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	4798      	blx	r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da03      	bge.n	80016d4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80016cc:	f06f 0304 	mvn.w	r3, #4
 80016d0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80016d2:	e00b      	b.n	80016ec <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d105      	bne.n	80016ec <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
         break;
 80016ea:	e005      	b.n	80016f8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2b1f      	cmp	r3, #31
 80016f6:	d9df      	bls.n	80016b8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b1f      	cmp	r3, #31
 80016fe:	d902      	bls.n	8001706 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001700:	f06f 0302 	mvn.w	r3, #2
 8001704:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d145      	bne.n	8001798 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6810      	ldr	r0, [r2, #0]
 8001714:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001718:	2100      	movs	r1, #0
 800171a:	4798      	blx	r3
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	db37      	blt.n	8001792 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6810      	ldr	r0, [r2, #0]
 800172a:	f107 0208 	add.w	r2, r7, #8
 800172e:	2100      	movs	r1, #0
 8001730:	4798      	blx	r3
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	db28      	blt.n	800178a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4798      	blx	r3
 800173e:	4603      	mov	r3, r0
 8001740:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001742:	e01c      	b.n	800177e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4798      	blx	r3
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001756:	d80e      	bhi.n	8001776 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6810      	ldr	r0, [r2, #0]
 8001760:	f107 0208 	add.w	r2, r7, #8
 8001764:	2100      	movs	r1, #0
 8001766:	4798      	blx	r3
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	da07      	bge.n	800177e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800176e:	f06f 0304 	mvn.w	r3, #4
 8001772:	613b      	str	r3, [r7, #16]
                 break;
 8001774:	e010      	b.n	8001798 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001776:	f06f 0301 	mvn.w	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
               break;
 800177c:	e00c      	b.n	8001798 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1dd      	bne.n	8001744 <LAN8742_Init+0xc6>
 8001788:	e006      	b.n	8001798 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800178a:	f06f 0304 	mvn.w	r3, #4
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	e002      	b.n	8001798 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001792:	f06f 0303 	mvn.w	r3, #3
 8001796:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d112      	bne.n	80017c4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	4798      	blx	r3
 80017a4:	4603      	mov	r3, r0
 80017a6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80017a8:	bf00      	nop
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4798      	blx	r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017bc:	d9f5      	bls.n	80017aa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80017c4:	693b      	ldr	r3, [r7, #16]
 }
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <LAN8742_StartAutoNego>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_StartAutoNego(lan8742_Object_t *pObj)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  int32_t status = LAN8742_STATUS_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) >= 0)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6810      	ldr	r0, [r2, #0]
 80017e6:	f107 0208 	add.w	r2, r7, #8
 80017ea:	2100      	movs	r1, #0
 80017ec:	4798      	blx	r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db11      	blt.n	8001818 <LAN8742_StartAutoNego+0x4a>
  {
    readval |= LAN8742_BCR_AUTONEGO_EN;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fa:	60bb      	str	r3, [r7, #8]
  
    /* Apply configuration */
    if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, readval) < 0)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6810      	ldr	r0, [r2, #0]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	2100      	movs	r1, #0
 8001808:	4798      	blx	r3
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	da06      	bge.n	800181e <LAN8742_StartAutoNego+0x50>
    {
      status =  LAN8742_STATUS_WRITE_ERROR;
 8001810:	f06f 0303 	mvn.w	r3, #3
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e002      	b.n	800181e <LAN8742_StartAutoNego+0x50>
    }
  }
  else
  {
    status = LAN8742_STATUS_READ_ERROR;
 8001818:	f06f 0304 	mvn.w	r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
  }
   
  return status;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6810      	ldr	r0, [r2, #0]
 800183c:	f107 020c 	add.w	r2, r7, #12
 8001840:	2101      	movs	r1, #1
 8001842:	4798      	blx	r3
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	da02      	bge.n	8001850 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800184a:	f06f 0304 	mvn.w	r3, #4
 800184e:	e06e      	b.n	800192e <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	f107 020c 	add.w	r2, r7, #12
 800185c:	2101      	movs	r1, #1
 800185e:	4798      	blx	r3
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	da02      	bge.n	800186c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001866:	f06f 0304 	mvn.w	r3, #4
 800186a:	e060      	b.n	800192e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001876:	2301      	movs	r3, #1
 8001878:	e059      	b.n	800192e <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6810      	ldr	r0, [r2, #0]
 8001882:	f107 020c 	add.w	r2, r7, #12
 8001886:	2100      	movs	r1, #0
 8001888:	4798      	blx	r3
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	da02      	bge.n	8001896 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001890:	f06f 0304 	mvn.w	r3, #4
 8001894:	e04b      	b.n	800192e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d11b      	bne.n	80018d8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <LAN8742_GetLinkState+0x90>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018b4:	2302      	movs	r3, #2
 80018b6:	e03a      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e033      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018d0:	2304      	movs	r3, #4
 80018d2:	e02c      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018d4:	2305      	movs	r3, #5
 80018d6:	e02a      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6810      	ldr	r0, [r2, #0]
 80018e0:	f107 020c 	add.w	r2, r7, #12
 80018e4:	211f      	movs	r1, #31
 80018e6:	4798      	blx	r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da02      	bge.n	80018f4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80018ee:	f06f 0304 	mvn.w	r3, #4
 80018f2:	e01c      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80018fe:	2306      	movs	r3, #6
 8001900:	e015      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 031c 	and.w	r3, r3, #28
 8001908:	2b18      	cmp	r3, #24
 800190a:	d101      	bne.n	8001910 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800190c:	2302      	movs	r3, #2
 800190e:	e00e      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 031c 	and.w	r3, r3, #28
 8001916:	2b08      	cmp	r3, #8
 8001918:	d101      	bne.n	800191e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800191a:	2303      	movs	r3, #3
 800191c:	e007      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 031c 	and.w	r3, r3, #28
 8001924:	2b14      	cmp	r3, #20
 8001926:	d101      	bne.n	800192c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001928:	2304      	movs	r3, #4
 800192a:	e000      	b.n	800192e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800192c:	2305      	movs	r3, #5
    }				
  }
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10e      	bne.n	8001966 <BSP_LED_Init+0x2e>
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <BSP_LED_Init+0x94>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <BSP_LED_Init+0x94>)
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	6313      	str	r3, [r2, #48]	; 0x30
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <BSP_LED_Init+0x94>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	e00d      	b.n	8001982 <BSP_LED_Init+0x4a>
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <BSP_LED_Init+0x94>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <BSP_LED_Init+0x94>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <BSP_LED_Init+0x94>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <BSP_LED_Init+0x98>)
 8001986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <BSP_LED_Init+0x9c>)
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	f107 0214 	add.w	r2, r7, #20
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 f822 	bl	80029f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <BSP_LED_Init+0x9c>)
 80019b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <BSP_LED_Init+0x98>)
 80019b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	f001 f9c2 	bl	8002d48 <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	; 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08017ea8 	.word	0x08017ea8
 80019d4:	20000000 	.word	0x20000000

080019d8 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <BSP_LED_Off+0x2c>)
 80019e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <BSP_LED_Off+0x30>)
 80019ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019f2:	2200      	movs	r2, #0
 80019f4:	4619      	mov	r1, r3
 80019f6:	f001 f9a7 	bl	8002d48 <HAL_GPIO_WritePin>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000
 8001a08:	08017ea8 	.word	0x08017ea8

08001a0c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <BSP_LED_Toggle+0x2c>)
 8001a1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4906      	ldr	r1, [pc, #24]	; (8001a3c <BSP_LED_Toggle+0x30>)
 8001a22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f001 f9a6 	bl	8002d7a <HAL_GPIO_TogglePin>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	08017ea8 	.word	0x08017ea8

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <SystemInit+0x20>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <SystemInit+0x20>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f8fc 	bl	8001c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f7ff f9be 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff f87e 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000014 	.word	0x20000014
 8001acc:	2000a9f0 	.word	0x2000a9f0

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	2000a9f0 	.word	0x2000a9f0

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000014 	.word	0x20000014

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff4c 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb2:	f7ff ff61 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f7ff ffb1 	bl	8001c24 <NVIC_EncodePriority>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff80 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff54 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ETH_Init+0x1a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e05b      	b.n	8001dc6 <HAL_ETH_Init+0xd2>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_ETH_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe ff60 	bl	8000be8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_ETH_Init+0xdc>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_ETH_Init+0xdc>)
 8001d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d36:	6453      	str	r3, [r2, #68]	; 0x44
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_ETH_Init+0xdc>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d44:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <HAL_ETH_Init+0xe0>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_ETH_Init+0xe0>)
 8001d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d4e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_ETH_Init+0xe0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	491e      	ldr	r1, [pc, #120]	; (8001dd4 <HAL_ETH_Init+0xe0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d74:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d76:	f7ff feab 	bl	8001ad0 <HAL_GetTick>
 8001d7a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d7c:	e011      	b.n	8001da2 <HAL_ETH_Init+0xae>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001d7e:	f7ff fea7 	bl	8001ad0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d8c:	d909      	bls.n	8001da2 <HAL_ETH_Init+0xae>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e011      	b.n	8001dc6 <HAL_ETH_Init+0xd2>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e4      	bne.n	8001d7e <HAL_ETH_Init+0x8a>
    }
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fafa 	bl	80023b0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800

08001dd8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	3314      	adds	r3, #20
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df0:	2b40      	cmp	r3, #64	; 0x40
 8001df2:	d112      	bne.n	8001e1a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f003 fa91 	bl	800531c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e02:	3314      	adds	r3, #20
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e18:	e01b      	b.n	8001e52 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	3314      	adds	r3, #20
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d111      	bne.n	8001e52 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f003 fa90 	bl	8005354 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5a:	3314      	adds	r3, #20
 8001e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e60:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e76:	d112      	bne.n	8001e9e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f814 	bl	8001ea6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	3314      	adds	r3, #20
 8001e88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e8c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1 = 0U;     
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(PHYAddr));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b82      	cmp	r3, #130	; 0x82
 8001eda:	d101      	bne.n	8001ee0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	e04f      	b.n	8001f80 <HAL_ETH_ReadPHYRegister+0xc6>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2282      	movs	r2, #130	; 0x82
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 031c 	and.w	r3, r3, #28
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=((PHYAddr << 11U) & ETH_MACMIIAR_PA);                         /* Set the PHY device address   */
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	02db      	lsls	r3, r3, #11
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	019b      	lsls	r3, r3, #6
 8001f08:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f023 0302 	bic.w	r3, r3, #2
 8001f18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2a:	f7ff fdd1 	bl	8001ad0 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f30:	e015      	b.n	8001f5e <HAL_ETH_ReadPHYRegister+0xa4>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f32:	f7ff fdcd 	bl	8001ad0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d309      	bcc.n	8001f56 <HAL_ETH_ReadPHYRegister+0x9c>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e014      	b.n	8001f80 <HAL_ETH_ReadPHYRegister+0xc6>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e4      	bne.n	8001f32 <HAL_ETH_ReadPHYRegister+0x78>
  }
  
  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(PHYAddr));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b42      	cmp	r3, #66	; 0x42
 8001fa8:	d101      	bne.n	8001fae <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	e04d      	b.n	800204a <HAL_ETH_WritePHYRegister+0xc2>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2242      	movs	r2, #66	; 0x42
 8001fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 031c 	and.w	r3, r3, #28
 8001fc4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=((PHYAddr << 11U) & ETH_MACMIIAR_PA);                       /* Set the PHY device address */
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	02db      	lsls	r3, r3, #11
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002002:	f7ff fd65 	bl	8001ad0 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002008:	e015      	b.n	8002036 <HAL_ETH_WritePHYRegister+0xae>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800200a:	f7ff fd61 	bl	8001ad0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d309      	bcc.n	800202e <HAL_ETH_WritePHYRegister+0xa6>
    {
      heth->State= HAL_ETH_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e00d      	b.n	800204a <HAL_ETH_WritePHYRegister+0xc2>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e4      	bne.n	800200a <HAL_ETH_WritePHYRegister+0x82>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_ETH_Start+0x16>
 8002064:	2302      	movs	r3, #2
 8002066:	e01f      	b.n	80020a8 <HAL_ETH_Start+0x56>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fb9b 	bl	80027b4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fbd2 	bl	8002828 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fc69 	bl	800295c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fc06 	bl	800289c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fc33 	bl	80028fc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ETH_Stop+0x16>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e01f      	b.n	8002106 <HAL_ETH_Stop+0x56>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fbf8 	bl	80028cc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fc25 	bl	800292c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fbbd 	bl	8002862 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fc37 	bl	800295c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fb7d 	bl	80027ee <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ETH_ConfigMAC+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e0e4      	b.n	80022f6 <HAL_ETH_ConfigMAC+0x1e6>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80b1 	beq.w	80022a6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <HAL_ETH_ConfigMAC+0x1f0>)
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800215c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002162:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002168:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800216e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002174:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800217a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002180:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002186:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800218c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002192:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002198:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800219e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff fc96 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021cc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80021d2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80021d8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80021de:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80021e4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80021ea:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80021f6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021f8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff fc70 	bl	8001ae8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002218:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002222:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002240:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002246:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800224c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002252:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002258:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fc39 	bl	8001ae8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff fc26 	bl	8001ae8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	61da      	str	r2, [r3, #28]
 80022a4:	e01e      	b.n	80022e4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80022b4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff fc06 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	ff20810f 	.word	0xff20810f

08002304 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 031c 	bic.w	r3, r3, #28
 800231a:	60fb      	str	r3, [r7, #12]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800231c:	f001 f9d8 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 8002320:	60b8      	str	r0, [r7, #8]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d908      	bls.n	800233c <HAL_ETH_SetMDIOClockRange+0x38>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d804      	bhi.n	800233c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e027      	b.n	800238c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d908      	bls.n	8002356 <HAL_ETH_SetMDIOClockRange+0x52>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d204      	bcs.n	8002356 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f043 030c 	orr.w	r3, r3, #12
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e01a      	b.n	800238c <HAL_ETH_SetMDIOClockRange+0x88>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d303      	bcc.n	8002366 <HAL_ETH_SetMDIOClockRange+0x62>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d911      	bls.n	800238a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d908      	bls.n	8002380 <HAL_ETH_SetMDIOClockRange+0x7c>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d804      	bhi.n	8002380 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e005      	b.n	800238c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f043 0310 	orr.w	r3, r3, #16
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e000      	b.n	800238c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800238a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	611a      	str	r2, [r3, #16]
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	01312cff 	.word	0x01312cff
 80023a0:	02160ebf 	.word	0x02160ebf
 80023a4:	03938700 	.word	0x03938700
 80023a8:	05f5e0ff 	.word	0x05f5e0ff
 80023ac:	08f0d17f 	.word	0x08f0d17f

080023b0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0b0      	sub	sp, #192	; 0xc0
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023cc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80023de:	2300      	movs	r3, #0
 80023e0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80023f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fa:	663b      	str	r3, [r7, #96]	; 0x60
 80023fc:	e001      	b.n	8002402 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002406:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800240c:	2300      	movs	r3, #0
 800240e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800241c:	2340      	movs	r3, #64	; 0x40
 800241e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002484:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002488:	4bac      	ldr	r3, [pc, #688]	; (800273c <ETH_MACDMAConfig+0x38c>)
 800248a:	4013      	ands	r3, r2
 800248c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002490:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002494:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002498:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800249a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800249c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80024a2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80024a6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80024a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80024aa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80024b0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80024b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80024b4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80024b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80024b8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80024ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80024bc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80024be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80024c0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80024c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80024c4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80024c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff faff 	bl	8001ae8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024f2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80024f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024f8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80024fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80024fc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80024fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002502:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002508:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800250a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800250e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002514:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002518:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002520:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002522:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800252e:	2001      	movs	r0, #1
 8002530:	f7ff fada 	bl	8001ae8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800253c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002546:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002550:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800255c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002560:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002564:	4013      	ands	r3, r2
 8002566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800256a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800256e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002570:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002574:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800257a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800257c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002580:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002586:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800258c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800258e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff fa9b 	bl	8001ae8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025ba:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80025bc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80025c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7ff fa86 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80025ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ee:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80025f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025f8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800260a:	2304      	movs	r3, #4
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800260e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800261a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800262a:	2300      	movs	r3, #0
 800262c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800262e:	2300      	movs	r3, #0
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263a:	3318      	adds	r3, #24
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002642:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002646:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <ETH_MACDMAConfig+0x390>)
 8002648:	4013      	ands	r3, r2
 800264a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800264e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002650:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002652:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002654:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002656:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002658:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800265a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800265c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800265e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002660:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002662:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002664:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002666:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800266a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800266e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002670:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002682:	3318      	adds	r3, #24
 8002684:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002688:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002692:	3318      	adds	r3, #24
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff fa24 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	3318      	adds	r3, #24
 80026aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026ae:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026b4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80026b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80026b8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80026bc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80026be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80026c0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80026c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80026c6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80026c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80026ca:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7ff f9fd 	bl	8001ae8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026fa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d10f      	bne.n	8002724 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270c:	331c      	adds	r3, #28
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002720:	331c      	adds	r3, #28
 8002722:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	461a      	mov	r2, r3
 800272a:	2100      	movs	r1, #0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f809 	bl	8002744 <ETH_MACAddressConfig>
}
 8002732:	bf00      	nop
 8002734:	37c0      	adds	r7, #192	; 0xc0
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	ff20810f 	.word	0xff20810f
 8002740:	f8de3f23 	.word	0xf8de3f23

08002744 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3305      	adds	r3, #5
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	3204      	adds	r2, #4
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <ETH_MACAddressConfig+0x68>)
 8002766:	4413      	add	r3, r2
 8002768:	461a      	mov	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3303      	adds	r3, #3
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	061a      	lsls	r2, r3, #24
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3302      	adds	r3, #2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3301      	adds	r3, #1
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	4313      	orrs	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <ETH_MACAddressConfig+0x6c>)
 8002796:	4413      	add	r3, r2
 8002798:	461a      	mov	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6013      	str	r3, [r2, #0]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40028040 	.word	0x40028040
 80027b0:	40028044 	.word	0x40028044

080027b4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0208 	orr.w	r2, r2, #8
 80027ce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80027d8:	2001      	movs	r0, #1
 80027da:	f000 f8e9 	bl	80029b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0208 	bic.w	r2, r2, #8
 8002808:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002812:	2001      	movs	r0, #1
 8002814:	f000 f8cc 	bl	80029b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0204 	orr.w	r2, r2, #4
 8002842:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800284c:	2001      	movs	r0, #1
 800284e:	f000 f8af 	bl	80029b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0204 	bic.w	r2, r2, #4
 800287c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 f892 	bl	80029b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ac:	3318      	adds	r3, #24
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028bc:	3318      	adds	r3, #24
 80028be:	601a      	str	r2, [r3, #0]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028dc:	3318      	adds	r3, #24
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ec:	3318      	adds	r3, #24
 80028ee:	601a      	str	r2, [r3, #0]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290c:	3318      	adds	r3, #24
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0202 	orr.w	r2, r2, #2
 8002918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291c:	3318      	adds	r3, #24
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293c:	3318      	adds	r3, #24
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0202 	bic.w	r2, r2, #2
 8002948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294c:	3318      	adds	r3, #24
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002970:	3318      	adds	r3, #24
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800297c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002980:	3318      	adds	r3, #24
 8002982:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298c:	3318      	adds	r3, #24
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002992:	2001      	movs	r0, #1
 8002994:	f000 f80c 	bl	80029b0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a2:	3318      	adds	r3, #24
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <ETH_Delay+0x38>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <ETH_Delay+0x3c>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0a5b      	lsrs	r3, r3, #9
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80029cc:	bf00      	nop
  } 
  while (Delay --);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e5a      	subs	r2, r3, #1
 80029d2:	60fa      	str	r2, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f9      	bne.n	80029cc <ETH_Delay+0x1c>
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	2000000c 	.word	0x2000000c
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e177      	b.n	8002cfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8166 	bne.w	8002cf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d005      	beq.n	8002a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d130      	bne.n	8002aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80c0 	beq.w	8002cf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b66      	ldr	r3, [pc, #408]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a65      	ldr	r2, [pc, #404]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b63      	ldr	r3, [pc, #396]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a61      	ldr	r2, [pc, #388]	; (8002d18 <HAL_GPIO_Init+0x328>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_GPIO_Init+0x32c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d037      	beq.n	8002c2e <HAL_GPIO_Init+0x23e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d031      	beq.n	8002c2a <HAL_GPIO_Init+0x23a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02b      	beq.n	8002c26 <HAL_GPIO_Init+0x236>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a55      	ldr	r2, [pc, #340]	; (8002d28 <HAL_GPIO_Init+0x338>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d025      	beq.n	8002c22 <HAL_GPIO_Init+0x232>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a54      	ldr	r2, [pc, #336]	; (8002d2c <HAL_GPIO_Init+0x33c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01f      	beq.n	8002c1e <HAL_GPIO_Init+0x22e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a53      	ldr	r2, [pc, #332]	; (8002d30 <HAL_GPIO_Init+0x340>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d019      	beq.n	8002c1a <HAL_GPIO_Init+0x22a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <HAL_GPIO_Init+0x344>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_Init+0x226>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a51      	ldr	r2, [pc, #324]	; (8002d38 <HAL_GPIO_Init+0x348>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00d      	beq.n	8002c12 <HAL_GPIO_Init+0x222>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <HAL_GPIO_Init+0x34c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <HAL_GPIO_Init+0x21e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4f      	ldr	r2, [pc, #316]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002c06:	2309      	movs	r3, #9
 8002c08:	e012      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	e010      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	e00e      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c12:	2307      	movs	r3, #7
 8002c14:	e00c      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c16:	2306      	movs	r3, #6
 8002c18:	e00a      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	e008      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e006      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c22:	2303      	movs	r3, #3
 8002c24:	e004      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e002      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	f002 0203 	and.w	r2, r2, #3
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	4093      	lsls	r3, r2
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c40:	4935      	ldr	r1, [pc, #212]	; (8002d18 <HAL_GPIO_Init+0x328>)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c72:	4a34      	ldr	r2, [pc, #208]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c78:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9c:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <HAL_GPIO_Init+0x354>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b0f      	cmp	r3, #15
 8002d00:	f67f ae84 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3724      	adds	r7, #36	; 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40020400 	.word	0x40020400
 8002d24:	40020800 	.word	0x40020800
 8002d28:	40020c00 	.word	0x40020c00
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40021400 	.word	0x40021400
 8002d34:	40021800 	.word	0x40021800
 8002d38:	40021c00 	.word	0x40021c00
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40022400 	.word	0x40022400
 8002d44:	40013c00 	.word	0x40013c00

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d58:	787b      	ldrb	r3, [r7, #1]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5e:	887a      	ldrh	r2, [r7, #2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d64:	e003      	b.n	8002d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	041a      	lsls	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	619a      	str	r2, [r3, #24]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d8c:	887a      	ldrh	r2, [r7, #2]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	041a      	lsls	r2, r3, #16
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_PWREx_EnableOverDrive+0x94>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ddc:	f7fe fe78 	bl	8001ad0 <HAL_GetTick>
 8002de0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002de2:	e009      	b.n	8002df8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002de4:	f7fe fe74 	bl	8001ad0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df2:	d901      	bls.n	8002df8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e01f      	b.n	8002e38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d1ee      	bne.n	8002de4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e0c:	f7fe fe60 	bl	8001ad0 <HAL_GetTick>
 8002e10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e12:	e009      	b.n	8002e28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e14:	f7fe fe5c 	bl	8001ad0 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e22:	d901      	bls.n	8002e28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e007      	b.n	8002e38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e34:	d1ee      	bne.n	8002e14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40023800 	.word	0x40023800
 8002e44:	420e0040 	.word	0x420e0040
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	420e0044 	.word	0x420e0044

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e264      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	4ba3      	ldr	r3, [pc, #652]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b9d      	ldr	r3, [pc, #628]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b99      	ldr	r3, [pc, #612]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x108>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e23f      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x74>
 8002eb6:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a90      	ldr	r2, [pc, #576]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a8a      	ldr	r2, [pc, #552]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a87      	ldr	r2, [pc, #540]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	4b84      	ldr	r3, [pc, #528]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fde2 	bl	8001ad0 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fdde 	bl	8001ad0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e204      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xc0>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fdce 	bl	8001ad0 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe fdca 	bl	8001ad0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1f0      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0xe8>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1c4      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4952      	ldr	r1, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e03a      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fd83 	bl	8001ad0 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fe fd7f 	bl	8001ad0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1a5      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4940      	ldr	r1, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fd62 	bl	8001ad0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe fd5e 	bl	8001ad0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e184      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fd42 	bl	8001ad0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe fd3e 	bl	8001ad0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e164      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x200>
 800306e:	e015      	b.n	800309c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe fd2b 	bl	8001ad0 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7fe fd27 	bl	8001ad0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e14d      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d121      	bne.n	800312a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fced 	bl	8001ad0 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e011      	b.n	800311e <HAL_RCC_OscConfig+0x2ce>
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470000 	.word	0x42470000
 8003104:	42470e80 	.word	0x42470e80
 8003108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fce0 	bl	8001ad0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e106      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4e4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x2f0>
 8003132:	4b81      	ldr	r3, [pc, #516]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	e01c      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x312>
 8003148:	4b7b      	ldr	r3, [pc, #492]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	4b78      	ldr	r3, [pc, #480]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a77      	ldr	r2, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003162:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a74      	ldr	r2, [pc, #464]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	4b72      	ldr	r3, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a71      	ldr	r2, [pc, #452]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fe fca5 	bl	8001ad0 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe fca1 	bl	8001ad0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0c5      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b65      	ldr	r3, [pc, #404]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCC_OscConfig+0x33a>
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fc8f 	bl	8001ad0 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fc8b 	bl	8001ad0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0af      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ee      	bne.n	80031b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a55      	ldr	r2, [pc, #340]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 809b 	beq.w	800332a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d05c      	beq.n	80032ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d141      	bne.n	800328c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe fc5f 	bl	8001ad0 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fc5b 	bl	8001ad0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e081      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	4937      	ldr	r1, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fc34 	bl	8001ad0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fc30 	bl	8001ad0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e056      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x41c>
 800328a:	e04e      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fc1d 	bl	8001ad0 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7fe fc19 	bl	8001ad0 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03f      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x44a>
 80032b8:	e037      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e032      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d028      	beq.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d11a      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40007000 	.word	0x40007000
 8003338:	40023800 	.word	0x40023800
 800333c:	42470060 	.word	0x42470060

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0cc      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d90c      	bls.n	800337c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d044      	beq.n	8003460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d119      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e067      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4934      	ldr	r1, [pc, #208]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7fe fb4e 	bl	8001ad0 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fe fb4a 	bl	8001ad0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e04f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d20c      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f821 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fc94 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00
 80034fc:	40023800 	.word	0x40023800
 8003500:	08017eb0 	.word	0x08017eb0
 8003504:	2000000c 	.word	0x2000000c
 8003508:	20000010 	.word	0x20000010

0800350c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	2300      	movs	r3, #0
 800351e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003524:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b08      	cmp	r3, #8
 800352e:	d00d      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x40>
 8003530:	2b08      	cmp	r3, #8
 8003532:	f200 80bd 	bhi.w	80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x34>
 800353a:	2b04      	cmp	r3, #4
 800353c:	d003      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x3a>
 800353e:	e0b7      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003542:	60bb      	str	r3, [r7, #8]
       break;
 8003544:	e0b7      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003546:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003548:	60bb      	str	r3, [r7, #8]
      break;
 800354a:	e0b4      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800354c:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003554:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04d      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003562:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	461a      	mov	r2, r3
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	ea02 0800 	and.w	r8, r2, r0
 800357a:	ea03 0901 	and.w	r9, r3, r1
 800357e:	4640      	mov	r0, r8
 8003580:	4649      	mov	r1, r9
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	014b      	lsls	r3, r1, #5
 800358c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003590:	0142      	lsls	r2, r0, #5
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	ebb0 0008 	subs.w	r0, r0, r8
 800359a:	eb61 0109 	sbc.w	r1, r1, r9
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ac:	0182      	lsls	r2, r0, #6
 80035ae:	1a12      	subs	r2, r2, r0
 80035b0:	eb63 0301 	sbc.w	r3, r3, r1
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	00d9      	lsls	r1, r3, #3
 80035be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c2:	00d0      	lsls	r0, r2, #3
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	eb12 0208 	adds.w	r2, r2, r8
 80035cc:	eb43 0309 	adc.w	r3, r3, r9
 80035d0:	f04f 0000 	mov.w	r0, #0
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	0259      	lsls	r1, r3, #9
 80035da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035de:	0250      	lsls	r0, r2, #9
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	f7fc ff6e 	bl	80004d0 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e04a      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	461a      	mov	r2, r3
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	ea02 0400 	and.w	r4, r2, r0
 8003616:	ea03 0501 	and.w	r5, r3, r1
 800361a:	4620      	mov	r0, r4
 800361c:	4629      	mov	r1, r5
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	014b      	lsls	r3, r1, #5
 8003628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800362c:	0142      	lsls	r2, r0, #5
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	1b00      	subs	r0, r0, r4
 8003634:	eb61 0105 	sbc.w	r1, r1, r5
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	018b      	lsls	r3, r1, #6
 8003642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003646:	0182      	lsls	r2, r0, #6
 8003648:	1a12      	subs	r2, r2, r0
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	f04f 0000 	mov.w	r0, #0
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	00d9      	lsls	r1, r3, #3
 8003658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800365c:	00d0      	lsls	r0, r2, #3
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	1912      	adds	r2, r2, r4
 8003664:	eb45 0303 	adc.w	r3, r5, r3
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0299      	lsls	r1, r3, #10
 8003672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003676:	0290      	lsls	r0, r2, #10
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f7fc ff22 	bl	80004d0 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	60bb      	str	r3, [r7, #8]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036b2:	60bb      	str	r3, [r7, #8]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	68bb      	ldr	r3, [r7, #8]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	007a1200 	.word	0x007a1200

080036d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036ec:	f7ff fff0 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0a9b      	lsrs	r3, r3, #10
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK1Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	08017ec0 	.word	0x08017ec0

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003714:	f7ff ffdc 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	0b5b      	lsrs	r3, r3, #13
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4903      	ldr	r1, [pc, #12]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800
 8003734:	08017ec0 	.word	0x08017ec0

08003738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	220f      	movs	r2, #15
 8003746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0203 	and.w	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_RCC_GetClockConfig+0x60>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 020f 	and.w	r2, r3, #15
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	40023c00 	.word	0x40023c00

0800379c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e041      	b.n	8003832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f839 	bl	800383a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 f9d8 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04e      	b.n	8003906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_TIM_Base_Start_IT+0xc4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d01d      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_TIM_Base_Start_IT+0xc8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_TIM_Base_Start_IT+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_TIM_Base_Start_IT+0xd4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_TIM_Base_Start_IT+0xd8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_TIM_Base_Start_IT+0xdc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d111      	bne.n	80038f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d010      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	e007      	b.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40001800 	.word	0x40001800

08003930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0202 	mvn.w	r2, #2
 800395c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8ee 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8e0 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f8f1 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0204 	mvn.w	r2, #4
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8c4 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8b6 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8c7 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0208 	mvn.w	r2, #8
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f89a 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f88c 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f89d 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0210 	mvn.w	r2, #16
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f870 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f862 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f873 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0201 	mvn.w	r2, #1
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd f854 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f902 	bl	8003ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f838 	bl	8003b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d10e      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d107      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0220 	mvn.w	r2, #32
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8cc 	bl	8003cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bae:	d00f      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3c      	ldr	r2, [pc, #240]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3b      	ldr	r2, [pc, #236]	; (8003cb0 <TIM_Base_SetConfig+0x120>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3a      	ldr	r2, [pc, #232]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d027      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d023      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <TIM_Base_SetConfig+0x120>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d017      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <TIM_Base_SetConfig+0x128>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <TIM_Base_SetConfig+0x12c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <TIM_Base_SetConfig+0x130>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <TIM_Base_SetConfig+0x134>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <TIM_Base_SetConfig+0x138>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <TIM_Base_SetConfig+0x13c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0xf8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d103      	bne.n	8003c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	615a      	str	r2, [r3, #20]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800
 8003cb0:	40000c00 	.word	0x40000c00
 8003cb4:	40010400 	.word	0x40010400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	40001800 	.word	0x40001800
 8003cc8:	40001c00 	.word	0x40001c00
 8003ccc:	40002000 	.word	0x40002000

08003cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e03f      	b.n	8003d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd f830 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f929 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b08a      	sub	sp, #40	; 0x28
 8003d96:	af02      	add	r7, sp, #8
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d17c      	bne.n	8003eac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_UART_Transmit+0x2c>
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e075      	b.n	8003eae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_UART_Transmit+0x3e>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e06e      	b.n	8003eae <HAL_UART_Transmit+0x11c>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2221      	movs	r2, #33	; 0x21
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de6:	f7fd fe73 	bl	8001ad0 <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d108      	bne.n	8003e14 <HAL_UART_Transmit+0x82>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e003      	b.n	8003e1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e24:	e02a      	b.n	8003e7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f840 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e036      	b.n	8003eae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	3302      	adds	r3, #2
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e007      	b.n	8003e6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1cf      	bne.n	8003e26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f810 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e000      	b.n	8003eae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b090      	sub	sp, #64	; 0x40
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	e050      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d04c      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed6:	f7fd fdfb 	bl	8001ad0 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d241      	bcs.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f06:	637a      	str	r2, [r7, #52]	; 0x34
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3a:	623a      	str	r2, [r7, #32]
 8003f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	69f9      	ldr	r1, [r7, #28]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e00f      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d09f      	beq.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3740      	adds	r7, #64	; 0x40
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	b09f      	sub	sp, #124	; 0x7c
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	ea40 0301 	orr.w	r3, r0, r1
 8003fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fd8:	f021 010c 	bic.w	r1, r1, #12
 8003fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	6999      	ldr	r1, [r3, #24]
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	ea40 0301 	orr.w	r3, r0, r1
 8003ffc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bc5      	ldr	r3, [pc, #788]	; (8004318 <UART_SetConfig+0x384>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d004      	beq.n	8004012 <UART_SetConfig+0x7e>
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4bc3      	ldr	r3, [pc, #780]	; (800431c <UART_SetConfig+0x388>)
 800400e:	429a      	cmp	r2, r3
 8004010:	d103      	bne.n	800401a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004012:	f7ff fb7d 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8004016:	6778      	str	r0, [r7, #116]	; 0x74
 8004018:	e002      	b.n	8004020 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800401a:	f7ff fb65 	bl	80036e8 <HAL_RCC_GetPCLK1Freq>
 800401e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	f040 80b6 	bne.w	8004198 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	461c      	mov	r4, r3
 8004030:	f04f 0500 	mov.w	r5, #0
 8004034:	4622      	mov	r2, r4
 8004036:	462b      	mov	r3, r5
 8004038:	1891      	adds	r1, r2, r2
 800403a:	6439      	str	r1, [r7, #64]	; 0x40
 800403c:	415b      	adcs	r3, r3
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
 8004040:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004044:	1912      	adds	r2, r2, r4
 8004046:	eb45 0303 	adc.w	r3, r5, r3
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	00d9      	lsls	r1, r3, #3
 8004054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004058:	00d0      	lsls	r0, r2, #3
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	1911      	adds	r1, r2, r4
 8004060:	6639      	str	r1, [r7, #96]	; 0x60
 8004062:	416b      	adcs	r3, r5
 8004064:	667b      	str	r3, [r7, #100]	; 0x64
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	1891      	adds	r1, r2, r2
 8004072:	63b9      	str	r1, [r7, #56]	; 0x38
 8004074:	415b      	adcs	r3, r3
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800407c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004080:	f7fc fa26 	bl	80004d0 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4ba5      	ldr	r3, [pc, #660]	; (8004320 <UART_SetConfig+0x38c>)
 800408a:	fba3 2302 	umull	r2, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	011e      	lsls	r6, r3, #4
 8004092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004094:	461c      	mov	r4, r3
 8004096:	f04f 0500 	mov.w	r5, #0
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	6339      	str	r1, [r7, #48]	; 0x30
 80040a2:	415b      	adcs	r3, r3
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040aa:	1912      	adds	r2, r2, r4
 80040ac:	eb45 0303 	adc.w	r3, r5, r3
 80040b0:	f04f 0000 	mov.w	r0, #0
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	00d9      	lsls	r1, r3, #3
 80040ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040be:	00d0      	lsls	r0, r2, #3
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	1911      	adds	r1, r2, r4
 80040c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80040c8:	416b      	adcs	r3, r5
 80040ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	1891      	adds	r1, r2, r2
 80040d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80040da:	415b      	adcs	r3, r3
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040e6:	f7fc f9f3 	bl	80004d0 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <UART_SetConfig+0x38c>)
 80040f0:	fba3 1302 	umull	r1, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a87      	ldr	r2, [pc, #540]	; (8004320 <UART_SetConfig+0x38c>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004110:	441e      	add	r6, r3
 8004112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004114:	4618      	mov	r0, r3
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	1894      	adds	r4, r2, r2
 8004120:	623c      	str	r4, [r7, #32]
 8004122:	415b      	adcs	r3, r3
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800412a:	1812      	adds	r2, r2, r0
 800412c:	eb41 0303 	adc.w	r3, r1, r3
 8004130:	f04f 0400 	mov.w	r4, #0
 8004134:	f04f 0500 	mov.w	r5, #0
 8004138:	00dd      	lsls	r5, r3, #3
 800413a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800413e:	00d4      	lsls	r4, r2, #3
 8004140:	4622      	mov	r2, r4
 8004142:	462b      	mov	r3, r5
 8004144:	1814      	adds	r4, r2, r0
 8004146:	653c      	str	r4, [r7, #80]	; 0x50
 8004148:	414b      	adcs	r3, r1
 800414a:	657b      	str	r3, [r7, #84]	; 0x54
 800414c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	1891      	adds	r1, r2, r2
 8004158:	61b9      	str	r1, [r7, #24]
 800415a:	415b      	adcs	r3, r3
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004162:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004166:	f7fc f9b3 	bl	80004d0 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <UART_SetConfig+0x38c>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a67      	ldr	r2, [pc, #412]	; (8004320 <UART_SetConfig+0x38c>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 0207 	and.w	r2, r3, #7
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4432      	add	r2, r6
 8004194:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004196:	e0b9      	b.n	800430c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419a:	461c      	mov	r4, r3
 800419c:	f04f 0500 	mov.w	r5, #0
 80041a0:	4622      	mov	r2, r4
 80041a2:	462b      	mov	r3, r5
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	6139      	str	r1, [r7, #16]
 80041a8:	415b      	adcs	r3, r3
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041b0:	1912      	adds	r2, r2, r4
 80041b2:	eb45 0303 	adc.w	r3, r5, r3
 80041b6:	f04f 0000 	mov.w	r0, #0
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	00d9      	lsls	r1, r3, #3
 80041c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041c4:	00d0      	lsls	r0, r2, #3
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	eb12 0804 	adds.w	r8, r2, r4
 80041ce:	eb43 0905 	adc.w	r9, r3, r5
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ea:	0082      	lsls	r2, r0, #2
 80041ec:	4640      	mov	r0, r8
 80041ee:	4649      	mov	r1, r9
 80041f0:	f7fc f96e 	bl	80004d0 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <UART_SetConfig+0x38c>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	011e      	lsls	r6, r3, #4
 8004202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004204:	4618      	mov	r0, r3
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	1894      	adds	r4, r2, r2
 8004210:	60bc      	str	r4, [r7, #8]
 8004212:	415b      	adcs	r3, r3
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800421a:	1812      	adds	r2, r2, r0
 800421c:	eb41 0303 	adc.w	r3, r1, r3
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	f04f 0500 	mov.w	r5, #0
 8004228:	00dd      	lsls	r5, r3, #3
 800422a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800422e:	00d4      	lsls	r4, r2, #3
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	1814      	adds	r4, r2, r0
 8004236:	64bc      	str	r4, [r7, #72]	; 0x48
 8004238:	414b      	adcs	r3, r1
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4618      	mov	r0, r3
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	008b      	lsls	r3, r1, #2
 8004250:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004254:	0082      	lsls	r2, r0, #2
 8004256:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800425a:	f7fc f939 	bl	80004d0 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b2f      	ldr	r3, [pc, #188]	; (8004320 <UART_SetConfig+0x38c>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <UART_SetConfig+0x38c>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004282:	441e      	add	r6, r3
 8004284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004286:	4618      	mov	r0, r3
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	1894      	adds	r4, r2, r2
 8004292:	603c      	str	r4, [r7, #0]
 8004294:	415b      	adcs	r3, r3
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800429c:	1812      	adds	r2, r2, r0
 800429e:	eb41 0303 	adc.w	r3, r1, r3
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	f04f 0500 	mov.w	r5, #0
 80042aa:	00dd      	lsls	r5, r3, #3
 80042ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042b0:	00d4      	lsls	r4, r2, #3
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	eb12 0a00 	adds.w	sl, r2, r0
 80042ba:	eb43 0b01 	adc.w	fp, r3, r1
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	008b      	lsls	r3, r1, #2
 80042d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042d6:	0082      	lsls	r2, r0, #2
 80042d8:	4650      	mov	r0, sl
 80042da:	4659      	mov	r1, fp
 80042dc:	f7fc f8f8 	bl	80004d0 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <UART_SetConfig+0x38c>)
 80042e6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2164      	movs	r1, #100	; 0x64
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	3332      	adds	r3, #50	; 0x32
 80042f8:	4a09      	ldr	r2, [pc, #36]	; (8004320 <UART_SetConfig+0x38c>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4432      	add	r2, r6
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	377c      	adds	r7, #124	; 0x7c
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	40011000 	.word	0x40011000
 800431c:	40011400 	.word	0x40011400
 8004320:	51eb851f 	.word	0x51eb851f

08004324 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b16      	cmp	r3, #22
 8004338:	d85c      	bhi.n	80043f4 <nx_stm32_eth_driver+0xd0>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <nx_stm32_eth_driver+0x1c>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	080043bd 	.word	0x080043bd
 8004344:	080043a5 	.word	0x080043a5
 8004348:	080043ad 	.word	0x080043ad
 800434c:	080043b5 	.word	0x080043b5
 8004350:	080043bd 	.word	0x080043bd
 8004354:	080043bd 	.word	0x080043bd
 8004358:	080043bd 	.word	0x080043bd
 800435c:	080043bd 	.word	0x080043bd
 8004360:	080043c5 	.word	0x080043c5
 8004364:	080043cd 	.word	0x080043cd
 8004368:	080043d5 	.word	0x080043d5
 800436c:	080043f5 	.word	0x080043f5
 8004370:	080043f5 	.word	0x080043f5
 8004374:	080043f5 	.word	0x080043f5
 8004378:	080043f5 	.word	0x080043f5
 800437c:	080043f5 	.word	0x080043f5
 8004380:	080043f5 	.word	0x080043f5
 8004384:	080043f5 	.word	0x080043f5
 8004388:	080043dd 	.word	0x080043dd
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043f5 	.word	0x080043f5
 8004394:	080043e5 	.word	0x080043e5
 8004398:	080043ed 	.word	0x080043ed
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f835 	bl	800440c <_nx_driver_interface_attach>
    break;
 80043a2:	e02e      	b.n	8004402 <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f849 	bl	800443c <_nx_driver_initialize>
      break;
 80043aa:	e02a      	b.n	8004402 <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8a7 	bl	8004500 <_nx_driver_enable>
      break;
 80043b2:	e026      	b.n	8004402 <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8d5 	bl	8004564 <_nx_driver_disable>
      break;
 80043ba:	e022      	b.n	8004402 <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8fb 	bl	80045b8 <_nx_driver_packet_send>
      break;
 80043c2:	e01e      	b.n	8004402 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f9b9 	bl	800473c <_nx_driver_multicast_join>
      break;
 80043ca:	e01a      	b.n	8004402 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f9cb 	bl	8004768 <_nx_driver_multicast_leave>
      break;
 80043d2:	e016      	b.n	8004402 <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f9dd 	bl	8004794 <_nx_driver_get_status>
      break;
 80043da:	e012      	b.n	8004402 <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa17 	bl	8004810 <_nx_driver_deferred_processing>

      break;
 80043e2:	e00e      	b.n	8004402 <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f9eb 	bl	80047c0 <_nx_driver_capability_get>
      break;
 80043ea:	e00a      	b.n	8004402 <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f9f9 	bl	80047e4 <_nx_driver_capability_set>
      break;
 80043f2:	e006      	b.n	8004402 <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2244      	movs	r2, #68	; 0x44
 80043f8:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	225a      	movs	r2, #90	; 0x5a
 80043fe:	605a      	str	r2, [r3, #4]
  }
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop

0800440c <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4a07      	ldr	r2, [pc, #28]	; (8004438 <_nx_driver_interface_attach+0x2c>)
 800441a:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	605a      	str	r2, [r3, #4]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20007d8c 	.word	0x20007d8c

0800443c <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  NX_INTERFACE    *interface_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	617b      	str	r3, [r7, #20]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	613b      	str	r3, [r7, #16]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8004450:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <_nx_driver_initialize+0xbc>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <_nx_driver_initialize+0xbc>)
 8004458:	2201      	movs	r2, #1
 800445a:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004462:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <_nx_driver_initialize+0xbc>)
 8004464:	6093      	str	r3, [r2, #8]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <_nx_driver_initialize+0xbc>)
 8004468:	2200      	movs	r2, #0
 800446a:	611a      	str	r2, [r3, #16]
  nx_driver_information.nx_driver_transmit_queue_head =      NX_NULL;
  nx_driver_information.nx_driver_transmit_queue_tail =      NX_NULL;
#endif /* NX_DRIVER_INTERNAL_TRANSMIT_QUEUE */

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa65 	bl	800493c <_nx_driver_hardware_initialize>
 8004472:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d136      	bne.n	80044e8 <_nx_driver_initialize+0xac>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <_nx_driver_initialize+0xbc>)
 8004480:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <_nx_driver_initialize+0xc0>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <_nx_driver_initialize+0xc0>)
 8004494:	6952      	ldr	r2, [r2, #20]
 8004496:	3201      	adds	r2, #1
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	4313      	orrs	r3, r2
 800449c:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80044a2:	4b16      	ldr	r3, [pc, #88]	; (80044fc <_nx_driver_initialize+0xc0>)
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	3302      	adds	r3, #2
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	061a      	lsls	r2, r3, #24
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <_nx_driver_initialize+0xc0>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	3303      	adds	r3, #3
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <_nx_driver_initialize+0xc0>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	3304      	adds	r3, #4
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80044c2:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 80044c4:	4a0d      	ldr	r2, [pc, #52]	; (80044fc <_nx_driver_initialize+0xc0>)
 80044c6:	6952      	ldr	r2, [r2, #20]
 80044c8:	3205      	adds	r2, #5
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80044ce:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2201      	movs	r2, #1
 80044d8:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <_nx_driver_initialize+0xbc>)
 80044dc:	2203      	movs	r2, #3
 80044de:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 80044e6:	e002      	b.n	80044ee <_nx_driver_initialize+0xb2>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	225a      	movs	r2, #90	; 0x5a
 80044ec:	605a      	str	r2, [r3, #4]
}
 80044ee:	bf00      	nop
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20007d8c 	.word	0x20007d8c
 80044fc:	20007f48 	.word	0x20007f48

08004500 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	60fb      	str	r3, [r7, #12]

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <_nx_driver_enable+0x60>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d803      	bhi.n	800451e <_nx_driver_enable+0x1e>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	225a      	movs	r2, #90	; 0x5a
 800451a:	605a      	str	r2, [r3, #4]
    return;
 800451c:	e01c      	b.n	8004558 <_nx_driver_enable+0x58>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <_nx_driver_enable+0x60>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d903      	bls.n	800452e <_nx_driver_enable+0x2e>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2215      	movs	r2, #21
 800452a:	605a      	str	r2, [r3, #4]
    return;
 800452c:	e014      	b.n	8004558 <_nx_driver_enable+0x58>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fb22 	bl	8004b78 <_nx_driver_hardware_enable>
 8004534:	60b8      	str	r0, [r7, #8]

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <_nx_driver_enable+0x52>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 800453c:	4b08      	ldr	r3, [pc, #32]	; (8004560 <_nx_driver_enable+0x60>)
 800453e:	2204      	movs	r2, #4
 8004540:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 8004550:	e002      	b.n	8004558 <_nx_driver_enable+0x58>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	225a      	movs	r2, #90	; 0x5a
 8004556:	605a      	str	r2, [r3, #4]
  }
}
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20007d8c 	.word	0x20007d8c

08004564 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <_nx_driver_disable+0x50>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b04      	cmp	r3, #4
 8004578:	d003      	beq.n	8004582 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	225a      	movs	r2, #90	; 0x5a
 800457e:	605a      	str	r2, [r3, #4]
    return;
 8004580:	e014      	b.n	80045ac <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fb16 	bl	8004bb4 <_nx_driver_hardware_disable>
 8004588:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <_nx_driver_disable+0x50>)
 800459a:	2203      	movs	r2, #3
 800459c:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	e002      	b.n	80045ac <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	225a      	movs	r2, #90	; 0x5a
 80045aa:	605a      	str	r2, [r3, #4]
  }
}
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20007d8c 	.word	0x20007d8c

080045b8 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 80045c6:	4b5c      	ldr	r3, [pc, #368]	; (8004738 <_nx_driver_packet_send+0x180>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d008      	beq.n	80045e0 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	225a      	movs	r2, #90	; 0x5a
 80045d2:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3310      	adds	r3, #16
 80045d8:	4618      	mov	r0, r3
 80045da:	f00d fe21 	bl	8012220 <_nxe_packet_transmit_release>
    return;
 80045de:	e0a7      	b.n	8004730 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 80045ea:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80045ec:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 80045ee:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	320e      	adds	r2, #14
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	3b02      	subs	r3, #2
 8004600:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3304      	adds	r3, #4
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 800461a:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f8d3 3734 	ldr.w	r3, [r3, #1844]	; 0x734
 8004622:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3308      	adds	r3, #8
 8004628:	430a      	orrs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	330c      	adds	r3, #12
 8004636:	0412      	lsls	r2, r2, #16
 8004638:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b05      	cmp	r3, #5
 8004640:	d003      	beq.n	800464a <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004646:	2b06      	cmp	r3, #6
 8004648:	d10a      	bne.n	8004660 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	330c      	adds	r3, #12
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	320c      	adds	r2, #12
 8004654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004658:	f043 0306 	orr.w	r3, r3, #6
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e016      	b.n	800468e <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b07      	cmp	r3, #7
 8004666:	d10a      	bne.n	800467e <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	330c      	adds	r3, #12
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	320c      	adds	r2, #12
 8004672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004676:	f043 0335 	orr.w	r3, r3, #53	; 0x35
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e007      	b.n	800468e <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	330c      	adds	r3, #12
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	330c      	adds	r3, #12
 8004688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468c:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	ba1a      	rev	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3304      	adds	r3, #4
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3304      	adds	r3, #4
 80046a2:	ba12      	rev	r2, r2
 80046a4:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3308      	adds	r3, #8
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3308      	adds	r3, #8
 80046b0:	ba12      	rev	r2, r2
 80046b2:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	330c      	adds	r3, #12
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	330c      	adds	r3, #12
 80046be:	ba12      	rev	r2, r2
 80046c0:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d912      	bls.n	80046f4 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	320e      	adds	r2, #14
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3a0e      	subs	r2, #14
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	225a      	movs	r2, #90	; 0x5a
 80046e6:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	4618      	mov	r0, r3
 80046ee:	f00d fd97 	bl	8012220 <_nxe_packet_transmit_release>
    return;
 80046f2:	e01d      	b.n	8004730 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fa6a 	bl	8004bd0 <_nx_driver_hardware_packet_send>
 80046fc:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d012      	beq.n	800472a <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	320e      	adds	r2, #14
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3a0e      	subs	r2, #14
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	225a      	movs	r2, #90	; 0x5a
 800471c:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	4618      	mov	r0, r3
 8004724:	f00d fd7c 	bl	8012220 <_nxe_packet_transmit_release>
 8004728:	e002      	b.n	8004730 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	605a      	str	r2, [r3, #4]
  }
}
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20007d8c 	.word	0x20007d8c

0800473c <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fb8d 	bl	8004e64 <_nx_driver_hardware_multicast_join>
 800474a:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	225a      	movs	r2, #90	; 0x5a
 8004756:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8004758:	e002      	b.n	8004760 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fb93 	bl	8004e9c <_nx_driver_hardware_multicast_leave>
 8004776:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	225a      	movs	r2, #90	; 0x5a
 8004782:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8004784:	e002      	b.n	800478c <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	605a      	str	r2, [r3, #4]
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fb9f 	bl	8004ee0 <_nx_driver_hardware_get_status>
 80047a2:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	225a      	movs	r2, #90	; 0x5a
 80047ae:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80047b0:	e002      	b.n	80047b8 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80047d0:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fd89 	bl	8005304 <_nx_driver_hardware_capability_set>
 80047f2:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	225a      	movs	r2, #90	; 0x5a
 80047fe:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8004800:	e002      	b.n	8004808 <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	605a      	str	r2, [r3, #4]
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004818:	f3ef 8310 	mrs	r3, PRIMASK
 800481c:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 800481e:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8004820:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8004822:	b672      	cpsid	i
#endif
    return(int_posture);
 8004824:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 8004826:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 8004828:	4b10      	ldr	r3, [pc, #64]	; (800486c <_nx_driver_deferred_processing+0x5c>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <_nx_driver_deferred_processing+0x5c>)
 8004830:	2200      	movs	r2, #0
 8004832:	611a      	str	r2, [r3, #16]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f383 8810 	msr	PRIMASK, r3
}
 800483e:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      _nx_driver_hardware_packet_transmitted(&eth_handle);
 800484a:	4809      	ldr	r0, [pc, #36]	; (8004870 <_nx_driver_deferred_processing+0x60>)
 800484c:	f000 fb54 	bl	8004ef8 <_nx_driver_hardware_packet_transmitted>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 800485a:	f000 fba7 	bl	8004fac <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	605a      	str	r2, [r3, #4]
}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20007d8c 	.word	0x20007d8c
 8004870:	20007f48 	.word	0x20007f48

08004874 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <_nx_driver_transfer_to_netx+0xc4>)
 8004882:	68d2      	ldr	r2, [r2, #12]
 8004884:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	330c      	adds	r3, #12
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	330d      	adds	r3, #13
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 800489e:	4313      	orrs	r3, r2
 80048a0:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 80048a2:	89fb      	ldrh	r3, [r7, #14]
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a8:	d004      	beq.n	80048b4 <_nx_driver_transfer_to_netx+0x40>
 80048aa:	89fb      	ldrh	r3, [r7, #14]
 80048ac:	f248 62dd 	movw	r2, #34525	; 0x86dd
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10f      	bne.n	80048d4 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	320e      	adds	r2, #14
 80048bc:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	3a0e      	subs	r2, #14
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f005 fa21 	bl	8009d14 <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 80048d2:	e02d      	b.n	8004930 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 80048d4:	89fb      	ldrh	r3, [r7, #14]
 80048d6:	f640 0206 	movw	r2, #2054	; 0x806
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10f      	bne.n	80048fe <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	320e      	adds	r2, #14
 80048e6:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	3a0e      	subs	r2, #14
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f002 ff6f 	bl	80077da <_nx_arp_packet_deferred_receive>
}
 80048fc:	e018      	b.n	8004930 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	f248 0235 	movw	r2, #32821	; 0x8035
 8004904:	4293      	cmp	r3, r2
 8004906:	d10f      	bne.n	8004928 <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	320e      	adds	r2, #14
 8004910:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3a0e      	subs	r2, #14
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f006 ff47 	bl	800b7b4 <_nx_rarp_packet_deferred_receive>
}
 8004926:	e003      	b.n	8004930 <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 8004928:	463b      	mov	r3, r7
 800492a:	4618      	mov	r0, r3
 800492c:	f00d fc40 	bl	80121b0 <_nxe_packet_release>
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20007d8c 	.word	0x20007d8c

0800493c <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef  *DMARxDesc;
#else
  ETH_MACConfigTypeDef MACConf;
#endif
  INT PHYLinkState;
  UINT duplex, speed = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 800494e:	4b83      	ldr	r3, [pc, #524]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004950:	2200      	movs	r2, #0
 8004952:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 8004954:	4b81      	ldr	r3, [pc, #516]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004956:	2200      	movs	r2, #0
 8004958:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 800495a:	4b80      	ldr	r3, [pc, #512]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 800495c:	2200      	movs	r2, #0
 800495e:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 8004960:	4b7e      	ldr	r3, [pc, #504]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004962:	2200      	movs	r2, #0
 8004964:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 8004966:	4b7d      	ldr	r3, [pc, #500]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <_nx_driver_hardware_initialize+0x36>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 800496e:	235a      	movs	r3, #90	; 0x5a
 8004970:	e0f0      	b.n	8004b54 <_nx_driver_hardware_initialize+0x218>
  }

  nx_eth_init();
 8004972:	f7fc f809 	bl	8000988 <MX_ETH_Init>
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
#endif

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8004976:	f000 fd09 	bl	800538c <nx_eth_phy_init>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <_nx_driver_hardware_initialize+0x48>
  {
    return(NX_DRIVER_ERROR);
 8004980:	235a      	movs	r3, #90	; 0x5a
 8004982:	e0e7      	b.n	8004b54 <_nx_driver_hardware_initialize+0x218>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8004984:	f000 fd26 	bl	80053d4 <nx_eth_phy_get_link_state>
 8004988:	61b8      	str	r0, [r7, #24]

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b01      	cmp	r3, #1
 800498e:	dc07      	bgt.n	80049a0 <_nx_driver_hardware_initialize+0x64>
  {

    while((PHYLinkState = nx_eth_phy_get_link_state())<= ETH_PHY_STATUS_LINK_DOWN);
 8004990:	bf00      	nop
 8004992:	f000 fd1f 	bl	80053d4 <nx_eth_phy_get_link_state>
 8004996:	61b8      	str	r0, [r7, #24]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	ddf9      	ble.n	8004992 <_nx_driver_hardware_initialize+0x56>
 800499e:	e038      	b.n	8004a12 <_nx_driver_hardware_initialize+0xd6>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	3b02      	subs	r3, #2
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d823      	bhi.n	80049f0 <_nx_driver_hardware_initialize+0xb4>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <_nx_driver_hardware_initialize+0x74>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049cf 	.word	0x080049cf
 80049b8:	080049db 	.word	0x080049db
 80049bc:	080049e7 	.word	0x080049e7
  else
  {
    switch (PHYLinkState)
    {
    case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80049c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049c4:	623b      	str	r3, [r7, #32]
      speed = ETH_SPEED_100M;
 80049c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049ca:	61fb      	str	r3, [r7, #28]
      break;
 80049cc:	e017      	b.n	80049fe <_nx_driver_hardware_initialize+0xc2>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	623b      	str	r3, [r7, #32]
      speed = ETH_SPEED_100M;
 80049d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049d6:	61fb      	str	r3, [r7, #28]
      break;
 80049d8:	e011      	b.n	80049fe <_nx_driver_hardware_initialize+0xc2>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80049da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049de:	623b      	str	r3, [r7, #32]
      speed = ETH_SPEED_10M;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
      break;
 80049e4:	e00b      	b.n	80049fe <_nx_driver_hardware_initialize+0xc2>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	623b      	str	r3, [r7, #32]
      speed = ETH_SPEED_10M;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
      break;
 80049ee:	e006      	b.n	80049fe <_nx_driver_hardware_initialize+0xc2>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 80049f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049f4:	623b      	str	r3, [r7, #32]
      speed = ETH_SPEED_100M;
 80049f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049fa:	61fb      	str	r3, [r7, #28]
      break;
 80049fc:	bf00      	nop
    }

#ifdef STM32_ETH_HAL_LEGACY
    /* Set MAC Config */
    eth_handle.Init.Speed = speed;
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <_nx_driver_hardware_initialize+0x224>)
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	6093      	str	r3, [r2, #8]
    eth_handle.Init.DuplexMode = duplex;
 8004a04:	4a56      	ldr	r2, [pc, #344]	; (8004b60 <_nx_driver_hardware_initialize+0x224>)
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	60d3      	str	r3, [r2, #12]
    HAL_ETH_ConfigMAC(&eth_handle, NULL);
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4854      	ldr	r0, [pc, #336]	; (8004b60 <_nx_driver_hardware_initialize+0x224>)
 8004a0e:	f7fd fb7f 	bl	8002110 <HAL_ETH_ConfigMAC>
    MACConf.Speed = speed;
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
#endif
  }

  for(i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
 8004a16:	e02a      	b.n	8004a6e <_nx_driver_hardware_initialize+0x132>
  {
#ifdef STM32_ETH_HAL_LEGACY
      /* Get the pointer on the member (i) of the Tx Desc list.  */
        DMATxDesc = &nx_driver_information.nx_driver_information_dma_tx_descriptors[i];
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	3305      	adds	r3, #5
 8004a1c:	015b      	lsls	r3, r3, #5
 8004a1e:	4a4f      	ldr	r2, [pc, #316]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004a20:	4413      	add	r3, r2
 8004a22:	3304      	adds	r3, #4
 8004a24:	613b      	str	r3, [r7, #16]

        if(eth_handle.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004a26:	4b4e      	ldr	r3, [pc, #312]	; (8004b60 <_nx_driver_hardware_initialize+0x224>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <_nx_driver_hardware_initialize+0xfa>
        {
            /* Set Second Address Chained bit and checksum offload options.  */
            DMATxDesc -> Status = ETH_DMATXDESC_TCH | ETH_DMATXDESC_IC | ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_CIC_IPV4HEADER;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4a4c      	ldr	r2, [pc, #304]	; (8004b64 <_nx_driver_hardware_initialize+0x228>)
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e002      	b.n	8004a3c <_nx_driver_hardware_initialize+0x100>
        }
        else
        {
            /* Set Second Address Chained bit.  */
            DMATxDesc -> Status = ETH_DMATXDESC_TCH | ETH_DMATXDESC_IC;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4a4b      	ldr	r2, [pc, #300]	; (8004b68 <_nx_driver_hardware_initialize+0x22c>)
 8004a3a:	601a      	str	r2, [r3, #0]
        }

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if(i < (NX_DRIVER_TX_DESCRIPTORS - 1))
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d808      	bhi.n	8004a54 <_nx_driver_hardware_initialize+0x118>
        {
            /* Set next descriptor address register with next descriptor base address */
            DMATxDesc -> Buffer2NextDescAddr = (ULONG)(nx_driver_information.nx_driver_information_dma_tx_descriptors + i + 1);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	015b      	lsls	r3, r3, #5
 8004a48:	4a48      	ldr	r2, [pc, #288]	; (8004b6c <_nx_driver_hardware_initialize+0x230>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	e002      	b.n	8004a5a <_nx_driver_hardware_initialize+0x11e>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            DMATxDesc -> Buffer2NextDescAddr = (ULONG) nx_driver_information.nx_driver_information_dma_tx_descriptors;
 8004a54:	4a45      	ldr	r2, [pc, #276]	; (8004b6c <_nx_driver_hardware_initialize+0x230>)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	60da      	str	r2, [r3, #12]
        }
        nx_driver_information.nx_driver_information_transmit_packets[i] = NX_NULL;
 8004a5a:	4a40      	ldr	r2, [pc, #256]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	3348      	adds	r3, #72	; 0x48
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
  for(i = 0; i < NX_DRIVER_TX_DESCRIPTORS; i++)
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d9d1      	bls.n	8004a18 <_nx_driver_hardware_initialize+0xdc>
#endif
  }

#ifdef STM32_ETH_HAL_LEGACY
    /* Set Transmit Descriptor List Address Register */
    ETH -> DMATDLAR = (ULONG) nx_driver_information.nx_driver_information_dma_tx_descriptors;
 8004a74:	4b3e      	ldr	r3, [pc, #248]	; (8004b70 <_nx_driver_hardware_initialize+0x234>)
 8004a76:	4a3d      	ldr	r2, [pc, #244]	; (8004b6c <_nx_driver_hardware_initialize+0x230>)
 8004a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	601a      	str	r2, [r3, #0]

    /* Initialize RX Descriptors list: Ring Mode  */
    DMARxDesc = nx_driver_information.nx_driver_information_dma_rx_descriptors;
 8004a80:	4b3c      	ldr	r3, [pc, #240]	; (8004b74 <_nx_driver_hardware_initialize+0x238>)
 8004a82:	617b      	str	r3, [r7, #20]
#endif

  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
 8004a88:	e04d      	b.n	8004b26 <_nx_driver_hardware_initialize+0x1ea>
  {

    /* Allocate a packet for the receive buffers.  */
    if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8004a8a:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004a8c:	6898      	ldr	r0, [r3, #8]
 8004a8e:	f107 010c 	add.w	r1, r7, #12
 8004a92:	2300      	movs	r3, #0
 8004a94:	2200      	movs	r2, #0
 8004a96:	f00d fa05 	bl	8011ea4 <_nxe_packet_allocate>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d12b      	bne.n	8004af8 <_nx_driver_hardware_initialize+0x1bc>
                           NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
    {

      /* Adjust the packet.  */
      packet_ptr -> nx_packet_prepend_ptr += 2;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3202      	adds	r2, #2
 8004aa8:	609a      	str	r2, [r3, #8]
#ifdef STM32_ETH_HAL_LEGACY
      DMARxDesc[i].Buffer1Addr = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6899      	ldr	r1, [r3, #8]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	015b      	lsls	r3, r3, #5
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]
      DMARxDesc[i].ControlBufferSize = ETH_DMARXDESC_RCH | (packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	015b      	lsls	r3, r3, #5
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 8004ad2:	605a      	str	r2, [r3, #4]
      DMARxDscrTab[i].DESC0 = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
      DMARxDscrTab[i].BackupAddr0 = (uint32_t) packet_ptr -> nx_packet_prepend_ptr;
#endif

      /* Remember the receive packet pointer.  */
      nx_driver_information.nx_driver_information_receive_packets[i] =  packet_ptr;
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4921      	ldr	r1, [pc, #132]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	334c      	adds	r3, #76	; 0x4c
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	605a      	str	r2, [r3, #4]

#ifdef STM32_ETH_HAL_LEGACY
      DMARxDesc[i].Status = ETH_DMARXDESC_OWN;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	015b      	lsls	r3, r3, #5
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aee:	601a      	str	r2, [r3, #0]
      return(NX_DRIVER_ERROR);
    }

#ifdef STM32_ETH_HAL_LEGACY
    /* Initialize the next descriptor with the Next Descriptor Polling Enable.  */
    if(i < (NX_DRIVER_RX_DESCRIPTORS - 1))
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d80e      	bhi.n	8004b14 <_nx_driver_hardware_initialize+0x1d8>
 8004af6:	e001      	b.n	8004afc <_nx_driver_hardware_initialize+0x1c0>
      return(NX_DRIVER_ERROR);
 8004af8:	235a      	movs	r3, #90	; 0x5a
 8004afa:	e02b      	b.n	8004b54 <_nx_driver_hardware_initialize+0x218>
    {
      /* Set next descriptor address register with next descriptor base address.  */
      DMARxDesc[i].Buffer2NextDescAddr = (ULONG)(nx_driver_information.nx_driver_information_dma_rx_descriptors + i + 1);
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	3301      	adds	r3, #1
 8004b00:	015b      	lsls	r3, r3, #5
 8004b02:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <_nx_driver_hardware_initialize+0x238>)
 8004b04:	1899      	adds	r1, r3, r2
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	015b      	lsls	r3, r3, #5
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	460a      	mov	r2, r1
 8004b10:	60da      	str	r2, [r3, #12]
 8004b12:	e005      	b.n	8004b20 <_nx_driver_hardware_initialize+0x1e4>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address.  */
      DMARxDesc[i].Buffer2NextDescAddr = (uint32_t)(nx_driver_information.nx_driver_information_dma_rx_descriptors);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	015b      	lsls	r3, r3, #5
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <_nx_driver_hardware_initialize+0x238>)
 8004b1e:	60da      	str	r2, [r3, #12]
  for(i = 0; i < NX_DRIVER_RX_DESCRIPTORS; i++)
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	3301      	adds	r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d9ae      	bls.n	8004a8a <_nx_driver_hardware_initialize+0x14e>
#endif

  }

  /* Save the size of one rx buffer.  */
  nx_driver_information.nx_driver_information_rx_buffer_size = packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004b3a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8004b3e:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <_nx_driver_hardware_initialize+0x220>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

#ifdef STM32_ETH_HAL_LEGACY
  /* Set Receive Descriptor List Address Register */
  ETH -> DMARDLAR = (ULONG) nx_driver_information.nx_driver_information_dma_rx_descriptors;
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <_nx_driver_hardware_initialize+0x234>)
 8004b48:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <_nx_driver_hardware_initialize+0x238>)
 8004b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4e:	330c      	adds	r3, #12
 8004b50:	601a      	str	r2, [r3, #0]
#endif

  /* Return success!  */
  return(NX_SUCCESS);
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20007d8c 	.word	0x20007d8c
 8004b60:	20007f48 	.word	0x20007f48
 8004b64:	40d00000 	.word	0x40d00000
 8004b68:	40100000 	.word	0x40100000
 8004b6c:	20007e30 	.word	0x20007e30
 8004b70:	40028000 	.word	0x40028000
 8004b74:	20007db0 	.word	0x20007db0

08004b78 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
#ifdef STM32_ETH_HAL_LEGACY
  HAL_ETH_Start(&eth_handle);
 8004b80:	480b      	ldr	r0, [pc, #44]	; (8004bb0 <_nx_driver_hardware_enable+0x38>)
 8004b82:	f7fd fa66 	bl	8002052 <HAL_ETH_Start>
  __HAL_ETH_DMA_ENABLE_IT((&eth_handle), ETH_DMA_IT_NIS | ETH_DMA_IT_R | ETH_DMA_IT_T);
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <_nx_driver_hardware_enable+0x38>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8e:	331c      	adds	r3, #28
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <_nx_driver_hardware_enable+0x38>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b9a:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 8004b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba2:	331c      	adds	r3, #28
 8004ba4:	601a      	str	r2, [r3, #0]
#else
  HAL_ETH_Start_IT(&eth_handle);
#endif

  /* Return success!  */
  return(NX_SUCCESS);
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20007f48 	.word	0x20007f48

08004bb4 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 8004bbc:	4803      	ldr	r0, [pc, #12]	; (8004bcc <_nx_driver_hardware_disable+0x18>)
 8004bbe:	f7fd fa77 	bl	80020b0 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20007f48 	.word	0x20007f48

08004bd0 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifdef STM32_ETH_HAL_LEGACY
static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b08b      	sub	sp, #44	; 0x2c
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

ULONG           curIdx;
NX_PACKET       *pktIdx;
ULONG            bd_count = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
TX_INTERRUPT_SAVE_AREA


    /* Pick up the first BD. */
    curIdx = nx_driver_information.nx_driver_information_transmit_current_index;
 8004bdc:	4b9f      	ldr	r3, [pc, #636]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check if it is a free descriptor.  */
    if ((nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status & ETH_DMATXDESC_OWN) || nx_driver_information.nx_driver_information_transmit_packets[curIdx])
 8004be2:	4a9e      	ldr	r2, [pc, #632]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	3305      	adds	r3, #5
 8004be8:	015b      	lsls	r3, r3, #5
 8004bea:	4413      	add	r3, r2
 8004bec:	3304      	adds	r3, #4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db07      	blt.n	8004c04 <_nx_driver_hardware_packet_send+0x34>
 8004bf4:	4a99      	ldr	r2, [pc, #612]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	3348      	adds	r3, #72	; 0x48
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <_nx_driver_hardware_packet_send+0x38>
    {

        /* Buffer is still owned by device.  */
        return(NX_DRIVER_ERROR);
 8004c04:	235a      	movs	r3, #90	; 0x5a
 8004c06:	e123      	b.n	8004e50 <_nx_driver_hardware_packet_send+0x280>
    }

    /* Find the Buffer, set the Buffer pointer.  */
    nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr = (ULONG)packet_ptr->nx_packet_prepend_ptr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4a93      	ldr	r2, [pc, #588]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	015b      	lsls	r3, r3, #5
 8004c14:	4413      	add	r3, r2
 8004c16:	33ac      	adds	r3, #172	; 0xac
 8004c18:	6019      	str	r1, [r3, #0]

    /* Set the buffer size.  */
    nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].ControlBufferSize = ((packet_ptr -> nx_packet_append_ptr - packet_ptr->nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004c28:	498c      	ldr	r1, [pc, #560]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	3305      	adds	r3, #5
 8004c2e:	015b      	lsls	r3, r3, #5
 8004c30:	440b      	add	r3, r1
 8004c32:	3308      	adds	r3, #8
 8004c34:	601a      	str	r2, [r3, #0]

    /* Set the first Descriptor's FS bit.  */
    nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |= ETH_DMATXDESC_FS;
 8004c36:	4a89      	ldr	r2, [pc, #548]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	3305      	adds	r3, #5
 8004c3c:	015b      	lsls	r3, r3, #5
 8004c3e:	4413      	add	r3, r2
 8004c40:	3304      	adds	r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c48:	4984      	ldr	r1, [pc, #528]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	3305      	adds	r3, #5
 8004c4e:	015b      	lsls	r3, r3, #5
 8004c50:	440b      	add	r3, r1
 8004c52:	3304      	adds	r3, #4
 8004c54:	601a      	str	r2, [r3, #0]

    /* Clear the first Descriptor's LS bit.  */
    nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &= ~ETH_DMATXDESC_LS;
 8004c56:	4a81      	ldr	r2, [pc, #516]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	3305      	adds	r3, #5
 8004c5c:	015b      	lsls	r3, r3, #5
 8004c5e:	4413      	add	r3, r2
 8004c60:	3304      	adds	r3, #4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c68:	497c      	ldr	r1, [pc, #496]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	3305      	adds	r3, #5
 8004c6e:	015b      	lsls	r3, r3, #5
 8004c70:	440b      	add	r3, r1
 8004c72:	3304      	adds	r3, #4
 8004c74:	601a      	str	r2, [r3, #0]

    /* Find next packet.  */
    for (pktIdx = packet_ptr -> nx_packet_next;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	e044      	b.n	8004d08 <_nx_driver_hardware_packet_send+0x138>
         pktIdx != NX_NULL;
         pktIdx = pktIdx -> nx_packet_next)
    {

        /* Move to next descriptor.  */
        curIdx = (curIdx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	3301      	adds	r3, #1
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if it is a free descriptor.  */
        if ((nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status & ETH_DMATXDESC_OWN) || nx_driver_information.nx_driver_information_transmit_packets[curIdx])
 8004c88:	4a74      	ldr	r2, [pc, #464]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	3305      	adds	r3, #5
 8004c8e:	015b      	lsls	r3, r3, #5
 8004c90:	4413      	add	r3, r2
 8004c92:	3304      	adds	r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	db07      	blt.n	8004caa <_nx_driver_hardware_packet_send+0xda>
 8004c9a:	4a70      	ldr	r2, [pc, #448]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	3348      	adds	r3, #72	; 0x48
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <_nx_driver_hardware_packet_send+0xde>
        {

            /* No more descriptor available, return driver error status.  */
            return(NX_DRIVER_ERROR);
 8004caa:	235a      	movs	r3, #90	; 0x5a
 8004cac:	e0d0      	b.n	8004e50 <_nx_driver_hardware_packet_send+0x280>
        }

        /* Set the buffer pointer.  */
        nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Buffer1Addr = (ULONG)pktIdx -> nx_packet_prepend_ptr;
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4a69      	ldr	r2, [pc, #420]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	015b      	lsls	r3, r3, #5
 8004cba:	4413      	add	r3, r2
 8004cbc:	33ac      	adds	r3, #172	; 0xac
 8004cbe:	6019      	str	r1, [r3, #0]

        /* Set the buffer size.  */
        nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].ControlBufferSize = ((pktIdx -> nx_packet_append_ptr - pktIdx -> nx_packet_prepend_ptr) & ETH_DMATXDESC_TBS1);
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004cce:	4963      	ldr	r1, [pc, #396]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	3305      	adds	r3, #5
 8004cd4:	015b      	lsls	r3, r3, #5
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3308      	adds	r3, #8
 8004cda:	601a      	str	r2, [r3, #0]

        /* Clear the descriptor's FS & LS bit.  */
        nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004cdc:	4a5f      	ldr	r2, [pc, #380]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	3305      	adds	r3, #5
 8004ce2:	015b      	lsls	r3, r3, #5
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cee:	495b      	ldr	r1, [pc, #364]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3305      	adds	r3, #5
 8004cf4:	015b      	lsls	r3, r3, #5
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Increment the BD count.  */
        bd_count++;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
         pktIdx = pktIdx -> nx_packet_next)
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	623b      	str	r3, [r7, #32]
    for (pktIdx = packet_ptr -> nx_packet_next;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1b7      	bne.n	8004c7e <_nx_driver_hardware_packet_send+0xae>

    }

    /* Set the last Descriptor's LS & IC & OWN bit.  */
    nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |= (ETH_DMATXDESC_LS | ETH_DMATXDESC_IC | ETH_DMATXDESC_OWN);
 8004d0e:	4a53      	ldr	r2, [pc, #332]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	3305      	adds	r3, #5
 8004d14:	015b      	lsls	r3, r3, #5
 8004d16:	4413      	add	r3, r2
 8004d18:	3304      	adds	r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f043 4260 	orr.w	r2, r3, #3758096384	; 0xe0000000
 8004d20:	494e      	ldr	r1, [pc, #312]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	3305      	adds	r3, #5
 8004d26:	015b      	lsls	r3, r3, #5
 8004d28:	440b      	add	r3, r1
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	601a      	str	r2, [r3, #0]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    /* Set HW checksum offload options according to the flags in NX_PACKET.  */
    nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status &= ~ETH_DMATXDESC_CIC;
 8004d2e:	4a4b      	ldr	r2, [pc, #300]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	3305      	adds	r3, #5
 8004d34:	015b      	lsls	r3, r3, #5
 8004d36:	4413      	add	r3, r2
 8004d38:	3304      	adds	r3, #4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d40:	4946      	ldr	r1, [pc, #280]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	3305      	adds	r3, #5
 8004d46:	015b      	lsls	r3, r3, #5
 8004d48:	440b      	add	r3, r1
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	601a      	str	r2, [r3, #0]

    if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f403 7315 	and.w	r3, r3, #596	; 0x254
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <_nx_driver_hardware_packet_send+0x1ac>
                                                             NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
    {

        nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL;
 8004d5a:	4a40      	ldr	r2, [pc, #256]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	3305      	adds	r3, #5
 8004d60:	015b      	lsls	r3, r3, #5
 8004d62:	4413      	add	r3, r2
 8004d64:	3304      	adds	r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004d6c:	493b      	ldr	r1, [pc, #236]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	3305      	adds	r3, #5
 8004d72:	015b      	lsls	r3, r3, #5
 8004d74:	440b      	add	r3, r1
 8004d76:	3304      	adds	r3, #4
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e015      	b.n	8004da8 <_nx_driver_hardware_packet_send+0x1d8>
    }
    else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00f      	beq.n	8004da8 <_nx_driver_hardware_packet_send+0x1d8>
    {

        nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |= ETH_DMATXDESC_CIC_IPV4HEADER;
 8004d88:	4a34      	ldr	r2, [pc, #208]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	3305      	adds	r3, #5
 8004d8e:	015b      	lsls	r3, r3, #5
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d9a:	4930      	ldr	r1, [pc, #192]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	3305      	adds	r3, #5
 8004da0:	015b      	lsls	r3, r3, #5
 8004da2:	440b      	add	r3, r1
 8004da4:	3304      	adds	r3, #4
 8004da6:	601a      	str	r2, [r3, #0]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Save the pkt pointer to release.  */
    nx_driver_information.nx_driver_information_transmit_packets[curIdx] = packet_ptr;
 8004da8:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	3348      	adds	r3, #72	; 0x48
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]

    /* Set the current index to the next descriptor.  */
    nx_driver_information.nx_driver_information_transmit_current_index = (curIdx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	3301      	adds	r3, #1
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	4a27      	ldr	r2, [pc, #156]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004dc0:	6193      	str	r3, [r2, #24]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc6:	613b      	str	r3, [r7, #16]
    return(posture);
 8004dc8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8004dca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004dcc:	b672      	cpsid	i
    return(int_posture);
 8004dce:	68fb      	ldr	r3, [r7, #12]

    TX_DISABLE
 8004dd0:	61bb      	str	r3, [r7, #24]
    /* Increment the transmit buffers in use count.  */
    nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use += bd_count + 1;
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	3301      	adds	r3, #1
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004dde:	6213      	str	r3, [r2, #32]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f383 8810 	msr	PRIMASK, r3
}
 8004dea:	bf00      	nop
    TX_RESTORE
    /* Set OWN bit to indicate BDs are ready.  */
    for (; bd_count > 0; bd_count--)
 8004dec:	e017      	b.n	8004e1e <_nx_driver_hardware_packet_send+0x24e>
    {

        /* Set OWN bit in reverse order, move to previous BD.  */
        curIdx = (curIdx - 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	3b01      	subs	r3, #1
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Set this BD's OWN bit.  */
        nx_driver_information.nx_driver_information_dma_tx_descriptors[curIdx].Status |= ETH_DMATXDESC_OWN;
 8004df8:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	3305      	adds	r3, #5
 8004dfe:	015b      	lsls	r3, r3, #5
 8004e00:	4413      	add	r3, r2
 8004e02:	3304      	adds	r3, #4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e0a:	4914      	ldr	r1, [pc, #80]	; (8004e5c <_nx_driver_hardware_packet_send+0x28c>)
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	3305      	adds	r3, #5
 8004e10:	015b      	lsls	r3, r3, #5
 8004e12:	440b      	add	r3, r1
 8004e14:	3304      	adds	r3, #4
 8004e16:	601a      	str	r2, [r3, #0]
    for (; bd_count > 0; bd_count--)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e4      	bne.n	8004dee <_nx_driver_hardware_packet_send+0x21e>
    }

    /* If the DMA transmission is suspended, resume transmission.  */
    if ((ETH -> DMASR & ETH_DMASR_TBUS) != (ULONG)RESET)
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <_nx_driver_hardware_packet_send+0x290>)
 8004e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <_nx_driver_hardware_packet_send+0x27e>
    {
        /* Clear TBUS ETHERNET DMA flag.  */
        ETH -> DMASR = ETH_DMASR_TBUS;
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <_nx_driver_hardware_packet_send+0x290>)
 8004e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	2204      	movs	r2, #4
 8004e40:	601a      	str	r2, [r3, #0]

        /* Resume DMA transmission. */
        ETH -> DMATPDR = 0;
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <_nx_driver_hardware_packet_send+0x290>)
 8004e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e48:	3304      	adds	r3, #4
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
    }

    return(NX_SUCCESS);
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	372c      	adds	r7, #44	; 0x2c
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20007d8c 	.word	0x20007d8c
 8004e60:	40028000 	.word	0x40028000

08004e64 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <_nx_driver_hardware_multicast_join+0x30>)
 8004e6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8004e72:	3301      	adds	r3, #1
 8004e74:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <_nx_driver_hardware_multicast_join+0x30>)
 8004e76:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

  /* Enable multicast frame reception.  */
#ifdef STM32_ETH_HAL_LEGACY
  ETH->MACFFR |= ETH_MACFFR_PAM;
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <_nx_driver_hardware_multicast_join+0x34>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4a06      	ldr	r2, [pc, #24]	; (8004e98 <_nx_driver_hardware_multicast_join+0x34>)
 8004e80:	f043 0310 	orr.w	r3, r3, #16
 8004e84:	6053      	str	r3, [r2, #4]
  FilterConfig.PassAllMulticast = ENABLE;
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
#endif

  /* Return success.  */
  return(NX_SUCCESS);
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20007d8c 	.word	0x20007d8c
 8004e98:	40028000 	.word	0x40028000

08004e9c <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <_nx_driver_hardware_multicast_leave+0x3c>)
 8004ea6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <_nx_driver_hardware_multicast_leave+0x3c>)
 8004eae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <_nx_driver_hardware_multicast_leave+0x3c>)
 8004eb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <_nx_driver_hardware_multicast_leave+0x2c>
  {

    /* Disable multicast frame reception.  */
#ifdef STM32_ETH_HAL_LEGACY
    ETH->MACFFR &= ~ETH_MACFFR_PAM;
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <_nx_driver_hardware_multicast_leave+0x40>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a06      	ldr	r2, [pc, #24]	; (8004edc <_nx_driver_hardware_multicast_leave+0x40>)
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	6053      	str	r3, [r2, #4]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
#endif
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20007d8c 	.word	0x20007d8c
 8004edc:	40028000 	.word	0x40028000

08004ee0 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  /* Return success.  */
  return(NX_SUCCESS);
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <_nx_driver_hardware_packet_transmitted>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_hardware_packet_transmitted(ETH_HandleTypeDef *heth)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet;
#ifdef STM32_ETH_HAL_LEGACY
  ETH_DMADescTypeDef *dmatxdescs = nx_driver_information.nx_driver_information_dma_tx_descriptors;
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <_nx_driver_hardware_packet_transmitted+0xa8>)
 8004f02:	617b      	str	r3, [r7, #20]
  ULONG numOfBuf =  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use;
 8004f04:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <_nx_driver_hardware_packet_transmitted+0xac>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	61fb      	str	r3, [r7, #28]
  NX_PACKET **nx_packets = nx_driver_information.nx_driver_information_transmit_packets;
 8004f0a:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <_nx_driver_hardware_packet_transmitted+0xb0>)
 8004f0c:	613b      	str	r3, [r7, #16]
#else
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  ULONG numOfBuf =  dmatxdesclist->BuffersInUse;
#endif
  ULONG idx =       nx_driver_information.nx_driver_information_transmit_release_index;
 8004f0e:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <_nx_driver_hardware_packet_transmitted+0xac>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	61bb      	str	r3, [r7, #24]
  /* Loop through buffers in use.  */
  while (numOfBuf--)
 8004f14:	e039      	b.n	8004f8a <_nx_driver_hardware_packet_transmitted+0x92>
  {
    /* If no packet, just examine the next packet.  */
#ifdef STM32_ETH_HAL_LEGACY
    if (nx_packets[idx] == NX_NULL)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <_nx_driver_hardware_packet_transmitted+0x38>
    if (dmatxdesclist->PacketAddress[idx] == NX_NULL)
#endif
    {

      /* No packet in use, skip to next.  */
      idx = (idx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	61bb      	str	r3, [r7, #24]
      continue;
 8004f2e:	e02c      	b.n	8004f8a <_nx_driver_hardware_packet_transmitted+0x92>
    }

    /* Determine if the packet has been transmitted.  */
#ifdef STM32_ETH_HAL_LEGACY
    if ((dmatxdescs[idx].Status & ETH_DMATXDESC_OWN) == 0)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	015b      	lsls	r3, r3, #5
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db2b      	blt.n	8004f96 <_nx_driver_hardware_packet_transmitted+0x9e>
#endif
    {

      /* Yes, packet has been transmitted.  */
#ifdef STM32_ETH_HAL_LEGACY
      release_packet = nx_packets[idx];
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
#else
      release_packet = (NX_PACKET *)dmatxdesclist->PacketAddress[idx];
#endif

      /* Remove the Ethernet header and release the packet.  */
      NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	320e      	adds	r2, #14
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3a0e      	subs	r2, #14
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Release the packet.  */
      nx_packet_transmit_release(release_packet);
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	4618      	mov	r0, r3
 8004f64:	f00d f95c 	bl	8012220 <_nxe_packet_transmit_release>

      /* Clear the entry in the in-use array.  */
#ifdef STM32_ETH_HAL_LEGACY
      nx_packets[idx] = NX_NULL;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
#else
      dmatxdesclist->PacketAddress[idx] = NX_NULL;
#endif

      /* Update the transmit relesae index and number of buffers in use.  */
      idx = (idx + 1) & (NX_DRIVER_TX_DESCRIPTORS - 1);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	3301      	adds	r3, #1
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	61bb      	str	r3, [r7, #24]
#ifdef STM32_ETH_HAL_LEGACY
      nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = numOfBuf;
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <_nx_driver_hardware_packet_transmitted+0xac>)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	6213      	str	r3, [r2, #32]
#else
      dmatxdesclist->BuffersInUse = numOfBuf;
#endif
      nx_driver_information.nx_driver_information_transmit_release_index = idx;
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <_nx_driver_hardware_packet_transmitted+0xac>)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	61d3      	str	r3, [r2, #28]
  while (numOfBuf--)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	61fa      	str	r2, [r7, #28]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1c0      	bne.n	8004f16 <_nx_driver_hardware_packet_transmitted+0x1e>
    {
      /* Get out of the loop!  */
      break;
    }
  }
}
 8004f94:	e000      	b.n	8004f98 <_nx_driver_hardware_packet_transmitted+0xa0>
      break;
 8004f96:	bf00      	nop
}
 8004f98:	bf00      	nop
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20007e30 	.word	0x20007e30
 8004fa4:	20007d8c 	.word	0x20007d8c
 8004fa8:	20007eb0 	.word	0x20007eb0

08004fac <_nx_driver_hardware_packet_received>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifdef STM32_ETH_HAL_LEGACY
static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0

  NX_PACKET     *packet_ptr;
  NX_PACKET  *received_packet_ptr;
  INT            i;
ULONG          bd_count = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
ULONG          idx;
ULONG          temp_idx;
ULONG          first_idx = nx_driver_information.nx_driver_information_receive_current_index;
 8004fb6:	4ba2      	ldr	r3, [pc, #648]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	60bb      	str	r3, [r7, #8]
  received_packet_ptr = nx_driver_information.nx_driver_information_receive_packets[first_idx];
 8004fbc:	4aa0      	ldr	r2, [pc, #640]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	334c      	adds	r3, #76	; 0x4c
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	61fb      	str	r3, [r7, #28]


    /* Find out the BDs that owned by CPU.  */
    for (first_idx = idx = nx_driver_information.nx_driver_information_receive_current_index;
 8004fca:	4b9d      	ldr	r3, [pc, #628]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	e16f      	b.n	80052b6 <_nx_driver_hardware_packet_received+0x30a>
        (nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status & ETH_DMARXDESC_OWN) == 0;
         idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1))
    {

        /* Is the BD marked as the end of a frame?  */
        if (nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status & ETH_DMARXDESC_LS)
 8004fd6:	4a9a      	ldr	r2, [pc, #616]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	015b      	lsls	r3, r3, #5
 8004fde:	4413      	add	r3, r2
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 812b 	beq.w	8005244 <_nx_driver_hardware_packet_received+0x298>
        {

            /* Yes, this BD is the last BD in the frame, set the last NX_PACKET's nx_packet_next to NULL.  */
            nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_next = NX_NULL;
 8004fee:	4a94      	ldr	r2, [pc, #592]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	334c      	adds	r3, #76	; 0x4c
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	605a      	str	r2, [r3, #4]

            /* Store the length of the packet in the first NX_PACKET.  */
            nx_driver_information.nx_driver_information_receive_packets[first_idx] -> nx_packet_length = ((nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT) - 4;
 8004ffe:	4a90      	ldr	r2, [pc, #576]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3301      	adds	r3, #1
 8005004:	015b      	lsls	r3, r3, #5
 8005006:	4413      	add	r3, r2
 8005008:	3304      	adds	r3, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005012:	498b      	ldr	r1, [pc, #556]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	334c      	adds	r3, #76	; 0x4c
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	3a04      	subs	r2, #4
 8005020:	625a      	str	r2, [r3, #36]	; 0x24

            /* Adjust nx_packet_append_ptr with the size of the data in this buffer.  */
            nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_append_ptr = nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_prepend_ptr
 8005022:	4a87      	ldr	r2, [pc, #540]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	334c      	adds	r3, #76	; 0x4c
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	6899      	ldr	r1, [r3, #8]
                                                                                                     + nx_driver_information.nx_driver_information_receive_packets[first_idx]->nx_packet_length
 8005030:	4a83      	ldr	r2, [pc, #524]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	334c      	adds	r3, #76	; 0x4c
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                                                                                     - bd_count * nx_driver_information.nx_driver_information_rx_buffer_size;
 800503e:	4b80      	ldr	r3, [pc, #512]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005040:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005044:	6978      	ldr	r0, [r7, #20]
 8005046:	fb00 f303 	mul.w	r3, r0, r3
 800504a:	1ad2      	subs	r2, r2, r3
            nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_append_ptr = nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_prepend_ptr
 800504c:	487c      	ldr	r0, [pc, #496]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	334c      	adds	r3, #76	; 0x4c
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4403      	add	r3, r0
 8005056:	685b      	ldr	r3, [r3, #4]
                                                                                                     - bd_count * nx_driver_information.nx_driver_information_rx_buffer_size;
 8005058:	440a      	add	r2, r1
            nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_append_ptr = nx_driver_information.nx_driver_information_receive_packets[idx]->nx_packet_prepend_ptr
 800505a:	60da      	str	r2, [r3, #12]
            /* Is there only one BD for the current frame?  */
            if (idx != first_idx)
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	d069      	beq.n	8005138 <_nx_driver_hardware_packet_received+0x18c>
            {

                /* No, this BD is not the first BD of the frame, frame data starts at the aligned address.  */
                nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_prepend_ptr -= 2;
 8005064:	4a76      	ldr	r2, [pc, #472]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	334c      	adds	r3, #76	; 0x4c
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	4973      	ldr	r1, [pc, #460]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	334c      	adds	r3, #76	; 0x4c
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	3a02      	subs	r2, #2
 8005080:	609a      	str	r2, [r3, #8]

                if (nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_prepend_ptr >= nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_append_ptr)
 8005082:	4a6f      	ldr	r2, [pc, #444]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	334c      	adds	r3, #76	; 0x4c
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	496b      	ldr	r1, [pc, #428]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	334c      	adds	r3, #76	; 0x4c
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d34a      	bcc.n	8005138 <_nx_driver_hardware_packet_received+0x18c>
                {

                    temp_idx = (idx - 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	60fb      	str	r3, [r7, #12]
                    nx_driver_information.nx_driver_information_receive_packets[temp_idx] -> nx_packet_next = NX_NULL;
 80050ac:	4a64      	ldr	r2, [pc, #400]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	334c      	adds	r3, #76	; 0x4c
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	605a      	str	r2, [r3, #4]
                    nx_driver_information.nx_driver_information_receive_packets[temp_idx] -> nx_packet_append_ptr -= nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_prepend_ptr >= nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_append_ptr;
 80050bc:	4a60      	ldr	r2, [pc, #384]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	334c      	adds	r3, #76	; 0x4c
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	68d9      	ldr	r1, [r3, #12]
 80050ca:	4a5d      	ldr	r2, [pc, #372]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	334c      	adds	r3, #76	; 0x4c
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4859      	ldr	r0, [pc, #356]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	334c      	adds	r3, #76	; 0x4c
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4403      	add	r3, r0
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf2c      	ite	cs
 80050ea:	2301      	movcs	r3, #1
 80050ec:	2300      	movcc	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	425a      	negs	r2, r3
 80050f2:	4853      	ldr	r0, [pc, #332]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	334c      	adds	r3, #76	; 0x4c
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4403      	add	r3, r0
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	440a      	add	r2, r1
 8005100:	60da      	str	r2, [r3, #12]
                    nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status = ETH_DMARXDESC_OWN;
 8005102:	4a4f      	ldr	r2, [pc, #316]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3301      	adds	r3, #1
 8005108:	015b      	lsls	r3, r3, #5
 800510a:	4413      	add	r3, r2
 800510c:	3304      	adds	r3, #4
 800510e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005112:	601a      	str	r2, [r3, #0]
                    nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_prepend_ptr = nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_data_start + 2;
 8005114:	4a4a      	ldr	r2, [pc, #296]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	334c      	adds	r3, #76	; 0x4c
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	4947      	ldr	r1, [pc, #284]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	334c      	adds	r3, #76	; 0x4c
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	3202      	adds	r2, #2
 8005130:	609a      	str	r2, [r3, #8]
                    bd_count--;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3b01      	subs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
                }
            }

            /* Allocate new NX_PACKETs for BDs.  */
            for (i = bd_count; i >= 0; i--)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e030      	b.n	80051a0 <_nx_driver_hardware_packet_received+0x1f4>
            {

                temp_idx = (first_idx + i) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4413      	add	r3, r2
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	60fb      	str	r3, [r7, #12]

                /* Allocate a new packet from the packet pool.  */
                if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 800514a:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 800514c:	6898      	ldr	r0, [r3, #8]
 800514e:	1d39      	adds	r1, r7, #4
 8005150:	2300      	movs	r3, #0
 8005152:	2200      	movs	r2, #0
 8005154:	f00c fea6 	bl	8011ea4 <_nxe_packet_allocate>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d124      	bne.n	80051a8 <_nx_driver_hardware_packet_received+0x1fc>
                                          NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
                {

                    /* Adjust the new packet and assign it to the BD.  */
                    packet_ptr -> nx_packet_prepend_ptr += 2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3202      	adds	r2, #2
 8005166:	609a      	str	r2, [r3, #8]
                    nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx].Buffer1Addr = (ULONG)packet_ptr->nx_packet_prepend_ptr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4619      	mov	r1, r3
 800516e:	4a34      	ldr	r2, [pc, #208]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	015b      	lsls	r3, r3, #5
 8005174:	4413      	add	r3, r2
 8005176:	332c      	adds	r3, #44	; 0x2c
 8005178:	6019      	str	r1, [r3, #0]
                    nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx].Status = ETH_DMARXDESC_OWN;
 800517a:	4a31      	ldr	r2, [pc, #196]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3301      	adds	r3, #1
 8005180:	015b      	lsls	r3, r3, #5
 8005182:	4413      	add	r3, r2
 8005184:	3304      	adds	r3, #4
 8005186:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800518a:	601a      	str	r2, [r3, #0]
                    nx_driver_information.nx_driver_information_receive_packets[temp_idx] = packet_ptr;
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	492c      	ldr	r1, [pc, #176]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	334c      	adds	r3, #76	; 0x4c
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	605a      	str	r2, [r3, #4]
            for (i = bd_count; i >= 0; i--)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	3b01      	subs	r3, #1
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	dacb      	bge.n	800513e <_nx_driver_hardware_packet_received+0x192>
 80051a6:	e000      	b.n	80051aa <_nx_driver_hardware_packet_received+0x1fe>
                }
                else
                {

                    /* Allocation failed, get out of the loop.  */
                    break;
 80051a8:	bf00      	nop
                }
            }

            if (i >= 0)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	db2f      	blt.n	8005210 <_nx_driver_hardware_packet_received+0x264>
            {

                /* At least one packet allocation was failed, release the received packet.  */
                nx_packet_release(nx_driver_information.nx_driver_information_receive_packets[temp_idx] -> nx_packet_next);
 80051b0:	4a23      	ldr	r2, [pc, #140]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	334c      	adds	r3, #76	; 0x4c
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	4618      	mov	r0, r3
 80051c0:	f00c fff6 	bl	80121b0 <_nxe_packet_release>

                for (; i >= 0; i--)
 80051c4:	e020      	b.n	8005208 <_nx_driver_hardware_packet_received+0x25c>
                {

                    /* Free up the BD to ready state. */
                    temp_idx = (first_idx + i) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4413      	add	r3, r2
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	60fb      	str	r3, [r7, #12]
                    nx_driver_information.nx_driver_information_dma_rx_descriptors[temp_idx].Status = ETH_DMARXDESC_OWN;
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	015b      	lsls	r3, r3, #5
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051e2:	601a      	str	r2, [r3, #0]
                    nx_driver_information.nx_driver_information_receive_packets[temp_idx] -> nx_packet_prepend_ptr = nx_driver_information.nx_driver_information_receive_packets[temp_idx] -> nx_packet_data_start + 2;
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	334c      	adds	r3, #76	; 0x4c
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	4913      	ldr	r1, [pc, #76]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	334c      	adds	r3, #76	; 0x4c
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	3202      	adds	r2, #2
 8005200:	609a      	str	r2, [r3, #8]
                for (; i >= 0; i--)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	3b01      	subs	r3, #1
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dadb      	bge.n	80051c6 <_nx_driver_hardware_packet_received+0x21a>
 800520e:	e005      	b.n	800521c <_nx_driver_hardware_packet_received+0x270>
            }
            else
            {

                /* Everything is OK, transfer the packet to NetX.  */
                _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69f9      	ldr	r1, [r7, #28]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fb2c 	bl	8004874 <_nx_driver_transfer_to_netx>
            }

            /* Set the first BD index for the next packet.  */
            first_idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	3301      	adds	r3, #1
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	60bb      	str	r3, [r7, #8]

            /* Update the current receive index.  */
            nx_driver_information.nx_driver_information_receive_current_index = first_idx;
 8005226:	4a06      	ldr	r2, [pc, #24]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6153      	str	r3, [r2, #20]

            received_packet_ptr = nx_driver_information.nx_driver_information_receive_packets[first_idx];
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <_nx_driver_hardware_packet_received+0x294>)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	334c      	adds	r3, #76	; 0x4c
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	61fb      	str	r3, [r7, #28]

            bd_count = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e035      	b.n	80052ac <_nx_driver_hardware_packet_received+0x300>
 8005240:	20007d8c 	.word	0x20007d8c
        else
        {

            /* This BD is not the last BD of a frame. It is a intermediate descriptor.  */

            nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_next = nx_driver_information.nx_driver_information_receive_packets[(idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1)];
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	3301      	adds	r3, #1
 8005248:	f003 0103 	and.w	r1, r3, #3
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <_nx_driver_hardware_packet_received+0x350>)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	334c      	adds	r3, #76	; 0x4c
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	4828      	ldr	r0, [pc, #160]	; (80052fc <_nx_driver_hardware_packet_received+0x350>)
 800525a:	f101 034c 	add.w	r3, r1, #76	; 0x4c
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4403      	add	r3, r0
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	6053      	str	r3, [r2, #4]

            nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_append_ptr = nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_data_end;
 8005266:	4a25      	ldr	r2, [pc, #148]	; (80052fc <_nx_driver_hardware_packet_received+0x350>)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	334c      	adds	r3, #76	; 0x4c
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	4922      	ldr	r1, [pc, #136]	; (80052fc <_nx_driver_hardware_packet_received+0x350>)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	334c      	adds	r3, #76	; 0x4c
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	6952      	ldr	r2, [r2, #20]
 8005280:	60da      	str	r2, [r3, #12]

            if (idx != first_idx)
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d00d      	beq.n	80052a6 <_nx_driver_hardware_packet_received+0x2fa>
            {

                nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_prepend_ptr = nx_driver_information.nx_driver_information_receive_packets[idx] -> nx_packet_data_start;
 800528a:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <_nx_driver_hardware_packet_received+0x350>)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	334c      	adds	r3, #76	; 0x4c
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	4919      	ldr	r1, [pc, #100]	; (80052fc <_nx_driver_hardware_packet_received+0x350>)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	334c      	adds	r3, #76	; 0x4c
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	6912      	ldr	r2, [r2, #16]
 80052a4:	609a      	str	r2, [r3, #8]
            }

            bd_count++;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	3301      	adds	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
         idx = (idx + 1) & (NX_DRIVER_RX_DESCRIPTORS - 1))
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	613b      	str	r3, [r7, #16]
        (nx_driver_information.nx_driver_information_dma_rx_descriptors[idx].Status & ETH_DMARXDESC_OWN) == 0;
 80052b6:	4a11      	ldr	r2, [pc, #68]	; (80052fc <_nx_driver_hardware_packet_received+0x350>)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	3301      	adds	r3, #1
 80052bc:	015b      	lsls	r3, r3, #5
 80052be:	4413      	add	r3, r2
 80052c0:	3304      	adds	r3, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
    for (first_idx = idx = nx_driver_information.nx_driver_information_receive_current_index;
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f6bf ae86 	bge.w	8004fd6 <_nx_driver_hardware_packet_received+0x2a>
        }
    }

    /* If Rx DMA is in suspended state, resume it.  */
    if ((ETH->DMASR & ETH_DMASR_RBUS) != (ULONG)RESET)
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <_nx_driver_hardware_packet_received+0x354>)
 80052cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d0:	3314      	adds	r3, #20
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00b      	beq.n	80052f4 <_nx_driver_hardware_packet_received+0x348>
    {

        /* Clear RBUS ETHERNET DMA flag */
        ETH->DMASR = ETH_DMASR_RBUS;
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <_nx_driver_hardware_packet_received+0x354>)
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	3314      	adds	r3, #20
 80052e4:	2280      	movs	r2, #128	; 0x80
 80052e6:	601a      	str	r2, [r3, #0]
        /* Resume DMA reception */
        ETH->DMARPDR = 0;
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <_nx_driver_hardware_packet_received+0x354>)
 80052ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ee:	3308      	adds	r3, #8
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    }

}
 80052f4:	bf00      	nop
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20007d8c 	.word	0x20007d8c
 8005300:	40028000 	.word	0x40028000

08005304 <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_ETH_RxCpltCallback+0x34>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <HAL_ETH_RxCpltCallback+0x34>)
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <HAL_ETH_RxCpltCallback+0x34>)
 8005334:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <HAL_ETH_RxCpltCallback+0x34>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f003 fe7f 	bl	8009044 <_nx_ip_driver_deferred_processing>
  }
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20007d8c 	.word	0x20007d8c

08005354 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_ETH_TxCpltCallback+0x34>)
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_ETH_TxCpltCallback+0x34>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	4a07      	ldr	r2, [pc, #28]	; (8005388 <HAL_ETH_TxCpltCallback+0x34>)
 800536c:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8005374:	4b04      	ldr	r3, [pc, #16]	; (8005388 <HAL_ETH_TxCpltCallback+0x34>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f003 fe63 	bl	8009044 <_nx_ip_driver_deferred_processing>
  }
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20007d8c 	.word	0x20007d8c

0800538c <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8005392:	f04f 33ff 	mov.w	r3, #4294967295
 8005396:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <nx_eth_phy_init+0x3c>)
 800539a:	480c      	ldr	r0, [pc, #48]	; (80053cc <nx_eth_phy_init+0x40>)
 800539c:	f7fc f93d 	bl	800161a <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 80053a0:	480a      	ldr	r0, [pc, #40]	; (80053cc <nx_eth_phy_init+0x40>)
 80053a2:	f7fc f96c 	bl	800167e <LAN8742_Init>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	607b      	str	r3, [r7, #4]
    }

#ifdef STM32_ETH_HAL_LEGACY
    if(eth_handle.Init.AutoNegotiation == ETH_AUTONEGOTIATION_ENABLE)
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <nx_eth_phy_init+0x44>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <nx_eth_phy_init+0x32>
    {
      LAN8742_StartAutoNego(&LAN8742);
 80053b8:	4804      	ldr	r0, [pc, #16]	; (80053cc <nx_eth_phy_init+0x40>)
 80053ba:	f7fc fa08 	bl	80017ce <LAN8742_StartAutoNego>
    }
#endif

    return ret;
 80053be:	687b      	ldr	r3, [r7, #4]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000018 	.word	0x20000018
 80053cc:	20007ed8 	.word	0x20007ed8
 80053d0:	20007f48 	.word	0x20007f48

080053d4 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 80053da:	4804      	ldr	r0, [pc, #16]	; (80053ec <nx_eth_phy_get_link_state+0x18>)
 80053dc:	f7fc fa24 	bl	8001828 <LAN8742_GetLinkState>
 80053e0:	6078      	str	r0, [r7, #4]

    return linkstate;
 80053e2:	687b      	ldr	r3, [r7, #4]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20007ed8 	.word	0x20007ed8

080053f0 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 80053f4:	4802      	ldr	r0, [pc, #8]	; (8005400 <lan8742_io_init+0x10>)
 80053f6:	f7fc ff85 	bl	8002304 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20007f48 	.word	0x20007f48

08005404 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	4807      	ldr	r0, [pc, #28]	; (8005444 <lan8742_io_read_reg+0x30>)
 8005428:	f7fc fd47 	bl	8001eba <HAL_ETH_ReadPHYRegister>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	e000      	b.n	800543a <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20007f48 	.word	0x20007f48

08005448 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	4807      	ldr	r0, [pc, #28]	; (8005478 <lan8742_io_write_reg+0x30>)
 800545c:	f7fc fd94 	bl	8001f88 <HAL_ETH_WritePHYRegister>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	e000      	b.n	800546e <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20007f48 	.word	0x20007f48

0800547c <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005480:	f7fc fb26 	bl	8001ad0 <HAL_GetTick>
 8005484:	4603      	mov	r3, r0
}
 8005486:	4618      	mov	r0, r3
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <_nxe_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (dhcp_ptr == NX_NULL))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <_nxe_dhcp_create+0x22>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <_nxe_dhcp_create+0x3c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d102      	bne.n	80054ae <_nxe_dhcp_create+0x22>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <_nxe_dhcp_create+0x26>
    {
    
        return(NX_PTR_ERROR);
 80054ae:	2307      	movs	r3, #7
 80054b0:	e006      	b.n	80054c0 <_nxe_dhcp_create+0x34>
    }

    /* Call actual DHCP create service.  */
    status =  _nx_dhcp_create(dhcp_ptr, ip_ptr, name_ptr);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f808 	bl	80054cc <_nx_dhcp_create>
 80054bc:	6178      	str	r0, [r7, #20]

    /* Return status.  */
    return(status);
 80054be:	697b      	ldr	r3, [r7, #20]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	49502020 	.word	0x49502020

080054cc <_nx_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	; 0x38
 80054d0:	af08      	add	r7, sp, #32
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
            return (NX_DHCP_INVALID_NAME);
    }
#endif /* NX_DHCP_CLIENT_ENABLE_HOST_NAME_CHECK  */

    /* Initialize the DHCP control block to zero.  */
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 80054d8:	f641 7250 	movw	r2, #8016	; 0x1f50
 80054dc:	2100      	movs	r1, #0
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f011 fb00 	bl	8016ae4 <memset>
    
    /* Save the IP pointer.  */
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	609a      	str	r2, [r3, #8]

    /* Save the DHCP name.  */
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	605a      	str	r2, [r3, #4]
        /* Invalid payload, return error status.  */
        return(NX_DHCP_INVALID_PAYLOAD);
    }

    /* Create the pool and check the status */
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f103 000c 	add.w	r0, r3, #12
                                    dhcp_ptr -> nx_dhcp_pool_area, NX_DHCP_PACKET_POOL_SIZE);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3348      	adds	r3, #72	; 0x48
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 80054fa:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 80054fe:	9200      	str	r2, [sp, #0]
 8005500:	f44f 7214 	mov.w	r2, #592	; 0x250
 8005504:	497e      	ldr	r1, [pc, #504]	; (8005700 <_nx_dhcp_create+0x234>)
 8005506:	f005 fefd 	bl	800b304 <_nx_packet_pool_create>
 800550a:	6178      	str	r0, [r7, #20]

    /* Determine if it was successful.  */
    if (status != NX_SUCCESS)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <_nx_dhcp_create+0x4a>
    {

        /* No, return error status.  */
        return(status);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	e0f0      	b.n	80056f8 <_nx_dhcp_create+0x22c>
    }

    /* Set an internal packet pool pointer to the newly created packet pool. */
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f103 020c 	add.w	r2, r3, #12
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8c3 2bd8 	str.w	r2, [r3, #3032]	; 0xbd8
#endif /* NX_DHCP_CLIENT_SEND_MAX_DHCP_MESSAGE_OPTION  */

#endif /* NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL  */

    /* Create the Socket and check the status */
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f603 31dc 	addw	r1, r3, #3036	; 0xbdc
 8005528:	2304      	movs	r3, #4
 800552a:	9302      	str	r3, [sp, #8]
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	2300      	movs	r3, #0
 8005538:	4a71      	ldr	r2, [pc, #452]	; (8005700 <_nx_dhcp_create+0x234>)
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	f00b fbce 	bl	8010cdc <_nx_udp_socket_create>
 8005540:	6178      	str	r0, [r7, #20]
                                  NX_DHCP_TYPE_OF_SERVICE, NX_DHCP_FRAGMENT_OPTION, NX_DHCP_TIME_TO_LIVE, NX_DHCP_QUEUE_DEPTH);

    /* Was the socket creation successful?  */
    if (status != NX_SUCCESS)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <_nx_dhcp_create+0x8c>
    {

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800554e:	4618      	mov	r0, r3
 8005550:	f005 ffa8 	bl	800b4a4 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	e0cf      	b.n	80056f8 <_nx_dhcp_create+0x22c>
    }


    /* Set the UDP socket receive callback function.  */
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800555e:	4969      	ldr	r1, [pc, #420]	; (8005704 <_nx_dhcp_create+0x238>)
 8005560:	4618      	mov	r0, r3
 8005562:	f00b fe19 	bl	8011198 <_nx_udp_socket_receive_notify>
 8005566:	6178      	str	r0, [r7, #20]

    /* Check status.  */
    if (status != NX_SUCCESS) 
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <_nx_dhcp_create+0xba>
    {


#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8005574:	4618      	mov	r0, r3
 8005576:	f005 ff95 	bl	800b4a4 <_nx_packet_pool_delete>
#endif

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005580:	4618      	mov	r0, r3
 8005582:	f00b fc3b 	bl	8010dfc <_nx_udp_socket_delete>
    }

    /* Create the ThreadX activity timeout timer.  This will be used to periodically check to see if
       a client connection has gone silent and needs to be terminated.  */
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 50eb 	add.w	r0, r3, #7520	; 0x1d60
 800558c:	3004      	adds	r0, #4
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	222c      	movs	r2, #44	; 0x2c
 8005592:	9203      	str	r2, [sp, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	9202      	str	r2, [sp, #8]
 8005598:	2264      	movs	r2, #100	; 0x64
 800559a:	9201      	str	r2, [sp, #4]
 800559c:	2264      	movs	r2, #100	; 0x64
 800559e:	9200      	str	r2, [sp, #0]
 80055a0:	4a59      	ldr	r2, [pc, #356]	; (8005708 <_nx_dhcp_create+0x23c>)
 80055a2:	495a      	ldr	r1, [pc, #360]	; (800570c <_nx_dhcp_create+0x240>)
 80055a4:	f011 f962 	bl	801686c <_txe_timer_create>
 80055a8:	6178      	str	r0, [r7, #20]
                              (NX_DHCP_TIME_INTERVAL), TX_NO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_timer), dhcp_ptr)

    /* Determine if the semaphore creation was successful.  */
    if (status != NX_SUCCESS)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <_nx_dhcp_create+0x100>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80055b6:	4618      	mov	r0, r3
 80055b8:	f00b fc20 	bl	8010dfc <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80055c2:	4618      	mov	r0, r3
 80055c4:	f005 ff6e 	bl	800b4a4 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	e095      	b.n	80056f8 <_nx_dhcp_create+0x22c>
    }

    /* Create the DHCP mutex.  */
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 50e8 	add.w	r0, r3, #7424	; 0x1d00
 80055d2:	3008      	adds	r0, #8
 80055d4:	2334      	movs	r3, #52	; 0x34
 80055d6:	2200      	movs	r2, #0
 80055d8:	4949      	ldr	r1, [pc, #292]	; (8005700 <_nx_dhcp_create+0x234>)
 80055da:	f010 fd6b 	bl	80160b4 <_txe_mutex_create>
 80055de:	6178      	str	r0, [r7, #20]

    /* Determine if the semaphore creation was successful.  */
    if (status != NX_SUCCESS)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d014      	beq.n	8005610 <_nx_dhcp_create+0x144>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80055ec:	4618      	mov	r0, r3
 80055ee:	f00b fc05 	bl	8010dfc <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80055f8:	4618      	mov	r0, r3
 80055fa:	f005 ff53 	bl	800b4a4 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005604:	3304      	adds	r3, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f011 f9dc 	bl	80169c4 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	e073      	b.n	80056f8 <_nx_dhcp_create+0x22c>
    }

    /* Create the DHCP processing thread.  */
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 800561e:	21b4      	movs	r1, #180	; 0xb4
 8005620:	9106      	str	r1, [sp, #24]
 8005622:	2100      	movs	r1, #0
 8005624:	9105      	str	r1, [sp, #20]
 8005626:	2101      	movs	r1, #1
 8005628:	9104      	str	r1, [sp, #16]
 800562a:	2103      	movs	r1, #3
 800562c:	9103      	str	r1, [sp, #12]
 800562e:	2103      	movs	r1, #3
 8005630:	9102      	str	r1, [sp, #8]
 8005632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005636:	9101      	str	r1, [sp, #4]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	4a34      	ldr	r2, [pc, #208]	; (8005710 <_nx_dhcp_create+0x244>)
 800563e:	4930      	ldr	r1, [pc, #192]	; (8005700 <_nx_dhcp_create+0x234>)
 8005640:	f010 ff9e 	bl	8016580 <_txe_thread_create>
 8005644:	6178      	str	r0, [r7, #20]
                                NX_DHCP_THREAD_PRIORITY, NX_DHCP_THREAD_PRIORITY, 1, TX_DONT_START);

    NX_THREAD_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_thread), dhcp_ptr)

    /* Determine if the thread creation was successful.  */
    if (status != NX_SUCCESS)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <_nx_dhcp_create+0x1b8>
    {

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005652:	3308      	adds	r3, #8
 8005654:	4618      	mov	r0, r3
 8005656:	f010 fdcb 	bl	80161f0 <_txe_mutex_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005660:	4618      	mov	r0, r3
 8005662:	f00b fbcb 	bl	8010dfc <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800566c:	4618      	mov	r0, r3
 800566e:	f005 ff19 	bl	800b4a4 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005678:	3304      	adds	r3, #4
 800567a:	4618      	mov	r0, r3
 800567c:	f011 f9a2 	bl	80169c4 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	e039      	b.n	80056f8 <_nx_dhcp_create+0x22c>
    }

    /* Create a DHCP event flag group. .  */
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800568a:	331c      	adds	r3, #28
 800568c:	2228      	movs	r2, #40	; 0x28
 800568e:	4921      	ldr	r1, [pc, #132]	; (8005714 <_nx_dhcp_create+0x248>)
 8005690:	4618      	mov	r0, r3
 8005692:	f010 fbf9 	bl	8015e88 <_txe_event_flags_create>
 8005696:	6178      	str	r0, [r7, #20]

    /* Check for error. */
    if (status != TX_SUCCESS)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d021      	beq.n	80056e2 <_nx_dhcp_create+0x216>
    {

        /* Delete the thread.  */
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 80056a4:	4618      	mov	r0, r3
 80056a6:	f011 f85d 	bl	8016764 <_txe_thread_delete>

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80056b0:	3308      	adds	r3, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f010 fd9c 	bl	80161f0 <_txe_mutex_delete>

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f011 f97f 	bl	80169c4 <_txe_timer_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80056cc:	4618      	mov	r0, r3
 80056ce:	f00b fb95 	bl	8010dfc <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80056d8:	4618      	mov	r0, r3
 80056da:	f005 fee3 	bl	800b4a4 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	e00a      	b.n	80056f8 <_nx_dhcp_create+0x22c>
    }

    /* Update the dhcp structure ID.  */
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a0c      	ldr	r2, [pc, #48]	; (8005718 <_nx_dhcp_create+0x24c>)
 80056e6:	601a      	str	r2, [r3, #0]

    /* Save the DHCP instance.  */
    _nx_dhcp_created_ptr = dhcp_ptr;
 80056e8:	4a0c      	ldr	r2, [pc, #48]	; (800571c <_nx_dhcp_create+0x250>)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6013      	str	r3, [r2, #0]

    /* Default enable DHCP on the primary interface (0).  */
    _nx_dhcp_interface_enable(dhcp_ptr, 0);
 80056ee:	2100      	movs	r1, #0
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fa06 	bl	8005b02 <_nx_dhcp_interface_enable>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	08017e3c 	.word	0x08017e3c
 8005704:	08005c41 	.word	0x08005c41
 8005708:	08005c69 	.word	0x08005c69
 800570c:	08017e50 	.word	0x08017e50
 8005710:	08005c8f 	.word	0x08005c8f
 8005714:	08017e64 	.word	0x08017e64
 8005718:	44484350 	.word	0x44484350
 800571c:	20007ef8 	.word	0x20007ef8

08005720 <_nx_dhcp_interface_reinitialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_reinitialize(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]

UINT                      status;
ULONG                     ip_address;
ULONG                     network_mask;
ULONG                     gateway_address;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]

  
    /* Obtain DHCP Client protection mutex. */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005734:	3308      	adds	r3, #8
 8005736:	f04f 31ff 	mov.w	r1, #4294967295
 800573a:	4618      	mov	r0, r3
 800573c:	f010 fd96 	bl	801626c <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8005740:	f107 030c 	add.w	r3, r7, #12
 8005744:	461a      	mov	r2, r3
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 fe6c 	bl	8007426 <_nx_dhcp_interface_record_find>
 800574e:	61f8      	str	r0, [r7, #28]

    /* Check status.  */
    if (status)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <_nx_dhcp_interface_reinitialize+0x48>
    {

        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 800575c:	3308      	adds	r3, #8
 800575e:	4618      	mov	r0, r3
 8005760:	f010 fdde 	bl	8016320 <_txe_mutex_put>
        return(status);
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	e063      	b.n	8005830 <_nx_dhcp_interface_reinitialize+0x110>
    }

    /* Check if have IP address.  */
    if (interface_record -> nx_dhcp_ip_address)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <_nx_dhcp_interface_reinitialize+0x82>
    {

        /* Get the IP address.  */
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6898      	ldr	r0, [r3, #8]
 8005774:	f107 0314 	add.w	r3, r7, #20
 8005778:	f107 0218 	add.w	r2, r7, #24
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	f004 f871 	bl	8009864 <_nx_ip_interface_address_get>
 8005782:	61f8      	str	r0, [r7, #28]

        /* Check if the IP address is set by DHCP.  */
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <_nx_dhcp_interface_reinitialize+0x82>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	d106      	bne.n	80057a2 <_nx_dhcp_interface_reinitialize+0x82>
        {

            /* Clear the IP address.  */
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6898      	ldr	r0, [r3, #8]
 8005798:	2300      	movs	r3, #0
 800579a:	2200      	movs	r2, #0
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	f004 f8a1 	bl	80098e4 <_nx_ip_interface_address_set>
        }
    }

    /* Check if have gateway address.  */
    if (interface_record -> nx_dhcp_gateway_address)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d015      	beq.n	80057d6 <_nx_dhcp_interface_reinitialize+0xb6>
    {

        /* Get the gateway address.  */
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f107 0210 	add.w	r2, r7, #16
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f003 fee0 	bl	800957a <_nx_ip_gateway_address_get>
 80057ba:	61f8      	str	r0, [r7, #28]

        /* Check status.  */
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <_nx_dhcp_interface_reinitialize+0xb6>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d104      	bne.n	80057d6 <_nx_dhcp_interface_reinitialize+0xb6>
        {

            /* Clear the Gateway/Router IP address.  */
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f003 fea7 	bl	8009524 <_nx_ip_gateway_address_clear>
        }
    }

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS; 
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	615a      	str	r2, [r3, #20]

    /* Clear these DHCP Client network values too.*/
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	611a      	str	r2, [r3, #16]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	619a      	str	r2, [r3, #24]

    /* Clear the flag to skip the discovery step. The host application must
       call the nx_dhcp_request_ip_address to reset the flag and the requested IP address. */
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
                                                             
    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f04f 32ff 	mov.w	r2, #4294967295
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset the seconds field for starting the DHCP request process. */
    interface_record -> nx_dhcp_seconds = 0;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]

    /* Reset the timeout and retransmission interval.  */
    interface_record -> nx_dhcp_timeout = 0;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DHCP state to the initial state.  */
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	705a      	strb	r2, [r3, #1]

    /* Release the mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005826:	3308      	adds	r3, #8
 8005828:	4618      	mov	r0, r3
 800582a:	f010 fd79 	bl	8016320 <_txe_mutex_put>
    return NX_SUCCESS;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <_nxe_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_start(NX_DHCP *dhcp_ptr)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <_nxe_dhcp_start+0x18>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a11      	ldr	r2, [pc, #68]	; (8005890 <_nxe_dhcp_start+0x58>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d001      	beq.n	8005854 <_nxe_dhcp_start+0x1c>
        return(NX_PTR_ERROR);
 8005850:	2307      	movs	r3, #7
 8005852:	e018      	b.n	8005886 <_nxe_dhcp_start+0x4e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005854:	f3ef 8305 	mrs	r3, IPSR
 8005858:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800585a:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <_nxe_dhcp_start+0x5c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d108      	bne.n	8005878 <_nxe_dhcp_start+0x40>
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <_nxe_dhcp_start+0x60>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <_nxe_dhcp_start+0x40>
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <_nxe_dhcp_start+0x60>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <_nxe_dhcp_start+0x64>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <_nxe_dhcp_start+0x44>
 8005878:	2311      	movs	r3, #17
 800587a:	e004      	b.n	8005886 <_nxe_dhcp_start+0x4e>

    /* Call actual DHCP start service.  */
    status =  _nx_dhcp_start(dhcp_ptr);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f80f 	bl	80058a0 <_nx_dhcp_start>
 8005882:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 8005884:	68fb      	ldr	r3, [r7, #12]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	44484350 	.word	0x44484350
 8005894:	20000094 	.word	0x20000094
 8005898:	2000aaf8 	.word	0x2000aaf8
 800589c:	2000ab98 	.word	0x2000ab98

080058a0 <_nx_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_start(NX_DHCP *dhcp_ptr)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]

UINT    status;
UINT    interfaces_started = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
UINT    i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80058b2:	3308      	adds	r3, #8
 80058b4:	f04f 31ff 	mov.w	r1, #4294967295
 80058b8:	4618      	mov	r0, r3
 80058ba:	f010 fcd7 	bl	801626c <_txe_mutex_get>

    /* Check all interfaces to find out which need to start the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	e028      	b.n	8005916 <_nx_dhcp_start+0x76>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 80058d6:	3310      	adds	r3, #16
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d118      	bne.n	8005910 <_nx_dhcp_start+0x70>
        {

            /* Start DHCP on this interface.   */
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 53ed 	add.w	r3, r3, #7584	; 0x1da0
 80058f0:	330c      	adds	r3, #12
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f828 	bl	800594c <_nx_dhcp_interface_start>
 80058fc:	60f8      	str	r0, [r7, #12]
             /* Note, not all interfaces are enabled to run, so
                status may not be successful. Skip to the next
                interface. */

             /* Check status.  */
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <_nx_dhcp_start+0x6a>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b93      	cmp	r3, #147	; 0x93
 8005908:	d102      	bne.n	8005910 <_nx_dhcp_start+0x70>
             {
                 interfaces_started++;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	3301      	adds	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3301      	adds	r3, #1
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0d3      	beq.n	80058c4 <_nx_dhcp_start+0x24>
             }
        }
    }

    /* Check if any interfaces started DHCP. */
    if (interfaces_started == 0) 
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <_nx_dhcp_start+0x94>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005928:	3308      	adds	r3, #8
 800592a:	4618      	mov	r0, r3
 800592c:	f010 fcf8 	bl	8016320 <_txe_mutex_put>

        /* Unable to start any interfaces. */
        return NX_DHCP_NO_INTERFACES_STARTED;
 8005930:	23a6      	movs	r3, #166	; 0xa6
 8005932:	e007      	b.n	8005944 <_nx_dhcp_start+0xa4>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 800593a:	3308      	adds	r3, #8
 800593c:	4618      	mov	r0, r3
 800593e:	f010 fcef 	bl	8016320 <_txe_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);  
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <_nx_dhcp_interface_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_start(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]

UINT    i;
UINT    status;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]

    
    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005960:	3308      	adds	r3, #8
 8005962:	f04f 31ff 	mov.w	r1, #4294967295
 8005966:	4618      	mov	r0, r3
 8005968:	f010 fc80 	bl	801626c <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	461a      	mov	r2, r3
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fd56 	bl	8007426 <_nx_dhcp_interface_record_find>
 800597a:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <_nx_dhcp_interface_start+0x48>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005988:	3308      	adds	r3, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f010 fcc8 	bl	8016320 <_txe_mutex_put>

        return(status);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	e0b2      	b.n	8005afa <_nx_dhcp_interface_start+0x1ae>
    }

    /* Check if DHCP is already started.  */
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <_nx_dhcp_interface_start+0x62>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80059a2:	3308      	adds	r3, #8
 80059a4:	4618      	mov	r0, r3
 80059a6:	f010 fcbb 	bl	8016320 <_txe_mutex_put>
        return(NX_DHCP_ALREADY_STARTED); 
 80059aa:	2393      	movs	r3, #147	; 0x93
 80059ac:	e0a5      	b.n	8005afa <_nx_dhcp_interface_start+0x1ae>
    }
                                   
    /* Check if other interface are working.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e01c      	b.n	80059ee <_nx_dhcp_interface_start+0xa2>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 80059c6:	3310      	adds	r3, #16
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00c      	beq.n	80059e8 <_nx_dhcp_interface_start+0x9c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 80059e0:	3311      	adds	r3, #17
 80059e2:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <_nx_dhcp_interface_start+0xaa>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	3301      	adds	r3, #1
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0df      	beq.n	80059b4 <_nx_dhcp_interface_start+0x68>
 80059f4:	e000      	b.n	80059f8 <_nx_dhcp_interface_start+0xac>
        {

            /* Yes, other interface have started DHCP.  */
            break;
 80059f6:	bf00      	nop
        }
    }

    /* Check if any interfaces have started DHCP.  */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d14b      	bne.n	8005a96 <_nx_dhcp_interface_start+0x14a>
    {

        /* Bind the UDP socket to the DHCP Client port.  */
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	2144      	movs	r1, #68	; 0x44
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f00b f83c 	bl	8010a88 <_nx_udp_socket_bind>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Check for error */
        if (status != NX_SUCCESS)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <_nx_dhcp_interface_start+0xde>
        {

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005a1e:	3308      	adds	r3, #8
 8005a20:	4618      	mov	r0, r3
 8005a22:	f010 fc7d 	bl	8016320 <_txe_mutex_put>
            return(status);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	e067      	b.n	8005afa <_nx_dhcp_interface_start+0x1ae>
        }

        /* Resume the DHCP processing thread.  */
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8005a30:	4618      	mov	r0, r3
 8005a32:	f010 fedf 	bl	80167f4 <_txe_thread_resume>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d011      	beq.n	8005a62 <_nx_dhcp_interface_start+0x116>
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b19      	cmp	r3, #25
 8005a42:	d00e      	beq.n	8005a62 <_nx_dhcp_interface_start+0x116>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f00b fbfc 	bl	8011248 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005a56:	3308      	adds	r3, #8
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f010 fc61 	bl	8016320 <_txe_mutex_put>
            return(status);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	e04b      	b.n	8005afa <_nx_dhcp_interface_start+0x1ae>
        }

        /* Activate DHCP Timer.  */
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f010 fee0 	bl	8016830 <_txe_timer_activate>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if (status != NX_SUCCESS)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00e      	beq.n	8005a96 <_nx_dhcp_interface_start+0x14a>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f00b fbe2 	bl	8011248 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f010 fc47 	bl	8016320 <_txe_mutex_put>
            return(status);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	e031      	b.n	8005afa <_nx_dhcp_interface_start+0x1ae>
        }
    }

    /* Start DHCP service for this interface record.  */
    /* Start the DHCP protocol again by setting the state back to INIT. */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	705a      	strb	r2, [r3, #1]
    /* The client begins in INIT state and forms a DHCPDISCOVER message.
       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
       RFC2131, Section4.4.1, Page36.  */

    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2264      	movs	r2, #100	; 0x64
 8005aa0:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the application has specified a routine for DHCP state change notification.  */
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <_nx_dhcp_interface_start+0x17a>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	7852      	ldrb	r2, [r2, #1]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
    }

    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8005acc:	3304      	adds	r3, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <_nx_dhcp_interface_start+0x19e>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8005ada:	3304      	adds	r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	69d1      	ldr	r1, [r2, #28]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	7852      	ldrb	r2, [r2, #1]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005af0:	3308      	adds	r3, #8
 8005af2:	4618      	mov	r0, r3
 8005af4:	f010 fc14 	bl	8016320 <_txe_mutex_put>

    return NX_SUCCESS;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <_nx_dhcp_interface_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_enable(NX_DHCP *dhcp_ptr, UINT iface_index)   
{
 8005b02:	b590      	push	{r4, r7, lr}
 8005b04:	b087      	sub	sp, #28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
UINT                      i;
ULONG                     client_physical_lsw, client_physical_msw;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005b16:	3308      	adds	r3, #8
 8005b18:	f04f 31ff 	mov.w	r1, #4294967295
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f010 fba5 	bl	801626c <_txe_mutex_get>

    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e034      	b.n	8005b92 <_nx_dhcp_interface_enable+0x90>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005b3a:	3310      	adds	r3, #16
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d116      	bne.n	8005b70 <_nx_dhcp_interface_enable+0x6e>
        {

            /* Check if the interface is already enabled. */
            if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 53ed 	add.w	r3, r3, #7584	; 0x1da0
 8005b54:	330c      	adds	r3, #12
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d116      	bne.n	8005b8c <_nx_dhcp_interface_enable+0x8a>
            {

                /* Release the DHCP mutex.  */
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005b64:	3308      	adds	r3, #8
 8005b66:	4618      	mov	r0, r3
 8005b68:	f010 fbda 	bl	8016320 <_txe_mutex_put>
                 return(NX_DHCP_INTERFACE_ALREADY_ENABLED);
 8005b6c:	23a3      	movs	r3, #163	; 0xa3
 8005b6e:	e063      	b.n	8005c38 <_nx_dhcp_interface_enable+0x136>
        }
        else
        {

            /* Yes, we found an available record.  */
            if (interface_record == NX_NULL)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <_nx_dhcp_interface_enable+0x8a>
                interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8005b84:	3310      	adds	r3, #16
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0c7      	beq.n	8005b28 <_nx_dhcp_interface_enable+0x26>
        }
    }

    /* Check if we found an valid DHCP interface record.  */
    if (interface_record == NX_NULL)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <_nx_dhcp_interface_enable+0xae>
    {

        /* No, release the mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f010 fbba 	bl	8016320 <_txe_mutex_put>
        return(NX_DHCP_NO_RECORDS_AVAILABLE);
 8005bac:	23a7      	movs	r3, #167	; 0xa7
 8005bae:	e043      	b.n	8005c38 <_nx_dhcp_interface_enable+0x136>
    }

    /* Set this record as valid.  */
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]

    /* Set interface index. */  
    interface_record -> nx_dhcp_interface_index = iface_index;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	61da      	str	r2, [r3, #28]

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	615a      	str	r2, [r3, #20]

    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Get the client MAC address from the device interface. */
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	440b      	add	r3, r1
 8005bec:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]
    client_physical_lsw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6899      	ldr	r1, [r3, #8]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	440b      	add	r3, r1
 8005c04:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60bb      	str	r3, [r7, #8]

    /* Generate a 'unique' client transaction ID from the MAC address for each message to the server. */
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	ea82 0403 	eor.w	r4, r2, r3
 8005c14:	f010 fffc 	bl	8016c10 <rand>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	ea84 0203 	eor.w	r2, r4, r3
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]

    /* Clear the timeout.  */
    interface_record -> nx_dhcp_timeout = 0;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2200      	movs	r2, #0
 8005c26:	621a      	str	r2, [r3, #32]

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005c2e:	3308      	adds	r3, #8
 8005c30:	4618      	mov	r0, r3
 8005c32:	f010 fb75 	bl	8016320 <_txe_mutex_put>
    return(NX_SUCCESS); 
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd90      	pop	{r4, r7, pc}

08005c40 <_nx_dhcp_udp_receive_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_udp_receive_notify(NX_UDP_SOCKET *socket_ptr)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

    NX_PARAMETER_NOT_USED(socket_ptr);

    /* Set the data received event flag.  */
    tx_event_flags_set(&(_nx_dhcp_created_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <_nx_dhcp_udp_receive_notify+0x24>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005c50:	331c      	adds	r3, #28
 8005c52:	2200      	movs	r2, #0
 8005c54:	2101      	movs	r1, #1
 8005c56:	4618      	mov	r0, r3
 8005c58:	f010 f9fe 	bl	8016058 <_txe_event_flags_set>
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20007ef8 	.word	0x20007ef8

08005c68 <_nx_dhcp_timeout_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_entry(ULONG dhcp)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

NX_DHCP     *dhcp_ptr;


    /* Setup DHCP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60fb      	str	r3, [r7, #12]

    /* Set the data event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8005c7a:	331c      	adds	r3, #28
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f010 f9e9 	bl	8016058 <_txe_event_flags_set>
}
 8005c86:	bf00      	nop
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <_nx_dhcp_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_thread_entry(ULONG dhcp_instance)
{
 8005c8e:	b590      	push	{r4, r7, lr}
 8005c90:	b08f      	sub	sp, #60	; 0x3c
 8005c92:	af02      	add	r7, sp, #8
 8005c94:	6078      	str	r0, [r7, #4]
UINT                      status;
UINT                      iface_index;
UINT                      source_port;
ULONG                     source_ip_address;
UINT                      protocol;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]

    /* Setup the DHCP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp_instance)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Obtain the DHCP mutex before processing an.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8005caa:	4618      	mov	r0, r3
 8005cac:	f010 fade 	bl	801626c <_txe_mutex_get>
    /* Enter the DHCP Client task loop.  */
    do
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f010 fb31 	bl	8016320 <_txe_mutex_put>

        /* Wait for a DHCP client activity.  */
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	f503 50e9 	add.w	r0, r3, #7456	; 0x1d20
 8005cc4:	301c      	adds	r0, #28
 8005cc6:	f107 0320 	add.w	r3, r7, #32
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	9200      	str	r2, [sp, #0]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8005cd6:	f010 f969 	bl	8015fac <_txe_event_flags_get>
                           TX_OR_CLEAR, &events, TX_WAIT_FOREVER);

        /* Obtain the DHCP mutex before processing an.  */
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f010 fac0 	bl	801626c <_txe_mutex_get>

        /* Check for DHCP data received event.  */
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d03a      	beq.n	8005d6c <_nx_dhcp_thread_entry+0xde>
            /* Loop to receive DHCP message.  */
            while(1)
            {

                /* Check for an incoming DHCP packet with non blocking option. */
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005cfc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005d00:	2200      	movs	r2, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f00b f8da 	bl	8010ebc <_nx_udp_socket_receive>
 8005d08:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check for packet receive errors. */
                if (status != NX_SUCCESS)
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d12c      	bne.n	8005d6a <_nx_dhcp_thread_entry+0xdc>
                {
                    break;
                }

                /* Find the source IP address, port, interface this packet is on. */
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 8005d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d12:	f107 0418 	add.w	r4, r7, #24
 8005d16:	f107 0210 	add.w	r2, r7, #16
 8005d1a:	f107 0114 	add.w	r1, r7, #20
 8005d1e:	f107 031c 	add.w	r3, r7, #28
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4623      	mov	r3, r4
 8005d26:	f00a fc30 	bl	801058a <_nx_udp_packet_info_extract>
 8005d2a:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS) 
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <_nx_dhcp_thread_entry+0xae>
                {

                    nx_packet_release(packet_ptr); 
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	4618      	mov	r0, r3
 8005d36:	f005 fc3f 	bl	800b5b8 <_nx_packet_release>
                    continue;
 8005d3a:	e015      	b.n	8005d68 <_nx_dhcp_thread_entry+0xda>
                }

                /* Find the interface record.  */
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f107 020c 	add.w	r2, r7, #12
 8005d42:	4619      	mov	r1, r3
 8005d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d46:	f001 fb6e 	bl	8007426 <_nx_dhcp_interface_record_find>
 8005d4a:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS)
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <_nx_dhcp_thread_entry+0xce>
                {

                    /* Release the original packet . */
                    nx_packet_release(packet_ptr);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	4618      	mov	r0, r3
 8005d56:	f005 fc2f 	bl	800b5b8 <_nx_packet_release>
                    continue;
 8005d5a:	e005      	b.n	8005d68 <_nx_dhcp_thread_entry+0xda>
                }
                
                /* Process DHCP packet.  */
                _nx_dhcp_packet_process(dhcp_ptr, interface_record, packet_ptr);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	4619      	mov	r1, r3
 8005d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d64:	f000 f80c 	bl	8005d80 <_nx_dhcp_packet_process>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8005d68:	e7c5      	b.n	8005cf6 <_nx_dhcp_thread_entry+0x68>
                    break;
 8005d6a:	bf00      	nop
            }
        }

        /* Timer event.  */
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d09c      	beq.n	8005cb0 <_nx_dhcp_thread_entry+0x22>
        {
            _nx_dhcp_timeout_process(dhcp_ptr);
 8005d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d78:	f000 fa64 	bl	8006244 <_nx_dhcp_timeout_process>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005d7c:	e798      	b.n	8005cb0 <_nx_dhcp_thread_entry+0x22>
	...

08005d80 <_nx_dhcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_dhcp_packet_process(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, NX_PACKET *packet_ptr)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b094      	sub	sp, #80	; 0x50
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
#ifdef NX_DHCP_CLIENT_SEND_ARP_PROBE
ULONG       probing_delay;
#endif

    /* Set the IP pointer and interface index.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
    iface_index = interface_record -> nx_dhcp_interface_index;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2bf0      	cmp	r3, #240	; 0xf0
 8005d9e:	d803      	bhi.n	8005da8 <_nx_dhcp_packet_process+0x28>
    {

        /* Release the packet. */
        nx_packet_release(packet_ptr);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f005 fc09 	bl	800b5b8 <_nx_packet_release>

        /* Return.  */
        return;
 8005da6:	e24a      	b.n	800623e <_nx_dhcp_packet_process+0x4be>
    }

    /* Copy the received packet (datagram) over to a packet from the DHCP Client pool and release
       the packet back to receive packet pool as soon as possible. */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 8005dae:	f107 0118 	add.w	r1, r7, #24
 8005db2:	2300      	movs	r3, #0
 8005db4:	222c      	movs	r2, #44	; 0x2c
 8005db6:	f004 ff6b 	bl	800ac90 <_nx_packet_allocate>
 8005dba:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if (status != NX_SUCCESS)
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <_nx_dhcp_packet_process+0x4a>
    {

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f005 fbf8 	bl	800b5b8 <_nx_packet_release>

        /* Error allocating packet, return error status.  */
        return;
 8005dc8:	e239      	b.n	800623e <_nx_dhcp_packet_process+0x4be>
    }

    /* Verify the incoming packet does not exceed our DHCP Client packet payload. */
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d207      	bcs.n	8005dee <_nx_dhcp_packet_process+0x6e>
    {

        /* Release the newly allocated packet . */
        nx_packet_release(new_packet_ptr);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f005 fbe9 	bl	800b5b8 <_nx_packet_release>
        
        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f005 fbe6 	bl	800b5b8 <_nx_packet_release>

        return;
 8005dec:	e227      	b.n	800623e <_nx_dhcp_packet_process+0x4be>
    }

    /* Initialize the offset to the beginning of the packet buffer. */
    offset = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005dfa:	f107 0310 	add.w	r3, r7, #16
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	460b      	mov	r3, r1
 8005e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f005 f95e 	bl	800b0c6 <_nx_packet_data_extract_offset>
 8005e0a:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <_nx_dhcp_packet_process+0x98>
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d107      	bne.n	8005e28 <_nx_dhcp_packet_process+0xa8>
    {

        /* Release the allocated packet we'll never send. */
        nx_packet_release(new_packet_ptr);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f005 fbcc 	bl	800b5b8 <_nx_packet_release>

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f005 fbc9 	bl	800b5b8 <_nx_packet_release>

        /* Error extracting packet buffer, return error status.  */
        return;
 8005e26:	e20a      	b.n	800623e <_nx_dhcp_packet_process+0x4be>
    }

    /* Update the new packet with the bytes copied.  For chained packets, this will reflect the total
       'datagram' length. */
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24


    /* Now we can release the original packet. */
    nx_packet_release(packet_ptr);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f005 fbc2 	bl	800b5b8 <_nx_packet_release>

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8005e34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	440b      	add	r3, r1
 8005e42:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8005e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	440b      	add	r3, r1
 8005e58:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Set work_ptr.  */
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	331c      	adds	r3, #28
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the target MAC address in the DHCP message.  */
    packet_client_mac_msw = (((ULONG)work_ptr[0]) << 8) | ((ULONG)work_ptr[1]);
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e70:	3201      	adds	r2, #1
 8005e72:	7812      	ldrb	r2, [r2, #0]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	061a      	lsls	r2, r3, #24
                            (((ULONG)work_ptr[3]) << 16) |
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	3303      	adds	r3, #3
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	041b      	lsls	r3, r3, #16
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8005e88:	431a      	orrs	r2, r3
                            (((ULONG)work_ptr[4]) << 8) |
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
                            (((ULONG)work_ptr[3]) << 16) |
 8005e92:	4313      	orrs	r3, r2
                            ((ULONG)work_ptr[5]);
 8005e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e96:	3205      	adds	r2, #5
 8005e98:	7812      	ldrb	r2, [r2, #0]
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Determine if the  MAC address matches ours.  */
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 8005e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d103      	bne.n	8005eae <_nx_dhcp_packet_process+0x12e>
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d004      	beq.n	8005eb8 <_nx_dhcp_packet_process+0x138>
    {

        /* Release the allocated packet. */
        nx_packet_release(new_packet_ptr);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f005 fb81 	bl	800b5b8 <_nx_packet_release>
        return;
 8005eb6:	e1c2      	b.n	800623e <_nx_dhcp_packet_process+0x4be>
    }

    /* Check if XIDs match.  */
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fa41 	bl	8007348 <_nx_dhcp_get_data>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d004      	beq.n	8005eda <_nx_dhcp_packet_process+0x15a>
    {

        /* Release the original packet . */
        nx_packet_release(new_packet_ptr);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f005 fb70 	bl	800b5b8 <_nx_packet_release>

        /* Error with XID data, return error status.  */
        return;
 8005ed8:	e1b1      	b.n	800623e <_nx_dhcp_packet_process+0x4be>
    }

    /* Save the original state for the state change callback; after this point we will likely change it. */                          
    original_state  = interface_record -> nx_dhcp_state;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	623b      	str	r3, [r7, #32]

    /* The action depends on the current state of the dhcp client. */
    switch (interface_record -> nx_dhcp_state)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	3b03      	subs	r3, #3
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	f200 816c 	bhi.w	80061c4 <_nx_dhcp_packet_process+0x444>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <_nx_dhcp_packet_process+0x174>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f09 	.word	0x08005f09
 8005ef8:	08005f95 	.word	0x08005f95
 8005efc:	080061c5 	.word	0x080061c5
 8005f00:	0800605d 	.word	0x0800605d
 8005f04:	08006113 	.word	0x08006113

        case NX_DHCP_STATE_SELECTING:
        {
    
            /* Set up a buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	61fb      	str	r3, [r7, #28]

            /* Get what type of DHCP message it is. */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	f107 0214 	add.w	r2, r7, #20
 8005f16:	2135      	movs	r1, #53	; 0x35
 8005f18:	69f8      	ldr	r0, [r7, #28]
 8005f1a:	f001 f8c0 	bl	800709e <_nx_dhcp_get_option_value>
 8005f1e:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Determine if it is an Offer.  */        
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 8005f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 8150 	bne.w	80061c8 <_nx_dhcp_packet_process+0x448>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	f040 814c 	bne.w	80061c8 <_nx_dhcp_packet_process+0x448>
            {

                /* Yes, a valid Offer is received!  */

                /* Increment the number of offers received.  */
                interface_record -> nx_dhcp_offers_received++;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

                /* Update the DHCP Client interface parameters (IP address, server IP, lease, renewal and rebind times */
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 ff89 	bl	8006e5e <_nx_dhcp_extract_information>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 813c 	bne.w	80061cc <_nx_dhcp_packet_process+0x44c>
                    break;

                /* Send the DHCP Request to accept the offer.  */
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8005f54:	2203      	movs	r2, #3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fb25 	bl	80065a8 <_nx_dhcp_send_request_internal>

                /* Reset the initial timeout to NX_DHCP_MIN_RETRANS_TIMEOUT seconds  */
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	621a      	str	r2, [r3, #32]

                /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f93c 	bl	80071f0 <_nx_dhcp_add_randomize>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	621a      	str	r2, [r3, #32]

                /* Check if the timeout is zero.  */
                if (interface_record -> nx_dhcp_timeout == 0)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <_nx_dhcp_packet_process+0x20c>
                    interface_record -> nx_dhcp_timeout = 1;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	621a      	str	r2, [r3, #32]

                /* Update the state to Requesting state.  */
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	705a      	strb	r2, [r3, #1]
           }

           /* Let the timeout processing handle retransmissions. We're done here */
           break;
 8005f92:	e119      	b.n	80061c8 <_nx_dhcp_packet_process+0x448>
            /* Also initialize status to success since we won't make the get option call. */               
            status = NX_SUCCESS;
#endif

            /* Setup buffer pointer.  */
            buffer = new_packet_ptr -> nx_packet_prepend_ptr;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	61fb      	str	r3, [r7, #28]

#ifndef NX_DHCP_ENABLE_BOOTP
            /* There is a valid DHCP response, see if it is an ACK.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	f107 0214 	add.w	r2, r7, #20
 8005fa2:	2135      	movs	r1, #53	; 0x35
 8005fa4:	69f8      	ldr	r0, [r7, #28]
 8005fa6:	f001 f87a 	bl	800709e <_nx_dhcp_get_option_value>
 8005faa:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
            /* Proceed to processing the server response?   */
            if (status == NX_SUCCESS)
 8005fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 810e 	bne.w	80061d0 <_nx_dhcp_packet_process+0x450>
            {

                /* Yes, check and see if it is an ACK back to our previous request.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d12d      	bne.n	8006016 <_nx_dhcp_packet_process+0x296>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Either we got an ACK or we are using BOOTP.  */

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 ff44 	bl	8006e5e <_nx_dhcp_extract_information>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 80fb 	bne.w	80061d4 <_nx_dhcp_packet_process+0x454>
                    /* Setup the handler to indicate the we want collision notification.  */
                    ip_ptr -> nx_ip_interface[iface_index].nx_interface_ip_conflict_notify_handler = _nx_dhcp_ip_conflict;

#else    /* NX_DHCP_CLIENT_SEND_ARP_PROBE not defined: */

                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fe8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005fea:	f003 fc7b 	bl	80098e4 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <_nx_dhcp_packet_process+0x286>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	4619      	mov	r1, r3
 8006000:	4610      	mov	r0, r2
 8006002:	f003 fade 	bl	80095c2 <_nx_ip_gateway_address_set>
                    }

                    /* No ARP probe performed. OK to change to the Bound state.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2205      	movs	r2, #5
 800600a:	705a      	strb	r2, [r3, #1]
#ifdef NX_DHCP_ENABLE_BOOTP
                    /* BOOTP does not use timeouts.  For the life of this DHCP Client application, keep the same IP address. */
                    interface_record -> nx_dhcp_timeout = NX_WAIT_FOREVER; 
#else
                    /* Set the renewal time received from the server.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	621a      	str	r2, [r3, #32]
#endif /* NX_DHCP_ENABLE_BOOTP  */

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE*/

                    break;
 8006014:	e0e7      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
                }
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b06      	cmp	r3, #6
 800601a:	f040 80d9 	bne.w	80061d0 <_nx_dhcp_packet_process+0x450>
                {
                                                 
                    /* Increment the number of NACKs received.  */
                    interface_record -> nx_dhcp_nacks_received++;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

                    /* Reinitialize DHCP.  */
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	4619      	mov	r1, r3
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff fb74 	bl	8005720 <_nx_dhcp_interface_reinitialize>

                    /* Restart DHCP service for this interface record.  */

                    /* Start the DHCP protocol again by setting the state back to INIT. */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2202      	movs	r2, #2
 800603c:	705a      	strb	r2, [r3, #1]
                    /* The client begins in INIT state and forms a DHCPDISCOVER message.
                       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                       RFC2131, Section4.4.1, Page36.  */

                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2264      	movs	r2, #100	; 0x64
 8006042:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2200      	movs	r2, #0
 8006048:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Check if the timeout is less than 1 second.  */
                    if (interface_record -> nx_dhcp_timeout < NX_IP_PERIODIC_RATE)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	2b63      	cmp	r3, #99	; 0x63
 8006050:	f200 80be 	bhi.w	80061d0 <_nx_dhcp_packet_process+0x450>
                        interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2264      	movs	r2, #100	; 0x64
 8006058:	621a      	str	r2, [r3, #32]
                }
            }
            break;
 800605a:	e0b9      	b.n	80061d0 <_nx_dhcp_packet_process+0x450>

        case NX_DHCP_STATE_RENEWING:
        {

            /* Setup the buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	61fb      	str	r3, [r7, #28]

            /* Check the server response if it accepts are renewal.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f107 0214 	add.w	r2, r7, #20
 800606a:	2135      	movs	r1, #53	; 0x35
 800606c:	69f8      	ldr	r0, [r7, #28]
 800606e:	f001 f816 	bl	800709e <_nx_dhcp_get_option_value>
 8006072:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Was the option retrieved?  */
            if (status == NX_SUCCESS)
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 80ae 	bne.w	80061d8 <_nx_dhcp_packet_process+0x458>
            {

                /* Yes, Check for an ACK.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b05      	cmp	r3, #5
 8006080:	d12d      	bne.n	80060de <_nx_dhcp_packet_process+0x35e>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 fee0 	bl	8006e5e <_nx_dhcp_extract_information>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 809b 	bne.w	80061dc <_nx_dhcp_packet_process+0x45c>
                        break;
                    
                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80060b2:	f003 fc17 	bl	80098e4 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <_nx_dhcp_packet_process+0x34e>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f003 fa7a 	bl	80095c2 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state*/
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	621a      	str	r2, [r3, #32]

                    /* Change the state back to bound.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2205      	movs	r2, #5
 80060da:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 80060dc:	e07c      	b.n	80061d8 <_nx_dhcp_packet_process+0x458>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b06      	cmp	r3, #6
 80060e2:	d179      	bne.n	80061d8 <_nx_dhcp_packet_process+0x458>
                    interface_record -> nx_dhcp_nacks_received++;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	4619      	mov	r1, r3
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff fb11 	bl	8005720 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2202      	movs	r2, #2
 8006102:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2264      	movs	r2, #100	; 0x64
 8006108:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8006110:	e062      	b.n	80061d8 <_nx_dhcp_packet_process+0x458>

        case NX_DHCP_STATE_REBINDING:
        {

            /* Setup buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	61fb      	str	r3, [r7, #28]

            /* There is a valid DHCP response, pickup the type of response.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	f107 0214 	add.w	r2, r7, #20
 8006120:	2135      	movs	r1, #53	; 0x35
 8006122:	69f8      	ldr	r0, [r7, #28]
 8006124:	f000 ffbb 	bl	800709e <_nx_dhcp_get_option_value>
 8006128:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Valid response?  */
            if (status == NX_SUCCESS)
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d157      	bne.n	80061e0 <_nx_dhcp_packet_process+0x460>
            {

                /* Is it an ACK response?  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2b05      	cmp	r3, #5
 8006134:	d12c      	bne.n	8006190 <_nx_dhcp_packet_process+0x410>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fe86 	bl	8006e5e <_nx_dhcp_extract_information>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d145      	bne.n	80061e4 <_nx_dhcp_packet_process+0x464>
                        break;

                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006162:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006164:	f003 fbbe 	bl	80098e4 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <_nx_dhcp_packet_process+0x400>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f003 fa21 	bl	80095c2 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	621a      	str	r2, [r3, #32]

                    /* Change to bound state.  */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2205      	movs	r2, #5
 800618c:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 800618e:	e027      	b.n	80061e0 <_nx_dhcp_packet_process+0x460>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b06      	cmp	r3, #6
 8006194:	d124      	bne.n	80061e0 <_nx_dhcp_packet_process+0x460>
                    interface_record -> nx_dhcp_nacks_received++;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	4619      	mov	r1, r3
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fab8 	bl	8005720 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2202      	movs	r2, #2
 80061b4:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2264      	movs	r2, #100	; 0x64
 80061ba:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2200      	movs	r2, #0
 80061c0:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80061c2:	e00d      	b.n	80061e0 <_nx_dhcp_packet_process+0x460>
        }

        default:
            break;
 80061c4:	bf00      	nop
 80061c6:	e00e      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
           break;
 80061c8:	bf00      	nop
 80061ca:	e00c      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
                    break;
 80061cc:	bf00      	nop
 80061ce:	e00a      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
            break;
 80061d0:	bf00      	nop
 80061d2:	e008      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
                        break;
 80061d4:	bf00      	nop
 80061d6:	e006      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
            break;
 80061d8:	bf00      	nop
 80061da:	e004      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
                        break;
 80061dc:	bf00      	nop
 80061de:	e002      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
            break;
 80061e0:	bf00      	nop
 80061e2:	e000      	b.n	80061e6 <_nx_dhcp_packet_process+0x466>
                        break;
 80061e4:	bf00      	nop

    } /* End of switch case */

    /* Release the packet.  */
    nx_packet_release(new_packet_ptr);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f005 f9e5 	bl	800b5b8 <_nx_packet_release>

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	461a      	mov	r2, r3
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d020      	beq.n	800623c <_nx_dhcp_packet_process+0x4bc>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d008      	beq.n	8006218 <_nx_dhcp_packet_process+0x498>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	7852      	ldrb	r2, [r2, #1]
 8006212:	4611      	mov	r1, r2
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800621e:	3304      	adds	r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <_nx_dhcp_packet_process+0x4bc>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800622c:	3304      	adds	r3, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	69d1      	ldr	r1, [r2, #28]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	7852      	ldrb	r2, [r2, #1]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	4798      	blx	r3
        }
    }

    return;
 800623c:	bf00      	nop
}
 800623e:	3748      	adds	r7, #72	; 0x48
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <_nx_dhcp_timeout_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_process(NX_DHCP *dhcp_ptr)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

UINT            i;
UINT            original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE  */

    /* Update the timeout on both interfaces. Check what needs to be done
       if a timeout expires, based on Client state. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	e19e      	b.n	8006594 <_nx_dhcp_timeout_process+0x350>
    {

         /* Check if the DHCP Client is active on this interface. */      
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8006268:	3310      	adds	r3, #16
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 818d 	beq.w	800658c <_nx_dhcp_timeout_process+0x348>
             continue;

         /* Set the interface reocrd pointer.  */
         interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8006278:	fb02 f303 	mul.w	r3, r2, r3
 800627c:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8006280:	3310      	adds	r3, #16
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

         /* Update the count.  */
         interface_record -> nx_dhcp_seconds ++;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	609a      	str	r2, [r3, #8]

        /* Check the timer.  */
        if (interface_record -> nx_dhcp_timeout != 0)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8179 	beq.w	800658e <_nx_dhcp_timeout_process+0x34a>
        {

            /* Apply the timer interval to the current DHCP Client timeout.  */
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	2b64      	cmp	r3, #100	; 0x64
 80062a2:	d906      	bls.n	80062b2 <_nx_dhcp_timeout_process+0x6e>
            {

                /* Update the timeout.  */
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	621a      	str	r2, [r3, #32]
 80062b0:	e16d      	b.n	800658e <_nx_dhcp_timeout_process+0x34a>
            }
            else
            {

                /* The DHCP Client timeout has expired. */
                interface_record -> nx_dhcp_timeout = 0; 
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2200      	movs	r2, #0
 80062b6:	621a      	str	r2, [r3, #32]

                /* Save the current state for state change callback. */
                original_state = interface_record -> nx_dhcp_state;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	60fb      	str	r3, [r7, #12]

                /* Process according to what state the Client is in. */
                switch (interface_record -> nx_dhcp_state)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	3b02      	subs	r3, #2
 80062c4:	2b07      	cmp	r3, #7
 80062c6:	f200 8132 	bhi.w	800652e <_nx_dhcp_timeout_process+0x2ea>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <_nx_dhcp_timeout_process+0x8c>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062f1 	.word	0x080062f1
 80062d4:	08006375 	.word	0x08006375
 80062d8:	080063b9 	.word	0x080063b9
 80062dc:	080063fd 	.word	0x080063fd
 80062e0:	0800643b 	.word	0x0800643b
 80062e4:	080064c1 	.word	0x080064c1
 80062e8:	0800652f 	.word	0x0800652f
 80062ec:	0800652f 	.word	0x0800652f

                    case NX_DHCP_STATE_INIT:
                    {

                        /* Reset the seconds field for starting the DHCP address acquistiion. */
                        interface_record -> nx_dhcp_seconds = 0;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
                        /* Initial state when there is no address.  Send a DHCPDISCOVER message
                           to find a DHCP server and switch to the SELECTING state.
                           Initial timeout is NX_DHCP_MIN_RETRANS_TIMEOUT seconds. */
#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Only if the DHCP Client is requesting an IP address and is configured to skip the Discovery message. */
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <_nx_dhcp_timeout_process+0xd4>
                            (interface_record -> nx_dhcp_skip_discovery))
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <_nx_dhcp_timeout_process+0xd4>
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8006306:	2203      	movs	r2, #3
 8006308:	6939      	ldr	r1, [r7, #16]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f94c 	bl	80065a8 <_nx_dhcp_send_request_internal>

                            /* And change to the Requesting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2204      	movs	r2, #4
 8006314:	705a      	strb	r2, [r3, #1]
 8006316:	e007      	b.n	8006328 <_nx_dhcp_timeout_process+0xe4>
                        }
                        else
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8006318:	2201      	movs	r2, #1
 800631a:	6939      	ldr	r1, [r7, #16]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f943 	bl	80065a8 <_nx_dhcp_send_request_internal>

                            /* And change to the Selecting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2203      	movs	r2, #3
 8006326:	705a      	strb	r2, [r3, #1]
                        /* And change to the Requesting state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
#endif

                        /* Check if the retransmission interval is zero.  */
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <_nx_dhcp_timeout_process+0xf6>
                        {

                            /* Set the interval to min retransmission timeout.  */
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006336:	625a      	str	r2, [r3, #36]	; 0x24
 8006338:	e007      	b.n	800634a <_nx_dhcp_timeout_process+0x106>
                        }
                        else
                        {

                            /* Record the retransmission interval for next retransmission.  */
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	4618      	mov	r0, r3
 8006340:	f000 ff84 	bl	800724c <_nx_dhcp_update_timeout>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	625a      	str	r2, [r3, #36]	; 0x24
                        }

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 ff4a 	bl	80071f0 <_nx_dhcp_add_randomize>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 80e3 	bne.w	8006532 <_nx_dhcp_timeout_process+0x2ee>
                            interface_record -> nx_dhcp_timeout = 1;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2201      	movs	r2, #1
 8006370:	621a      	str	r2, [r3, #32]

                        break;
 8006372:	e0de      	b.n	8006532 <_nx_dhcp_timeout_process+0x2ee>
                    case NX_DHCP_STATE_SELECTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Retransmit the Discover message.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8006374:	2201      	movs	r2, #1
 8006376:	6939      	ldr	r1, [r7, #16]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f915 	bl	80065a8 <_nx_dhcp_send_request_internal>
                        /* Retransmit the BOOTP Request message.  */ 
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif

                        /* Update the retransmision interval.   */
                        interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ff62 	bl	800724c <_nx_dhcp_update_timeout>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 ff28 	bl	80071f0 <_nx_dhcp_add_randomize>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f040 80c3 	bne.w	8006536 <_nx_dhcp_timeout_process+0x2f2>
                            interface_record -> nx_dhcp_timeout = 1;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2201      	movs	r2, #1
 80063b4:	621a      	str	r2, [r3, #32]

                        break;
 80063b6:	e0be      	b.n	8006536 <_nx_dhcp_timeout_process+0x2f2>
                    case NX_DHCP_STATE_REQUESTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Send a DHCP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80063b8:	2203      	movs	r2, #3
 80063ba:	6939      	ldr	r1, [r7, #16]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8f3 	bl	80065a8 <_nx_dhcp_send_request_internal>
                        /* Send a BOOTP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif
                                                
                        /* Update the retransmision interval.   */
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 ff40 	bl	800724c <_nx_dhcp_update_timeout>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Reset the timeout for next retransmision. */
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 ff06 	bl	80071f0 <_nx_dhcp_add_randomize>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 80a3 	bne.w	800653a <_nx_dhcp_timeout_process+0x2f6>
                            interface_record -> nx_dhcp_timeout = 1;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2201      	movs	r2, #1
 80063f8:	621a      	str	r2, [r3, #32]

                        break;
 80063fa:	e09e      	b.n	800653a <_nx_dhcp_timeout_process+0x2f6>

                    case NX_DHCP_STATE_BOUND:
                    {

                        /* Reset the seconds field for starting the DHCP request process. */
                        interface_record -> nx_dhcp_seconds = 0;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2200      	movs	r2, #0
 8006400:	609a      	str	r2, [r3, #8]

                        /* The lease has timed out. Time to renew.  */

                        /* And change to the Renewing state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2206      	movs	r2, #6
 8006406:	705a      	strb	r2, [r3, #1]

                        /* Send the renewal request.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8006408:	2203      	movs	r2, #3
 800640a:	6939      	ldr	r1, [r7, #16]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f8cb 	bl	80065a8 <_nx_dhcp_send_request_internal>

                        /* Set the time remaining based on RFC 2131 when T1 expires. */
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	4618      	mov	r0, r3
 8006426:	f000 ff28 	bl	800727a <_nx_dhcp_update_renewal_timeout>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	621a      	str	r2, [r3, #32]

                        /* Record the retransmission interval.  */
                        interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	625a      	str	r2, [r3, #36]	; 0x24

                        break;
 8006438:	e080      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>

                    case NX_DHCP_STATE_RENEWING:
                    {

                        /* Check if we have reached the end of the renewal time.  */
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	429a      	cmp	r2, r3
 8006444:	d307      	bcc.n	8006456 <_nx_dhcp_timeout_process+0x212>
                        {
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	639a      	str	r2, [r3, #56]	; 0x38
 8006454:	e002      	b.n	800645c <_nx_dhcp_timeout_process+0x218>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_renewal_remain_time = 0;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2200      	movs	r2, #0
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	4618      	mov	r0, r3
 8006462:	f000 ff0a 	bl	800727a <_nx_dhcp_update_renewal_timeout>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d11b      	bne.n	80064ac <_nx_dhcp_timeout_process+0x268>
                        {

                            /* And change to the Rebinding state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2207      	movs	r2, #7
 8006478:	705a      	strb	r2, [r3, #1]

                            /* Send the rebind request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800647a:	2203      	movs	r2, #3
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f892 	bl	80065a8 <_nx_dhcp_send_request_internal>

                            /* Calculate the rebind time based on the RFC 2131. */
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	63da      	str	r2, [r3, #60]	; 0x3c
                                                                                        
                            /* Calculate the timeout for the response.  */
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006496:	4618      	mov	r0, r3
 8006498:	f000 feef 	bl	800727a <_nx_dhcp_update_renewal_timeout>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	621a      	str	r2, [r3, #32]

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6a1a      	ldr	r2, [r3, #32]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }

                        break;
 80064aa:	e047      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80064ac:	2203      	movs	r2, #3
 80064ae:	6939      	ldr	r1, [r7, #16]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f879 	bl	80065a8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6a1a      	ldr	r2, [r3, #32]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 80064be:	e03d      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>
                    {

                        /* No response yet, the response must have timed out, 
                            update the timeout and check if we have reached the 
                            end of the rebinding time.  */
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d307      	bcc.n	80064dc <_nx_dhcp_timeout_process+0x298>
                        {
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80064da:	e002      	b.n	80064e2 <_nx_dhcp_timeout_process+0x29e>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_rebind_remain_time = 0;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2200      	movs	r2, #0
 80064e0:	63da      	str	r2, [r3, #60]	; 0x3c
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fec7 	bl	800727a <_nx_dhcp_update_renewal_timeout>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10f      	bne.n	800651a <_nx_dhcp_timeout_process+0x2d6>
                        {

                            /* Timeout. Restart DHCP service for this interface record.  */

                            /* Reinitialize DHCP.  */
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff f90d 	bl	8005720 <_nx_dhcp_interface_reinitialize>

                            /* Start the DHCP protocol again by setting the state back to INIT. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2202      	movs	r2, #2
 800650a:	705a      	strb	r2, [r3, #1]
                            /* The client begins in INIT state and forms a DHCPDISCOVER message.
                               The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                               RFC2131, Section4.4.1, Page36.  */

                            /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2264      	movs	r2, #100	; 0x64
 8006510:	621a      	str	r2, [r3, #32]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2200      	movs	r2, #0
 8006516:	625a      	str	r2, [r3, #36]	; 0x24
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }
                        break;
 8006518:	e010      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800651a:	2203      	movs	r2, #3
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f842 	bl	80065a8 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 800652c:	e006      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>
                    }

                    default:
                    {

                        break;
 800652e:	bf00      	nop
 8006530:	e004      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <_nx_dhcp_timeout_process+0x2f8>
                        break;
 800653a:	bf00      	nop
                    }
                }

                /* Check if the state is changed.  */
                if (original_state != interface_record -> nx_dhcp_state)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	461a      	mov	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4293      	cmp	r3, r2
 8006546:	d022      	beq.n	800658e <_nx_dhcp_timeout_process+0x34a>
                {

                    /* Determine if the application has specified a routine for DHCP state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <_nx_dhcp_timeout_process+0x322>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	7852      	ldrb	r2, [r2, #1]
 8006560:	4611      	mov	r1, r2
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
                    }

                    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800656c:	3304      	adds	r3, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00c      	beq.n	800658e <_nx_dhcp_timeout_process+0x34a>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800657a:	3304      	adds	r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	69d1      	ldr	r1, [r2, #28]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	7852      	ldrb	r2, [r2, #1]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	e000      	b.n	800658e <_nx_dhcp_timeout_process+0x34a>
             continue;
 800658c:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	3301      	adds	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f43f ae5d 	beq.w	8006256 <_nx_dhcp_timeout_process+0x12>

            } /* End of switch statement. */ 
        }

    } /* Try the next interface record.  */ 
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <_nx_dhcp_send_request_internal>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b093      	sub	sp, #76	; 0x4c
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
ULONG           targetIP;
UINT            status;
ULONG           dhcp_client_mac_msw;
ULONG           dhcp_client_mac_lsw;
UINT            iface_index;
UINT            index = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61fb      	str	r3, [r7, #28]
UINT            user_option_length;
UINT            name_length;


    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 80065c4:	f107 0120 	add.w	r1, r7, #32
 80065c8:	2300      	movs	r3, #0
 80065ca:	222c      	movs	r2, #44	; 0x2c
 80065cc:	f004 fb60 	bl	800ac90 <_nx_packet_allocate>
 80065d0:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <_nx_dhcp_send_request_internal+0x42>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

        /* Return status.  */
        return(status);
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	e2a6      	b.n	8006b38 <_nx_dhcp_send_request_internal+0x590>
    }

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6899      	ldr	r1, [r3, #8]
 80065ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	440b      	add	r3, r1
 80065fa:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	633b      	str	r3, [r7, #48]	; 0x30
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6899      	ldr	r1, [r3, #8]
 8006606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	440b      	add	r3, r1
 8006612:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Setup the buffer pointer.  */
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Clear the buffer out... just in case.  */
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8006620:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006624:	2100      	movs	r1, #0
 8006626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006628:	f010 fa5c 	bl	8016ae4 <memset>
    
    /* Setup the standard BootP fields.  */
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HTYPE] =     NX_BOOTP_TYPE_ETHERNET;     
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	3301      	adds	r3, #1
 8006636:	2201      	movs	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HLEN] =      NX_BOOTP_HLEN_ETHERNET;
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	3302      	adds	r3, #2
 800663e:	2206      	movs	r2, #6
 8006640:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HOPS] =      0;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	3303      	adds	r3, #3
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	332c      	adds	r3, #44	; 0x2c
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	336c      	adds	r3, #108	; 0x6c
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]

    /* Setup the 'Xid' field.  */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	1d18      	adds	r0, r3, #4
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	461a      	mov	r2, r3
 8006664:	2104      	movs	r1, #4
 8006666:	f000 fe8b 	bl	8007380 <_nx_dhcp_store_data>

    /* Set the 'secs' field according to RFC2131, Secion4.4.1, Page37, Table5. */ 
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b04      	cmp	r3, #4
 800666e:	d002      	beq.n	8006676 <_nx_dhcp_send_request_internal+0xce>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b07      	cmp	r3, #7
 8006674:	d107      	bne.n	8006686 <_nx_dhcp_send_request_internal+0xde>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, 0);
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	3308      	adds	r3, #8
 800667a:	2200      	movs	r2, #0
 800667c:	2102      	movs	r1, #2
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fe7e 	bl	8007380 <_nx_dhcp_store_data>
 8006684:	e008      	b.n	8006698 <_nx_dhcp_send_request_internal+0xf0>
    }
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	f103 0008 	add.w	r0, r3, #8
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	461a      	mov	r2, r3
 8006692:	2102      	movs	r1, #2
 8006694:	f000 fe74 	bl	8007380 <_nx_dhcp_store_data>
    }

    /* Set the broadcast flag according to RFC2131, Secion4.4.1, Page38, Table5.  */

    /* Set the broadcast flag to 0 for DHCP Decline and DHCP Release.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d002      	beq.n	80066a4 <_nx_dhcp_send_request_internal+0xfc>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b07      	cmp	r3, #7
 80066a2:	d107      	bne.n	80066b4 <_nx_dhcp_send_request_internal+0x10c>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	330a      	adds	r3, #10
 80066a8:	2200      	movs	r2, #0
 80066aa:	2101      	movs	r1, #1
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fe67 	bl	8007380 <_nx_dhcp_store_data>
 80066b2:	e012      	b.n	80066da <_nx_dhcp_send_request_internal+0x132>
    }

    /* Set the 'broadcast' flag according to user requirement for DHCP Discover, DHCP Request and DHCP Inform.  */
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <_nx_dhcp_send_request_internal+0x124>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	330a      	adds	r3, #10
 80066c0:	2200      	movs	r2, #0
 80066c2:	2101      	movs	r1, #1
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fe5b 	bl	8007380 <_nx_dhcp_store_data>
 80066ca:	e006      	b.n	80066da <_nx_dhcp_send_request_internal+0x132>
    }
    else
    {

        /* Request the response be sent broadcast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_BROADCAST);
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	330a      	adds	r3, #10
 80066d0:	2280      	movs	r2, #128	; 0x80
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fe53 	bl	8007380 <_nx_dhcp_store_data>
    }

    /* RFC 2131 4.4.1: Do not set the Client IP ("ciaddr" field) address...*/
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d007      	beq.n	80066f0 <_nx_dhcp_send_request_internal+0x148>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, NX_BOOTP_NO_ADDRESS);
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	330c      	adds	r3, #12
 80066e4:	2200      	movs	r2, #0
 80066e6:	2104      	movs	r1, #4
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fe49 	bl	8007380 <_nx_dhcp_store_data>
 80066ee:	e008      	b.n	8006702 <_nx_dhcp_send_request_internal+0x15a>
    }
    /* ...unless this is an INFORM REQUEST message. */
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	f103 000c 	add.w	r0, r3, #12
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	461a      	mov	r2, r3
 80066fc:	2104      	movs	r1, #4
 80066fe:	f000 fe3f 	bl	8007380 <_nx_dhcp_store_data>
    }

    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_YOUR_IP, 4, NX_BOOTP_NO_ADDRESS);   
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	3310      	adds	r3, #16
 8006706:	2200      	movs	r2, #0
 8006708:	2104      	movs	r1, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fe38 	bl	8007380 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SERVER_IP, 4, NX_BOOTP_NO_ADDRESS); 
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	3314      	adds	r3, #20
 8006714:	2200      	movs	r2, #0
 8006716:	2104      	movs	r1, #4
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fe31 	bl	8007380 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_GATEWAY_IP, 4, NX_BOOTP_NO_ADDRESS);
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	3318      	adds	r3, #24
 8006722:	2200      	movs	r2, #0
 8006724:	2104      	movs	r1, #4
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fe2a 	bl	8007380 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW, 2, dhcp_client_mac_msw);
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	331c      	adds	r3, #28
 8006730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006732:	2102      	movs	r1, #2
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fe23 	bl	8007380 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW + 2, 4, dhcp_client_mac_lsw);
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	331e      	adds	r3, #30
 800673e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006740:	2104      	movs	r1, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fe1c 	bl	8007380 <_nx_dhcp_store_data>

#ifndef NX_DHCP_ENABLE_BOOTP        
    /* Update the index.  */
    index = NX_BOOTP_OFFSET_OPTIONS; 
 8006748:	23f0      	movs	r3, #240	; 0xf0
 800674a:	61fb      	str	r3, [r7, #28]

    /*  A BOOTP Client should not request DHCP option data. */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_VENDOR, 4, NX_BOOTP_MAGIC_COOKIE);
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	33ec      	adds	r3, #236	; 0xec
 8006750:	4aa7      	ldr	r2, [pc, #668]	; (80069f0 <_nx_dhcp_send_request_internal+0x448>)
 8006752:	2104      	movs	r1, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fe13 	bl	8007380 <_nx_dhcp_store_data>

    /* Add the actual DHCP request.  */
    _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, NX_DHCP_OPTION_DHCP_TYPE_SIZE, dhcp_message_type, &index);
 800675a:	f107 031c 	add.w	r3, r7, #28
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	2135      	movs	r1, #53	; 0x35
 8006766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006768:	f000 fcdb 	bl	8007122 <_nx_dhcp_add_option_value>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3b01      	subs	r3, #1
 8006770:	2b07      	cmp	r3, #7
 8006772:	f200 815f 	bhi.w	8006a34 <_nx_dhcp_send_request_internal+0x48c>
 8006776:	a201      	add	r2, pc, #4	; (adr r2, 800677c <_nx_dhcp_send_request_internal+0x1d4>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	0800679d 	.word	0x0800679d
 8006780:	08006a35 	.word	0x08006a35
 8006784:	0800683b 	.word	0x0800683b
 8006788:	0800694d 	.word	0x0800694d
 800678c:	08006a35 	.word	0x08006a35
 8006790:	08006a35 	.word	0x08006a35
 8006794:	0800698d 	.word	0x0800698d
 8006798:	080069c5 	.word	0x080069c5

        case NX_DHCP_TYPE_DHCPDISCOVER:


            /* Determine if we have a valid IP address.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <_nx_dhcp_send_request_internal+0x21c>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d00a      	beq.n	80067c4 <_nx_dhcp_send_request_internal+0x21c>
            {

                /* Add a IP request option if we have a valid IP address */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	f107 031c 	add.w	r3, r7, #28
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	2204      	movs	r2, #4
 80067bc:	2132      	movs	r1, #50	; 0x32
 80067be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c0:	f000 fcaf 	bl	8007122 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add an option request for an infinite lease.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 80067c4:	f107 031c 	add.w	r3, r7, #28
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	2204      	movs	r2, #4
 80067d0:	2133      	movs	r1, #51	; 0x33
 80067d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d4:	f000 fca5 	bl	8007122 <_nx_dhcp_add_option_value>

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01b      	beq.n	8006818 <_nx_dhcp_send_request_internal+0x270>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f107 0114 	add.w	r1, r7, #20
 80067e8:	22ff      	movs	r2, #255	; 0xff
 80067ea:	4618      	mov	r0, r3
 80067ec:	f00a feb3 	bl	8011556 <_nx_utility_string_length_check>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <_nx_dhcp_send_request_internal+0x25a>
                {
                    nx_packet_release(packet_ptr);
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f004 fedd 	bl	800b5b8 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 80067fe:	23a8      	movs	r3, #168	; 0xa8
 8006800:	e19a      	b.n	8006b38 <_nx_dhcp_send_request_internal+0x590>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8006802:	697a      	ldr	r2, [r7, #20]
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6859      	ldr	r1, [r3, #4]
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8006808:	f107 031c 	add.w	r3, r7, #28
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	460b      	mov	r3, r1
 8006810:	210c      	movs	r1, #12
 8006812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006814:	f000 fcb8 	bl	8007188 <_nx_dhcp_add_option_string>
            }

            /* Add an option request for DHCP parameters (gateway, subnet mask, etc.).  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, NX_DHCP_REQUEST_PARAMETER_SIZE, _nx_dhcp_request_parameters, &index);
 8006818:	f107 031c 	add.w	r3, r7, #28
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4b75      	ldr	r3, [pc, #468]	; (80069f4 <_nx_dhcp_send_request_internal+0x44c>)
 8006820:	2203      	movs	r2, #3
 8006822:	2137      	movs	r1, #55	; 0x37
 8006824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006826:	f000 fcaf 	bl	8007188 <_nx_dhcp_add_option_string>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Discovery messages sent.  */
            interface_record -> nx_dhcp_discoveries_sent++;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8006838:	e0fd      	b.n	8006a36 <_nx_dhcp_send_request_internal+0x48e>
      
        case NX_DHCP_TYPE_DHCPREQUEST:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d01b      	beq.n	800687a <_nx_dhcp_send_request_internal+0x2d2>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f107 0114 	add.w	r1, r7, #20
 800684a:	22ff      	movs	r2, #255	; 0xff
 800684c:	4618      	mov	r0, r3
 800684e:	f00a fe82 	bl	8011556 <_nx_utility_string_length_check>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <_nx_dhcp_send_request_internal+0x2bc>
                {
                    nx_packet_release(packet_ptr);
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	4618      	mov	r0, r3
 800685c:	f004 feac 	bl	800b5b8 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8006860:	23a8      	movs	r3, #168	; 0xa8
 8006862:	e169      	b.n	8006b38 <_nx_dhcp_send_request_internal+0x590>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	f107 031c 	add.w	r3, r7, #28
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	460b      	mov	r3, r1
 8006872:	210c      	movs	r1, #12
 8006874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006876:	f000 fc87 	bl	8007188 <_nx_dhcp_add_option_string>
            }

            /* Determine if we have a valid IP address. Must not include if Renewing or Rebinding RCV 2131 4.3.2.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d017      	beq.n	80068b2 <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688a:	d012      	beq.n	80068b2 <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8006890:	2b06      	cmp	r3, #6
 8006892:	d00e      	beq.n	80068b2 <_nx_dhcp_send_request_internal+0x30a>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 8006898:	2b07      	cmp	r3, #7
 800689a:	d00a      	beq.n	80068b2 <_nx_dhcp_send_request_internal+0x30a>
            {

                /* Add an IP request option if we have a valid IP address.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	f107 031c 	add.w	r3, r7, #28
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4613      	mov	r3, r2
 80068a8:	2204      	movs	r2, #4
 80068aa:	2132      	movs	r1, #50	; 0x32
 80068ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ae:	f000 fc38 	bl	8007122 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add a request for an infinite lease if we haven't already set the timers.  */
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <_nx_dhcp_send_request_internal+0x31a>
                (interface_record -> nx_dhcp_renewal_time == 0))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <_nx_dhcp_send_request_internal+0x32e>
            {

                /* Add the infinite lease option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 80068c2:	f107 031c 	add.w	r3, r7, #28
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295
 80068cc:	2204      	movs	r2, #4
 80068ce:	2133      	movs	r1, #51	; 0x33
 80068d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d2:	f000 fc26 	bl	8007122 <_nx_dhcp_add_option_value>
            }

            /* Should add server ID if not renewing.  */
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b06      	cmp	r3, #6
 80068dc:	d014      	beq.n	8006908 <_nx_dhcp_send_request_internal+0x360>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	785b      	ldrb	r3, [r3, #1]
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 80068e2:	2b07      	cmp	r3, #7
 80068e4:	d010      	beq.n	8006908 <_nx_dhcp_send_request_internal+0x360>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	695b      	ldr	r3, [r3, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d00b      	beq.n	8006908 <_nx_dhcp_send_request_internal+0x360>
               )
            {

                /* Add Server identifier option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	695a      	ldr	r2, [r3, #20]
 80068f4:	f107 031c 	add.w	r3, r7, #28
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	2204      	movs	r2, #4
 80068fe:	2136      	movs	r1, #54	; 0x36
 8006900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006902:	f000 fc0e 	bl	8007122 <_nx_dhcp_add_option_value>
 8006906:	e010      	b.n	800692a <_nx_dhcp_send_request_internal+0x382>
                                          interface_record -> nx_dhcp_server_ip, &index);
            }
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b06      	cmp	r3, #6
 800690e:	d003      	beq.n	8006918 <_nx_dhcp_send_request_internal+0x370>
                     (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	785b      	ldrb	r3, [r3, #1]
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8006914:	2b07      	cmp	r3, #7
 8006916:	d108      	bne.n	800692a <_nx_dhcp_send_request_internal+0x382>

            {

                /* Ensure the renewal message fields are correct.  */
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	f103 000c 	add.w	r0, r3, #12
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	461a      	mov	r2, r3
 8006924:	2104      	movs	r1, #4
 8006926:	f000 fd2b 	bl	8007380 <_nx_dhcp_store_data>
            }

            /* Add the request for the DHCP parameters (gateway, subnet mask, etc.) if not renewing.  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, NX_DHCP_REQUEST_PARAMETER_SIZE, _nx_dhcp_request_parameters, &index);
 800692a:	f107 031c 	add.w	r3, r7, #28
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4b30      	ldr	r3, [pc, #192]	; (80069f4 <_nx_dhcp_send_request_internal+0x44c>)
 8006932:	2203      	movs	r2, #3
 8006934:	2137      	movs	r1, #55	; 0x37
 8006936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006938:	f000 fc26 	bl	8007188 <_nx_dhcp_add_option_string>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Request messages sent.  */
            interface_record -> nx_dhcp_requests_sent++;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 800694a:	e074      	b.n	8006a36 <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPDECLINE:      

            /* Does the Client have a nonzero requested address it is declining? */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00f      	beq.n	8006974 <_nx_dhcp_send_request_internal+0x3cc>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d00a      	beq.n	8006974 <_nx_dhcp_send_request_internal+0x3cc>
            {

                /* Yes; add Request IP address option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	f107 031c 	add.w	r3, r7, #28
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	4613      	mov	r3, r2
 800696a:	2204      	movs	r2, #4
 800696c:	2132      	movs	r1, #50	; 0x32
 800696e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006970:	f000 fbd7 	bl	8007122 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }     

            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	695a      	ldr	r2, [r3, #20]
 8006978:	f107 031c 	add.w	r3, r7, #28
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	2204      	movs	r2, #4
 8006982:	2136      	movs	r1, #54	; 0x36
 8006984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006986:	f000 fbcc 	bl	8007122 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            break;
 800698a:	e054      	b.n	8006a36 <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPRELEASE:       

            /* Added the 'ciaddr', Indicate the IP address being released.  */
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f103 000c 	add.w	r0, r3, #12
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	461a      	mov	r2, r3
 8006998:	2104      	movs	r1, #4
 800699a:	f000 fcf1 	bl	8007380 <_nx_dhcp_store_data>
                                       
            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	f107 031c 	add.w	r3, r7, #28
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	2204      	movs	r2, #4
 80069ac:	2136      	movs	r1, #54	; 0x36
 80069ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b0:	f000 fbb7 	bl	8007122 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            /* Increment the number of Release messages sent.  */
            interface_record -> nx_dhcp_releases_sent++;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            break;
 80069c2:	e038      	b.n	8006a36 <_nx_dhcp_send_request_internal+0x48e>

        case NX_DHCP_TYPE_DHCPINFORM:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d020      	beq.n	8006a0e <_nx_dhcp_send_request_internal+0x466>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f107 0114 	add.w	r1, r7, #20
 80069d4:	22ff      	movs	r2, #255	; 0xff
 80069d6:	4618      	mov	r0, r3
 80069d8:	f00a fdbd 	bl	8011556 <_nx_utility_string_length_check>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <_nx_dhcp_send_request_internal+0x450>
                {
                    nx_packet_release(packet_ptr);
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f004 fde7 	bl	800b5b8 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 80069ea:	23a8      	movs	r3, #168	; 0xa8
 80069ec:	e0a4      	b.n	8006b38 <_nx_dhcp_send_request_internal+0x590>
 80069ee:	bf00      	nop
 80069f0:	63825363 	.word	0x63825363
 80069f4:	2000002c 	.word	0x2000002c
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	f107 031c 	add.w	r3, r7, #28
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	460b      	mov	r3, r1
 8006a06:	210c      	movs	r1, #12
 8006a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0a:	f000 fbbd 	bl	8007188 <_nx_dhcp_add_option_string>
            }

            /* Add an option request for DHCP parameters (gateway, subnet mask, etc.).  */
            _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_DHCP_PARAMETERS, 1, &(interface_record -> nx_dhcp_user_option), &index);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	f107 031c 	add.w	r3, r7, #28
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	2137      	movs	r1, #55	; 0x37
 8006a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a20:	f000 fbb2 	bl	8007188 <_nx_dhcp_add_option_string>

            /* Increment the number of Inform messages sent.  */
            interface_record -> nx_dhcp_informs_sent++;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

            break;
 8006a32:	e000      	b.n	8006a36 <_nx_dhcp_send_request_internal+0x48e>

        default:
            break;
 8006a34:	bf00      	nop
    }

    /* Add any user supplied options to the buffer.  */
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d024      	beq.n	8006a8e <_nx_dhcp_send_request_internal+0x4e6>
    {

        /* Set the pointer for adding user option.  */
        user_option_ptr = buffer + index;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a48:	4413      	add	r3, r2
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the available length for user options. Minus 1 to add the END option.  */
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	695a      	ldr	r2, [r3, #20]
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	61bb      	str	r3, [r7, #24]

        /* Add the specific DHCP option user wanted.  */
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8006a5e:	3308      	adds	r3, #8
 8006a60:	681c      	ldr	r4, [r3, #0]
 8006a62:	f107 0318 	add.w	r3, r7, #24
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	47a0      	blx	r4
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d104      	bne.n	8006a82 <_nx_dhcp_send_request_internal+0x4da>
        {

            /* Update the index to include the user options.  */
            index += user_option_length;
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	e005      	b.n	8006a8e <_nx_dhcp_send_request_internal+0x4e6>
        }
        else
        {

            /* Invalid user options. Release the packet.  */
            nx_packet_release(packet_ptr);
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f004 fd97 	bl	800b5b8 <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 8006a8a:	239f      	movs	r3, #159	; 0x9f
 8006a8c:	e054      	b.n	8006b38 <_nx_dhcp_send_request_internal+0x590>
        }
    }

    /* Setup the packet pointers.  */
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8006aa0:	60da      	str	r2, [r3, #12]

#ifndef NX_DHCP_ENABLE_BOOTP

    /* Added the END option.  */
    *(buffer + index) = NX_DHCP_OPTION_END;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa6:	4413      	add	r3, r2
 8006aa8:	22ff      	movs	r2, #255	; 0xff
 8006aaa:	701a      	strb	r2, [r3, #0]
    index ++;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	61fb      	str	r3, [r7, #28]

    /* Check the option length.  */
    if (index > NX_BOOTP_OFFSET_END)
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006ab8:	d908      	bls.n	8006acc <_nx_dhcp_send_request_internal+0x524>
    {
        packet_ptr -> nx_packet_length = index;
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	6899      	ldr	r1, [r3, #8]
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	440a      	add	r2, r1
 8006aca:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Set the target address according to RFC2131, Section4.3.6, Page33, Table4 and Section4.4.4, Page40.  
       DHCP Request for renewing and DHCP Release message must be unicast.  */
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d103      	bne.n	8006ada <_nx_dhcp_send_request_internal+0x532>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b06      	cmp	r3, #6
 8006ad8:	d002      	beq.n	8006ae0 <_nx_dhcp_send_request_internal+0x538>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b07      	cmp	r3, #7
 8006ade:	d103      	bne.n	8006ae8 <_nx_dhcp_send_request_internal+0x540>
        (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
    {

        /* Use the current server's IP address.  */
        targetIP = interface_record -> nx_dhcp_server_ip;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae6:	e002      	b.n	8006aee <_nx_dhcp_send_request_internal+0x546>
    }
    else
    {

        /* Set the server target IP address to broadcast.  */
        targetIP = NX_BOOTP_BC_ADDRESS;
 8006ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* DHCP messages broadcast by a client prior to that client obtaining
       its IP address must have the source address field in the IP header
       set to 0. RFC2131, Section4.1, Page23.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d006      	beq.n	8006b02 <_nx_dhcp_send_request_internal+0x55a>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d10b      	bne.n	8006b12 <_nx_dhcp_send_request_internal+0x56a>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d807      	bhi.n	8006b12 <_nx_dhcp_send_request_internal+0x56a>
    {

        /* Call function to send the special packet with zero source address.*/
        status = _nx_dhcp_client_send_with_zero_source_address(dhcp_ptr, iface_index, packet_ptr);
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f819 	bl	8006b40 <_nx_dhcp_client_send_with_zero_source_address>
 8006b0e:	63b8      	str	r0, [r7, #56]	; 0x38
 8006b10:	e00a      	b.n	8006b28 <_nx_dhcp_send_request_internal+0x580>
    }
    else
    {

        /* Send the packet.  */
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 8006b18:	6a39      	ldr	r1, [r7, #32]
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	2343      	movs	r3, #67	; 0x43
 8006b20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b22:	f00a fb6e 	bl	8011202 <_nx_udp_socket_source_send>
 8006b26:	63b8      	str	r0, [r7, #56]	; 0x38
    }

    /* If an error is detected, release the packet. */
    if (status != NX_SUCCESS)
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <_nx_dhcp_send_request_internal+0x58e>
    {

        /* Release the packet.  */
        nx_packet_release(packet_ptr);
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f004 fd41 	bl	800b5b8 <_nx_packet_release>
    }

    /* Return completion status.  */
    return(status);
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3744      	adds	r7, #68	; 0x44
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd90      	pop	{r4, r7, pc}

08006b40 <_nx_dhcp_client_send_with_zero_source_address>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_client_send_with_zero_source_address(NX_DHCP *dhcp_ptr, UINT iface_index, NX_PACKET *packet_ptr)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b098      	sub	sp, #96	; 0x60
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
ULONG           checksum;
ULONG           val;
NX_IP_DRIVER    driver_request;
      
    /* Set up the pointer to the associated IP instance.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Set up the pointer to the associated socket.  */
    socket_ptr = &dhcp_ptr -> nx_dhcp_socket;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8006b58:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Set up the pointer to the interface.  */
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8006b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set up the address.  */
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 8006b76:	2300      	movs	r3, #0
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the interface.  */
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <_nx_dhcp_client_send_with_zero_source_address+0x50>
 8006b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8a:	799b      	ldrb	r3, [r3, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <_nx_dhcp_client_send_with_zero_source_address+0x54>
    {

        /* None found; return the error status. */
        return(NX_INVALID_INTERFACE);
 8006b90:	234c      	movs	r3, #76	; 0x4c
 8006b92:	e160      	b.n	8006e56 <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

    /* Build UDP header.  */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f1a3 0208 	sub.w	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    
#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 8006bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	441a      	add	r2, r3
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd0:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 8006bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	441a      	add	r2, r3
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bde:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	f103 0208 	add.w	r2, r3, #8
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    udp_header_ptr =  (NX_UDP_HEADER *) packet_ptr -> nx_packet_prepend_ptr;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	f043 0243 	orr.w	r2, r3, #67	; 0x43
 8006bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfe:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	041a      	lsls	r2, r3, #16
 8006c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c08:	605a      	str	r2, [r3, #4]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8006c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	ba1a      	rev	r2, r3
 8006c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c12:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	ba1a      	rev	r2, r3
 8006c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1c:	605a      	str	r2, [r3, #4]

#ifdef NX_DISABLE_UDP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_UDP_TX_CHECKSUM */
    compute_checksum = 1;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8006c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f003 0310 	and.w	r3, r3, #16
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <_nx_dhcp_client_send_with_zero_source_address+0xf4>
        compute_checksum = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	657b      	str	r3, [r7, #84]	; 0x54
 8006c32:	e001      	b.n	8006c38 <_nx_dhcp_client_send_with_zero_source_address+0xf8>
    else
        compute_checksum = 1;
 8006c34:	2301      	movs	r3, #1
 8006c36:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d028      	beq.n	8006c90 <_nx_dhcp_client_send_with_zero_source_address+0x150>
    {
        /* Yes, we need to compute the UDP checksum.  */
        checksum = _nx_ip_checksum_compute(packet_ptr,
                                           NX_PROTOCOL_UDP,
                                           (UINT)packet_ptr -> nx_packet_length,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr,
 8006c42:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	2111      	movs	r1, #17
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 febd 	bl	80089d0 <_nx_ip_checksum_compute>
 8006c56:	4603      	mov	r3, r0
 8006c58:	653b      	str	r3, [r7, #80]	; 0x50
                                           &ip_src_addr,
                                           &ip_dest_addr);

        checksum = ~checksum & NX_LOWER_16_MASK;
 8006c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	653b      	str	r3, [r7, #80]	; 0x50

        /* If the computed checksum is zero, it will be transmitted as all ones. */
        /* RFC 768, page 2. */
        if (checksum == 0)
 8006c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d102      	bne.n	8006c6e <_nx_dhcp_client_send_with_zero_source_address+0x12e>
            checksum = 0xFFFF;
 8006c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c6c:	653b      	str	r3, [r7, #80]	; 0x50

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	ba1a      	rev	r2, r3
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	605a      	str	r2, [r3, #4]

        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8006c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c82:	605a      	str	r2, [r3, #4]

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	ba1a      	rev	r2, r3
 8006c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	e005      	b.n	8006c9c <_nx_dhcp_client_send_with_zero_source_address+0x15c>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
        /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	f043 0210 	orr.w	r2, r3, #16
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f00f fae0 	bl	801626c <_txe_mutex_get>

    /* Build the IP header.  */

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f1a3 0214 	sub.w	r2, r3, #20
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f103 0214 	add.w	r2, r3, #20
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the IP header pointer.  */
    ip_header_ptr =  (NX_IPV4_HEADER *) packet_ptr -> nx_packet_prepend_ptr; 
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Build the first 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8006cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8006cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ce8:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 8006cec:	041a      	lsls	r2, r3, #16
 8006cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf6:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	f443 1288 	orr.w	r2, r3, #1114112	; 0x110000
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  ip_src_addr;
 8006d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 8006d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	611a      	str	r2, [r3, #16]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	ba1a      	rev	r2, r3
 8006d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	ba1a      	rev	r2, r3
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	ba1a      	rev	r2, r3
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	ba1a      	rev	r2, r3
 8006d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d38:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	ba1a      	rev	r2, r3
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	611a      	str	r2, [r3, #16]
     
#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_IP_TX_CHECKSUM */
    compute_checksum = 1;
 8006d44:	2301      	movs	r3, #1
 8006d46:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_DISABLE_IP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <_nx_dhcp_client_send_with_zero_source_address+0x21c>
        compute_checksum = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	657b      	str	r3, [r7, #84]	; 0x54
 8006d5a:	e001      	b.n	8006d60 <_nx_dhcp_client_send_with_zero_source_address+0x220>
    else
        compute_checksum = 1;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	657b      	str	r3, [r7, #84]	; 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8006d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d019      	beq.n	8006d9a <_nx_dhcp_client_send_with_zero_source_address+0x25a>
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 8006d66:	2300      	movs	r3, #0
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2214      	movs	r2, #20
 8006d6e:	2104      	movs	r1, #4
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 fe2d 	bl	80089d0 <_nx_ip_checksum_compute>
 8006d76:	4603      	mov	r3, r0
 8006d78:	653b      	str	r3, [r7, #80]	; 0x50

        val = (ULONG)(~checksum);
 8006d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
        val = val & NX_LOWER_16_MASK;
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	ba1b      	rev	r3, r3
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	431a      	orrs	r2, r3
 8006d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d96:	609a      	str	r2, [r3, #8]
 8006d98:	e005      	b.n	8006da6 <_nx_dhcp_client_send_with_zero_source_address+0x266>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	f043 0201 	orr.w	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
#endif /* NX_ENABLE_IP_PACKET_FILTER */

    /* Build the driver request.  */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8006da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8006db4:	2304      	movs	r3, #4
 8006db6:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8006db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dbc:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8006dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc2:	61fb      	str	r3, [r7, #28]

    /* Determine if fragmentation is needed.  */
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d925      	bls.n	8006e1e <_nx_dhcp_client_send_with_zero_source_address+0x2de>
    {

#ifndef NX_DISABLE_FRAGMENTATION
        /* Check the DF bit flag.  */
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 8006dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd4:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d013      	beq.n	8006e04 <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
 8006ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de4:	d00e      	beq.n	8006e04 <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
        {

            /* Fragmentation is needed, call the IP fragment processing routine.  */
            (ip_ptr -> nx_ip_fragment_processing) (&driver_request);
 8006de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de8:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8006dec:	f107 0210 	add.w	r2, r7, #16
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f00f fa90 	bl	8016320 <_txe_mutex_put>

            /* Return a successful status.  */
            return(NX_SUCCESS);
 8006e00:	2300      	movs	r3, #0
 8006e02:	e028      	b.n	8006e56 <_nx_dhcp_client_send_with_zero_source_address+0x316>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8006e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0c:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e10:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006e14:	4618      	mov	r0, r3
 8006e16:	f00f fa83 	bl	8016320 <_txe_mutex_put>

            /* Return a not successful status.  */
            return(NX_NOT_SUCCESSFUL);
 8006e1a:	2343      	movs	r3, #67	; 0x43
 8006e1c:	e01b      	b.n	8006e56 <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e26:	615a      	str	r2, [r3, #20]

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - 20;
 8006e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	4413      	add	r3, r2
 8006e32:	f1a3 0214 	sub.w	r2, r3, #20
 8006e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e38:	619a      	str	r2, [r3, #24]
#endif

    /* Broadcast packet.  */
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e40:	f107 0210 	add.w	r2, r7, #16
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f00f fa66 	bl	8016320 <_txe_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3758      	adds	r7, #88	; 0x58
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <_nx_dhcp_extract_information>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	603b      	str	r3, [r7, #0]

ULONG       value;


    /* Extract the IP address.  */
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3310      	adds	r3, #16
 8006e70:	2104      	movs	r1, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fa68 	bl	8007348 <_nx_dhcp_get_data>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	617b      	str	r3, [r7, #20]

    /* Determine if it is valid.  */
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01c      	beq.n	8006ebc <_nx_dhcp_extract_information+0x5e>
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006e82:	697b      	ldr	r3, [r7, #20]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	da0b      	bge.n	8006ea0 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e92:	d005      	beq.n	8006ea0 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006e9a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006e9e:	d10d      	bne.n	8006ebc <_nx_dhcp_extract_information+0x5e>
    {

        /* Store the IP address.  */
        interface_record -> nx_dhcp_ip_address =  value;
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	60da      	str	r2, [r3, #12]
        return(NX_DHCP_BAD_IP_ADDRESS);
    }
                       
    /* Determine if there is a subnet mask. Note a DHCP Server receiving a BOOTP request
       may send DHCP option data for subnet masks as per RFC 1534 Section 2.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 8006ea6:	f107 0214 	add.w	r2, r7, #20
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2101      	movs	r1, #1
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8f5 	bl	800709e <_nx_dhcp_get_option_value>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <_nx_dhcp_extract_information+0x62>
 8006eba:	e012      	b.n	8006ee2 <_nx_dhcp_extract_information+0x84>
        return(NX_DHCP_BAD_IP_ADDRESS);
 8006ebc:	2392      	movs	r3, #146	; 0x92
 8006ebe:	e0ea      	b.n	8007096 <_nx_dhcp_extract_information+0x238>
    {

        /* Make sure there is a valid IP address too.  */
        if (value != NX_BOOTP_NO_ADDRESS)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <_nx_dhcp_extract_information+0x70>
        {

            interface_record -> nx_dhcp_network_mask =  value;
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	619a      	str	r2, [r3, #24]
 8006ecc:	e009      	b.n	8006ee2 <_nx_dhcp_extract_information+0x84>
        {
            ULONG ip_address;

            /* No valid network mask info supplied; use the current network mask if any. Don't
               care about current IP address for now. */
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6898      	ldr	r0, [r3, #8]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	69d9      	ldr	r1, [r3, #28]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3318      	adds	r3, #24
 8006eda:	f107 0210 	add.w	r2, r7, #16
 8006ede:	f002 fcc1 	bl	8009864 <_nx_ip_interface_address_get>
#else  

    /* NX_DHCP_ENABLE_BOOTP  not defined */

    /* Overwrite the server ID if there is a DHCP option for Server ID */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 8006ee2:	f107 0214 	add.w	r2, r7, #20
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2136      	movs	r1, #54	; 0x36
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8d7 	bl	800709e <_nx_dhcp_get_option_value>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d117      	bne.n	8006f26 <_nx_dhcp_extract_information+0xc8>
    {

        /* Determine if it is valid.  */
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d012      	beq.n	8006f22 <_nx_dhcp_extract_information+0xc4>
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006efc:	697b      	ldr	r3, [r7, #20]
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	da0b      	bge.n	8006f1a <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8006f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f0c:	d005      	beq.n	8006f1a <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8006f14:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006f18:	d103      	bne.n	8006f22 <_nx_dhcp_extract_information+0xc4>
        {

            /* Store the server IP address.  */
            interface_record -> nx_dhcp_server_ip = value;
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	615a      	str	r2, [r3, #20]
 8006f20:	e001      	b.n	8006f26 <_nx_dhcp_extract_information+0xc8>
        }
        else
        {
            return(NX_DHCP_BAD_IP_ADDRESS);
 8006f22:	2392      	movs	r3, #146	; 0x92
 8006f24:	e0b7      	b.n	8007096 <_nx_dhcp_extract_information+0x238>
        }
    }

    /* Get the lease time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 8006f26:	f107 0214 	add.w	r2, r7, #20
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2133      	movs	r1, #51	; 0x33
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f8b5 	bl	800709e <_nx_dhcp_get_option_value>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d120      	bne.n	8006f7c <_nx_dhcp_extract_information+0x11e>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d109      	bne.n	8006f56 <_nx_dhcp_extract_information+0xf8>
        {
            /* Store the 'infinite' lease time . */
            interface_record -> nx_dhcp_lease_time = value;
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	62da      	str	r2, [r3, #44]	; 0x2c
            interface_record -> nx_dhcp_renewal_time = value;
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time = value;
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	635a      	str	r2, [r3, #52]	; 0x34
 8006f54:	e012      	b.n	8006f7c <_nx_dhcp_extract_information+0x11e>
        }
        else
        {            

            /* Store the lease time in timer ticks.  */
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2264      	movs	r2, #100	; 0x64
 8006f5a:	fb02 f203 	mul.w	r2, r2, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	62da      	str	r2, [r3, #44]	; 0x2c
    
            /* Set the renew and rebind times.  */
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	085a      	lsrs	r2, r3, #1
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	08db      	lsrs	r3, r3, #3
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }
 
    /* Overwrite the renew and rebind times with the specified values if the options are present.  */
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8006f7c:	f107 0214 	add.w	r2, r7, #20
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	213a      	movs	r1, #58	; 0x3a
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f88a 	bl	800709e <_nx_dhcp_get_option_value>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d112      	bne.n	8006fb6 <_nx_dhcp_extract_information+0x158>
        (value <= interface_record -> nx_dhcp_lease_time))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	697b      	ldr	r3, [r7, #20]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d30d      	bcc.n	8006fb6 <_nx_dhcp_extract_information+0x158>
    {       

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d103      	bne.n	8006faa <_nx_dhcp_extract_information+0x14c>
        {
            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_renewal_time = value;
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8006fa8:	e005      	b.n	8006fb6 <_nx_dhcp_extract_information+0x158>
        }
        else
        {

            /* Store the renewal time in timer ticks  */
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2264      	movs	r2, #100	; 0x64
 8006fae:	fb02 f203 	mul.w	r2, r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
  
    /* Determine if there is a rebind time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 8006fb6:	f107 0214 	add.w	r2, r7, #20
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	213b      	movs	r1, #59	; 0x3b
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f86d 	bl	800709e <_nx_dhcp_get_option_value>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d119      	bne.n	8006ffe <_nx_dhcp_extract_information+0x1a0>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d103      	bne.n	8006fda <_nx_dhcp_extract_information+0x17c>
        {

            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_rebind_time = value;
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	635a      	str	r2, [r3, #52]	; 0x34
 8006fd8:	e011      	b.n	8006ffe <_nx_dhcp_extract_information+0x1a0>
        }
        else
        {

            /* Convert to timer ticks. */
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2264      	movs	r2, #100	; 0x64
 8006fde:	fb02 f303 	mul.w	r3, r2, r3
 8006fe2:	617b      	str	r3, [r7, #20]

            /* Sanity check*/
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d307      	bcc.n	8006ffe <_nx_dhcp_extract_information+0x1a0>
                (value >= interface_record -> nx_dhcp_renewal_time))
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff2:	697b      	ldr	r3, [r7, #20]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d802      	bhi.n	8006ffe <_nx_dhcp_extract_information+0x1a0>
            {
        
                /* Store the rebind time.  */
                interface_record -> nx_dhcp_rebind_time =  value;
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	635a      	str	r2, [r3, #52]	; 0x34
            }
        }
    }

    /* Determine if this is an ACK from a server response, which can only happen from a handful of states.  */
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d007      	beq.n	8007016 <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	785b      	ldrb	r3, [r3, #1]
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 800700a:	2b06      	cmp	r3, #6
 800700c:	d003      	beq.n	8007016 <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	785b      	ldrb	r3, [r3, #1]
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8007012:	2b07      	cmp	r3, #7
 8007014:	d121      	bne.n	800705a <_nx_dhcp_extract_information+0x1fc>
    {

        /* Determine if the IP gateway/router IP address is present.  */
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 8007016:	f107 0214 	add.w	r2, r7, #20
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2103      	movs	r1, #3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f83d 	bl	800709e <_nx_dhcp_get_option_value>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d117      	bne.n	800705a <_nx_dhcp_extract_information+0x1fc>
        {

            /* Determine if it is valid.  */
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d012      	beq.n	8007056 <_nx_dhcp_extract_information+0x1f8>
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8007030:	697b      	ldr	r3, [r7, #20]
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8007032:	2b00      	cmp	r3, #0
 8007034:	da0b      	bge.n	800704e <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 800703c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007040:	d005      	beq.n	800704e <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8007048:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800704c:	d103      	bne.n	8007056 <_nx_dhcp_extract_information+0x1f8>
            {

                /* Store the gateway/Router IP address to the Client record.  */
                interface_record -> nx_dhcp_gateway_address = value;
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	611a      	str	r2, [r3, #16]
 8007054:	e001      	b.n	800705a <_nx_dhcp_extract_information+0x1fc>
            }
            else
            {
                return(NX_DHCP_BAD_IP_ADDRESS);
 8007056:	2392      	movs	r3, #146	; 0x92
 8007058:	e01d      	b.n	8007096 <_nx_dhcp_extract_information+0x238>
            }
        }
    }

     /* Check the DHCP options size.  */
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	3bf0      	subs	r3, #240	; 0xf0
 800705e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8007062:	d905      	bls.n	8007070 <_nx_dhcp_extract_information+0x212>
         interface_record -> nx_dhcp_options_size = NX_DHCP_OPTIONS_BUFFER_SIZE;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f44f 729c 	mov.w	r2, #312	; 0x138
 800706a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 800706e:	e005      	b.n	800707c <_nx_dhcp_extract_information+0x21e>
     else
         interface_record -> nx_dhcp_options_size = length - NX_BOOTP_OFFSET_OPTIONS;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f1a3 02f0 	sub.w	r2, r3, #240	; 0xf0
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

     /* Copy the DHCP options into DHCP Client options buffer.  */
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f103 0048 	add.w	r0, r3, #72	; 0x48
            &dhcp_message[NX_BOOTP_OFFSET_OPTIONS], interface_record -> nx_dhcp_options_size);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800708e:	461a      	mov	r2, r3
 8007090:	f00f fd00 	bl	8016a94 <memcpy>

#endif  /* NX_DHCP_ENABLE_BOOTP */

    return (NX_SUCCESS);
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <_nx_dhcp_get_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_get_option_value(UCHAR *bootp_message, UINT option, ULONG *value, UINT length)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b088      	sub	sp, #32
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
UCHAR *option_message;
UINT   option_length;


    /* Setup buffer pointer.  */
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	33f0      	adds	r3, #240	; 0xf0
 80070b0:	61fb      	str	r3, [r7, #28]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	3bf0      	subs	r3, #240	; 0xf0
 80070b6:	61bb      	str	r3, [r7, #24]

    /* Find the option.  */
    if ((option != NX_DHCP_OPTION_PAD) && (option != NX_DHCP_OPTION_END))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d02c      	beq.n	8007118 <_nx_dhcp_get_option_value+0x7a>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2bff      	cmp	r3, #255	; 0xff
 80070c2:	d029      	beq.n	8007118 <_nx_dhcp_get_option_value+0x7a>
    {

        /* Search the buffer for the option.  */
        data =  _nx_dhcp_search_buffer(option_message, option, option_length);
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	69f8      	ldr	r0, [r7, #28]
 80070ca:	f000 f8f5 	bl	80072b8 <_nx_dhcp_search_buffer>
 80070ce:	6178      	str	r0, [r7, #20]

        /* Check to see if the option was found.  */
        if (data != NX_NULL)
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d020      	beq.n	8007118 <_nx_dhcp_get_option_value+0x7a>
        {

            /* Check for the proper size.  */
            if (*data > 4)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d90f      	bls.n	80070fe <_nx_dhcp_get_option_value+0x60>
            {

                /* Check for the gateway option.  */
                if (option == NX_DHCP_OPTION_GATEWAYS)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d10a      	bne.n	80070fa <_nx_dhcp_get_option_value+0x5c>
                {

                    /* Pickup the first gateway address.  */
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	3301      	adds	r3, #1
 80070e8:	2104      	movs	r1, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f92c 	bl	8007348 <_nx_dhcp_get_data>
 80070f0:	4602      	mov	r2, r0
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	601a      	str	r2, [r3, #0]

                    /* For now, just disregard any additional gateway addresses.  */
                    return(NX_SUCCESS);
 80070f6:	2300      	movs	r3, #0
 80070f8:	e00f      	b.n	800711a <_nx_dhcp_get_option_value+0x7c>
                }
                else
                {

                    /* Invalid size, return error.  */
                    return(NX_SIZE_ERROR);
 80070fa:	2309      	movs	r3, #9
 80070fc:	e00d      	b.n	800711a <_nx_dhcp_get_option_value+0x7c>
            }
            else
            {

                /* Get the actual value.  */
                *value = _nx_dhcp_get_data(data + 1, *data);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	4619      	mov	r1, r3
 8007108:	4610      	mov	r0, r2
 800710a:	f000 f91d 	bl	8007348 <_nx_dhcp_get_data>
 800710e:	4602      	mov	r2, r0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	601a      	str	r2, [r3, #0]
                return(NX_SUCCESS);  
 8007114:	2300      	movs	r3, #0
 8007116:	e000      	b.n	800711a <_nx_dhcp_get_option_value+0x7c>
            }
        }
    }

    /* Return an error if not found.  */
    return(NX_OPTION_ERROR);
 8007118:	230a      	movs	r3, #10
}
 800711a:	4618      	mov	r0, r3
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <_nx_dhcp_add_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_add_option_value(UCHAR *bootp_message, UINT option, UINT size, ULONG value, UINT *index)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	603b      	str	r3, [r7, #0]


    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_store_data(bootp_message + (*index), size, value);
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f907 	bl	8007380 <_nx_dhcp_store_data>
    (*index) += size;    
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	441a      	add	r2, r3
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <_nx_dhcp_add_option_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_string(UCHAR *bootp_message, UINT option, UINT size, UCHAR *value, UINT *index)
{                                              
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f90c 	bl	80073f0 <_nx_dhcp_move_string>
    (*index) += size;    
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	441a      	add	r2, r3
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <_nx_dhcp_add_randomize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_add_randomize(ULONG timeout)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
ULONG adjustment;

    /* Uniform random number chosen from the range -1 to +1 second as recommended by RFC2131, Section4.1, Page24. */

    /* Calculate random time adjustment in timer ticks from the range 0 to NX_IP_PERIODIC_RATE * 2.  */
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 80071f8:	f00f fd0a 	bl	8016c10 <rand>
 80071fc:	4603      	mov	r3, r0
 80071fe:	4a12      	ldr	r2, [pc, #72]	; (8007248 <_nx_dhcp_add_randomize+0x58>)
 8007200:	fba2 1203 	umull	r1, r2, r2, r3
 8007204:	0852      	lsrs	r2, r2, #1
 8007206:	21c9      	movs	r1, #201	; 0xc9
 8007208:	fb01 f202 	mul.w	r2, r1, r2
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

    /* Check for adjustment.  */
    if (adjustment < NX_IP_PERIODIC_RATE)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b63      	cmp	r3, #99	; 0x63
 8007214:	d80e      	bhi.n	8007234 <_nx_dhcp_add_randomize+0x44>
    {

        /* Updated timeout, minus NX_IP_PERIODIC_RATE - adjustment.  */

        /* Check for timeout.  */
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	429a      	cmp	r2, r3
 8007220:	d905      	bls.n	800722e <_nx_dhcp_add_randomize+0x3e>
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	3b64      	subs	r3, #100	; 0x64
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	e007      	b.n	800723e <_nx_dhcp_add_randomize+0x4e>
        else
            timeout = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
 8007232:	e004      	b.n	800723e <_nx_dhcp_add_randomize+0x4e>
    }
    else
    {

        /* Updated timeout, add adjustment- NX_IP_PERIODIC_RATE.  */
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4413      	add	r3, r2
 800723a:	3b64      	subs	r3, #100	; 0x64
 800723c:	607b      	str	r3, [r7, #4]
    }

    return timeout;
 800723e:	687b      	ldr	r3, [r7, #4]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	028c1979 	.word	0x028c1979

0800724c <_nx_dhcp_update_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_timeout(ULONG timeout)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]

    /* Timed out, double the timeout, limited to NX_DHCP_MAX_RETRANS_TIMEOUT */
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800725c:	d303      	bcc.n	8007266 <_nx_dhcp_update_timeout+0x1a>
    {

        /* Set the timeout as NX_DHCP_MAX_RETRANS_TIMEOUT.  */
        timeout = NX_DHCP_MAX_RETRANS_TIMEOUT;  
 800725e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	e002      	b.n	800726c <_nx_dhcp_update_timeout+0x20>
    }
    else
    {

        /* Double timeout value.  */
        timeout = timeout * 2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	607b      	str	r3, [r7, #4]
    }

    /* Return the sequence timeout.  */
    return(timeout);
 800726c:	687b      	ldr	r3, [r7, #4]
}
 800726e:	4618      	mov	r0, r3
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <_nx_dhcp_update_renewal_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_renewal_timeout(ULONG timeout)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]

    /* check if the timeout is non zero */
    if (timeout != 0)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d010      	beq.n	80072aa <_nx_dhcp_update_renewal_timeout+0x30>
    {

        /* Timed out, halve the timeout, limited to NX_DHCP_MIN_RENEW_TIMEOUT or
          the remaining timeout if it is less than NX_DHCP_MIN_RENEW_TIMEOUT */
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f241 7270 	movw	r2, #6000	; 0x1770
 800728e:	4293      	cmp	r3, r2
 8007290:	d90b      	bls.n	80072aa <_nx_dhcp_update_renewal_timeout+0x30>
        {

            /* Timeout can still decrease, either
               force it to the minimum or halve it */
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8007298:	4293      	cmp	r3, r2
 800729a:	d903      	bls.n	80072a4 <_nx_dhcp_update_renewal_timeout+0x2a>
            {

                /* Halve timeout.  */
                timeout = timeout / 2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	e002      	b.n	80072aa <_nx_dhcp_update_renewal_timeout+0x30>
            }
            else
            {

                /* set timeout to minimum.  */
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 80072a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80072a8:	607b      	str	r3, [r7, #4]
            }
        }
    }

    /* Return the sequence timeout.  */
    return(timeout);
 80072aa:	687b      	ldr	r3, [r7, #4]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <_nx_dhcp_search_buffer>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UCHAR  *_nx_dhcp_search_buffer(UCHAR *option_message, UINT option, UINT length)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b089      	sub	sp, #36	; 0x24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
UCHAR   *data;
UINT    i;
UINT    size;

    /* Setup buffer pointer.  */
    data = option_message;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	61fb      	str	r3, [r7, #28]
    i = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]

    /* Search as long as there are valid options.   */
    while (i < length - 1)
 80072cc:	e030      	b.n	8007330 <_nx_dhcp_search_buffer+0x78>
    {

        /* Simply skip any padding */
        if (*data == NX_DHCP_OPTION_PAD)
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <_nx_dhcp_search_buffer+0x2c>
        {

            data++;
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	3301      	adds	r3, #1
 80072da:	61fb      	str	r3, [r7, #28]
            i++;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	3301      	adds	r3, #1
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	e025      	b.n	8007330 <_nx_dhcp_search_buffer+0x78>
        }

        /* On a match, return a pointer to the size.  */
        else if (*data == option)
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10f      	bne.n	8007310 <_nx_dhcp_search_buffer+0x58>
        {

            size = *(data + 1);
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	3301      	adds	r3, #1
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	617b      	str	r3, [r7, #20]

            /* Check if the option data is in the packet.  */
            if ((i + size + 1) > length)
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	3301      	adds	r3, #1
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	429a      	cmp	r2, r3
 8007304:	d201      	bcs.n	800730a <_nx_dhcp_search_buffer+0x52>
                return(NX_NULL);
 8007306:	2300      	movs	r3, #0
 8007308:	e018      	b.n	800733c <_nx_dhcp_search_buffer+0x84>

            /* Return a pointer to the option size byte.  */
            return(data + 1);
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3301      	adds	r3, #1
 800730e:	e015      	b.n	800733c <_nx_dhcp_search_buffer+0x84>

        /* Otherwise skip the option by adding the size to the pointer.  */
        else
        {

            size = *(++data);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	3301      	adds	r3, #1
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	617b      	str	r3, [r7, #20]

            /* skip the data plus the size byte */
            data += size + 1;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	3301      	adds	r3, #1
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	61fb      	str	r3, [r7, #28]
            i += size + 1;
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	4413      	add	r3, r2
 800732c:	3301      	adds	r3, #1
 800732e:	61bb      	str	r3, [r7, #24]
    while (i < length - 1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3b01      	subs	r3, #1
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	429a      	cmp	r2, r3
 8007338:	d3c9      	bcc.n	80072ce <_nx_dhcp_search_buffer+0x16>
        }
    }

    /* Return NULL to indicate the option was not found.  */
    return(NX_NULL);
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3724      	adds	r7, #36	; 0x24
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <_nx_dhcp_get_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG  _nx_dhcp_get_data(UCHAR *data, UINT size)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]

ULONG   value = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]

   
    /* Process the data retrieval request.  */
    while (size-- > 0)
 8007356:	e007      	b.n	8007368 <_nx_dhcp_get_data+0x20>
    {

        /* Build return value.  */
        value = (value << 8) | *data++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	021a      	lsls	r2, r3, #8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1c59      	adds	r1, r3, #1
 8007360:	6079      	str	r1, [r7, #4]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
    while (size-- > 0)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	1e5a      	subs	r2, r3, #1
 800736c:	603a      	str	r2, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f2      	bne.n	8007358 <_nx_dhcp_get_data+0x10>
    }

    /* Return value.  */
    return(value);
 8007372:	68fb      	ldr	r3, [r7, #12]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <_nx_dhcp_store_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_store_data(UCHAR *data, UINT size, ULONG value)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]

    /* Make sure that data is left justified.  */
    switch (size)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b03      	cmp	r3, #3
 8007390:	d011      	beq.n	80073b6 <_nx_dhcp_store_data+0x36>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b03      	cmp	r3, #3
 8007396:	d812      	bhi.n	80073be <_nx_dhcp_store_data+0x3e>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d003      	beq.n	80073a6 <_nx_dhcp_store_data+0x26>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d004      	beq.n	80073ae <_nx_dhcp_store_data+0x2e>
      
            value <<= 8;
            break;

        default:
            break;
 80073a4:	e00b      	b.n	80073be <_nx_dhcp_store_data+0x3e>
            value <<= 24;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	061b      	lsls	r3, r3, #24
 80073aa:	607b      	str	r3, [r7, #4]
            break;
 80073ac:	e008      	b.n	80073c0 <_nx_dhcp_store_data+0x40>
            value <<= 16;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	607b      	str	r3, [r7, #4]
            break;
 80073b4:	e004      	b.n	80073c0 <_nx_dhcp_store_data+0x40>
            value <<= 8;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	607b      	str	r3, [r7, #4]
            break;
 80073bc:	e000      	b.n	80073c0 <_nx_dhcp_store_data+0x40>
            break;
 80073be:	bf00      	nop
    }

    /* Store the value.  */
    while (size-- > 0)
 80073c0:	e00a      	b.n	80073d8 <_nx_dhcp_store_data+0x58>
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0e1b      	lsrs	r3, r3, #24
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	701a      	strb	r2, [r3, #0]
        data++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
        value <<= 8;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	607b      	str	r3, [r7, #4]
    while (size-- > 0)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	1e5a      	subs	r2, r3, #1
 80073dc:	60ba      	str	r2, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1ef      	bne.n	80073c2 <_nx_dhcp_store_data+0x42>
    }
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <_nx_dhcp_move_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 80073fc:	e007      	b.n	800740e <_nx_dhcp_move_string+0x1e>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	1c53      	adds	r3, r2, #1
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	1c59      	adds	r1, r3, #1
 8007408:	60f9      	str	r1, [r7, #12]
 800740a:	7812      	ldrb	r2, [r2, #0]
 800740c:	701a      	strb	r2, [r3, #0]
    while (size-- > 0)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	1e5a      	subs	r2, r3, #1
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f2      	bne.n	80073fe <_nx_dhcp_move_string+0xe>
    }
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <_nx_dhcp_interface_record_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_dhcp_interface_record_find(NX_DHCP *dhcp_ptr, UINT iface_index, NX_DHCP_INTERFACE_RECORD **interface_record)
{
 8007426:	b480      	push	{r7}
 8007428:	b087      	sub	sp, #28
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]

UINT i;

    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	e02c      	b.n	8007492 <_nx_dhcp_interface_record_find+0x6c>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007440:	fb01 f303 	mul.w	r3, r1, r3
 8007444:	4413      	add	r3, r2
 8007446:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800744a:	3310      	adds	r3, #16
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <_nx_dhcp_interface_record_find+0x64>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	4413      	add	r3, r2
 8007460:	f503 53ed 	add.w	r3, r3, #7584	; 0x1da0
 8007464:	330c      	adds	r3, #12
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	d10e      	bne.n	800748c <_nx_dhcp_interface_record_find+0x66>
        {

            /* Yes, we found the record.  */
            *interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8007474:	fb02 f303 	mul.w	r3, r2, r3
 8007478:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800747c:	3310      	adds	r3, #16
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	441a      	add	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]

            /* Return.  */
            return (NX_SUCCESS);
 8007486:	2300      	movs	r3, #0
 8007488:	e007      	b.n	800749a <_nx_dhcp_interface_record_find+0x74>
            continue;
 800748a:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	3301      	adds	r3, #1
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0cf      	beq.n	8007438 <_nx_dhcp_interface_record_find+0x12>
        }
    }

    /* No matching record found.  */
    return (NX_DHCP_INTERFACE_NOT_ENABLED);
 8007498:	23a4      	movs	r3, #164	; 0xa4
}
 800749a:	4618      	mov	r0, r3
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b088      	sub	sp, #32
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d050      	beq.n	800755a <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074b8:	f3ef 8310 	mrs	r3, PRIMASK
 80074bc:	613b      	str	r3, [r7, #16]
    return(posture);
 80074be:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80074c0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80074c2:	b672      	cpsid	i
    return(int_posture);
 80074c4:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 80074c6:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d104      	bne.n	80074dc <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e014      	b.n	8007506 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d104      	bne.n	80074f2 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	6952      	ldr	r2, [r2, #20]
 80074f0:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	6992      	ldr	r2, [r2, #24]
 80074fa:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	6952      	ldr	r2, [r2, #20]
 8007504:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2200      	movs	r2, #0
 800750a:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f383 8810 	msr	PRIMASK, r3
}
 8007530:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 8007532:	e00f      	b.n	8007554 <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 800754e:	6978      	ldr	r0, [r7, #20]
 8007550:	f004 f8ea 	bl	800b728 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1ec      	bne.n	8007534 <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	2100      	movs	r1, #0
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	f00f fab5 	bl	8016ae4 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2d      	ldr	r2, [pc, #180]	; (8007638 <_nx_arp_enable+0xd4>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	091b      	lsrs	r3, r3, #4
 8007588:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	e00a      	b.n	80075a6 <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3334      	adds	r3, #52	; 0x34
 800759e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	3301      	adds	r3, #1
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d3ef      	bcc.n	8007590 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e00a      	b.n	80075d2 <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	3b34      	subs	r3, #52	; 0x34
 80075ca:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	3301      	adds	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d3ef      	bcc.n	80075bc <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2234      	movs	r2, #52	; 0x34
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
 80075e4:	3b34      	subs	r3, #52	; 0x34
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	441a      	add	r2, r3
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4a0a      	ldr	r2, [pc, #40]	; (800763c <_nx_arp_enable+0xd8>)
 8007612:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4a09      	ldr	r2, [pc, #36]	; (8007640 <_nx_arp_enable+0xdc>)
 800761a:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <_nx_arp_enable+0xe0>)
 8007622:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4a07      	ldr	r2, [pc, #28]	; (8007648 <_nx_arp_enable+0xe4>)
 800762a:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800762e:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8007630:	4618      	mov	r0, r3
 8007632:	3720      	adds	r7, #32
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	4ec4ec4f 	.word	0x4ec4ec4f
 800763c:	08007e21 	.word	0x08007e21
 8007640:	08008023 	.word	0x08008023
 8007644:	08007cdd 	.word	0x08007cdd
 8007648:	0800764d 	.word	0x0800764d

0800764c <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80b4 	beq.w	80077cc <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 800766e:	6a39      	ldr	r1, [r7, #32]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff ff18 	bl	80074a6 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007676:	f3ef 8310 	mrs	r3, PRIMASK
 800767a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800767c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800767e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007680:	b672      	cpsid	i
    return(int_posture);
 8007682:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8007684:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d014      	beq.n	80076b8 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6a3a      	ldr	r2, [r7, #32]
 80076b4:	619a      	str	r2, [r3, #24]
 80076b6:	e00b      	b.n	80076d0 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	6a3a      	ldr	r2, [r7, #32]
 80076c2:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6a3a      	ldr	r2, [r7, #32]
 80076ce:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d141      	bne.n	800775a <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d104      	bne.n	80076ea <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
 80076e8:	e009      	b.n	80076fe <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	6912      	ldr	r2, [r2, #16]
 80076f2:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	6a3a      	ldr	r2, [r7, #32]
 80076fa:	68d2      	ldr	r2, [r2, #12]
 80076fc:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	6a3a      	ldr	r2, [r7, #32]
 800770c:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	6a3a      	ldr	r2, [r7, #32]
 8007712:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a3a      	ldr	r2, [r7, #32]
 8007718:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 800771c:	e015      	b.n	800774a <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	6a3a      	ldr	r2, [r7, #32]
 800773e:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007758:	e02c      	b.n	80077b4 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007760:	6a3a      	ldr	r2, [r7, #32]
 8007762:	429a      	cmp	r2, r3
 8007764:	d01f      	beq.n	80077a6 <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	6a3a      	ldr	r2, [r7, #32]
 800776c:	6912      	ldr	r2, [r2, #16]
 800776e:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	6a3a      	ldr	r2, [r7, #32]
 8007776:	68d2      	ldr	r2, [r2, #12]
 8007778:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 26d8 	ldr.w	r2, [r3, #1752]	; 0x6d8
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	6a3a      	ldr	r2, [r7, #32]
 8007794:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	6a3a      	ldr	r2, [r7, #32]
 800779c:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a3a      	ldr	r2, [r7, #32]
 80077a2:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f383 8810 	msr	PRIMASK, r3
}
 80077c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 80077c6:	2300      	movs	r3, #0
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ca:	e001      	b.n	80077d0 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 80077cc:	2317      	movs	r3, #23
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3728      	adds	r7, #40	; 0x28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b088      	sub	sp, #32
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80077e4:	f3ef 8310 	mrs	r3, PRIMASK
 80077e8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80077ea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80077ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80077ee:	b672      	cpsid	i
    return(int_posture);
 80077f0:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80077f2:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d110      	bne.n	8007820 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f383 8810 	msr	PRIMASK, r3
}
 8007816:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8007818:	6838      	ldr	r0, [r7, #0]
 800781a:	f003 fecd 	bl	800b5b8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800781e:	e02f      	b.n	8007880 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d011      	beq.n	800784e <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2200      	movs	r2, #0
 8007838:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f383 8810 	msr	PRIMASK, r3
}
 800784c:	e018      	b.n	8007880 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2200      	movs	r2, #0
 8007862:	61da      	str	r2, [r3, #28]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f383 8810 	msr	PRIMASK, r3
}
 800786e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007876:	2200      	movs	r2, #0
 8007878:	2110      	movs	r1, #16
 800787a:	4618      	mov	r0, r3
 800787c:	f00b fd08 	bl	8013290 <_tx_event_flags_set>
    }
}
 8007880:	3720      	adds	r7, #32
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <_nx_arp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007886:	b590      	push	{r4, r7, lr}
 8007888:	b097      	sub	sp, #92	; 0x5c
 800788a:	af02      	add	r7, sp, #8
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b1b      	cmp	r3, #27
 800789c:	d80a      	bhi.n	80078b4 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 80078ac:	6838      	ldr	r0, [r7, #0]
 80078ae:	f003 fe83 	bl	800b5b8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80078b2:	e20f      	b.n	8007cd4 <_nx_arp_packet_receive+0x44e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 80078ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078bc:	3304      	adds	r3, #4
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c2:	3304      	adds	r3, #4
 80078c4:	ba12      	rev	r2, r2
 80078c6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80078c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ca:	3308      	adds	r3, #8
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d0:	3308      	adds	r3, #8
 80078d2:	ba12      	rev	r2, r2
 80078d4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80078d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d8:	330c      	adds	r3, #12
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078de:	330c      	adds	r3, #12
 80078e0:	ba12      	rev	r2, r2
 80078e2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80078e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e6:	3310      	adds	r3, #16
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ec:	3310      	adds	r3, #16
 80078ee:	ba12      	rev	r2, r2
 80078f0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80078f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f4:	3314      	adds	r3, #20
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fa:	3314      	adds	r3, #20
 80078fc:	ba12      	rev	r2, r2
 80078fe:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8007900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007902:	3318      	adds	r3, #24
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007908:	3318      	adds	r3, #24
 800790a:	ba12      	rev	r2, r2
 800790c:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 800790e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007910:	3304      	adds	r3, #4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8007918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791a:	2b01      	cmp	r3, #1
 800791c:	d00d      	beq.n	800793a <_nx_arp_packet_receive+0xb4>
 800791e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007920:	2b02      	cmp	r3, #2
 8007922:	d00a      	beq.n	800793a <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8007932:	6838      	ldr	r0, [r7, #0]
 8007934:	f003 fe40 	bl	800b5b8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8007938:	e1cc      	b.n	8007cd4 <_nx_arp_packet_receive+0x44e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 800793a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800793c:	3308      	adds	r3, #8
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8007944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007946:	3308      	adds	r3, #8
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	041a      	lsls	r2, r3, #16
 800794c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794e:	330c      	adds	r3, #12
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	0c1b      	lsrs	r3, r3, #16
 8007954:	4313      	orrs	r3, r2
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8007958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795a:	330c      	adds	r3, #12
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	041a      	lsls	r2, r3, #16
 8007960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007962:	3310      	adds	r3, #16
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	0c1b      	lsrs	r3, r3, #16
 8007968:	4313      	orrs	r3, r2
 800796a:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 800796c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f203 7224 	addw	r2, r3, #1828	; 0x724
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d12e      	bne.n	80079f0 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8007996:	2b00      	cmp	r3, #0
 8007998:	d02a      	beq.n	80079f0 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 800799e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d007      	beq.n	80079b4 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d122      	bne.n	80079f0 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d11d      	bne.n	80079f0 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d104      	bne.n	80079c8 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 80079c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d00f      	beq.n	80079e8 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	79db      	ldrb	r3, [r3, #7]
 80079d8:	4619      	mov	r1, r3
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 80079e8:	6838      	ldr	r0, [r7, #0]
 80079ea:	f003 fde5 	bl	800b5b8 <_nx_packet_release>

        return;
 80079ee:	e171      	b.n	8007cd4 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d040      	beq.n	8007a78 <_nx_arp_packet_receive+0x1f2>
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d13b      	bne.n	8007a78 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d105      	bne.n	8007a18 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8007a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d02b      	beq.n	8007a70 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	220a      	movs	r2, #10
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f952 	bl	8007cdc <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	79db      	ldrb	r3, [r3, #7]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d006      	beq.n	8007a70 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3

                return;
 8007a6e:	e131      	b.n	8007cd4 <_nx_arp_packet_receive+0x44e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8007a70:	6838      	ldr	r0, [r7, #0]
 8007a72:	f003 fda1 	bl	800b5b8 <_nx_packet_release>

        return;
 8007a76:	e12d      	b.n	8007cd4 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8007a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	f040 808f 	bne.w	8007b9e <_nx_arp_packet_receive+0x318>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	f040 8088 	bne.w	8007b9e <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8007aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	0c1b      	lsrs	r3, r3, #16
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aae:	3204      	adds	r2, #4
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8007ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac8:	3308      	adds	r3, #8
 8007aca:	430a      	orrs	r2, r1
 8007acc:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8007ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	0419      	lsls	r1, r3, #16
 8007aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af0:	3310      	adds	r3, #16
 8007af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007af4:	430a      	orrs	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8007af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afa:	3314      	adds	r3, #20
 8007afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007afe:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8007b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b02:	3318      	adds	r3, #24
 8007b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b06:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8007b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b10:	3304      	adds	r3, #4
 8007b12:	ba12      	rev	r2, r2
 8007b14:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8007b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b18:	3308      	adds	r3, #8
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1e:	3308      	adds	r3, #8
 8007b20:	ba12      	rev	r2, r2
 8007b22:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8007b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b26:	330c      	adds	r3, #12
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	ba12      	rev	r2, r2
 8007b30:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8007b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b34:	3310      	adds	r3, #16
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	ba12      	rev	r2, r2
 8007b3e:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8007b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b42:	3314      	adds	r3, #20
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b48:	3314      	adds	r3, #20
 8007b4a:	ba12      	rev	r2, r2
 8007b4c:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8007b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b50:	3318      	adds	r3, #24
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b56:	3318      	adds	r3, #24
 8007b58:	ba12      	rev	r2, r2
 8007b5a:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	221c      	movs	r2, #28
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f103 021c 	add.w	r2, r3, #28
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8007b72:	2306      	movs	r3, #6
 8007b74:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b80:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	f107 0208 	add.w	r2, r7, #8
 8007b92:	4610      	mov	r0, r2
 8007b94:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8007b9c:	e00d      	b.n	8007bba <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d105      	bne.n	8007bb0 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	671a      	str	r2, [r3, #112]	; 0x70
 8007bae:	e004      	b.n	8007bba <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	0a1a      	lsrs	r2, r3, #8
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d03c      	beq.n	8007c4c <_nx_arp_packet_receive+0x3c6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	0a1a      	lsrs	r2, r3, #8
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	4413      	add	r3, r2
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8007bf0:	e02c      	b.n	8007c4c <_nx_arp_packet_receive+0x3c6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d117      	bne.n	8007c2c <_nx_arp_packet_receive+0x3a6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8007bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d127      	bne.n	8007c54 <_nx_arp_packet_receive+0x3ce>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8007c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8007c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8007c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c12:	2200      	movs	r2, #0
 8007c14:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8007c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c18:	2200      	movs	r2, #0
 8007c1a:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c20:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8007c22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fa2f 	bl	8008088 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8007c2a:	e014      	b.n	8007c56 <_nx_arp_packet_receive+0x3d0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8007c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c36:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d102      	bne.n	8007c4c <_nx_arp_packet_receive+0x3c6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8007c4a:	e004      	b.n	8007c56 <_nx_arp_packet_receive+0x3d0>
    while (arp_ptr)
 8007c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1cf      	bne.n	8007bf2 <_nx_arp_packet_receive+0x36c>
 8007c52:	e000      	b.n	8007c56 <_nx_arp_packet_receive+0x3d0>
                break;
 8007c54:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8007c56:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <_nx_arp_packet_receive+0x3de>
    {
        _nx_packet_release(packet_ptr);
 8007c5e:	6838      	ldr	r0, [r7, #0]
 8007c60:	f003 fcaa 	bl	800b5b8 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8007c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d134      	bne.n	8007cd4 <_nx_arp_packet_receive+0x44e>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d031      	beq.n	8007cd4 <_nx_arp_packet_receive+0x44e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	0a1a      	lsrs	r2, r3, #8
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	4413      	add	r3, r2
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8007c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c86:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007c8a:	0092      	lsls	r2, r2, #2
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	440a      	add	r2, r1
 8007c90:	1d11      	adds	r1, r2, #4
 8007c92:	2200      	movs	r2, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d11a      	bne.n	8007cd4 <_nx_arp_packet_receive+0x44e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8007cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cba:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8007cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc0:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8007cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8007cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cca:	2200      	movs	r2, #0
 8007ccc:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8007cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd2:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8007cd4:	3754      	adds	r7, #84	; 0x54
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd90      	pop	{r4, r7, pc}
	...

08007cdc <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	; 0x38
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <_nx_arp_packet_send+0x1c>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	f00d f947 	bl	8014f84 <_tx_thread_sleep>
 8007cf6:	e7fa      	b.n	8007cee <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8007cfe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007d02:	2300      	movs	r3, #0
 8007d04:	222c      	movs	r2, #44	; 0x2c
 8007d06:	f002 ffc3 	bl	800ac90 <_nx_packet_allocate>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8081 	bne.w	8007e14 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	221c      	movs	r2, #28
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	3a1c      	subs	r2, #28
 8007d30:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8007d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3a:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8007d3e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	3304      	adds	r3, #4
 8007d44:	4a35      	ldr	r2, [pc, #212]	; (8007e1c <_nx_arp_packet_send+0x140>)
 8007d46:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	3308      	adds	r3, #8
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695a      	ldr	r2, [r3, #20]
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	3310      	adds	r3, #16
 8007d78:	0412      	lsls	r2, r2, #16
 8007d7a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	3314      	adds	r3, #20
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8007d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d86:	3318      	adds	r3, #24
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	ba1a      	rev	r2, r3
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8007d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d98:	3304      	adds	r3, #4
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	3304      	adds	r3, #4
 8007da0:	ba12      	rev	r2, r2
 8007da2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	3308      	adds	r3, #8
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dac:	3308      	adds	r3, #8
 8007dae:	ba12      	rev	r2, r2
 8007db0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	330c      	adds	r3, #12
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	330c      	adds	r3, #12
 8007dbc:	ba12      	rev	r2, r2
 8007dbe:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	3310      	adds	r3, #16
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	3310      	adds	r3, #16
 8007dca:	ba12      	rev	r2, r2
 8007dcc:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8007dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	3314      	adds	r3, #20
 8007dd8:	ba12      	rev	r2, r2
 8007dda:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dde:	3318      	adds	r3, #24
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de4:	3318      	adds	r3, #24
 8007de6:	ba12      	rev	r2, r2
 8007de8:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8007dee:	2305      	movs	r3, #5
 8007df0:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8007df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dfa:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8007dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007e00:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0a:	f107 0210 	add.w	r2, r7, #16
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4798      	blx	r3
 8007e12:	e000      	b.n	8007e16 <_nx_arp_packet_send+0x13a>
                return;
 8007e14:	bf00      	nop
}
 8007e16:	3738      	adds	r7, #56	; 0x38
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	06040001 	.word	0x06040001

08007e20 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007e2e:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8007e30:	2300      	movs	r3, #0
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
 8007e34:	e0af      	b.n	8007f96 <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80a5 	beq.w	8007f8a <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	1e5a      	subs	r2, r3, #1
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f040 809b 	bne.w	8007f8a <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2b12      	cmp	r3, #18
 8007e5a:	f040 8086 	bne.w	8007f6a <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e62:	613b      	str	r3, [r7, #16]
    return(posture);
 8007e64:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007e66:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e68:	b672      	cpsid	i
    return(int_posture);
 8007e6a:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 8007e6c:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d028      	beq.n	8007ec8 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	6a3a      	ldr	r2, [r7, #32]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d104      	bne.n	8007e8a <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	e014      	b.n	8007eb4 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a3a      	ldr	r2, [r7, #32]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d104      	bne.n	8007ea0 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	6a3a      	ldr	r2, [r7, #32]
 8007e9c:	6952      	ldr	r2, [r2, #20]
 8007e9e:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 8007ea4:	6a3a      	ldr	r2, [r7, #32]
 8007ea6:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8007ea8:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8007eb2:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8007eba:	1e5a      	subs	r2, r3, #1
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	6a3a      	ldr	r2, [r7, #32]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d02a      	beq.n	8007f28 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 8007ed6:	6a3a      	ldr	r2, [r7, #32]
 8007ed8:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8007eda:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8007ee0:	6a3a      	ldr	r2, [r7, #32]
 8007ee2:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8007ee4:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007eec:	6a3a      	ldr	r2, [r7, #32]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d104      	bne.n	8007efc <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 26d8 	ldr.w	r2, [r3, #1752]	; 0x6d8
                        arp_entry -> nx_arp_pool_next =
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007f0c:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2c:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f383 8810 	msr	PRIMASK, r3
}
 8007f3e:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 8007f40:	e00f      	b.n	8007f62 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 8007f5c:	6978      	ldr	r0, [r7, #20]
 8007f5e:	f003 fbe3 	bl	800b728 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1ec      	bne.n	8007f42 <_nx_arp_periodic_update+0x122>
 8007f68:	e00f      	b.n	8007f8a <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	220a      	movs	r2, #10
 8007f78:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	6a19      	ldr	r1, [r3, #32]
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	461a      	mov	r2, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff fea9 	bl	8007cdc <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	3301      	adds	r3, #1
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8007f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	f4ff af49 	bcc.w	8007e36 <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa8:	e033      	b.n	8008012 <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	440b      	add	r3, r1
 8007fb8:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d021      	beq.n	8008006 <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	440b      	add	r3, r1
 8007fd0:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d017      	beq.n	800800a <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	440b      	add	r3, r1
 8007fe8:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	1e59      	subs	r1, r3, #1
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	4403      	add	r3, r0
 8007ffe:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8008002:	6019      	str	r1, [r3, #0]
 8008004:	e002      	b.n	800800c <_nx_arp_periodic_update+0x1ec>
            continue;
 8008006:	bf00      	nop
 8008008:	e000      	b.n	800800c <_nx_arp_periodic_update+0x1ec>
            continue;
 800800a:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	3301      	adds	r3, #1
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0c8      	beq.n	8007faa <_nx_arp_periodic_update+0x18a>
    }
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	3728      	adds	r7, #40	; 0x28
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b088      	sub	sp, #32
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800802a:	e023      	b.n	8008074 <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800802c:	f3ef 8310 	mrs	r3, PRIMASK
 8008030:	617b      	str	r3, [r7, #20]
    return(posture);
 8008032:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008034:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008036:	b672      	cpsid	i
    return(int_posture);
 8008038:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 800803a:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8008042:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f383 8810 	msr	PRIMASK, r3
}
 800806a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fc09 	bl	8007886 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1d6      	bne.n	800802c <_nx_arp_queue_process+0xa>
    }
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b090      	sub	sp, #64	; 0x40
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008096:	f3ef 8310 	mrs	r3, PRIMASK
 800809a:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80080a0:	b672      	cpsid	i
    return(int_posture);
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 80080a4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2200      	movs	r2, #0
 80080b8:	631a      	str	r2, [r3, #48]	; 0x30
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	f383 8810 	msr	PRIMASK, r3
}
 80080c4:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 80080c6:	e04c      	b.n	8008162 <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 80080c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 80080cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80080d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d4:	2200      	movs	r2, #0
 80080d6:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 80080f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f6:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80080f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	429a      	cmp	r2, r3
 800810a:	d915      	bls.n	8008138 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800811c:	f107 0208 	add.w	r2, r7, #8
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	e01d      	b.n	8008162 <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 8008130:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008132:	f003 faf9 	bl	800b728 <_nx_packet_transmit_release>
 8008136:	e014      	b.n	8008162 <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	4413      	add	r3, r2
 800814c:	f1a3 0214 	sub.w	r2, r3, #20
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8008154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	f107 0208 	add.w	r2, r7, #8
 800815e:	4610      	mov	r0, r2
 8008160:	4798      	blx	r3
    while (queued_list_head)
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1af      	bne.n	80080c8 <_nx_arp_queue_send+0x40>
        }
    }
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	3740      	adds	r7, #64	; 0x40
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <_nx_icmp_enable+0x30>)
 8008180:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <_nx_icmp_enable+0x34>)
 8008188:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a07      	ldr	r2, [pc, #28]	; (80081ac <_nx_icmp_enable+0x38>)
 8008190:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8008194:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	080082ad 	.word	0x080082ad
 80081a8:	080081ed 	.word	0x080081ed
 80081ac:	0800830b 	.word	0x0800830b

080081b0 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
        return;
 80081d0:	e009      	b.n	80081e6 <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 80081e0:	6838      	ldr	r0, [r7, #0]
 80081e2:	f003 f9e9 	bl	800b5b8 <_nx_packet_release>
}
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	2b07      	cmp	r3, #7
 800820a:	d80a      	bhi.n	8008222 <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800821a:	6838      	ldr	r0, [r7, #0]
 800821c:	f003 f9cc 	bl	800b5b8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008220:	e03c      	b.n	800829c <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008228:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800822a:	4b1e      	ldr	r3, [pc, #120]	; (80082a4 <_nx_icmp_packet_receive+0xb8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4313      	orrs	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <_nx_icmp_packet_receive+0x56>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800823a:	4b1b      	ldr	r3, [pc, #108]	; (80082a8 <_nx_icmp_packet_receive+0xbc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	429a      	cmp	r2, r3
 8008240:	d028      	beq.n	8008294 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008242:	f3ef 8310 	mrs	r3, PRIMASK
 8008246:	617b      	str	r3, [r7, #20]
    return(posture);
 8008248:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800824a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800824c:	b672      	cpsid	i
    return(int_posture);
 800824e:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8008250:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 2378 	ldr.w	r2, [r3, #888]	; 0x378
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	61da      	str	r2, [r3, #28]
 8008266:	e002      	b.n	800826e <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f383 8810 	msr	PRIMASK, r3
}
 8008280:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008288:	2200      	movs	r2, #0
 800828a:	2104      	movs	r1, #4
 800828c:	4618      	mov	r0, r3
 800828e:	f00a ffff 	bl	8013290 <_tx_event_flags_set>
 8008292:	e003      	b.n	800829c <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff ff8a 	bl	80081b0 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 800829c:	3720      	adds	r7, #32
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000094 	.word	0x20000094
 80082a8:	2000aaf8 	.word	0x2000aaf8

080082ac <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80082b4:	f3ef 8310 	mrs	r3, PRIMASK
 80082b8:	60fb      	str	r3, [r7, #12]
    return(posture);
 80082ba:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80082bc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80082be:	b672      	cpsid	i
    return(int_posture);
 80082c0:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 80082c2:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80082ca:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f383 8810 	msr	PRIMASK, r3
}
 80082de:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 80082e0:	e00b      	b.n	80082fa <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2200      	movs	r2, #0
 80082f0:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 80082f2:	6979      	ldr	r1, [r7, #20]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff ff5b 	bl	80081b0 <_nx_icmp_packet_process>
    while (queue_head)
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f0      	bne.n	80082e2 <_nx_icmp_queue_process+0x36>
    }
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b088      	sub	sp, #32
 800830e:	af02      	add	r7, sp, #8
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 8008314:	2301      	movs	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d023      	beq.n	800837e <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 800833a:	2300      	movs	r3, #0
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	2300      	movs	r3, #0
 8008340:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008344:	6838      	ldr	r0, [r7, #0]
 8008346:	f000 fb43 	bl	80089d0 <_nx_ip_checksum_compute>
 800834a:	4603      	mov	r3, r0
 800834c:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 800834e:	89fb      	ldrh	r3, [r7, #14]
 8008350:	43db      	mvns	r3, r3
 8008352:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 8008354:	89fb      	ldrh	r3, [r7, #14]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d011      	beq.n	800837e <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 8008376:	6838      	ldr	r0, [r7, #0]
 8008378:	f003 f91e 	bl	800b5b8 <_nx_packet_release>
            return;
 800837c:	e01b      	b.n	80083b6 <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d104      	bne.n	8008390 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f817 	bl	80083bc <_nx_icmpv4_process_echo_reply>
 800838e:	e012      	b.n	80083b6 <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b08      	cmp	r3, #8
 8008396:	d104      	bne.n	80083a2 <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f8cc 	bl	8008538 <_nx_icmpv4_process_echo_request>
 80083a0:	e009      	b.n	80083b6 <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 80083b0:	6838      	ldr	r0, [r7, #0]
 80083b2:	f003 f901 	bl	800b5b8 <_nx_packet_release>
    }
}
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b090      	sub	sp, #64	; 0x40
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	88db      	ldrh	r3, [r3, #6]
 80083de:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 80083e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80083e2:	ba5b      	rev16	r3, r3
 80083e4:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083e6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80083ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80083f0:	b672      	cpsid	i
    return(int_posture);
 80083f2:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008404:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008406:	4b4b      	ldr	r3, [pc, #300]	; (8008534 <_nx_icmpv4_process_echo_reply+0x178>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	4a49      	ldr	r2, [pc, #292]	; (8008534 <_nx_icmpv4_process_echo_reply+0x178>)
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	f383 8810 	msr	PRIMASK, r3
}
 800841a:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 800841c:	e05e      	b.n	80084dc <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 800841e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008422:	b29b      	uxth	r3, r3
 8008424:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008426:	429a      	cmp	r2, r3
 8008428:	d155      	bne.n	80084d6 <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800842a:	f3ef 8310 	mrs	r3, PRIMASK
 800842e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008430:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008432:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008434:	b672      	cpsid	i
    return(int_posture);
 8008436:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800843a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008440:	429a      	cmp	r2, r3
 8008442:	d104      	bne.n	800844e <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 800844c:	e014      	b.n	8008478 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008456:	429a      	cmp	r2, r3
 8008458:	d104      	bne.n	8008464 <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8008468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800846a:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800846c:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800846e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8008472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008474:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008476:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800847e:	1e5a      	subs	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008488:	2200      	movs	r2, #0
 800848a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800848c:	4b29      	ldr	r3, [pc, #164]	; (8008534 <_nx_icmpv4_process_echo_reply+0x178>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	4a28      	ldr	r2, [pc, #160]	; (8008534 <_nx_icmpv4_process_echo_reply+0x178>)
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f383 8810 	msr	PRIMASK, r3
}
 80084a0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	f1a3 0208 	sub.w	r2, r3, #8
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f103 0208 	add.w	r2, r3, #8
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 80084ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 80084c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 80084ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80084d0:	f00c fe12 	bl	80150f8 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 80084d4:	e007      	b.n	80084e6 <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80084d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	1e5a      	subs	r2, r3, #1
 80084e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d19b      	bne.n	800841e <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d009      	beq.n	8008500 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80084fa:	6838      	ldr	r0, [r7, #0]
 80084fc:	f003 f85c 	bl	800b5b8 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008500:	f3ef 8310 	mrs	r3, PRIMASK
 8008504:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008506:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008508:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800850a:	b672      	cpsid	i
    return(int_posture);
 800850c:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800850e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8008510:	4b08      	ldr	r3, [pc, #32]	; (8008534 <_nx_icmpv4_process_echo_reply+0x178>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3b01      	subs	r3, #1
 8008516:	4a07      	ldr	r2, [pc, #28]	; (8008534 <_nx_icmpv4_process_echo_reply+0x178>)
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f383 8810 	msr	PRIMASK, r3
}
 8008524:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8008526:	f00c fdad 	bl	8015084 <_tx_thread_system_preempt_check>
}
 800852a:	bf00      	nop
 800852c:	3740      	adds	r7, #64	; 0x40
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	2000aaf4 	.word	0x2000aaf4

08008538 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	; 0x30
 800853c:	af04      	add	r7, sp, #16
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 8008542:	2301      	movs	r3, #1
 8008544:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	2200      	movs	r2, #0
 8008568:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d02c      	beq.n	80085dc <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	ba5b      	rev16	r3, r3
 8008588:	b29a      	uxth	r2, r3
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 8008594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008598:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	43db      	mvns	r3, r3
 800859e:	b29a      	uxth	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	43db      	mvns	r3, r3
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4413      	add	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	0c1a      	lsrs	r2, r3, #16
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	4413      	add	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	0c1a      	lsrs	r2, r3, #16
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	4413      	add	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	43db      	mvns	r3, r3
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	ba5b      	rev16	r3, r3
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	805a      	strh	r2, [r3, #2]
 80085da:	e008      	b.n	80085ee <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	2200      	movs	r2, #0
 80085e0:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 80085f8:	f107 0308 	add.w	r3, r7, #8
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 fc7f 	bl	8009f00 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	9303      	str	r3, [sp, #12]
 8008618:	2300      	movs	r3, #0
 800861a:	9302      	str	r3, [sp, #8]
 800861c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	2300      	movs	r3, #0
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fbf6 	bl	8009e1c <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 8008630:	bf00      	nop
 8008632:	3720      	adds	r7, #32
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b096      	sub	sp, #88	; 0x58
 800863c:	af04      	add	r7, sp, #16
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 8008646:	2301      	movs	r3, #1
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 800864a:	2300      	movs	r3, #0
 800864c:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8113 	beq.w	8008880 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008674:	f000 8106 	beq.w	8008884 <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008680:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8008684:	f000 80fe 	beq.w	8008884 <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	691a      	ldr	r2, [r3, #16]
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8008696:	429a      	cmp	r2, r3
 8008698:	d10b      	bne.n	80086b2 <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	691a      	ldr	r2, [r3, #16]
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	43db      	mvns	r3, r3
 80086a4:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 80086ac:	429a      	cmp	r2, r3
 80086ae:	f000 80eb 	beq.w	8008888 <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f040 80e6 	bne.w	800888c <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80e3 	beq.w	8008890 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 80086ce:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80086d2:	d304      	bcc.n	80086de <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f280 80d9 	bge.w	8008890 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e6:	f000 80d3 	beq.w	8008890 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 80086f2:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80086f6:	f000 80cb 	beq.w	8008890 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8008700:	f107 0118 	add.w	r1, r7, #24
 8008704:	2300      	movs	r3, #0
 8008706:	2224      	movs	r2, #36	; 0x24
 8008708:	f002 fac2 	bl	800ac90 <_nx_packet_allocate>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	f040 80c0 	bne.w	8008894 <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	2204      	movs	r2, #4
 8008718:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	0e1b      	lsrs	r3, r3, #24
 8008726:	b2da      	uxtb	r2, r3
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	0c1b      	lsrs	r3, r3, #16
 8008730:	b2da      	uxtb	r2, r3
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	2200      	movs	r2, #0
 800873a:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	061a      	lsls	r2, r3, #24
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	ba1a      	rev	r2, r3
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	0e1b      	lsrs	r3, r3, #24
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	3302      	adds	r3, #2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008766:	3208      	adds	r2, #8
 8008768:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	6899      	ldr	r1, [r3, #8]
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	440a      	add	r2, r1
 8008776:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877c:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	3308      	adds	r3, #8
 8008782:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8008784:	2300      	movs	r3, #0
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008788:	e00a      	b.n	80087a0 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	ba1a      	rev	r2, r3
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	601a      	str	r2, [r3, #0]
        src_packet++;
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	3304      	adds	r3, #4
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800879a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879c:	3301      	adds	r3, #1
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	d9f1      	bls.n	800878a <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087aa:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 80087ac:	e00a      	b.n	80087c4 <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 80087ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087b0:	1d13      	adds	r3, r2, #4
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	1d19      	adds	r1, r3, #4
 80087b8:	6379      	str	r1, [r7, #52]	; 0x34
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 80087be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c0:	3b04      	subs	r3, #4
 80087c2:	643b      	str	r3, [r7, #64]	; 0x40
 80087c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1f1      	bne.n	80087ae <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d4:	e00a      	b.n	80087ec <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	ba1a      	rev	r2, r3
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	601a      	str	r2, [r3, #0]
        src_packet++;
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	3304      	adds	r3, #4
 80087e4:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	3301      	adds	r3, #1
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d9f1      	bls.n	80087d6 <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 8008800:	f107 0314 	add.w	r3, r7, #20
 8008804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f001 fb7a 	bl	8009f00 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800881e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008820:	2b00      	cmp	r3, #0
 8008822:	d017      	beq.n	8008854 <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8008824:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 800882a:	2300      	movs	r3, #0
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008834:	f000 f8cc 	bl	80089d0 <_nx_ip_checksum_compute>
 8008838:	4603      	mov	r3, r0
 800883a:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 800883c:	8bfb      	ldrh	r3, [r7, #30]
 800883e:	43db      	mvns	r3, r3
 8008840:	b29a      	uxth	r2, r3
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	ba5b      	rev16	r3, r3
 800884c:	b29a      	uxth	r2, r3
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	805a      	strh	r2, [r3, #2]
 8008852:	e005      	b.n	8008860 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800885e:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8008860:	69b9      	ldr	r1, [r7, #24]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	9303      	str	r3, [sp, #12]
 8008866:	2300      	movs	r3, #0
 8008868:	9302      	str	r3, [sp, #8]
 800886a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	23ff      	movs	r3, #255	; 0xff
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2300      	movs	r3, #0
 8008876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f001 facf 	bl	8009e1c <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 800887e:	e00a      	b.n	8008896 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8008880:	bf00      	nop
 8008882:	e008      	b.n	8008896 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8008884:	bf00      	nop
 8008886:	e006      	b.n	8008896 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8008888:	bf00      	nop
 800888a:	e004      	b.n	8008896 <_nx_icmpv4_send_error_message+0x25e>
        return;
 800888c:	bf00      	nop
 800888e:	e002      	b.n	8008896 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8008890:	bf00      	nop
 8008892:	e000      	b.n	8008896 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8008894:	bf00      	nop
}
 8008896:	3748      	adds	r7, #72	; 0x48
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4a18      	ldr	r2, [pc, #96]	; (800890c <_nx_igmp_multicast_check+0x70>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d101      	bne.n	80088b4 <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 80088b0:	2301      	movs	r3, #1
 80088b2:	e025      	b.n	8008900 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e01e      	b.n	80088f8 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 80088ba:	68f9      	ldr	r1, [r7, #12]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d10e      	bne.n	80088f2 <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 80088d4:	68f9      	ldr	r1, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 80088e6:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d101      	bne.n	80088f2 <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 80088ee:	2301      	movs	r3, #1
 80088f0:	e006      	b.n	8008900 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	3301      	adds	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b06      	cmp	r3, #6
 80088fc:	d9dd      	bls.n	80088ba <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	e0000001 	.word	0xe0000001

08008910 <_nx_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_CHANGE_NOTIFY, ip_ptr, ip_address_change_notify, additional_info, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008922:	f04f 31ff 	mov.w	r1, #4294967295
 8008926:	4618      	mov	r0, r3
 8008928:	f00b f914 	bl	8013b54 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800892c:	f3ef 8310 	mrs	r3, PRIMASK
 8008930:	617b      	str	r3, [r7, #20]
    return(posture);
 8008932:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008934:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008936:	b672      	cpsid	i
    return(int_posture);
 8008938:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800893a:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address change callback function and the additional information pointers. */
    ip_ptr -> nx_ip_address_change_notify =                  ip_address_change_notify;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ip_ptr -> nx_ip_address_change_notify_additional_info =  additional_info;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f383 8810 	msr	PRIMASK, r3
}
 8008956:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800895e:	4618      	mov	r0, r3
 8008960:	f00b fb70 	bl	8014044 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8008964:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b088      	sub	sp, #32
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008980:	f04f 31ff 	mov.w	r1, #4294967295
 8008984:	4618      	mov	r0, r3
 8008986:	f00b f8e5 	bl	8013b54 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800898a:	f3ef 8310 	mrs	r3, PRIMASK
 800898e:	617b      	str	r3, [r7, #20]
    return(posture);
 8008990:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008992:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008994:	b672      	cpsid	i
    return(int_posture);
 8008996:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008998:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f8d3 2738 	ldr.w	r2, [r3, #1848]	; 0x738
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8d3 273c 	ldr.w	r2, [r3, #1852]	; 0x73c
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f383 8810 	msr	PRIMASK, r3
}
 80089b8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80089c0:	4618      	mov	r0, r3
 80089c2:	f00b fb3f 	bl	8014044 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 80089c6:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08e      	sub	sp, #56	; 0x38
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b11      	cmp	r3, #17
 80089e6:	d002      	beq.n	80089ee <_nx_ip_checksum_compute+0x1e>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b06      	cmp	r3, #6
 80089ec:	d141      	bne.n	8008a72 <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <_nx_ip_checksum_compute+0x2e>
 80089f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d104      	bne.n	8008a08 <_nx_ip_checksum_compute+0x38>
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008a02:	f00c fabf 	bl	8014f84 <_tx_thread_sleep>
 8008a06:	e7fa      	b.n	80089fe <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8008a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0e:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	4413      	add	r3, r2
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	3302      	adds	r3, #2
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a26:	4413      	add	r3, r2
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	4413      	add	r3, r2
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	3302      	adds	r3, #2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	4413      	add	r3, r2
 8008a42:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8008a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	0c1a      	lsrs	r2, r3, #16
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	4413      	add	r3, r2
 8008a56:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	0c1a      	lsrs	r2, r3, #16
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	4413      	add	r3, r2
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8008a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a66:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8008a68:	8b7b      	ldrh	r3, [r7, #26]
 8008a6a:	ba5b      	rev16	r3, r3
 8008a6c:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8008a6e:	8b7b      	ldrh	r3, [r7, #26]
 8008a70:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8008a7c:	e058      	b.n	8008b30 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d905      	bls.n	8008a9e <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f023 0303 	bic.w	r3, r3, #3
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9c:	e006      	b.n	8008aac <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3b03      	subs	r3, #3
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d91c      	bls.n	8008af4 <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8008aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	3303      	adds	r3, #3
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8008acc:	e00e      	b.n	8008aec <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad6:	4413      	add	r3, r2
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae2:	4413      	add	r3, r2
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	3304      	adds	r3, #4
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d8ec      	bhi.n	8008ace <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d018      	beq.n	8008b2c <_nx_ip_checksum_compute+0x15c>
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d014      	beq.n	8008b2c <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d10a      	bne.n	8008b24 <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1a:	4413      	add	r3, r2
 8008b1c:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3b02      	subs	r3, #2
 8008b22:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b2a:	e001      	b.n	8008b30 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1a3      	bne.n	8008a7e <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01f      	beq.n	8008b7c <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d104      	bne.n	8008b50 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	3301      	adds	r3, #1
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e00f      	b.n	8008b70 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d10c      	bne.n	8008b70 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5e:	4413      	add	r3, r2
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	3302      	adds	r3, #2
 8008b66:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b78:	4413      	add	r3, r2
 8008b7a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7e:	0c1a      	lsrs	r2, r3, #16
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8008b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8a:	0c1a      	lsrs	r2, r3, #16
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	4413      	add	r3, r2
 8008b92:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 8008b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b96:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8008b98:	8b7b      	ldrh	r3, [r7, #26]
 8008b9a:	ba5b      	rev16	r3, r3
 8008b9c:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 8008b9e:	8b7b      	ldrh	r3, [r7, #26]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3738      	adds	r7, #56	; 0x38
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b092      	sub	sp, #72	; 0x48
 8008bac:	af06      	add	r7, sp, #24
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8008bba:	4b8a      	ldr	r3, [pc, #552]	; (8008de4 <_nx_ip_create+0x23c>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b8a      	ldr	r3, [pc, #552]	; (8008de8 <_nx_ip_create+0x240>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	4b89      	ldr	r3, [pc, #548]	; (8008dec <_nx_ip_create+0x244>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8008bca:	4b89      	ldr	r3, [pc, #548]	; (8008df0 <_nx_ip_create+0x248>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8008bce:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8008bd0:	4b88      	ldr	r3, [pc, #544]	; (8008df4 <_nx_ip_create+0x24c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	4a88      	ldr	r2, [pc, #544]	; (8008df8 <_nx_ip_create+0x250>)
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 8008be0:	234a      	movs	r3, #74	; 0x4a
 8008be2:	e0fb      	b.n	8008ddc <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8008be4:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8008be8:	2100      	movs	r1, #0
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f00d ff7a 	bl	8016ae4 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	401a      	ands	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 2768 	str.w	r2, [r3, #1896]	; 0x768
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c20:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4a75      	ldr	r2, [pc, #468]	; (8008dfc <_nx_ip_create+0x254>)
 8008c28:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c30:	e00f      	b.n	8008c52 <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	b2d8      	uxtb	r0, r3
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	011b      	lsls	r3, r3, #4
 8008c42:	440b      	add	r3, r1
 8008c44:	f203 732b 	addw	r3, r3, #1835	; 0x72b
 8008c48:	4602      	mov	r2, r0
 8008c4a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	3301      	adds	r3, #1
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d9ec      	bls.n	8008c32 <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4a69      	ldr	r2, [pc, #420]	; (8008e00 <_nx_ip_create+0x258>)
 8008c5c:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4a66      	ldr	r2, [pc, #408]	; (8008e04 <_nx_ip_create+0x25c>)
 8008c6c:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8008c76:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8008c80:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c9a:	f8c3 2798 	str.w	r2, [r3, #1944]	; 0x798

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008cac:	f8c3 27b4 	str.w	r2, [r3, #1972]	; 0x7b4
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cc2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008ccc:	2200      	movs	r2, #0
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f00a fe3b 	bl	801394c <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008cdc:	68b9      	ldr	r1, [r7, #8]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f00a f9a6 	bl	8013030 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8008ce4:	f00b fef0 	bl	8014ac8 <_tx_thread_identify>
 8008ce8:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d006      	beq.n	8008cfe <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfa:	f00b ff99 	bl	8014c30 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	2301      	movs	r3, #1
 8008d08:	9305      	str	r3, [sp, #20]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d10:	9303      	str	r3, [sp, #12]
 8008d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	4a39      	ldr	r2, [pc, #228]	; (8008e08 <_nx_ip_create+0x260>)
 8008d22:	68b9      	ldr	r1, [r7, #8]
 8008d24:	f00b fd80 	bl	8014828 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 701d 	add.w	r0, r3, #628	; 0x274
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	9202      	str	r2, [sp, #8]
 8008d34:	2264      	movs	r2, #100	; 0x64
 8008d36:	9201      	str	r2, [sp, #4]
 8008d38:	2264      	movs	r2, #100	; 0x64
 8008d3a:	9200      	str	r2, [sp, #0]
 8008d3c:	4a33      	ldr	r2, [pc, #204]	; (8008e0c <_nx_ip_create+0x264>)
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	f00c fcac 	bl	801569c <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4a32      	ldr	r2, [pc, #200]	; (8008e10 <_nx_ip_create+0x268>)
 8008d48:	f8c3 27c4 	str.w	r2, [r3, #1988]	; 0x7c4
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d50:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008d52:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008d54:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d56:	b672      	cpsid	i
    return(int_posture);
 8008d58:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <_nx_ip_create+0x26c>)
 8008d60:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8008d62:	4b2d      	ldr	r3, [pc, #180]	; (8008e18 <_nx_ip_create+0x270>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d017      	beq.n	8008d9a <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8008d6a:	4b2b      	ldr	r3, [pc, #172]	; (8008e18 <_nx_ip_create+0x270>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 8008d72:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8008d74:	4b28      	ldr	r3, [pc, #160]	; (8008e18 <_nx_ip_create+0x270>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a3a      	ldr	r2, [r7, #32]
 8008d8a:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 8008d8e:	4b22      	ldr	r3, [pc, #136]	; (8008e18 <_nx_ip_create+0x270>)
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
 8008d98:	e00a      	b.n	8008db0 <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 8008d9a:	4a1f      	ldr	r2, [pc, #124]	; (8008e18 <_nx_ip_create+0x270>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8008db0:	4b1a      	ldr	r3, [pc, #104]	; (8008e1c <_nx_ip_create+0x274>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3301      	adds	r3, #1
 8008db6:	4a19      	ldr	r2, [pc, #100]	; (8008e1c <_nx_ip_create+0x274>)
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f383 8810 	msr	PRIMASK, r3
}
 8008dc4:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f107 0210 	add.w	r2, r7, #16
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd6:	f00b ff2b 	bl	8014c30 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3730      	adds	r7, #48	; 0x30
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	2000aa04 	.word	0x2000aa04
 8008de8:	2000aa14 	.word	0x2000aa14
 8008dec:	2000aa0c 	.word	0x2000aa0c
 8008df0:	2000aa08 	.word	0x2000aa08
 8008df4:	2000aa10 	.word	0x2000aa10
 8008df8:	20000030 	.word	0x20000030
 8008dfc:	08017e78 	.word	0x08017e78
 8008e00:	08017e7c 	.word	0x08017e7c
 8008e04:	7f000001 	.word	0x7f000001
 8008e08:	0800a205 	.word	0x0800a205
 8008e0c:	08009edd 	.word	0x08009edd
 8008e10:	0800a7cd 	.word	0x0800a7cd
 8008e14:	49502020 	.word	0x49502020
 8008e18:	2000a9f8 	.word	0x2000a9f8
 8008e1c:	2000a9f4 	.word	0x2000a9f4

08008e20 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08c      	sub	sp, #48	; 0x30
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 37c8 	ldr.w	r3, [r3, #1992]	; 0x7c8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d053      	beq.n	8008eda <_nx_ip_deferred_link_status_process+0xba>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008e32:	2300      	movs	r3, #0
 8008e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e36:	e04c      	b.n	8008ed2 <_nx_ip_deferred_link_status_process+0xb2>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	440b      	add	r3, r1
 8008e46:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d03d      	beq.n	8008ecc <_nx_ip_deferred_link_status_process+0xac>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	440b      	add	r3, r1
 8008e5e:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8008e62:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d031      	beq.n	8008ecc <_nx_ip_deferred_link_status_process+0xac>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	440b      	add	r3, r1
 8008e76:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8008e82:	230a      	movs	r3, #10
 8008e84:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8008e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	4413      	add	r3, r2
 8008e98:	3304      	adds	r3, #4
 8008e9a:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8008e9c:	f107 0308 	add.w	r3, r7, #8
 8008ea0:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	440b      	add	r3, r1
 8008eb0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f107 020c 	add.w	r2, r7, #12
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 37c8 	ldr.w	r3, [r3, #1992]	; 0x7c8
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	3301      	adds	r3, #1
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0af      	beq.n	8008e38 <_nx_ip_deferred_link_status_process+0x18>
 8008ed8:	e000      	b.n	8008edc <_nx_ip_deferred_link_status_process+0xbc>
        return;
 8008eda:	bf00      	nop
        }
    }
}
 8008edc:	3730      	adds	r7, #48	; 0x30
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <_nx_ip_dispatch_process>:
/*                                            destination header check,   */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 8008ef4:	e09a      	b.n	800902c <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b32      	cmp	r3, #50	; 0x32
 8008efa:	d005      	beq.n	8008f08 <_nx_ip_dispatch_process+0x24>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b33      	cmp	r3, #51	; 0x33
 8008f00:	d104      	bne.n	8008f0c <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 8008f02:	2301      	movs	r3, #1
 8008f04:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 8008f06:	e07d      	b.n	8009004 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e094      	b.n	8009036 <_nx_ip_dispatch_process+0x152>
                    return(NX_INVALID_PACKET);
                }
            }
#endif /* NX_IPSEC_ENABLE */

            if (protocol == NX_PROTOCOL_TCP)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b06      	cmp	r3, #6
 8008f10:	d10f      	bne.n	8008f32 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e084      	b.n	8009036 <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8008f30:	e067      	b.n	8009002 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d112      	bne.n	8008f62 <_nx_ip_dispatch_process+0x7e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d10f      	bne.n	8008f62 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	4798      	blx	r3
                    return(0);
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e06c      	b.n	8009036 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e04f      	b.n	8009002 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	d112      	bne.n	8008f92 <_nx_ip_dispatch_process+0xae>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d10f      	bne.n	8008f92 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	4798      	blx	r3
                    return(0);
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e054      	b.n	8009036 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	617b      	str	r3, [r7, #20]
 8008f90:	e037      	b.n	8009002 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b11      	cmp	r3, #17
 8008f96:	d10f      	bne.n	8008fb8 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	4798      	blx	r3
                        return(0);
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e041      	b.n	8009036 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]
            break;
 8008fb6:	e024      	b.n	8009002 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00c      	beq.n	8008fdc <_nx_ip_dispatch_process+0xf8>
                    if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	0411      	lsls	r1, r2, #16
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	4798      	blx	r3
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <_nx_ip_dispatch_process+0xf8>
                        return(0);
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e02c      	b.n	8009036 <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	d105      	bne.n	8008ff2 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4a15      	ldr	r2, [pc, #84]	; (8009040 <_nx_ip_dispatch_process+0x15c>)
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7ff fb23 	bl	8008638 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
            break;
 8009000:	e7ff      	b.n	8009002 <_nx_ip_dispatch_process+0x11e>
 8009002:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d010      	beq.n	800902c <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	1e5a      	subs	r2, r3, #1
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	1ad2      	subs	r2, r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f43f af61 	beq.w	8008ef6 <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 8009034:	697b      	ldr	r3, [r7, #20]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	03020000 	.word	0x03020000

08009044 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8009052:	2200      	movs	r2, #0
 8009054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009058:	4618      	mov	r0, r3
 800905a:	f00a f919 	bl	8013290 <_tx_event_flags_set>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b09e      	sub	sp, #120	; 0x78
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
 8009072:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009086:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 8009088:	2300      	movs	r3, #0
 800908a:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	795b      	ldrb	r3, [r3, #5]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 8179 	beq.w	800938a <_nx_ip_driver_packet_send+0x324>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ae:	d00d      	beq.n	80090cc <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090b4:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80090b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d110      	bne.n	80090de <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 80090bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090be:	43da      	mvns	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	401a      	ands	r2, r3
 80090c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c6:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d108      	bne.n	80090de <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80090cc:	2304      	movs	r3, #4
 80090ce:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80090d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090d4:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80090d6:	f04f 33ff 	mov.w	r3, #4294967295
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
 80090dc:	e167      	b.n	80093ae <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d105      	bne.n	80090f6 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	637b      	str	r3, [r7, #52]	; 0x34
 80090f4:	e15b      	b.n	80093ae <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80090fc:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009100:	d133      	bne.n	800916a <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 8009102:	2300      	movs	r3, #0
 8009104:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8009106:	e00f      	b.n	8009128 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 8009108:	68f9      	ldr	r1, [r7, #12]
 800910a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	429a      	cmp	r2, r3
 8009120:	d006      	beq.n	8009130 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 8009122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009124:	3301      	adds	r3, #1
 8009126:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8009128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800912a:	2b06      	cmp	r3, #6
 800912c:	d9ec      	bls.n	8009108 <_nx_ip_driver_packet_send+0xa2>
 800912e:	e000      	b.n	8009132 <_nx_ip_driver_packet_send+0xcc>
                    break;
 8009130:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 8009132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009134:	2b06      	cmp	r3, #6
 8009136:	d80e      	bhi.n	8009156 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8009156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800915a:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009162:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
 8009168:	e121      	b.n	80093ae <_nx_ip_driver_packet_send+0x348>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 800916a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800916e:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	0a1a      	lsrs	r2, r3, #8
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	f003 031f 	and.w	r3, r3, #31
 800917c:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009182:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 800918e:	e014      	b.n	80091ba <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8009190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	429a      	cmp	r2, r3
 8009198:	d013      	beq.n	80091c2 <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800919a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d102      	bne.n	80091ba <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 80091b8:	e004      	b.n	80091c4 <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 80091ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e7      	bne.n	8009190 <_nx_ip_driver_packet_send+0x12a>
 80091c0:	e000      	b.n	80091c4 <_nx_ip_driver_packet_send+0x15e>
                    break;
 80091c2:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 80091c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d023      	beq.n	8009212 <_nx_ip_driver_packet_send+0x1ac>
 80091ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d2:	4313      	orrs	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01c      	beq.n	8009212 <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091d8:	f3ef 8310 	mrs	r3, PRIMASK
 80091dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80091de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80091e0:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80091e2:	b672      	cpsid	i
    return(int_posture);
 80091e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 80091e6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 80091e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80091ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009202:	605a      	str	r2, [r3, #4]
 8009204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009206:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800920a:	f383 8810 	msr	PRIMASK, r3
}
 800920e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 8009210:	e0cd      	b.n	80093ae <_nx_ip_driver_packet_send+0x348>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	429a      	cmp	r2, r3
 800921e:	d910      	bls.n	8009242 <_nx_ip_driver_packet_send+0x1dc>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <_nx_ip_driver_packet_send+0x1ca>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d008      	beq.n	8009242 <_nx_ip_driver_packet_send+0x1dc>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 800923a:	68b8      	ldr	r0, [r7, #8]
 800923c:	f002 fa74 	bl	800b728 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 8009240:	e134      	b.n	80094ac <_nx_ip_driver_packet_send+0x446>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 8009242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d052      	beq.n	80092ee <_nx_ip_driver_packet_send+0x288>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009248:	f3ef 8310 	mrs	r3, PRIMASK
 800924c:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 800924e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 8009250:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8009252:	b672      	cpsid	i
    return(int_posture);
 8009254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 8009256:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 800925e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <_nx_ip_driver_packet_send+0x214>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8009266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	631a      	str	r2, [r3, #48]	; 0x30
 800926c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009272:	f383 8810 	msr	PRIMASK, r3
}
 8009276:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 8009278:	e117      	b.n	80094aa <_nx_ip_driver_packet_send+0x444>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 800927a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927e:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 8009280:	2301      	movs	r3, #1
 8009282:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8009284:	e005      	b.n	8009292 <_nx_ip_driver_packet_send+0x22c>
                            queued_count++;
 8009286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009288:	3301      	adds	r3, #1
 800928a:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 800928c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 8009292:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f5      	bne.n	8009286 <_nx_ip_driver_packet_send+0x220>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 800929a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 80092a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d913      	bls.n	80092d2 <_nx_ip_driver_packet_send+0x26c>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 80092aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 80092b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b2:	69da      	ldr	r2, [r3, #28]
 80092b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 80092b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ba:	2200      	movs	r2, #0
 80092bc:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	655a      	str	r2, [r3, #84]	; 0x54
 80092d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	f383 8810 	msr	PRIMASK, r3
}
 80092dc:	bf00      	nop
                        if (remove_packet)
 80092de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80e2 	beq.w	80094aa <_nx_ip_driver_packet_send+0x444>
                            _nx_packet_transmit_release(remove_packet);
 80092e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092e8:	f002 fa1e 	bl	800b728 <_nx_packet_transmit_release>
                return;
 80092ec:	e0dd      	b.n	80094aa <_nx_ip_driver_packet_send+0x444>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00f      	beq.n	8009318 <_nx_ip_driver_packet_send+0x2b2>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80092fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009300:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8009304:	0092      	lsls	r2, r2, #2
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	440a      	add	r2, r1
 800930a:	1d11      	adds	r1, r2, #4
 800930c:	2200      	movs	r2, #0
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	4798      	blx	r3
 8009312:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00d      	beq.n	8009334 <_nx_ip_driver_packet_send+0x2ce>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 800932c:	68b8      	ldr	r0, [r7, #8]
 800932e:	f002 f9fb 	bl	800b728 <_nx_packet_transmit_release>
                        return;
 8009332:	e0bb      	b.n	80094ac <_nx_ip_driver_packet_send+0x446>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009338:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 8009346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 800934c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934e:	2200      	movs	r2, #0
 8009350:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 8009352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009354:	2200      	movs	r2, #0
 8009356:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 8009358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935a:	220a      	movs	r2, #10
 800935c:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 800935e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009360:	2200      	movs	r2, #0
 8009362:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8009372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	4798      	blx	r3
                return;
 8009388:	e08f      	b.n	80094aa <_nx_ip_driver_packet_send+0x444>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009390:	d302      	bcc.n	8009398 <_nx_ip_driver_packet_send+0x332>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8009392:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009394:	2b00      	cmp	r3, #0
 8009396:	da05      	bge.n	80093a4 <_nx_ip_driver_packet_send+0x33e>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d104      	bne.n	80093ae <_nx_ip_driver_packet_send+0x348>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 80093ae:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d131      	bne.n	800941a <_nx_ip_driver_packet_send+0x3b4>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80093bc:	f107 0114 	add.w	r1, r7, #20
 80093c0:	2300      	movs	r3, #0
 80093c2:	68b8      	ldr	r0, [r7, #8]
 80093c4:	f001 fd2e 	bl	800ae24 <_nx_packet_copy>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d11b      	bne.n	8009406 <_nx_ip_driver_packet_send+0x3a0>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <_nx_ip_driver_packet_send+0x378>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fb0f 	bl	80099fc <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	4413      	add	r3, r2
 80093f2:	f1a3 0214 	sub.w	r2, r3, #20
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	4619      	mov	r1, r3
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 fc88 	bl	8009d14 <_nx_ip_packet_deferred_receive>
 8009404:	e009      	b.n	800941a <_nx_ip_driver_packet_send+0x3b4>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 800941a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941c:	2b00      	cmp	r3, #0
 800941e:	d040      	beq.n	80094a2 <_nx_ip_driver_packet_send+0x43c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	429a      	cmp	r2, r3
 800942c:	d919      	bls.n	8009462 <_nx_ip_driver_packet_send+0x3fc>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00b      	beq.n	8009450 <_nx_ip_driver_packet_send+0x3ea>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800943e:	d007      	beq.n	8009450 <_nx_ip_driver_packet_send+0x3ea>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8009446:	f107 0218 	add.w	r2, r7, #24
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 800944e:	e02d      	b.n	80094ac <_nx_ip_driver_packet_send+0x446>
                ip_ptr -> nx_ip_send_packets_dropped++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 800945a:	68b8      	ldr	r0, [r7, #8]
 800945c:	f002 f964 	bl	800b728 <_nx_packet_transmit_release>
            return;
 8009460:	e024      	b.n	80094ac <_nx_ip_driver_packet_send+0x446>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	4413      	add	r3, r2
 8009476:	f1a3 0214 	sub.w	r2, r3, #20
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d104      	bne.n	8009492 <_nx_ip_driver_packet_send+0x42c>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	f00b fd7a 	bl	8014f84 <_tx_thread_sleep>
 8009490:	e7fa      	b.n	8009488 <_nx_ip_driver_packet_send+0x422>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009498:	f107 0218 	add.w	r2, r7, #24
 800949c:	4610      	mov	r0, r2
 800949e:	4798      	blx	r3
 80094a0:	e004      	b.n	80094ac <_nx_ip_driver_packet_send+0x446>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 80094a2:	68b8      	ldr	r0, [r7, #8]
 80094a4:	f002 f940 	bl	800b728 <_nx_packet_transmit_release>
 80094a8:	e000      	b.n	80094ac <_nx_ip_driver_packet_send+0x446>
                return;
 80094aa:	bf00      	nop
    }
}
 80094ac:	3778      	adds	r7, #120	; 0x78
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <_nx_ip_fast_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_ip_fast_periodic_timer_entry(ULONG ip_address)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80094c4:	2200      	movs	r2, #0
 80094c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80094ca:	4618      	mov	r0, r3
 80094cc:	f009 fee0 	bl	8013290 <_tx_event_flags_set>
}
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <_nx_ip_fast_periodic_timer_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af04      	add	r7, sp, #16
 80094de:	6078      	str	r0, [r7, #4]

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3624 	ldr.w	r3, [r3, #1572]	; 0x624
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d116      	bne.n	8009518 <_nx_ip_fast_periodic_timer_create+0x40>
    {
        return;
    }

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;
 80094ea:	230a      	movs	r3, #10
 80094ec:	60fb      	str	r3, [r7, #12]

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f503 60c5 	add.w	r0, r3, #1576	; 0x628
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6859      	ldr	r1, [r3, #4]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	2301      	movs	r3, #1
 80094fc:	9302      	str	r3, [sp, #8]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	4613      	mov	r3, r2
 8009508:	4a05      	ldr	r2, [pc, #20]	; (8009520 <_nx_ip_fast_periodic_timer_create+0x48>)
 800950a:	f00c f8c7 	bl	801569c <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
 8009516:	e000      	b.n	800951a <_nx_ip_fast_periodic_timer_create+0x42>
        return;
 8009518:	bf00      	nop
}
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	080094b3 	.word	0x080094b3

08009524 <_nx_ip_gateway_address_clear>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009532:	f04f 31ff 	mov.w	r1, #4294967295
 8009536:	4618      	mov	r0, r3
 8009538:	f00a fb0c 	bl	8013b54 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800953c:	f3ef 8310 	mrs	r3, PRIMASK
 8009540:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009542:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009544:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009546:	b672      	cpsid	i
    return(int_posture);
 8009548:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts.  */
    TX_DISABLE
 800954a:	617b      	str	r3, [r7, #20]

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	60da      	str	r2, [r3, #12]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f383 8810 	msr	PRIMASK, r3
}
 8009562:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800956a:	4618      	mov	r0, r3
 800956c:	f00a fd6a 	bl	8014044 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009570:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009572:	4618      	mov	r0, r3
 8009574:	3718      	adds	r7, #24
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <_nx_ip_gateway_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	6039      	str	r1, [r7, #0]
UINT status;


    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;
 8009584:	234e      	movs	r3, #78	; 0x4e
 8009586:	60fb      	str	r3, [r7, #12]

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800958e:	f04f 31ff 	mov.w	r1, #4294967295
 8009592:	4618      	mov	r0, r3
 8009594:	f00a fade 	bl	8013b54 <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <_nx_ip_gateway_address_get+0x32>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	601a      	str	r2, [r3, #0]

        status = NX_SUCCESS;
 80095a8:	2300      	movs	r3, #0
 80095aa:	60fb      	str	r3, [r7, #12]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80095b2:	4618      	mov	r0, r3
 80095b4:	f00a fd46 	bl	8014044 <_tx_mutex_put>

    /* Return completion status.  */
    return(status);
 80095b8:	68fb      	ldr	r3, [r7, #12]
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <_nx_ip_gateway_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b088      	sub	sp, #32
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]

#ifndef NX_DISABLE_IPV4
INT           i;
TX_INTERRUPT_SAVE_AREA

NX_INTERFACE *ip_interface_ptr = NX_NULL;
 80095cc:	2300      	movs	r3, #0
 80095ce:	61bb      	str	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80095d6:	f04f 31ff 	mov.w	r1, #4294967295
 80095da:	4618      	mov	r0, r3
 80095dc:	f00a faba 	bl	8013b54 <_tx_mutex_get>

    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80095e0:	2300      	movs	r3, #0
 80095e2:	61fb      	str	r3, [r7, #28]
 80095e4:	e033      	b.n	800964e <_nx_ip_gateway_address_set+0x8c>
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	440b      	add	r3, r1
 80095f4:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d024      	beq.n	8009648 <_nx_ip_gateway_address_set+0x86>
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	69fa      	ldr	r2, [r7, #28]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	440b      	add	r3, r1
 800960c:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	ea02 0103 	and.w	r1, r2, r3
             ip_ptr -> nx_ip_interface[i].nx_interface_ip_network))
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	69fa      	ldr	r2, [r7, #28]
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	011b      	lsls	r3, r3, #4
 8009624:	4403      	add	r3, r0
 8009626:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 800962a:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800962c:	4299      	cmp	r1, r3
 800962e:	d10b      	bne.n	8009648 <_nx_ip_gateway_address_set+0x86>
        {

            /* This is the interface for the gateway.  */
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8009630:	69fa      	ldr	r2, [r7, #28]
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	011b      	lsls	r3, r3, #4
 800963a:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	3304      	adds	r3, #4
 8009644:	61bb      	str	r3, [r7, #24]

            /* Break out of the search. */
            break;
 8009646:	e005      	b.n	8009654 <_nx_ip_gateway_address_set+0x92>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	3301      	adds	r3, #1
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	2b00      	cmp	r3, #0
 8009652:	ddc8      	ble.n	80095e6 <_nx_ip_gateway_address_set+0x24>
        }
    }

    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d107      	bne.n	800966a <_nx_ip_gateway_address_set+0xa8>
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009660:	4618      	mov	r0, r3
 8009662:	f00a fcef 	bl	8014044 <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 8009666:	2321      	movs	r3, #33	; 0x21
 8009668:	e01a      	b.n	80096a0 <_nx_ip_gateway_address_set+0xde>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800966a:	f3ef 8310 	mrs	r3, PRIMASK
 800966e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009670:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009672:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009674:	b672      	cpsid	i
    return(int_posture);
 8009676:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009678:	617b      	str	r3, [r7, #20]

    /* Setup the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  ip_address;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	60da      	str	r2, [r3, #12]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f383 8810 	msr	PRIMASK, r3
}
 8009690:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009698:	4618      	mov	r0, r3
 800969a:	f00a fcd3 	bl	8014044 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800969e:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3720      	adds	r7, #32
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <_nx_ip_header_add>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08c      	sub	sp, #48	; 0x30
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 80096ba:	2301      	movs	r3, #1
 80096bc:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 80096be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c4:	d106      	bne.n	80096d4 <_nx_ip_header_add+0x2c>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d101      	bne.n	80096d4 <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 80096d0:	2304      	movs	r3, #4
 80096d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096da:	f06f 0313 	mvn.w	r3, #19
 80096de:	1a5b      	subs	r3, r3, r1
 80096e0:	441a      	add	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	4413      	add	r3, r2
 80096ee:	f103 0214 	add.w	r2, r3, #20
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	689a      	ldr	r2, [r3, #8]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d204      	bcs.n	800970c <_nx_ip_header_add+0x64>
 8009702:	f04f 30ff 	mov.w	r0, #4294967295
 8009706:	f00b fc3d 	bl	8014f84 <_tx_thread_sleep>
 800970a:	e7fa      	b.n	8009702 <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	b2db      	uxtb	r3, r3
 8009724:	4413      	add	r3, r2
 8009726:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8009728:	3314      	adds	r3, #20
 800972a:	b2da      	uxtb	r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009738:	2b01      	cmp	r3, #1
 800973a:	d101      	bne.n	8009740 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800973c:	2300      	movs	r3, #0
 800973e:	e08b      	b.n	8009858 <_nx_ip_header_add+0x1b0>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	2b00      	cmp	r3, #0
 8009744:	d009      	beq.n	800975a <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	4313      	orrs	r3, r2
 8009750:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	e008      	b.n	800976c <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	b29a      	uxth	r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	4313      	orrs	r3, r2
 8009764:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009772:	1c59      	adds	r1, r3, #1
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 800977a:	041a      	lsls	r2, r3, #16
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	431a      	orrs	r2, r3
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	061a      	lsls	r2, r3, #24
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	431a      	orrs	r2, r3
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009794:	695a      	ldr	r2, [r3, #20]
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d004      	beq.n	80097b0 <_nx_ip_header_add+0x108>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	3314      	adds	r3, #20
 80097ac:	4a2c      	ldr	r2, [pc, #176]	; (8009860 <_nx_ip_header_add+0x1b8>)
 80097ae:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	ba1a      	rev	r2, r3
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	ba1a      	rev	r2, r3
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	ba1a      	rev	r2, r3
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	ba1a      	rev	r2, r3
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	ba1a      	rev	r2, r3
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d008      	beq.n	80097fa <_nx_ip_header_add+0x152>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	3314      	adds	r3, #20
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	3314      	adds	r3, #20
 80097f6:	ba12      	rev	r2, r2
 80097f8:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <_nx_ip_header_add+0x164>
    {
        compute_checksum = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01b      	beq.n	800984a <_nx_ip_header_add+0x1a2>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8009818:	2300      	movs	r3, #0
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	2300      	movs	r3, #0
 800981e:	2104      	movs	r1, #4
 8009820:	68b8      	ldr	r0, [r7, #8]
 8009822:	f7ff f8d5 	bl	80089d0 <_nx_ip_checksum_compute>
 8009826:	4603      	mov	r3, r0
 8009828:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	43db      	mvns	r3, r3
 800982e:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	b29b      	uxth	r3, r3
 8009834:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	ba1b      	rev	r3, r3
 800983a:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	431a      	orrs	r2, r3
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	609a      	str	r2, [r3, #8]
 8009848:	e005      	b.n	8009856 <_nx_ip_header_add+0x1ae>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	f043 0201 	orr.w	r2, r3, #1
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3728      	adds	r7, #40	; 0x28
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	94040000 	.word	0x94040000

08009864 <_nx_ip_interface_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009878:	f04f 31ff 	mov.w	r1, #4294967295
 800987c:	4618      	mov	r0, r3
 800987e:	f00a f969 	bl	8013b54 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009882:	f3ef 8310 	mrs	r3, PRIMASK
 8009886:	617b      	str	r3, [r7, #20]
    return(posture);
 8009888:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800988a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800988c:	b672      	cpsid	i
    return(int_posture);
 800988e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009890:	61fb      	str	r3, [r7, #28]


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	440b      	add	r3, r1
 80098a0:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	440b      	add	r3, r1
 80098b8:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	f383 8810 	msr	PRIMASK, r3
}
 80098cc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80098d4:	4618      	mov	r0, r3
 80098d6:	f00a fbb5 	bl	8014044 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 80098da:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <_nx_ip_interface_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08c      	sub	sp, #48	; 0x30
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80098f8:	f04f 31ff 	mov.w	r1, #4294967295
 80098fc:	4618      	mov	r0, r3
 80098fe:	f00a f929 	bl	8013b54 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009902:	f3ef 8310 	mrs	r3, PRIMASK
 8009906:	617b      	str	r3, [r7, #20]
    return(posture);
 8009908:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800990a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800990c:	b672      	cpsid	i
    return(int_posture);
 800990e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009910:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	011b      	lsls	r3, r3, #4
 800991e:	440b      	add	r3, r1
 8009920:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	62bb      	str	r3, [r7, #40]	; 0x28
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 8009928:	68f9      	ldr	r1, [r7, #12]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	440b      	add	r3, r1
 8009936:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the current notification callback and additional information pointers.  */
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009944:	623b      	str	r3, [r7, #32]
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800994c:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	440b      	add	r3, r1
 800995c:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 8009964:	68f9      	ldr	r1, [r7, #12]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	440b      	add	r3, r1
 8009972:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	ea02 0103 	and.w	r1, r2, r3
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	4403      	add	r3, r0
 8009990:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009994:	6019      	str	r1, [r3, #0]

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	f383 8810 	msr	PRIMASK, r3
}
 80099b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80099b8:	4618      	mov	r0, r3
 80099ba:	f00a fb43 	bl	8014044 <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <_nx_ip_interface_address_set+0xf8>
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d103      	bne.n	80099d4 <_nx_ip_interface_address_set+0xf0>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d003      	beq.n	80099dc <_nx_ip_interface_address_set+0xf8>
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	69f9      	ldr	r1, [r7, #28]
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	4798      	blx	r3
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	440b      	add	r3, r1
 80099ea:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]

    /* Return completion status.  */
    return(NX_SUCCESS);
 80099f2:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3730      	adds	r7, #48	; 0x30
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b098      	sub	sp, #96	; 0x60
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 8009a0e:	2304      	movs	r3, #4
 8009a10:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 8009a18:	e170      	b.n	8009cfc <_nx_ip_packet_checksum_compute+0x300>
 8009a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b10      	cmp	r3, #16
 8009a20:	f200 8168 	bhi.w	8009cf4 <_nx_ip_packet_checksum_compute+0x2f8>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <_nx_ip_packet_checksum_compute+0x30>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009bef 	.word	0x08009bef
 8009a30:	08009c4f 	.word	0x08009c4f
 8009a34:	08009cf5 	.word	0x08009cf5
 8009a38:	08009a71 	.word	0x08009a71
 8009a3c:	08009cf5 	.word	0x08009cf5
 8009a40:	08009b21 	.word	0x08009b21
 8009a44:	08009cf5 	.word	0x08009cf5
 8009a48:	08009cf5 	.word	0x08009cf5
 8009a4c:	08009cf5 	.word	0x08009cf5
 8009a50:	08009cf5 	.word	0x08009cf5
 8009a54:	08009cf5 	.word	0x08009cf5
 8009a58:	08009cf5 	.word	0x08009cf5
 8009a5c:	08009cf5 	.word	0x08009cf5
 8009a60:	08009cf5 	.word	0x08009cf5
 8009a64:	08009cf5 	.word	0x08009cf5
 8009a68:	08009cf5 	.word	0x08009cf5
 8009a6c:	08009b8b 	.word	0x08009b8b
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7e:	ba1b      	rev	r3, r3
 8009a80:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8009a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a84:	0e1b      	lsrs	r3, r3, #24
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01f      	beq.n	8009ad8 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7fe ff93 	bl	80089d0 <_nx_ip_checksum_compute>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 8009aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ab0:	43db      	mvns	r3, r3
 8009ab2:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 8009ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	ba1b      	rev	r3, r3
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	f023 0201 	bic.w	r2, r3, #1
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	ba1b      	rev	r3, r3
 8009ae8:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	ba1b      	rev	r3, r3
 8009aee:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 8009af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af8:	ba1b      	rev	r3, r3
 8009afa:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	0c1b      	lsrs	r3, r3, #16
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 8009b1e:	e0ed      	b.n	8009cfc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d02a      	beq.n	8009b82 <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8009b2c:	f107 0218 	add.w	r2, r7, #24
 8009b30:	f107 0308 	add.w	r3, r7, #8
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	4613      	mov	r3, r2
 8009b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b3a:	2106      	movs	r1, #6
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7fe ff47 	bl	80089d0 <_nx_ip_checksum_compute>
 8009b42:	4603      	mov	r3, r0
 8009b44:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 8009b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b4e:	43db      	mvns	r3, r3
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8009b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	ba1a      	rev	r2, r3
 8009b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5c:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b60:	691a      	ldr	r2, [r3, #16]
 8009b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b64:	041b      	lsls	r3, r3, #16
 8009b66:	431a      	orrs	r2, r3
 8009b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6a:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8009b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	ba1a      	rev	r2, r3
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7a:	f023 0204 	bic.w	r2, r3, #4
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8009b88:	e0b8      	b.n	8009cfc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	f003 0310 	and.w	r3, r3, #16
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d027      	beq.n	8009be6 <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 8009b96:	f107 0218 	add.w	r2, r7, #24
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ba4:	2111      	movs	r1, #17
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7fe ff12 	bl	80089d0 <_nx_ip_checksum_compute>
 8009bac:	4603      	mov	r3, r0
 8009bae:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	ba1a      	rev	r2, r3
 8009bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bbe:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8009bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bce:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	ba1a      	rev	r2, r3
 8009bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd8:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	f023 0210 	bic.w	r2, r3, #16
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8009bec:	e086      	b.n	8009cfc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d025      	beq.n	8009c46 <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c02:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fe fee2 	bl	80089d0 <_nx_ip_checksum_compute>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	ba1a      	rev	r2, r3
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c26:	43db      	mvns	r3, r3
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	ba1a      	rev	r2, r3
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8009c46:	2301      	movs	r3, #1
 8009c48:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8009c4c:	e056      	b.n	8009cfc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d048      	beq.n	8009cec <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8009c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	ba1a      	rev	r2, r3
 8009c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c68:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	ba1a      	rev	r2, r3
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7c:	0c1b      	lsrs	r3, r3, #16
 8009c7e:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8009c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c86:	4413      	add	r3, r2
 8009c88:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	0c1b      	lsrs	r3, r3, #16
 8009c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c96:	4413      	add	r3, r2
 8009c98:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ca0:	4413      	add	r3, r2
 8009ca2:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8009ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca6:	0c1a      	lsrs	r2, r3, #16
 8009ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	4413      	add	r3, r2
 8009cae:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8009cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb2:	0c1a      	lsrs	r2, r3, #16
 8009cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4413      	add	r3, r2
 8009cba:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cc2:	43db      	mvns	r3, r3
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cca:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	ba1a      	rev	r2, r3
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	ba1a      	rev	r2, r3
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8009cf2:	e003      	b.n	8009cfc <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8009cfa:	bf00      	nop
    while (!is_done)
 8009cfc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f43f ae8a 	beq.w	8009a1a <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d0a:	609a      	str	r2, [r3, #8]
    return;
 8009d0c:	bf00      	nop
}
 8009d0e:	3758      	adds	r7, #88	; 0x58
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009d22:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009d24:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009d26:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d28:	b672      	cpsid	i
    return(int_posture);
 8009d2a:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009d2c:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d011      	beq.n	8009d5c <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2200      	movs	r2, #0
 8009d46:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f383 8810 	msr	PRIMASK, r3
}
 8009d5a:	e019      	b.n	8009d90 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	61da      	str	r2, [r3, #28]
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f383 8810 	msr	PRIMASK, r3
}
 8009d7c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8009d84:	2200      	movs	r2, #0
 8009d86:	2108      	movs	r1, #8
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f009 fa81 	bl	8013290 <_tx_event_flags_set>
    }
}
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
 8009d92:	3720      	adds	r7, #32
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <_nx_ip_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d104      	bne.n	8009dbe <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f203 7224 	addw	r2, r3, #1828	; 0x724
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	091b      	lsrs	r3, r3, #4
 8009dca:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	7bba      	ldrb	r2, [r7, #14]
 8009dd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d10b      	bne.n	8009dfa <_nx_ip_packet_receive+0x62>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d006      	beq.n	8009dfa <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	4798      	blx	r3
        return;
 8009df8:	e00d      	b.n	8009e16 <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 8009e0e:	6838      	ldr	r0, [r7, #0]
 8009e10:	f001 fbd2 	bl	800b5b8 <_nx_packet_release>

    return;
 8009e14:	bf00      	nop
}
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af04      	add	r7, sp, #16
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d114      	bne.n	8009e66 <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f1a3 0214 	sub.w	r2, r3, #20
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	f103 0214 	add.w	r2, r3, #20
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8009e5e:	68b8      	ldr	r0, [r7, #8]
 8009e60:	f001 fc62 	bl	800b728 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 8009e64:	e037      	b.n	8009ed6 <_nx_ip_packet_send+0xba>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, destination_ip, type_of_service, time_to_live, protocol, fragment);
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	9302      	str	r3, [sp, #8]
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f7ff fc15 	bl	80096a8 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d120      	bne.n	8009ec6 <_nx_ip_packet_send+0xaa>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00b      	beq.n	8009ea6 <_nx_ip_packet_send+0x8a>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2200      	movs	r2, #0
 8009e92:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 f82d 	bl	8009f00 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <_nx_ip_packet_send+0x98>
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d108      	bne.n	8009ec6 <_nx_ip_packet_send+0xaa>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 8009ebe:	68b8      	ldr	r0, [r7, #8]
 8009ec0:	f001 fc32 	bl	800b728 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 8009ec4:	e007      	b.n	8009ed6 <_nx_ip_packet_send+0xba>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	68b9      	ldr	r1, [r7, #8]
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7ff f8c8 	bl	8009066 <_nx_ip_driver_packet_send>
}
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f009 f9cc 	bl	8013290 <_tx_event_flags_set>
}
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f1a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009f1e:	d003      	beq.n	8009f28 <_nx_ip_route_find+0x28>
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f26:	d133      	bne.n	8009f90 <_nx_ip_route_find+0x90>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d123      	bne.n	8009f7e <_nx_ip_route_find+0x7e>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009f36:	2300      	movs	r3, #0
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	e01c      	b.n	8009f76 <_nx_ip_route_find+0x76>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 8009f3c:	68f9      	ldr	r1, [r7, #12]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	440b      	add	r3, r1
 8009f4a:	f203 732a 	addw	r3, r3, #1834	; 0x72a
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00d      	beq.n	8009f70 <_nx_ip_route_find+0x70>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	4413      	add	r3, r2
 8009f66:	1d1a      	adds	r2, r3, #4
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	e141      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3301      	adds	r3, #1
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0df      	beq.n	8009f3c <_nx_ip_route_find+0x3c>
 8009f7c:	e006      	b.n	8009f8c <_nx_ip_route_find+0x8c>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	799b      	ldrb	r3, [r3, #6]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <_nx_ip_route_find+0x8c>
        {
            return(NX_SUCCESS);
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e133      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 8009f8c:	2321      	movs	r3, #33	; 0x21
 8009f8e:	e131      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	e02b      	b.n	8009fee <_nx_ip_route_find+0xee>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3304      	adds	r3, #4
 8009faa:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	791b      	ldrb	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d019      	beq.n	8009fe8 <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_link_up) &&
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d015      	beq.n	8009fe8 <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d110      	bne.n	8009fe8 <_nx_ip_route_find+0xe8>
            ((*ip_interface_ptr == NX_NULL) ||
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <_nx_ip_route_find+0xd8>
             (*ip_interface_ptr == interface_ptr)))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d107      	bne.n	8009fe8 <_nx_ip_route_find+0xe8>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	e105      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	3301      	adds	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0d0      	beq.n	8009f96 <_nx_ip_route_find+0x96>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	e037      	b.n	800a06a <_nx_ip_route_find+0x16a>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	3304      	adds	r3, #4
 800a00e:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	791b      	ldrb	r3, [r3, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d025      	beq.n	800a064 <_nx_ip_route_find+0x164>
            (interface_ptr -> nx_interface_link_up) &&
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d021      	beq.n	800a064 <_nx_ip_route_find+0x164>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	699a      	ldr	r2, [r3, #24]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	401a      	ands	r2, r3
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d119      	bne.n	800a064 <_nx_ip_route_find+0x164>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d103      	bne.n	800a040 <_nx_ip_route_find+0x140>
            {
                *ip_interface_ptr = interface_ptr;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	e00b      	b.n	800a058 <_nx_ip_route_find+0x158>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d103      	bne.n	800a04e <_nx_ip_route_find+0x14e>
            {
                *ip_interface_ptr = interface_ptr;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	e004      	b.n	800a058 <_nx_ip_route_find+0x158>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	429a      	cmp	r2, r3
 800a056:	d104      	bne.n	800a062 <_nx_ip_route_find+0x162>
            {
                continue;
            }

            *next_hop_address = destination_address;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800a05e:	2300      	movs	r3, #0
 800a060:	e0c8      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
                continue;
 800a062:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3301      	adds	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d9c4      	bls.n	8009ffa <_nx_ip_route_find+0xfa>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	0c1b      	lsrs	r3, r3, #16
 800a074:	041b      	lsls	r3, r3, #16
 800a076:	4a62      	ldr	r2, [pc, #392]	; (800a200 <_nx_ip_route_find+0x300>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d144      	bne.n	800a106 <_nx_ip_route_find+0x206>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00e      	beq.n	800a0a2 <_nx_ip_route_find+0x1a2>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	791b      	ldrb	r3, [r3, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d03b      	beq.n	800a106 <_nx_ip_route_find+0x206>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800a094:	2b00      	cmp	r3, #0
 800a096:	d036      	beq.n	800a106 <_nx_ip_route_find+0x206>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e0a8      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	617b      	str	r3, [r7, #20]
 800a0a6:	e02b      	b.n	800a100 <_nx_ip_route_find+0x200>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800a0a8:	68f9      	ldr	r1, [r7, #12]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	440b      	add	r3, r1
 800a0b6:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01c      	beq.n	800a0fa <_nx_ip_route_find+0x1fa>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	440b      	add	r3, r1
 800a0ce:	f203 732a 	addw	r3, r3, #1834	; 0x72a
 800a0d2:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d010      	beq.n	800a0fa <_nx_ip_route_find+0x1fa>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	011b      	lsls	r3, r3, #4
 800a0e2:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e07c      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d9d0      	bls.n	800a0a8 <_nx_ip_route_find+0x1a8>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d02b      	beq.n	800a166 <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800a112:	2b00      	cmp	r3, #0
 800a114:	d027      	beq.n	800a166 <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d022      	beq.n	800a166 <_nx_ip_route_find+0x266>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 800a132:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 800a134:	429a      	cmp	r2, r3
 800a136:	d001      	beq.n	800a13c <_nx_ip_route_find+0x23c>
        {
            return(NX_IP_ADDRESS_ERROR);
 800a138:	2321      	movs	r3, #33	; 0x21
 800a13a:	e05b      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d103      	bne.n	800a14c <_nx_ip_route_find+0x24c>
        {
            *ip_interface_ptr = interface_ptr;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	e006      	b.n	800a15a <_nx_ip_route_find+0x25a>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	429a      	cmp	r2, r3
 800a154:	d001      	beq.n	800a15a <_nx_ip_route_find+0x25a>
        {
            return(NX_IP_ADDRESS_ERROR);
 800a156:	2321      	movs	r3, #33	; 0x21
 800a158:	e04c      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 800a162:	2300      	movs	r3, #0
 800a164:	e046      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d016      	beq.n	800a19c <_nx_ip_route_find+0x29c>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	791b      	ldrb	r3, [r3, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d03c      	beq.n	800a1f2 <_nx_ip_route_find+0x2f2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d037      	beq.n	800a1f2 <_nx_ip_route_find+0x2f2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800a18c:	4a1c      	ldr	r2, [pc, #112]	; (800a200 <_nx_ip_route_find+0x300>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d12f      	bne.n	800a1f2 <_nx_ip_route_find+0x2f2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800a198:	2300      	movs	r3, #0
 800a19a:	e02b      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	e024      	b.n	800a1ec <_nx_ip_route_find+0x2ec>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	791b      	ldrb	r3, [r3, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d012      	beq.n	800a1e6 <_nx_ip_route_find+0x2e6>
                (interface_ptr -> nx_interface_link_up) &&
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00e      	beq.n	800a1e6 <_nx_ip_route_find+0x2e6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	0c1b      	lsrs	r3, r3, #16
 800a1ce:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 800a1d0:	4a0b      	ldr	r2, [pc, #44]	; (800a200 <_nx_ip_route_find+0x300>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d107      	bne.n	800a1e6 <_nx_ip_route_find+0x2e6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e006      	b.n	800a1f4 <_nx_ip_route_find+0x2f4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d9d7      	bls.n	800a1a2 <_nx_ip_route_find+0x2a2>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 800a1f2:	2321      	movs	r3, #33	; 0x21
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	a9fe0000 	.word	0xa9fe0000

0800a204 <_nx_ip_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b096      	sub	sp, #88	; 0x58
 800a208:	af02      	add	r7, sp, #8
 800a20a:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a212:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a216:	f04f 31ff 	mov.w	r1, #4294967295
 800a21a:	4618      	mov	r0, r3
 800a21c:	f009 fc9a 	bl	8013b54 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 800a220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a222:	2201      	movs	r2, #1
 800a224:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a228:	2300      	movs	r3, #0
 800a22a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a22c:	e071      	b.n	800a312 <_nx_ip_thread_entry+0x10e>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800a22e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	440b      	add	r3, r1
 800a23c:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d062      	beq.n	800a30c <_nx_ip_thread_entry+0x108>
 800a246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	440b      	add	r3, r1
 800a254:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d056      	beq.n	800a30c <_nx_ip_thread_entry+0x108>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 800a25e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	011b      	lsls	r3, r3, #4
 800a26a:	440b      	add	r3, r1
 800a26c:	f203 7364 	addw	r3, r3, #1892	; 0x764
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 800a274:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a278:	4613      	mov	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	440b      	add	r3, r1
 800a282:	f203 732a 	addw	r3, r3, #1834	; 0x72a
 800a286:	2201      	movs	r2, #1
 800a288:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 800a28a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a28c:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800a28e:	2313      	movs	r3, #19
 800a290:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800a292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a294:	4613      	mov	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a2a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800a2a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	440b      	add	r3, r1
 800a2b6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f107 0210 	add.w	r2, r7, #16
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800a2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2c6:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800a2cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	440b      	add	r3, r1
 800a2da:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f107 0210 	add.w	r2, r7, #16
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800a2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800a2f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	440b      	add	r3, r1
 800a2fe:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f107 0210 	add.w	r2, r7, #16
 800a308:	4610      	mov	r0, r2
 800a30a:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a30e:	3301      	adds	r3, #1
 800a310:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d08a      	beq.n	800a22e <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a31a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a31e:	4618      	mov	r0, r3
 800a320:	f009 fe90 	bl	8014044 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800a324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a326:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 800a32a:	f107 030c 	add.w	r3, r7, #12
 800a32e:	f04f 32ff 	mov.w	r2, #4294967295
 800a332:	9200      	str	r2, [sp, #0]
 800a334:	2201      	movs	r2, #1
 800a336:	f04f 31ff 	mov.w	r1, #4294967295
 800a33a:	f008 fec7 	bl	80130cc <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a340:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a344:	f04f 31ff 	mov.w	r1, #4294967295
 800a348:	4618      	mov	r0, r3
 800a34a:	f009 fc03 	bl	8013b54 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d031      	beq.n	800a3bc <_nx_ip_thread_entry+0x1b8>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800a358:	e023      	b.n	800a3a2 <_nx_ip_thread_entry+0x19e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a35a:	f3ef 8310 	mrs	r3, PRIMASK
 800a35e:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800a362:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a364:	b672      	cpsid	i
    return(int_posture);
 800a366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 800a368:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800a36a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a36c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a370:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 800a372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a374:	69da      	ldr	r2, [r3, #28]
 800a376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a378:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 800a37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a37e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <_nx_ip_thread_entry+0x18a>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800a386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a388:	2200      	movs	r2, #0
 800a38a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800a38e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a390:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	f383 8810 	msr	PRIMASK, r3
}
 800a398:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800a39a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a39c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a39e:	f7ff fcfb 	bl	8009d98 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800a3a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3a4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1d6      	bne.n	800a35a <_nx_ip_thread_entry+0x156>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 0308 	bic.w	r3, r3, #8
 800a3b2:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 8133 	beq.w	800a622 <_nx_ip_thread_entry+0x41e>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00c      	beq.n	800a3e0 <_nx_ip_thread_entry+0x1dc>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800a3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800a3cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a3ce:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d6:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 8123 	beq.w	800a626 <_nx_ip_thread_entry+0x422>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d011      	beq.n	800a40e <_nx_ip_thread_entry+0x20a>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 800a3ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ec:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d004      	beq.n	800a3fe <_nx_ip_thread_entry+0x1fa>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800a3f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800a3fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a3fc:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a404:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 810e 	beq.w	800a62a <_nx_ip_thread_entry+0x426>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d039      	beq.n	800a48c <_nx_ip_thread_entry+0x288>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800a418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a41a:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d004      	beq.n	800a42c <_nx_ip_thread_entry+0x228>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 800a422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a424:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800a428:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a42a:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 800a42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a42e:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800a432:	2b00      	cmp	r3, #0
 800a434:	d004      	beq.n	800a440 <_nx_ip_thread_entry+0x23c>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800a436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a438:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800a43c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a43e:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 800a440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a442:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d004      	beq.n	800a454 <_nx_ip_thread_entry+0x250>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 800a44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a44c:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 800a450:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a452:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800a454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a456:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d004      	beq.n	800a468 <_nx_ip_thread_entry+0x264>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 800a45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a460:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 800a464:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a466:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 800a468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a46a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <_nx_ip_thread_entry+0x278>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 800a472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a474:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800a478:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a47a:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f023 0301 	bic.w	r3, r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	f000 80d1 	beq.w	800a62e <_nx_ip_thread_entry+0x42a>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f003 0310 	and.w	r3, r3, #16
 800a492:	2b00      	cmp	r3, #0
 800a494:	d009      	beq.n	800a4aa <_nx_ip_thread_entry+0x2a6>
 800a496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a498:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <_nx_ip_thread_entry+0x2a6>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800a4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4a2:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 800a4a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a4a8:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f003 0320 	and.w	r3, r3, #32
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d009      	beq.n	800a4c8 <_nx_ip_thread_entry+0x2c4>
 800a4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d004      	beq.n	800a4c8 <_nx_ip_thread_entry+0x2c4>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 800a4be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4c0:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800a4c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a4c6:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d004      	beq.n	800a4dc <_nx_ip_thread_entry+0x2d8>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800a4d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4d4:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 800a4d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a4da:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d036      	beq.n	800a554 <_nx_ip_thread_entry+0x350>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ea:	e030      	b.n	800a54e <_nx_ip_thread_entry+0x34a>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 800a4ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	440b      	add	r3, r1
 800a4fa:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d021      	beq.n	800a548 <_nx_ip_thread_entry+0x344>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800a504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a506:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800a508:	2308      	movs	r3, #8
 800a50a:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 800a50c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a510:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 800a512:	4b48      	ldr	r3, [pc, #288]	; (800a634 <_nx_ip_thread_entry+0x430>)
 800a514:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800a516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a526:	4413      	add	r3, r2
 800a528:	3304      	adds	r3, #4
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800a52c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a52e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	440b      	add	r3, r1
 800a53a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f107 0210 	add.w	r2, r7, #16
 800a544:	4610      	mov	r0, r2
 800a546:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54a:	3301      	adds	r3, #1
 800a54c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0cb      	beq.n	800a4ec <_nx_ip_thread_entry+0x2e8>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d009      	beq.n	800a572 <_nx_ip_thread_entry+0x36e>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 800a55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a560:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d004      	beq.n	800a572 <_nx_ip_thread_entry+0x36e>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 800a568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a56a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a56e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a570:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f003 0304 	and.w	r3, r3, #4
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d004      	beq.n	800a586 <_nx_ip_thread_entry+0x382>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 800a57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a57e:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800a582:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a584:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d034      	beq.n	800a5fa <_nx_ip_thread_entry+0x3f6>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800a590:	2300      	movs	r3, #0
 800a592:	64bb      	str	r3, [r7, #72]	; 0x48
 800a594:	e02e      	b.n	800a5f4 <_nx_ip_thread_entry+0x3f0>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800a596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	011b      	lsls	r3, r3, #4
 800a5a2:	440b      	add	r3, r1
 800a5a4:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d01f      	beq.n	800a5ee <_nx_ip_thread_entry+0x3ea>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 800a5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b0:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800a5b2:	2312      	movs	r3, #18
 800a5b4:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800a5b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4413      	add	r3, r2
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a5c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800a5cc:	f107 0308 	add.w	r3, r7, #8
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800a5d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	011b      	lsls	r3, r3, #4
 800a5de:	440b      	add	r3, r1
 800a5e0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f107 0210 	add.w	r2, r7, #16
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800a5ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0cd      	beq.n	800a596 <_nx_ip_thread_entry+0x392>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d004      	beq.n	800a60e <_nx_ip_thread_entry+0x40a>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 800a604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a606:	f8d3 3720 	ldr.w	r3, [r3, #1824]	; 0x720
 800a60a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a60c:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a614:	2b00      	cmp	r3, #0
 800a616:	f43f ae7f 	beq.w	800a318 <_nx_ip_thread_entry+0x114>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 800a61a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a61c:	f7fe fc00 	bl	8008e20 <_nx_ip_deferred_link_status_process>
 800a620:	e67a      	b.n	800a318 <_nx_ip_thread_entry+0x114>
                continue;
 800a622:	bf00      	nop
 800a624:	e678      	b.n	800a318 <_nx_ip_thread_entry+0x114>
                continue;
 800a626:	bf00      	nop
 800a628:	e676      	b.n	800a318 <_nx_ip_thread_entry+0x114>
                continue;
 800a62a:	bf00      	nop
 800a62c:	e674      	b.n	800a318 <_nx_ip_thread_entry+0x114>
                continue;
 800a62e:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a630:	e672      	b.n	800a318 <_nx_ip_thread_entry+0x114>
 800a632:	bf00      	nop
 800a634:	5e000001 	.word	0x5e000001

0800a638 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08a      	sub	sp, #40	; 0x28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 800a642:	2314      	movs	r3, #20
 800a644:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	3314      	adds	r3, #20
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	0e1b      	lsrs	r3, r3, #24
 800a662:	f003 030f 	and.w	r3, r3, #15
 800a666:	3b05      	subs	r3, #5
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 800a66e:	e0a3      	b.n	800a7b8 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	2b44      	cmp	r3, #68	; 0x44
 800a67a:	d010      	beq.n	800a69e <_nx_ipv4_option_process+0x66>
 800a67c:	2b44      	cmp	r3, #68	; 0x44
 800a67e:	f300 8082 	bgt.w	800a786 <_nx_ipv4_option_process+0x14e>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <_nx_ipv4_option_process+0x54>
 800a686:	2b01      	cmp	r3, #1
 800a688:	d002      	beq.n	800a690 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800a68a:	e07c      	b.n	800a786 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800a68c:	2301      	movs	r3, #1
 800a68e:	e099      	b.n	800a7c4 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	3301      	adds	r3, #1
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	3301      	adds	r3, #1
 800a69a:	623b      	str	r3, [r7, #32]
            continue;
 800a69c:	e08c      	b.n	800a7b8 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d90b      	bls.n	800a6c2 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800a6aa:	69ba      	ldr	r2, [r7, #24]
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3302      	adds	r3, #2
 800a6b2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7fd ffbd 	bl	8008638 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e080      	b.n	800a7c4 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	789b      	ldrb	r3, [r3, #2]
 800a6cc:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	091b      	lsrs	r3, r3, #4
 800a6d6:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	3303      	adds	r3, #3
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	f003 030f 	and.w	r3, r3, #15
 800a6e2:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b07      	cmp	r3, #7
 800a6e8:	d908      	bls.n	800a6fc <_nx_ipv4_option_process+0xc4>
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	2b28      	cmp	r3, #40	; 0x28
 800a6ee:	d805      	bhi.n	800a6fc <_nx_ipv4_option_process+0xc4>
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	f003 0303 	and.w	r3, r3, #3
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	4413      	add	r3, r2
 800a702:	3302      	adds	r3, #2
 800a704:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7fd ff94 	bl	8008638 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800a710:	2300      	movs	r3, #0
 800a712:	e057      	b.n	800a7c4 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 800a714:	7b7b      	ldrb	r3, [r7, #13]
 800a716:	2b04      	cmp	r3, #4
 800a718:	d905      	bls.n	800a726 <_nx_ipv4_option_process+0xee>
 800a71a:	7b7b      	ldrb	r3, [r7, #13]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10b      	bne.n	800a73e <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 800a726:	69ba      	ldr	r2, [r7, #24]
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	4413      	add	r3, r2
 800a72c:	3303      	adds	r3, #3
 800a72e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7fd ff7f 	bl	8008638 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800a73a:	2300      	movs	r3, #0
 800a73c:	e042      	b.n	800a7c4 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 800a73e:	7b3b      	ldrb	r3, [r7, #12]
 800a740:	2b0f      	cmp	r3, #15
 800a742:	d10b      	bne.n	800a75c <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	4413      	add	r3, r2
 800a74a:	3304      	adds	r3, #4
 800a74c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7fd ff70 	bl	8008638 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800a758:	2300      	movs	r3, #0
 800a75a:	e033      	b.n	800a7c4 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d013      	beq.n	800a78a <_nx_ipv4_option_process+0x152>
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d010      	beq.n	800a78a <_nx_ipv4_option_process+0x152>
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d00d      	beq.n	800a78a <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	4413      	add	r3, r2
 800a774:	3304      	adds	r3, #4
 800a776:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7fd ff5b 	bl	8008638 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800a782:	2300      	movs	r3, #0
 800a784:	e01e      	b.n	800a7c4 <_nx_ipv4_option_process+0x18c>
            break;
 800a786:	bf00      	nop
 800a788:	e000      	b.n	800a78c <_nx_ipv4_option_process+0x154>
            break;
 800a78a:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d905      	bls.n	800a7a4 <_nx_ipv4_option_process+0x16c>
 800a798:	7bba      	ldrb	r2, [r7, #14]
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	4413      	add	r3, r2
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d201      	bcs.n	800a7a8 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	e00d      	b.n	800a7c4 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ac:	4413      	add	r3, r2
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	6a3a      	ldr	r2, [r7, #32]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 800a7b8:	6a3a      	ldr	r2, [r7, #32]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	f4ff af57 	bcc.w	800a670 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 800a7c2:	2301      	movs	r3, #1
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3728      	adds	r7, #40	; 0x28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b098      	sub	sp, #96	; 0x60
 800a7d0:	af02      	add	r7, sp, #8
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 800a7e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800a7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e8:	ba1b      	rev	r3, r3
 800a7ea:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800a7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d066      	beq.n	800a8ca <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a802:	429a      	cmp	r2, r3
 800a804:	d90d      	bls.n	800a822 <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a814:	1c5a      	adds	r2, r3, #1
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800a81a:	6838      	ldr	r0, [r7, #0]
 800a81c:	f000 fecc 	bl	800b5b8 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800a820:	e233      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800a838:	e044      	b.n	800a8c4 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d107      	bne.n	800a852 <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a848:	425b      	negs	r3, r3
 800a84a:	441a      	add	r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 800a850:	e03b      	b.n	800a8ca <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800a858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	461a      	mov	r2, r3
 800a864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a866:	4293      	cmp	r3, r2
 800a868:	d207      	bcs.n	800a87a <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 800a86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86c:	68da      	ldr	r2, [r3, #12]
 800a86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a870:	425b      	negs	r3, r3
 800a872:	441a      	add	r2, r3
 800a874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a876:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 800a878:	e027      	b.n	800a8ca <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800a87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87c:	68da      	ldr	r2, [r3, #12]
 800a87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	461a      	mov	r2, r3
 800a886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a888:	1a9b      	subs	r3, r3, r2
 800a88a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800a890:	e002      	b.n	800a898 <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 800a892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800a898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d1f7      	bne.n	800a892 <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800a8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d003      	beq.n	800a8b8 <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8b4:	619a      	str	r2, [r3, #24]
 800a8b6:	e002      	b.n	800a8be <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800a8be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a8c0:	f000 fe7a 	bl	800b5b8 <_nx_packet_release>
        while (delta)
 800a8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1b7      	bne.n	800a83a <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800a8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8d2:	0e1b      	lsrs	r3, r3, #24
 800a8d4:	f003 030f 	and.w	r3, r3, #15
 800a8d8:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d902      	bls.n	800a8ec <_nx_ipv4_packet_receive+0x120>
 800a8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d80d      	bhi.n	800a908 <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800a900:	6838      	ldr	r0, [r7, #0]
 800a902:	f000 fe59 	bl	800b5b8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800a906:	e1c0      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	f003 0302 	and.w	r3, r3, #2
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 800a918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d124      	bne.n	800a968 <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 800a91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a920:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800a922:	2300      	movs	r3, #0
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	2300      	movs	r3, #0
 800a928:	2104      	movs	r1, #4
 800a92a:	6838      	ldr	r0, [r7, #0]
 800a92c:	f7fe f850 	bl	80089d0 <_nx_ip_checksum_compute>
 800a930:	4603      	mov	r3, r0
 800a932:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	43db      	mvns	r3, r3
 800a938:	b29b      	uxth	r3, r3
 800a93a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d012      	beq.n	800a968 <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 800a960:	6838      	ldr	r0, [r7, #0]
 800a962:	f000 fe29 	bl	800b5b8 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800a966:	e190      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800a968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	ba1a      	rev	r2, r3
 800a96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a970:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800a972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	ba1a      	rev	r2, r3
 800a978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a97a:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800a97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	ba1a      	rev	r2, r3
 800a982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a984:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800a986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	ba1a      	rev	r2, r3
 800a98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98e:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800a990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	ba1a      	rev	r2, r3
 800a996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a998:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800a99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99c:	2b05      	cmp	r3, #5
 800a99e:	d949      	bls.n	800aa34 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff fe48 	bl	800a638 <_nx_ipv4_option_process>
 800a9a8:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d108      	bne.n	800a9c2 <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800a9ba:	6838      	ldr	r0, [r7, #0]
 800a9bc:	f000 fdfc 	bl	800b5b8 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800a9c0:	e163      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 800a9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9ce:	4413      	add	r3, r2
 800a9d0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 800a9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d4:	1f1a      	subs	r2, r3, #4
 800a9d6:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9da:	6912      	ldr	r2, [r2, #16]
 800a9dc:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	1f1a      	subs	r2, r3, #4
 800a9e2:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9e6:	68d2      	ldr	r2, [r2, #12]
 800a9e8:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	1f1a      	subs	r2, r3, #4
 800a9ee:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9f2:	6892      	ldr	r2, [r2, #8]
 800a9f4:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	1f1a      	subs	r2, r3, #4
 800a9fa:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9fe:	6852      	ldr	r2, [r2, #4]
 800aa00:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 800aa02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 800aa0a:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa1a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2a:	3b05      	subs	r3, #5
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800aa34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa36:	691a      	ldr	r2, [r3, #16]
 800aa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d02f      	beq.n	800aaa0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800aa40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa42:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d02b      	beq.n	800aaa0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800aa48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa4a:	691a      	ldr	r2, [r3, #16]
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d10a      	bne.n	800aa70 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800aa5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa5c:	691a      	ldr	r2, [r3, #16]
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	43db      	mvns	r3, r3
 800aa64:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d017      	beq.n	800aaa0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800aa70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa72:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800aa74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa78:	d012      	beq.n	800aaa0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800aa7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa7c:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800aa7e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800aa82:	d303      	bcc.n	800aa8c <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800aa84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa86:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	da09      	bge.n	800aaa0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800aa8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7fd ff01 	bl	800889c <_nx_igmp_multicast_check>
 800aa9a:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d076      	beq.n	800ab8e <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 800aaa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d046      	beq.n	800ab3a <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d033      	beq.n	800ab28 <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aac0:	f3ef 8310 	mrs	r3, PRIMASK
 800aac4:	617b      	str	r3, [r7, #20]
    return(posture);
 800aac6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800aac8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aaca:	b672      	cpsid	i
    return(int_posture);
 800aacc:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800aace:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00c      	beq.n	800aaf4 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2200      	movs	r2, #0
 800aae8:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 800aaf2:	e00a      	b.n	800ab0a <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2200      	movs	r2, #0
 800ab08:	61da      	str	r2, [r3, #28]
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f383 8810 	msr	PRIMASK, r3
}
 800ab14:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2102      	movs	r1, #2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f008 fbb5 	bl	8013290 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800ab26:	e0b0      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 800ab32:	6838      	ldr	r0, [r7, #0]
 800ab34:	f000 fd40 	bl	800b5b8 <_nx_packet_release>
            return;
 800ab38:	e0a7      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 800ab3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	0c1b      	lsrs	r3, r3, #16
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f103 0214 	add.w	r2, r3, #20
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	f1a3 0214 	sub.w	r2, r3, #20
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	441a      	add	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800ab74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7fe f9b3 	bl	8008ee4 <_nx_ip_dispatch_process>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 8082 	beq.w	800ac8a <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 800ab86:	6838      	ldr	r0, [r7, #0]
 800ab88:	f000 fd16 	bl	800b5b8 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800ab8c:	e07d      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d15a      	bne.n	800ac4c <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 800ab96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800aba6:	d137      	bne.n	800ac18 <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f103 0214 	add.w	r2, r3, #20
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb8:	f1a3 0214 	sub.w	r2, r3, #20
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd2:	441a      	add	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800abde:	6a3b      	ldr	r3, [r7, #32]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	ba1a      	rev	r2, r3
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	b29b      	uxth	r3, r3
 800abee:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	ba1a      	rev	r2, r3
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	2b44      	cmp	r3, #68	; 0x44
 800abfe:	d10b      	bne.n	800ac18 <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d006      	beq.n	800ac18 <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3

                    return;
 800ac16:	e038      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	1e5a      	subs	r2, r3, #1
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac34:	1c5a      	adds	r2, r3, #1
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800ac44:	6838      	ldr	r0, [r7, #0]
 800ac46:	f000 fcb7 	bl	800b5b8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800ac4a:	e01e      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00b      	beq.n	800ac6e <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
 800ac6c:	e00d      	b.n	800ac8a <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800ac82:	6838      	ldr	r0, [r7, #0]
 800ac84:	f000 fc98 	bl	800b5b8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800ac88:	bf00      	nop
    }
}
 800ac8a:	3758      	adds	r7, #88	; 0x58
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08c      	sub	sp, #48	; 0x30
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d901      	bls.n	800acac <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 800aca8:	234d      	movs	r3, #77	; 0x4d
 800acaa:	e0b1      	b.n	800ae10 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acb2:	f3ef 8310 	mrs	r3, PRIMASK
 800acb6:	61fb      	str	r3, [r7, #28]
    return(posture);
 800acb8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800acba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800acbc:	b672      	cpsid	i
    return(int_posture);
 800acbe:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 800acc0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d03d      	beq.n	800ad46 <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	69da      	ldr	r2, [r3, #28]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 800ace2:	6a3b      	ldr	r3, [r7, #32]
 800ace4:	2200      	movs	r2, #0
 800ace6:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	2200      	movs	r2, #0
 800acec:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	2200      	movs	r2, #0
 800acf2:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	2200      	movs	r2, #0
 800acf8:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	691a      	ldr	r2, [r3, #16]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	441a      	add	r2, r3
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	689a      	ldr	r2, [r3, #8]
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	2200      	movs	r2, #0
 800ad12:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	2200      	movs	r2, #0
 800ad18:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800ad20:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	2204      	movs	r2, #4
 800ad26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	6a3a      	ldr	r2, [r7, #32]
 800ad3e:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 800ad40:	2300      	movs	r3, #0
 800ad42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad44:	e05d      	b.n	800ae02 <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d053      	beq.n	800adfe <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <_nx_packet_allocate+0x188>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 800ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad68:	4a2c      	ldr	r2, [pc, #176]	; (800ae1c <_nx_packet_allocate+0x18c>)
 800ad6a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d012      	beq.n	800adac <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada8:	675a      	str	r2, [r3, #116]	; 0x74
 800adaa:	e008      	b.n	800adbe <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb0:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adbc:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	220c      	movs	r2, #12
 800adcc:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	2201      	movs	r2, #1
 800add2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800add4:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <_nx_packet_allocate+0x190>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	3301      	adds	r3, #1
 800adda:	4a11      	ldr	r2, [pc, #68]	; (800ae20 <_nx_packet_allocate+0x190>)
 800addc:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	64da      	str	r2, [r3, #76]	; 0x4c
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f383 8810 	msr	PRIMASK, r3
}
 800adee:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800adf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adf2:	f00a fa81 	bl	80152f8 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adfc:	e008      	b.n	800ae10 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 800adfe:	2301      	movs	r3, #1
 800ae00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f383 8810 	msr	PRIMASK, r3
}
 800ae0c:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 800ae0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3730      	adds	r7, #48	; 0x30
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	2000aaf8 	.word	0x2000aaf8
 800ae1c:	0800b23d 	.word	0x0800b23d
 800ae20:	2000aaf4 	.word	0x2000aaf4

0800ae24 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08e      	sub	sp, #56	; 0x38
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 800ae44:	2312      	movs	r3, #18
 800ae46:	e079      	b.n	800af3c <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800ae48:	f107 0114 	add.w	r1, r7, #20
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff ff1d 	bl	800ac90 <_nx_packet_allocate>
 800ae56:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	e06c      	b.n	800af3c <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae68:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d110      	bne.n	800ae9e <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68da      	ldr	r2, [r3, #12]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 800ae88:	6978      	ldr	r0, [r7, #20]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6919      	ldr	r1, [r3, #16]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a3a      	ldr	r2, [r7, #32]
 800ae96:	f000 f855 	bl	800af44 <_nx_packet_data_append>
 800ae9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae9c:	e00f      	b.n	800aebe <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800aeaa:	6978      	ldr	r0, [r7, #20]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6899      	ldr	r1, [r3, #8]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a3a      	ldr	r2, [r7, #32]
 800aeb8:	f000 f844 	bl	800af44 <_nx_packet_data_append>
 800aebc:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800aebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d005      	beq.n	800aed0 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 fb76 	bl	800b5b8 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	e035      	b.n	800af3c <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800aed6:	2300      	movs	r3, #0
 800aed8:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1ca      	bne.n	800ae76 <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	6919      	ldr	r1, [r3, #16]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	440a      	add	r2, r1
 800aef6:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	1a8a      	subs	r2, r1, r2
 800af02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	6919      	ldr	r1, [r3, #16]
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	69ba      	ldr	r2, [r7, #24]
 800af18:	440a      	add	r2, r1
 800af1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	429a      	cmp	r2, r3
 800af26:	d005      	beq.n	800af34 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fb44 	bl	800b5b8 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 800af30:	2312      	movs	r3, #18
 800af32:	e003      	b.n	800af3c <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 800af3a:	2300      	movs	r3, #0
    }
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3730      	adds	r7, #48	; 0x30
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08c      	sub	sp, #48	; 0x30
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 800af52:	2300      	movs	r3, #0
 800af54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d016      	beq.n	800af8c <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800af5e:	2300      	movs	r3, #0
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	695a      	ldr	r2, [r3, #20]
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	4413      	add	r3, r2
 800af78:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1ee      	bne.n	800af68 <_nx_packet_data_append+0x24>
 800af8a:	e005      	b.n	800af98 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	695a      	ldr	r2, [r3, #20]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 800af98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d247      	bcs.n	800b030 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 800afa0:	2300      	movs	r3, #0
 800afa2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 800afa4:	e033      	b.n	800b00e <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800afa6:	f107 0114 	add.w	r1, r7, #20
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	2200      	movs	r2, #0
 800afae:	6838      	ldr	r0, [r7, #0]
 800afb0:	f7ff fe6e 	bl	800ac90 <_nx_packet_allocate>
 800afb4:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d007      	beq.n	800afcc <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800afbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d002      	beq.n	800afc8 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 800afc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afc4:	f000 faf8 	bl	800b5b8 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	e078      	b.n	800b0be <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d012      	beq.n	800aff8 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	619a      	str	r2, [r3, #24]
 800afe8:	e008      	b.n	800affc <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afee:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff4:	605a      	str	r2, [r3, #4]
 800aff6:	e001      	b.n	800affc <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	695a      	ldr	r2, [r3, #20]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	4413      	add	r3, r2
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 800b00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d3c7      	bcc.n	800afa6 <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 800b016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b020:	605a      	str	r2, [r3, #4]
 800b022:	e002      	b.n	800b02a <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b028:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	2200      	movs	r2, #0
 800b02e:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	441a      	add	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d003      	beq.n	800b050 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	617b      	str	r3, [r7, #20]
 800b04e:	e032      	b.n	800b0b6 <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 800b054:	e02f      	b.n	800b0b6 <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	695a      	ldr	r2, [r3, #20]
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	461a      	mov	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4293      	cmp	r3, r2
 800b066:	d202      	bcs.n	800b06e <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	623b      	str	r3, [r7, #32]
 800b06c:	e005      	b.n	800b07a <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	695a      	ldr	r2, [r3, #20]
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified. */
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	6a3a      	ldr	r2, [r7, #32]
 800b080:	69f9      	ldr	r1, [r7, #28]
 800b082:	4618      	mov	r0, r3
 800b084:	f00b fd06 	bl	8016a94 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	68d9      	ldr	r1, [r3, #12]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	440a      	add	r2, r1
 800b09a:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 800b0a2:	69fa      	ldr	r2, [r7, #28]
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	619a      	str	r2, [r3, #24]
    while (data_size)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1cc      	bne.n	800b056 <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3730      	adds	r7, #48	; 0x30
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <_nx_packet_data_extract_offset>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b08c      	sub	sp, #48	; 0x30
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	60b9      	str	r1, [r7, #8]
 800b0d0:	607a      	str	r2, [r7, #4]
 800b0d2:	603b      	str	r3, [r7, #0]
#endif /* NX_DISABLE_PACKET_CHAIN */
ULONG      bytes_to_copy;
NX_PACKET *working_packet_ptr;


    working_packet_ptr =  packet_ptr;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	61bb      	str	r3, [r7, #24]

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d309      	bcc.n	800b0f6 <_nx_packet_data_extract_offset+0x30>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d104      	bne.n	800b0f2 <_nx_packet_data_extract_offset+0x2c>
        {

            *bytes_copied = 0;
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e064      	b.n	800b1bc <_nx_packet_data_extract_offset+0xf6>
        }

        /* Otherwise, this is an invalid offset or packet length. */
        return(NX_PACKET_OFFSET_ERROR);
 800b0f2:	2353      	movs	r3, #83	; 0x53
 800b0f4:	e062      	b.n	800b1bc <_nx_packet_data_extract_offset+0xf6>
    }


    /* Initialize the source pointer to NULL.  */
    source_ptr =  NX_NULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Traverse packet chain to offset.  */
    offset_bytes =  offset;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	623b      	str	r3, [r7, #32]
#ifndef NX_DISABLE_PACKET_CHAIN
    while (working_packet_ptr)
 800b0fe:	e016      	b.n	800b12e <_nx_packet_data_extract_offset+0x68>
    {

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	68da      	ldr	r2, [r3, #12]
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	617b      	str	r3, [r7, #20]

        /* Determine if we are at the offset location fragment in the packet chain  */
        if (packet_fragment_length > offset_bytes)
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	429a      	cmp	r2, r3
 800b112:	d905      	bls.n	800b120 <_nx_packet_data_extract_offset+0x5a>
        {

            /* Setup loop to copy from this packet.  */
            source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	689a      	ldr	r2, [r3, #8]
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	4413      	add	r3, r2
 800b11c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Yes, get out of this  loop.  */
            break;
 800b11e:	e009      	b.n	800b134 <_nx_packet_data_extract_offset+0x6e>
        }


        /* Decrement the remaining offset bytes*/
        offset_bytes = offset_bytes - packet_fragment_length;
 800b120:	6a3a      	ldr	r2, [r7, #32]
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	623b      	str	r3, [r7, #32]

        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	61bb      	str	r3, [r7, #24]
    while (working_packet_ptr)
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e5      	bne.n	800b100 <_nx_packet_data_extract_offset+0x3a>
    source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;

#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Check for a valid source pointer.  */
    if (source_ptr == NX_NULL)
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <_nx_packet_data_extract_offset+0x78>
    {
        return(NX_PACKET_OFFSET_ERROR);
 800b13a:	2353      	movs	r3, #83	; 0x53
 800b13c:	e03e      	b.n	800b1bc <_nx_packet_data_extract_offset+0xf6>
    }

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	627b      	str	r3, [r7, #36]	; 0x24
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	61fb      	str	r3, [r7, #28]

    /* Pickup the amount of bytes to copy.  */
    if (bytes_to_copy < buffer_length)
 800b14c:	69fa      	ldr	r2, [r7, #28]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d205      	bcs.n	800b160 <_nx_packet_data_extract_offset+0x9a>
    {
        *bytes_copied =  bytes_to_copy;     /* the amount of bytes returned to the caller */
 800b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b156:	69fa      	ldr	r2, [r7, #28]
 800b158:	601a      	str	r2, [r3, #0]
        remaining_bytes =  bytes_to_copy;   /* for use in the copy loop */
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b15e:	e026      	b.n	800b1ae <_nx_packet_data_extract_offset+0xe8>
    }
    else
    {
        *bytes_copied =  buffer_length;
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	601a      	str	r2, [r3, #0]
        remaining_bytes =  buffer_length;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (working_packet_ptr && remaining_bytes)
 800b16a:	e020      	b.n	800b1ae <_nx_packet_data_extract_offset+0xe8>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate bytes to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	61fb      	str	r3, [r7, #28]
        if (remaining_bytes < bytes_to_copy)
 800b176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d201      	bcs.n	800b182 <_nx_packet_data_extract_offset+0xbc>
        {
            bytes_to_copy = remaining_bytes;
 800b17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b180:	61fb      	str	r3, [r7, #28]
        }

        /* Copy data from this packet.  */
        memcpy(destination_ptr, source_ptr, bytes_to_copy); /* Use case of memcpy is verified. */
 800b182:	69fa      	ldr	r2, [r7, #28]
 800b184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b188:	f00b fc84 	bl	8016a94 <memcpy>

        /* Update the pointers. */
        destination_ptr += bytes_to_copy;
 800b18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	4413      	add	r3, r2
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
        remaining_bytes -= bytes_to_copy;
 800b194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	61bb      	str	r3, [r7, #24]

        /* Check for a next packet.  */
        if (working_packet_ptr)
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <_nx_packet_data_extract_offset+0xe8>
        {

            /* Setup new source pointer.  */
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	62bb      	str	r3, [r7, #40]	; 0x28
    while (working_packet_ptr && remaining_bytes)
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <_nx_packet_data_extract_offset+0xf4>
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1d8      	bne.n	800b16c <_nx_packet_data_extract_offset+0xa6>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3730      	adds	r7, #48	; 0x30
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <_nx_packet_data_retrieve>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b088      	sub	sp, #32
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_RETRIEVE, packet_ptr, buffer_start, bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	61bb      	str	r3, [r7, #24]

    /* Pickup the amount of bytes to copy.  */
    *bytes_copied =  packet_ptr -> nx_packet_length;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	601a      	str	r2, [r3, #0]

    /* Setup the remaining bytes.  */
    remaining_bytes =  packet_ptr -> nx_packet_length;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	61fb      	str	r3, [r7, #28]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (packet_ptr)
 800b1e2:	e017      	b.n	800b214 <_nx_packet_data_retrieve+0x50>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate the bytes to copy in this packet. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	617b      	str	r3, [r7, #20]

        /* Copy data to destination. */
        /* Note: The buffer size must be not less than packet_ptr -> nx_packet_length.  */
        memcpy(destination_ptr, packet_ptr -> nx_packet_prepend_ptr, bytes_to_copy); /* Use case of memcpy is verified. The buffer is provided by user.  */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	69b8      	ldr	r0, [r7, #24]
 800b1fa:	f00b fc4b 	bl	8016a94 <memcpy>

        remaining_bytes -= bytes_to_copy;
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	61fb      	str	r3, [r7, #28]
        destination_ptr += bytes_to_copy;
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	4413      	add	r3, r2
 800b20c:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	60fb      	str	r3, [r7, #12]
    while (packet_ptr)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1e4      	bne.n	800b1e4 <_nx_packet_data_retrieve+0x20>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if the packet chain was valid.  */
    if (remaining_bytes)
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <_nx_packet_data_retrieve+0x6c>
    {

        /* Invalid packet chain.  Calculate the actual number of bytes
           copied.  */
        *bytes_copied =  *bytes_copied - remaining_bytes;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	1ad2      	subs	r2, r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	601a      	str	r2, [r3, #0]

        /* Return an error.  */
        return(NX_INVALID_PACKET);
 800b22c:	2312      	movs	r3, #18
 800b22e:	e000      	b.n	800b232 <_nx_packet_data_retrieve+0x6e>
    }

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3720      	adds	r7, #32
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b24a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b24c:	f3ef 8310 	mrs	r3, PRIMASK
 800b250:	617b      	str	r3, [r7, #20]
    return(posture);
 800b252:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b254:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b256:	b672      	cpsid	i
    return(int_posture);
 800b258:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 800b25a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b260:	2b00      	cmp	r3, #0
 800b262:	d042      	beq.n	800b2ea <_nx_packet_pool_cleanup+0xae>
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d03f      	beq.n	800b2ea <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800b26e:	4a23      	ldr	r2, [pc, #140]	; (800b2fc <_nx_packet_pool_cleanup+0xc0>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d13a      	bne.n	800b2ea <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d103      	bne.n	800b28c <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	2200      	movs	r2, #0
 800b288:	62da      	str	r2, [r3, #44]	; 0x2c
 800b28a:	e012      	b.n	800b2b2 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	429a      	cmp	r2, r3
 800b294:	d103      	bne.n	800b29e <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b2a6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b2b0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	1e5a      	subs	r2, r3, #1
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c0:	2b0c      	cmp	r3, #12
 800b2c2:	d112      	bne.n	800b2ea <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b2cc:	4b0c      	ldr	r3, [pc, #48]	; (800b300 <_nx_packet_pool_cleanup+0xc4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	4a0b      	ldr	r2, [pc, #44]	; (800b300 <_nx_packet_pool_cleanup+0xc4>)
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f383 8810 	msr	PRIMASK, r3
}
 800b2e0:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f009 ff08 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800b2e8:	e005      	b.n	800b2f6 <_nx_packet_pool_cleanup+0xba>
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	f383 8810 	msr	PRIMASK, r3
}
 800b2f4:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800b2f6:	3720      	adds	r7, #32
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	5041434b 	.word	0x5041434b
 800b300:	2000aaf4 	.word	0x2000aaf4

0800b304 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b092      	sub	sp, #72	; 0x48
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	3303      	adds	r3, #3
 800b31a:	f023 0303 	bic.w	r3, r3, #3
 800b31e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b324:	1ad2      	subs	r2, r2, r3
 800b326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b328:	4413      	add	r3, r2
 800b32a:	f023 0303 	bic.w	r3, r3, #3
 800b32e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 800b330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b332:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800b334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b336:	333c      	adds	r3, #60	; 0x3c
 800b338:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	3303      	adds	r3, #3
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800b344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800b34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4413      	add	r3, r2
 800b352:	3303      	adds	r3, #3
 800b354:	f023 0203 	bic.w	r2, r3, #3
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800b35e:	223c      	movs	r2, #60	; 0x3c
 800b360:	2100      	movs	r1, #0
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f00b fbbe 	bl	8016ae4 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b384:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b38a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b390:	4413      	add	r3, r2
 800b392:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 800b394:	2300      	movs	r3, #0
 800b396:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 800b398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39a:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	4413      	add	r3, r2
 800b3a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3a4:	4413      	add	r3, r2
 800b3a6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 800b3a8:	e023      	b.n	800b3f2 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 800b3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3b4:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 800b3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800b3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3be:	2200      	movs	r2, #0
 800b3c0:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800b3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c8:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 800b3ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	441a      	add	r2, r3
 800b3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d2:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800b3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	4413      	add	r3, r2
 800b3da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3dc:	441a      	add	r2, r3
 800b3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3e0:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 800b3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e4:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ea:	4413      	add	r3, r2
 800b3ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3ee:	4413      	add	r3, r2
 800b3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 800b3f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d9d7      	bls.n	800b3aa <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	4413      	add	r3, r2
 800b400:	425b      	negs	r3, r3
 800b402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b404:	4413      	add	r3, r2
 800b406:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 800b408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40a:	2200      	movs	r2, #0
 800b40c:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b412:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b418:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b420:	f3ef 8310 	mrs	r3, PRIMASK
 800b424:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b426:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b428:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b42a:	b672      	cpsid	i
    return(int_posture);
 800b42c:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4a19      	ldr	r2, [pc, #100]	; (800b498 <_nx_packet_pool_create+0x194>)
 800b434:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 800b436:	4b19      	ldr	r3, [pc, #100]	; (800b49c <_nx_packet_pool_create+0x198>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d012      	beq.n	800b464 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800b43e:	4b17      	ldr	r3, [pc, #92]	; (800b49c <_nx_packet_pool_create+0x198>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b444:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800b446:	4b15      	ldr	r3, [pc, #84]	; (800b49c <_nx_packet_pool_create+0x198>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a3a      	ldr	r2, [r7, #32]
 800b458:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 800b45a:	4b10      	ldr	r3, [pc, #64]	; (800b49c <_nx_packet_pool_create+0x198>)
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	635a      	str	r2, [r3, #52]	; 0x34
 800b462:	e008      	b.n	800b476 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 800b464:	4a0d      	ldr	r2, [pc, #52]	; (800b49c <_nx_packet_pool_create+0x198>)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 800b476:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <_nx_packet_pool_create+0x19c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	4a08      	ldr	r2, [pc, #32]	; (800b4a0 <_nx_packet_pool_create+0x19c>)
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f383 8810 	msr	PRIMASK, r3
}
 800b48a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3748      	adds	r7, #72	; 0x48
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	5041434b 	.word	0x5041434b
 800b49c:	2000aa00 	.word	0x2000aa00
 800b4a0:	2000a9fc 	.word	0x2000a9fc

0800b4a4 <_nx_packet_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08e      	sub	sp, #56	; 0x38
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b4b4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4b6:	b672      	cpsid	i
    return(int_posture);
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

TX_THREAD *thread_ptr;      /* Working thread pointer  */


    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE
 800b4ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 800b4bc:	4b3b      	ldr	r3, [pc, #236]	; (800b5ac <_nx_packet_pool_delete+0x108>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	4a3a      	ldr	r2, [pc, #232]	; (800b5ac <_nx_packet_pool_delete+0x108>)
 800b4c4:	6013      	str	r3, [r2, #0]

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d103      	bne.n	800b4de <_nx_packet_pool_delete+0x3a>
    {

        /* Only created packet pool, just set the created list to NULL.  */
        _nx_packet_pool_created_ptr =  NX_NULL;
 800b4d6:	4b36      	ldr	r3, [pc, #216]	; (800b5b0 <_nx_packet_pool_delete+0x10c>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	e012      	b.n	800b504 <_nx_packet_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            pool_ptr -> nx_packet_pool_created_previous;
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800b4e6:	639a      	str	r2, [r3, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            pool_ptr -> nx_packet_pool_created_next;
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800b4f0:	635a      	str	r2, [r3, #52]	; 0x34

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 800b4f2:	4b2f      	ldr	r3, [pc, #188]	; (800b5b0 <_nx_packet_pool_delete+0x10c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d103      	bne.n	800b504 <_nx_packet_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b500:	4a2b      	ldr	r2, [pc, #172]	; (800b5b0 <_nx_packet_pool_delete+0x10c>)
 800b502:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b504:	4b2b      	ldr	r3, [pc, #172]	; (800b5b4 <_nx_packet_pool_delete+0x110>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3301      	adds	r3, #1
 800b50a:	4a2a      	ldr	r2, [pc, #168]	; (800b5b4 <_nx_packet_pool_delete+0x110>)
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	f383 8810 	msr	PRIMASK, r3
}
 800b518:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51e:	637b      	str	r3, [r7, #52]	; 0x34
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800b520:	e026      	b.n	800b570 <_nx_packet_pool_delete+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b522:	f3ef 8310 	mrs	r3, PRIMASK
 800b526:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b528:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b52a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b52c:	b672      	cpsid	i
    return(int_posture);
 800b52e:	69bb      	ldr	r3, [r7, #24]
    {
        /* Lockout interrupts.  */
        TX_DISABLE
 800b530:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b534:	2200      	movs	r2, #0
 800b536:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800b538:	4b1e      	ldr	r3, [pc, #120]	; (800b5b4 <_nx_packet_pool_delete+0x110>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3301      	adds	r3, #1
 800b53e:	4a1d      	ldr	r2, [pc, #116]	; (800b5b4 <_nx_packet_pool_delete+0x110>)
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	f383 8810 	msr	PRIMASK, r3
}
 800b54c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 800b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b550:	2230      	movs	r2, #48	; 0x30
 800b552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800b55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b560:	4618      	mov	r0, r3
 800b562:	f009 fdc9 	bl	80150f8 <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	1e5a      	subs	r2, r3, #1
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	631a      	str	r2, [r3, #48]	; 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1d4      	bne.n	800b522 <_nx_packet_pool_delete+0x7e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b578:	f3ef 8310 	mrs	r3, PRIMASK
 800b57c:	613b      	str	r3, [r7, #16]
    return(posture);
 800b57e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b580:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b582:	b672      	cpsid	i
    return(int_posture);
 800b584:	68fb      	ldr	r3, [r7, #12]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800b586:	633b      	str	r3, [r7, #48]	; 0x30

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <_nx_packet_pool_delete+0x110>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	4a09      	ldr	r2, [pc, #36]	; (800b5b4 <_nx_packet_pool_delete+0x110>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f383 8810 	msr	PRIMASK, r3
}
 800b59c:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800b59e:	f009 fd71 	bl	8015084 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3738      	adds	r7, #56	; 0x38
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	2000a9fc 	.word	0x2000a9fc
 800b5b0:	2000aa00 	.word	0x2000aa00
 800b5b4:	2000aaf4 	.word	0x2000aaf4

0800b5b8 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08a      	sub	sp, #40	; 0x28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 800b5c0:	e0a5      	b.n	800b70e <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800b5ca:	d011      	beq.n	800b5f0 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d009      	beq.n	800b5ec <_nx_packet_release+0x34>
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a50      	ldr	r2, [pc, #320]	; (800b720 <_nx_packet_release+0x168>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d104      	bne.n	800b5ec <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800b5ec:	2307      	movs	r3, #7
 800b5ee:	e093      	b.n	800b718 <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5fa:	617b      	str	r3, [r7, #20]
    return(posture);
 800b5fc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b5fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b600:	b672      	cpsid	i
    return(int_posture);
 800b602:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 800b604:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d062      	beq.n	800b6de <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d103      	bne.n	800b62a <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	2200      	movs	r2, #0
 800b626:	62da      	str	r2, [r3, #44]	; 0x2c
 800b628:	e00d      	b.n	800b646 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800b636:	69ba      	ldr	r2, [r7, #24]
 800b638:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b63a:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800b640:	69ba      	ldr	r2, [r7, #24]
 800b642:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b644:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b64a:	1e5a      	subs	r2, r3, #1
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	2200      	movs	r2, #0
 800b654:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b656:	4b33      	ldr	r3, [pc, #204]	; (800b724 <_nx_packet_release+0x16c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3301      	adds	r3, #1
 800b65c:	4a31      	ldr	r2, [pc, #196]	; (800b724 <_nx_packet_release+0x16c>)
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f383 8810 	msr	PRIMASK, r3
}
 800b66a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b68c:	441a      	add	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689a      	ldr	r2, [r3, #8]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800b6ac:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800b6d6:	69b8      	ldr	r0, [r7, #24]
 800b6d8:	f009 fd0e 	bl	80150f8 <_tx_thread_system_resume>
 800b6dc:	e015      	b.n	800b70a <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e4:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	69da      	ldr	r2, [r3, #28]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	609a      	str	r2, [r3, #8]
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f383 8810 	msr	PRIMASK, r3
}
 800b708:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	f47f af56 	bne.w	800b5c2 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3728      	adds	r7, #40	; 0x28
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	5041434b 	.word	0x5041434b
 800b724:	2000aaf4 	.word	0x2000aaf4

0800b728 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b088      	sub	sp, #32
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b730:	f3ef 8310 	mrs	r3, PRIMASK
 800b734:	617b      	str	r3, [r7, #20]
    return(posture);
 800b736:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b738:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b73a:	b672      	cpsid	i
    return(int_posture);
 800b73c:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800b73e:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800b748:	d025      	beq.n	800b796 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800b74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b752:	d020      	beq.n	800b796 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 800b75a:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800b766:	441a      	add	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800b776:	1a9a      	subs	r2, r3, r2
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f383 8810 	msr	PRIMASK, r3
}
 800b78e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 800b790:	2300      	movs	r3, #0
 800b792:	61fb      	str	r3, [r7, #28]
 800b794:	e009      	b.n	800b7aa <_nx_packet_transmit_release+0x82>
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f383 8810 	msr	PRIMASK, r3
}
 800b7a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff ff08 	bl	800b5b8 <_nx_packet_release>
 800b7a8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800b7aa:	69fb      	ldr	r3, [r7, #28]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3720      	adds	r7, #32
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7be:	f3ef 8310 	mrs	r3, PRIMASK
 800b7c2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b7c4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b7c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7c8:	b672      	cpsid	i
    return(int_posture);
 800b7ca:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800b7cc:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d110      	bne.n	800b7fa <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f383 8810 	msr	PRIMASK, r3
}
 800b7f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800b7f2:	6838      	ldr	r0, [r7, #0]
 800b7f4:	f7ff fee0 	bl	800b5b8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800b7f8:	e02f      	b.n	800b85a <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800b800:	2b00      	cmp	r3, #0
 800b802:	d011      	beq.n	800b828 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2200      	movs	r2, #0
 800b812:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f383 8810 	msr	PRIMASK, r3
}
 800b826:	e018      	b.n	800b85a <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2200      	movs	r2, #0
 800b83c:	61da      	str	r2, [r3, #28]
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	f383 8810 	msr	PRIMASK, r3
}
 800b848:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b850:	2200      	movs	r2, #0
 800b852:	2120      	movs	r1, #32
 800b854:	4618      	mov	r0, r3
 800b856:	f007 fd1b 	bl	8013290 <_tx_event_flags_set>
    }
}
 800b85a:	3720      	adds	r7, #32
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <_nx_tcp_cleanup_deferred>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_cleanup_deferred(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 800b86a:	bf00      	nop
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
	...

0800b878 <_nx_tcp_client_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_client_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08e      	sub	sp, #56	; 0x38
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b882:	f3ef 8310 	mrs	r3, PRIMASK
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b88a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b88c:	b672      	cpsid	i
    return(int_posture);
 800b88e:	6a3b      	ldr	r3, [r7, #32]
NX_TCP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE
 800b890:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b896:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d004      	beq.n	800b8a8 <_nx_tcp_client_bind_cleanup+0x30>
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a42      	ldr	r2, [pc, #264]	; (800b9ac <_nx_tcp_client_bind_cleanup+0x134>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d006      	beq.n	800b8b6 <_nx_tcp_client_bind_cleanup+0x3e>
 800b8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	f383 8810 	msr	PRIMASK, r3
}
 800b8b2:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800b8b4:	e077      	b.n	800b9a6 <_nx_tcp_client_bind_cleanup+0x12e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d106      	bne.n	800b8cc <_nx_tcp_client_bind_cleanup+0x54>
 800b8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f383 8810 	msr	PRIMASK, r3
}
 800b8c8:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800b8ca:	e06c      	b.n	800b9a6 <_nx_tcp_client_bind_cleanup+0x12e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b8cc:	f3ef 8305 	mrs	r3, IPSR
 800b8d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b8d2:	697a      	ldr	r2, [r7, #20]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800b8d4:	4b36      	ldr	r3, [pc, #216]	; (800b9b0 <_nx_tcp_client_bind_cleanup+0x138>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d104      	bne.n	800b8e8 <_nx_tcp_client_bind_cleanup+0x70>
 800b8de:	4b35      	ldr	r3, [pc, #212]	; (800b9b4 <_nx_tcp_client_bind_cleanup+0x13c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a35      	ldr	r2, [pc, #212]	; (800b9b8 <_nx_tcp_client_bind_cleanup+0x140>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d116      	bne.n	800b916 <_nx_tcp_client_bind_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a34      	ldr	r2, [pc, #208]	; (800b9bc <_nx_tcp_client_bind_cleanup+0x144>)
 800b8ec:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	f383 8810 	msr	PRIMASK, r3
}
 800b900:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b908:	2200      	movs	r2, #0
 800b90a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b90e:	4618      	mov	r0, r3
 800b910:	f007 fcbe 	bl	8013290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800b914:	e047      	b.n	800b9a6 <_nx_tcp_client_bind_cleanup+0x12e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	2200      	movs	r2, #0
 800b91a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b92a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	429a      	cmp	r2, r3
 800b934:	d104      	bne.n	800b940 <_nx_tcp_client_bind_cleanup+0xc8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	2200      	movs	r2, #0
 800b93a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800b93e:	e00e      	b.n	800b95e <_nx_tcp_client_bind_cleanup+0xe6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800b952:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800b95c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b964:	1e5a      	subs	r2, r3, #1
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b970:	2b0c      	cmp	r3, #12
 800b972:	d112      	bne.n	800b99a <_nx_tcp_client_bind_cleanup+0x122>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2223      	movs	r2, #35	; 0x23
 800b978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <_nx_tcp_client_bind_cleanup+0x148>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	4a0f      	ldr	r2, [pc, #60]	; (800b9c0 <_nx_tcp_client_bind_cleanup+0x148>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b988:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f383 8810 	msr	PRIMASK, r3
}
 800b990:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f009 fbb0 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800b998:	e005      	b.n	800b9a6 <_nx_tcp_client_bind_cleanup+0x12e>
 800b99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f383 8810 	msr	PRIMASK, r3
}
 800b9a4:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800b9a6:	3738      	adds	r7, #56	; 0x38
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	54435020 	.word	0x54435020
 800b9b0:	20000094 	.word	0x20000094
 800b9b4:	2000aaf8 	.word	0x2000aaf8
 800b9b8:	2000ab98 	.word	0x2000ab98
 800b9bc:	0800b861 	.word	0x0800b861
 800b9c0:	2000aaf4 	.word	0x2000aaf4

0800b9c4 <_nx_tcp_client_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_client_socket_bind(NX_TCP_SOCKET *socket_ptr, UINT port, ULONG wait_option)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b08e      	sub	sp, #56	; 0x38
 800b9c8:	af02      	add	r7, sp, #8
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
NX_TCP_SOCKET *search_ptr;
NX_TCP_SOCKET *end_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b9d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_CLIENT_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b9de:	f04f 31ff 	mov.w	r1, #4294967295
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f008 f8b6 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d104      	bne.n	800b9fc <_nx_tcp_client_socket_bind+0x38>
        (socket_ptr -> nx_tcp_socket_bind_in_progress))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d007      	beq.n	800ba0c <_nx_tcp_client_socket_bind+0x48>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ba02:	4618      	mov	r0, r3
 800ba04:	f008 fb1e 	bl	8014044 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800ba08:	2322      	movs	r3, #34	; 0x22
 800ba0a:	e0cb      	b.n	800bba4 <_nx_tcp_client_socket_bind+0x1e0>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d11e      	bne.n	800ba50 <_nx_tcp_client_socket_bind+0x8c>
    {

        /* Call the find routine to allocate a TCP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 800ba12:	f00b f8fd 	bl	8016c10 <rand>
 800ba16:	4603      	mov	r3, r0
 800ba18:	425a      	negs	r2, r3
 800ba1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba1e:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800ba22:	bf58      	it	pl
 800ba24:	4253      	negpl	r3, r2
 800ba26:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800ba2a:	60bb      	str	r3, [r7, #8]
        if (_nx_tcp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f107 0208 	add.w	r2, r7, #8
 800ba32:	4619      	mov	r1, r3
 800ba34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba36:	f000 fced 	bl	800c414 <_nx_tcp_free_port_find>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d007      	beq.n	800ba50 <_nx_tcp_client_socket_bind+0x8c>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ba46:	4618      	mov	r0, r3
 800ba48:	f008 fafc 	bl	8014044 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 800ba4c:	2345      	movs	r3, #69	; 0x45
 800ba4e:	e0a9      	b.n	800bba4 <_nx_tcp_client_socket_bind+0x1e0>
        }
    }
#endif

    /* Save the port number in the TCP socket structure.  */
    socket_ptr -> nx_tcp_socket_port =  port;
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	60da      	str	r2, [r3, #12]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	0a1a      	lsrs	r2, r3, #8
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	f003 031f 	and.w	r3, r3, #31
 800ba62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the head of the TCP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba68:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800ba6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba70:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d010      	beq.n	800ba9a <_nx_tcp_client_socket_bind+0xd6>
    {

        /* Walk through the circular list of TCP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	623b      	str	r3, [r7, #32]
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_tcp_socket_port == port)
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d008      	beq.n	800ba98 <_nx_tcp_client_socket_bind+0xd4>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_tcp_socket_bound_next;
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        } while (search_ptr != end_ptr);
 800ba8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d1f2      	bne.n	800ba7c <_nx_tcp_client_socket_bind+0xb8>
 800ba96:	e000      	b.n	800ba9a <_nx_tcp_client_socket_bind+0xd6>
                break;
 800ba98:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_tcp_socket_port != port))
 800ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d004      	beq.n	800baaa <_nx_tcp_client_socket_bind+0xe6>
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	68da      	ldr	r2, [r3, #12]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d050      	beq.n	800bb4c <_nx_tcp_client_socket_bind+0x188>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baaa:	f3ef 8310 	mrs	r3, PRIMASK
 800baae:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bab0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bab2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bab4:	b672      	cpsid	i
    return(int_posture);
 800bab6:	697b      	ldr	r3, [r7, #20]
    {

        /* Place this TCP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800bab8:	61fb      	str	r3, [r7, #28]

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d028      	beq.n	800bb12 <_nx_tcp_client_socket_bind+0x14e>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_tcp_socket_bound_next =
                ip_ptr -> nx_ip_tcp_port_table[index];
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac4:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bac8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            socket_ptr -> nx_tcp_socket_bound_next =
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            socket_ptr -> nx_tcp_socket_bound_previous =
                (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad6:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bade:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
            socket_ptr -> nx_tcp_socket_bound_previous =
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
            ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baec:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800baf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                socket_ptr;
            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous =   socket_ptr;
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb02:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800bb10:	e00e      	b.n	800bb30 <_nx_tcp_client_socket_bind+0x16c>
        else
        {

            /* Nothing is on the TCP port list.  Add this TCP socket to an
               empty list.  */
            socket_ptr -> nx_tcp_socket_bound_next =      socket_ptr;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
            ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb26:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	f383 8810 	msr	PRIMASK, r3
}
 800bb3a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bb42:	4618      	mov	r0, r3
 800bb44:	f008 fa7e 	bl	8014044 <_tx_mutex_put>

        /* Return success to the caller.  */
        return(NX_SUCCESS);
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e02b      	b.n	800bba4 <_nx_tcp_client_socket_bind+0x1e0>
    }
    else if (wait_option)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d021      	beq.n	800bb96 <_nx_tcp_client_socket_bind+0x1d2>
    {

        /* Prepare for suspension of this thread.  */

        /* Increment the suspended thread count.  */
        search_ptr -> nx_tcp_socket_bind_suspended_count++;
 800bb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_tcp_socket_bind_in_progress =  _tx_thread_current_ptr;
 800bb60:	4b12      	ldr	r3, [pc, #72]	; (800bbac <_nx_tcp_client_socket_bind+0x1e8>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_tcp_socket_bound_previous =  search_ptr;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb6e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

        /* Suspend the thread on this socket's connection attempt.  */
        _nx_tcp_socket_thread_suspend(&(search_ptr -> nx_tcp_socket_bind_suspension_list), _nx_tcp_client_bind_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	f503 7082 	add.w	r0, r3, #260	; 0x104
 800bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7a:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	4613      	mov	r3, r2
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	490a      	ldr	r1, [pc, #40]	; (800bbb0 <_nx_tcp_client_socket_bind+0x1ec>)
 800bb88:	f004 fadc 	bl	8010144 <_nx_tcp_socket_thread_suspend>

        /* Return the completion status.  */
        return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 800bb8c:	4b07      	ldr	r3, [pc, #28]	; (800bbac <_nx_tcp_client_socket_bind+0x1e8>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb94:	e006      	b.n	800bba4 <_nx_tcp_client_socket_bind+0x1e0>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f008 fa51 	bl	8014044 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        return(NX_PORT_UNAVAILABLE);
 800bba2:	2323      	movs	r3, #35	; 0x23
    }
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3730      	adds	r7, #48	; 0x30
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	2000aaf8 	.word	0x2000aaf8
 800bbb0:	0800b879 	.word	0x0800b879

0800bbb4 <_nx_tcp_client_socket_connect>:
/**************************************************************************/
UINT  _nx_tcp_client_socket_connect(NX_TCP_SOCKET *socket_ptr,
                                    ULONG server_ip,
                                    UINT server_port,
                                    ULONG wait_option)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_IPV4
NXD_ADDRESS server_ip_addr;

    /* Construct an IP address structure, and fill in IPv4 address information. */
    server_ip_addr.nxd_ip_version = NX_IP_VERSION_V4;
 800bbc2:	2304      	movs	r3, #4
 800bbc4:	613b      	str	r3, [r7, #16]
    server_ip_addr.nxd_ip_address.v4 = server_ip;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	617b      	str	r3, [r7, #20]

    /* Invoke the real connection call. */
    return(_nxd_tcp_client_socket_connect(socket_ptr, &server_ip_addr, server_port, wait_option));
 800bbca:	f107 0110 	add.w	r1, r7, #16
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f005 fcea 	bl	80115ac <_nxd_tcp_client_socket_connect>
 800bbd8:	4603      	mov	r3, r0
    NX_PARAMETER_NOT_USED(server_port);
    NX_PARAMETER_NOT_USED(wait_option);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <_nx_tcp_client_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_client_socket_unbind(NX_TCP_SOCKET *socket_ptr)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b08e      	sub	sp, #56	; 0x38
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
NX_IP         *ip_ptr;
NX_TCP_SOCKET *new_socket_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_CLIENT_SOCKET_UNBIND, ip_ptr, socket_ptr, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800bbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bbf8:	f04f 31ff 	mov.w	r1, #4294967295
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f007 ffa9 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket is still in the timed wait state.  */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc06:	2b0a      	cmp	r3, #10
 800bc08:	d102      	bne.n	800bc10 <_nx_tcp_client_socket_unbind+0x2e>
    {

        /* Cleanup the transmission control block.  */
        _nx_tcp_socket_block_cleanup(socket_ptr);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f001 fc28 	bl	800d460 <_nx_tcp_socket_block_cleanup>
    }

    /* Determine if the socket is still in the closed state.  */
    if (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d007      	beq.n	800bc28 <_nx_tcp_client_socket_unbind+0x46>
    {

        /* No, release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bc18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f008 fa10 	bl	8014044 <_tx_mutex_put>

        /* Return an error code.  */
        return(NX_NOT_CLOSED);
 800bc24:	2335      	movs	r3, #53	; 0x35
 800bc26:	e0f7      	b.n	800be18 <_nx_tcp_client_socket_unbind+0x236>
    }

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_tcp_socket_bound_next)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d11b      	bne.n	800bc6a <_nx_tcp_client_socket_unbind+0x88>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_tcp_socket_bind_in_progress)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <_nx_tcp_client_socket_unbind+0x78>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_tcp_client_bind_cleanup(socket_ptr -> nx_tcp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc42:	2100      	movs	r1, #0
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fe17 	bl	800b878 <_nx_tcp_client_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bc50:	4618      	mov	r0, r3
 800bc52:	f008 f9f7 	bl	8014044 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 800bc56:	2300      	movs	r3, #0
 800bc58:	e0de      	b.n	800be18 <_nx_tcp_client_socket_unbind+0x236>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bc60:	4618      	mov	r0, r3
 800bc62:	f008 f9ef 	bl	8014044 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 800bc66:	2324      	movs	r3, #36	; 0x24
 800bc68:	e0d6      	b.n	800be18 <_nx_tcp_client_socket_unbind+0x236>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other TCP socket bind requests that are queued.  */

    /* Pickup the port number in the TCP socket structure.  */
    port =  socket_ptr -> nx_tcp_socket_port;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	0a1a      	lsrs	r2, r3, #8
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	4413      	add	r3, r2
 800bc78:	f003 031f 	and.w	r3, r3, #31
 800bc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc7e:	f3ef 8310 	mrs	r3, PRIMASK
 800bc82:	623b      	str	r3, [r7, #32]
    return(posture);
 800bc84:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bc86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc88:	b672      	cpsid	i
    return(int_posture);
 800bc8a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 800bc8c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* The socket is off the bound list...  we need to check for queued receive packets and
       if found they need to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <_nx_tcp_client_socket_unbind+0xbc>
    {

        /* Remove all packets on the socket's receive queue.  */
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f002 f98f 	bl	800dfbc <_nx_tcp_socket_receive_queue_flush>
    }

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_tcp_socket_bound_next == socket_ptr)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d10b      	bne.n	800bcc2 <_nx_tcp_client_socket_unbind+0xe0>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_tcp_port_table[index] =   NX_NULL;
 800bcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcae:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        socket_ptr -> nx_tcp_socket_bound_next =  NX_NULL;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bcc0:	e025      	b.n	800bd0e <_nx_tcp_client_socket_unbind+0x12c>
    {

        /* Relink the neighbors of this TCP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_tcp_socket_bound_next) -> nx_tcp_socket_bound_previous =
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
            socket_ptr -> nx_tcp_socket_bound_previous;
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
        (socket_ptr -> nx_tcp_socket_bound_next) -> nx_tcp_socket_bound_previous =
 800bcce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        (socket_ptr -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
            socket_ptr -> nx_tcp_socket_bound_next;
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
        (socket_ptr -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800bcde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_tcp_port_table[index] == socket_ptr)
 800bce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bce6:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d108      	bne.n	800bd06 <_nx_tcp_client_socket_unbind+0x124>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_tcp_port_table[index] =  socket_ptr -> nx_tcp_socket_bound_next;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcfe:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bd02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_tcp_socket_bound_next =  NX_NULL;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	f383 8810 	msr	PRIMASK, r3
}
 800bd18:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    if (socket_ptr -> nx_tcp_socket_bind_suspension_list)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d072      	beq.n	800be0a <_nx_tcp_client_socket_unbind+0x228>
    {

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_TCP_SOCKET *)(socket_ptr -> nx_tcp_socket_bind_suspension_list) -> tx_thread_suspend_control_block;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	2200      	movs	r2, #0
 800bd32:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

        /* Inherit the suspension list from the previously bound socket.  Decrement the suspension count
           early since this thread will be resumed and removed from the list later.  */
        new_socket_ptr -> nx_tcp_socket_bind_suspension_list =
            socket_ptr -> nx_tcp_socket_bind_suspension_list;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        new_socket_ptr -> nx_tcp_socket_bind_suspension_list =
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        new_socket_ptr -> nx_tcp_socket_bind_suspended_count =   socket_ptr -> nx_tcp_socket_bind_suspended_count - 1;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bd48:	1e5a      	subs	r2, r3, #1
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Clear the original socket's information.  */
        socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        socket_ptr -> nx_tcp_socket_bind_suspended_count =  0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd60:	f3ef 8310 	mrs	r3, PRIMASK
 800bd64:	617b      	str	r3, [r7, #20]
    return(posture);
 800bd66:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bd68:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd6a:	b672      	cpsid	i
    return(int_posture);
 800bd6c:	693b      	ldr	r3, [r7, #16]

        /* Disable interrupts.  */
        TX_DISABLE
 800bd6e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_tcp_port_table[index])
 800bd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd74:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d028      	beq.n	800bdd2 <_nx_tcp_client_socket_unbind+0x1f0>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_tcp_socket_bound_next =
                ip_ptr -> nx_ip_tcp_port_table[index];
 800bd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd84:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bd88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            new_socket_ptr -> nx_tcp_socket_bound_next =
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            new_socket_ptr -> nx_tcp_socket_bound_previous =
                (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 800bd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd96:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bd9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd9e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
            new_socket_ptr -> nx_tcp_socket_bound_previous =
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
            ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800bda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdac:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                new_socket_ptr;
            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous =   new_socket_ptr;
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc2:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bdc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdcc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800bdd0:	e00e      	b.n	800bdf0 <_nx_tcp_client_socket_unbind+0x20e>
        else
        {

            /* Nothing is on the TCP port list.  Add this TCP socket to an
               empty list.  */
            new_socket_ptr -> nx_tcp_socket_bound_next =      new_socket_ptr;
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            new_socket_ptr -> nx_tcp_socket_bound_previous =  new_socket_ptr;
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdde:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
            ip_ptr -> nx_ip_tcp_port_table[index] =           new_socket_ptr;
 800bde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bde6:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800bdea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f383 8810 	msr	PRIMASK, r3
}
 800bdfa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread suspended on the bind call.  */
        _nx_tcp_socket_thread_resume(&(new_socket_ptr -> nx_tcp_socket_bind_suspension_list), NX_SUCCESS);
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800be02:	2100      	movs	r1, #0
 800be04:	4618      	mov	r0, r3
 800be06:	f004 f951 	bl	80100ac <_nx_tcp_socket_thread_resume>
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800be0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800be10:	4618      	mov	r0, r3
 800be12:	f008 f917 	bl	8014044 <_tx_mutex_put>

    /* Return success.  */
    return(NX_SUCCESS);
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3738      	adds	r7, #56	; 0x38
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <_nx_tcp_connect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_connect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	; 0x38
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be2a:	f3ef 8310 	mrs	r3, PRIMASK
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800be34:	b672      	cpsid	i
    return(int_posture);
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800be38:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	2b00      	cmp	r3, #0
 800be44:	d004      	beq.n	800be50 <_nx_tcp_connect_cleanup+0x30>
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a3a      	ldr	r2, [pc, #232]	; (800bf34 <_nx_tcp_connect_cleanup+0x114>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d006      	beq.n	800be5e <_nx_tcp_connect_cleanup+0x3e>
 800be50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	f383 8810 	msr	PRIMASK, r3
}
 800be5a:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800be5c:	e067      	b.n	800bf2e <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be62:	2b00      	cmp	r3, #0
 800be64:	d106      	bne.n	800be74 <_nx_tcp_connect_cleanup+0x54>
 800be66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be68:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	f383 8810 	msr	PRIMASK, r3
}
 800be70:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800be72:	e05c      	b.n	800bf2e <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Pickup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be7c:	f3ef 8305 	mrs	r3, IPSR
 800be80:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800be82:	69ba      	ldr	r2, [r7, #24]

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800be84:	4b2c      	ldr	r3, [pc, #176]	; (800bf38 <_nx_tcp_connect_cleanup+0x118>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4313      	orrs	r3, r2
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d104      	bne.n	800be98 <_nx_tcp_connect_cleanup+0x78>
 800be8e:	4b2b      	ldr	r3, [pc, #172]	; (800bf3c <_nx_tcp_connect_cleanup+0x11c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a2b      	ldr	r2, [pc, #172]	; (800bf40 <_nx_tcp_connect_cleanup+0x120>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d112      	bne.n	800bebe <_nx_tcp_connect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a2a      	ldr	r2, [pc, #168]	; (800bf44 <_nx_tcp_connect_cleanup+0x124>)
 800be9c:	669a      	str	r2, [r3, #104]	; 0x68
 800be9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f383 8810 	msr	PRIMASK, r3
}
 800bea8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800beb0:	2200      	movs	r2, #0
 800beb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800beb6:	4618      	mov	r0, r3
 800beb8:	f007 f9ea 	bl	8013290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800bebc:	e037      	b.n	800bf2e <_nx_tcp_connect_cleanup+0x10e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	2200      	movs	r2, #0
 800bec8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	2200      	movs	r2, #0
 800bed0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Return to the proper socket state.  */
        if (socket_ptr -> nx_tcp_socket_client_type)
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d003      	beq.n	800bee4 <_nx_tcp_connect_cleanup+0xc4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Client socket, return to a CLOSED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	2201      	movs	r2, #1
 800bee0:	639a      	str	r2, [r3, #56]	; 0x38
 800bee2:	e007      	b.n	800bef4 <_nx_tcp_connect_cleanup+0xd4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Server socket, return to LISTEN state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	2202      	movs	r2, #2
 800bee8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Move back the acknowledgment number just in case there is a retry.  */
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beee:	1e5a      	subs	r2, r3, #1
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	641a      	str	r2, [r3, #64]	; 0x40
        }

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef8:	2b0c      	cmp	r3, #12
 800befa:	d112      	bne.n	800bf22 <_nx_tcp_connect_cleanup+0x102>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2238      	movs	r2, #56	; 0x38
 800bf00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bf04:	4b10      	ldr	r3, [pc, #64]	; (800bf48 <_nx_tcp_connect_cleanup+0x128>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	4a0f      	ldr	r2, [pc, #60]	; (800bf48 <_nx_tcp_connect_cleanup+0x128>)
 800bf0c:	6013      	str	r3, [r2, #0]
 800bf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f383 8810 	msr	PRIMASK, r3
}
 800bf18:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f009 f8ec 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800bf20:	e005      	b.n	800bf2e <_nx_tcp_connect_cleanup+0x10e>
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f383 8810 	msr	PRIMASK, r3
}
 800bf2c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800bf2e:	3738      	adds	r7, #56	; 0x38
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	54435020 	.word	0x54435020
 800bf38:	20000094 	.word	0x20000094
 800bf3c:	2000aaf8 	.word	0x2000aaf8
 800bf40:	2000ab98 	.word	0x2000ab98
 800bf44:	0800b861 	.word	0x0800b861
 800bf48:	2000aaf4 	.word	0x2000aaf4

0800bf4c <_nx_tcp_deferred_cleanup_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_deferred_cleanup_check(NX_IP *ip_ptr)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
NX_TCP_SOCKET *socket_ptr;
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800bf5a:	60fb      	str	r3, [r7, #12]
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800bf62:	617b      	str	r3, [r7, #20]

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 800bf64:	e07a      	b.n	800c05c <_nx_tcp_deferred_cleanup_check+0x110>
    {

        /* Check the socket for deferred bind cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bf6c:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d015      	beq.n	800bfa0 <_nx_tcp_deferred_cleanup_check+0x54>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bf7a:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf80:	4a3c      	ldr	r2, [pc, #240]	; (800c074 <_nx_tcp_deferred_cleanup_check+0x128>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d103      	bne.n	800bf8e <_nx_tcp_deferred_cleanup_check+0x42>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800bf86:	2100      	movs	r1, #0
 800bf88:	68b8      	ldr	r0, [r7, #8]
 800bf8a:	f7ff fc75 	bl	800b878 <_nx_tcp_client_bind_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf92:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	613b      	str	r3, [r7, #16]
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1ed      	bne.n	800bf7c <_nx_tcp_deferred_cleanup_check+0x30>
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800bfa6:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d008      	beq.n	800bfc0 <_nx_tcp_deferred_cleanup_check+0x74>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfb2:	4a30      	ldr	r2, [pc, #192]	; (800c074 <_nx_tcp_deferred_cleanup_check+0x128>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d103      	bne.n	800bfc0 <_nx_tcp_deferred_cleanup_check+0x74>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800bfb8:	2100      	movs	r1, #0
 800bfba:	68b8      	ldr	r0, [r7, #8]
 800bfbc:	f7ff ff30 	bl	800be20 <_nx_tcp_connect_cleanup>
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800bfc6:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d008      	beq.n	800bfe0 <_nx_tcp_deferred_cleanup_check+0x94>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfd2:	4a28      	ldr	r2, [pc, #160]	; (800c074 <_nx_tcp_deferred_cleanup_check+0x128>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d103      	bne.n	800bfe0 <_nx_tcp_deferred_cleanup_check+0x94>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800bfd8:	2100      	movs	r1, #0
 800bfda:	68b8      	ldr	r0, [r7, #8]
 800bfdc:	f000 f84c 	bl	800c078 <_nx_tcp_disconnect_cleanup>
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfe6:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d015      	beq.n	800c01a <_nx_tcp_deferred_cleanup_check+0xce>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800bff4:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bffa:	4a1e      	ldr	r2, [pc, #120]	; (800c074 <_nx_tcp_deferred_cleanup_check+0x128>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d103      	bne.n	800c008 <_nx_tcp_deferred_cleanup_check+0xbc>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c000:	2100      	movs	r1, #0
 800c002:	68b8      	ldr	r0, [r7, #8]
 800c004:	f001 f984 	bl	800d310 <_nx_tcp_receive_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00c:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	3b01      	subs	r3, #1
 800c012:	613b      	str	r3, [r7, #16]
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1ed      	bne.n	800bff6 <_nx_tcp_deferred_cleanup_check+0xaa>
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c020:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d015      	beq.n	800c054 <_nx_tcp_deferred_cleanup_check+0x108>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c02e:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c034:	4a0f      	ldr	r2, [pc, #60]	; (800c074 <_nx_tcp_deferred_cleanup_check+0x128>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d103      	bne.n	800c042 <_nx_tcp_deferred_cleanup_check+0xf6>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 800c03a:	2100      	movs	r1, #0
 800c03c:	68b8      	ldr	r0, [r7, #8]
 800c03e:	f004 f923 	bl	8010288 <_nx_tcp_transmit_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c046:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1ed      	bne.n	800c030 <_nx_tcp_deferred_cleanup_check+0xe4>
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c05a:	60fb      	str	r3, [r7, #12]
    while (created_sockets--)
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	1e5a      	subs	r2, r3, #1
 800c060:	617a      	str	r2, [r7, #20]
 800c062:	2b00      	cmp	r3, #0
 800c064:	f47f af7f 	bne.w	800bf66 <_nx_tcp_deferred_cleanup_check+0x1a>
    }
}
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	0800b861 	.word	0x0800b861

0800c078 <_nx_tcp_disconnect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_disconnect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08e      	sub	sp, #56	; 0x38
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c082:	f3ef 8310 	mrs	r3, PRIMASK
 800c086:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c08a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c08c:	b672      	cpsid	i
    return(int_posture);
 800c08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800c090:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c096:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d004      	beq.n	800c0a8 <_nx_tcp_disconnect_cleanup+0x30>
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a30      	ldr	r2, [pc, #192]	; (800c164 <_nx_tcp_disconnect_cleanup+0xec>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d006      	beq.n	800c0b6 <_nx_tcp_disconnect_cleanup+0x3e>
 800c0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0aa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	f383 8810 	msr	PRIMASK, r3
}
 800c0b2:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c0b4:	e053      	b.n	800c15e <_nx_tcp_disconnect_cleanup+0xe6>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <_nx_tcp_disconnect_cleanup+0x54>
 800c0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	f383 8810 	msr	PRIMASK, r3
}
 800c0c8:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800c0ca:	e048      	b.n	800c15e <_nx_tcp_disconnect_cleanup+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0cc:	f3ef 8305 	mrs	r3, IPSR
 800c0d0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c0d2:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800c0d4:	4b24      	ldr	r3, [pc, #144]	; (800c168 <_nx_tcp_disconnect_cleanup+0xf0>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d104      	bne.n	800c0e8 <_nx_tcp_disconnect_cleanup+0x70>
 800c0de:	4b23      	ldr	r3, [pc, #140]	; (800c16c <_nx_tcp_disconnect_cleanup+0xf4>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a23      	ldr	r2, [pc, #140]	; (800c170 <_nx_tcp_disconnect_cleanup+0xf8>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d116      	bne.n	800c116 <_nx_tcp_disconnect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a22      	ldr	r2, [pc, #136]	; (800c174 <_nx_tcp_disconnect_cleanup+0xfc>)
 800c0ec:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f383 8810 	msr	PRIMASK, r3
}
 800c100:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800c108:	2200      	movs	r2, #0
 800c10a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c10e:	4618      	mov	r0, r3
 800c110:	f007 f8be 	bl	8013290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800c114:	e023      	b.n	800c15e <_nx_tcp_disconnect_cleanup+0xe6>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	2200      	movs	r2, #0
 800c120:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	2b0c      	cmp	r3, #12
 800c12a:	d112      	bne.n	800c152 <_nx_tcp_disconnect_cleanup+0xda>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2241      	movs	r2, #65	; 0x41
 800c130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c134:	4b10      	ldr	r3, [pc, #64]	; (800c178 <_nx_tcp_disconnect_cleanup+0x100>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3301      	adds	r3, #1
 800c13a:	4a0f      	ldr	r2, [pc, #60]	; (800c178 <_nx_tcp_disconnect_cleanup+0x100>)
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c140:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f383 8810 	msr	PRIMASK, r3
}
 800c148:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f008 ffd4 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c150:	e005      	b.n	800c15e <_nx_tcp_disconnect_cleanup+0xe6>
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f383 8810 	msr	PRIMASK, r3
}
 800c15c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c15e:	3738      	adds	r7, #56	; 0x38
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	54435020 	.word	0x54435020
 800c168:	20000094 	.word	0x20000094
 800c16c:	2000aaf8 	.word	0x2000aaf8
 800c170:	2000ab98 	.word	0x2000ab98
 800c174:	0800b861 	.word	0x0800b861
 800c178:	2000aaf4 	.word	0x2000aaf4

0800c17c <_nx_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);
    /* Place all server listen request structures on the available list.   */

    /* Setup a pointer to the first listen.  */
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800c18a:	60bb      	str	r3, [r7, #8]

    /* Setup the available listen requests head pointer.  */
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c

    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e00d      	b.n	800c1b6 <_nx_tcp_enable+0x3a>
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	61da      	str	r2, [r3, #28]

        /* Determine if we need to move to the next listen request.  */
        if (i < (NX_MAX_LISTEN_REQUESTS - 1))
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b08      	cmp	r3, #8
 800c1a8:	d802      	bhi.n	800c1b0 <_nx_tcp_enable+0x34>
        {
            listen_ptr++;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	3324      	adds	r3, #36	; 0x24
 800c1ae:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b09      	cmp	r3, #9
 800c1ba:	d9ee      	bls.n	800c19a <_nx_tcp_enable+0x1e>
        }
    }

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	61da      	str	r2, [r3, #28]

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a13      	ldr	r2, [pc, #76]	; (800c214 <_nx_tcp_enable+0x98>)
 800c1c6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a12      	ldr	r2, [pc, #72]	; (800c218 <_nx_tcp_enable+0x9c>)
 800c1ce:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a11      	ldr	r2, [pc, #68]	; (800c21c <_nx_tcp_enable+0xa0>)
 800c1d6:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a10      	ldr	r2, [pc, #64]	; (800c220 <_nx_tcp_enable+0xa4>)
 800c1de:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 800c1e2:	4b10      	ldr	r3, [pc, #64]	; (800c224 <_nx_tcp_enable+0xa8>)
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	601a      	str	r2, [r3, #0]
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 800c1e8:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <_nx_tcp_enable+0xac>)
 800c1ea:	2214      	movs	r2, #20
 800c1ec:	601a      	str	r2, [r3, #0]

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <_nx_tcp_enable+0xb0>)
 800c1f0:	2264      	movs	r2, #100	; 0x64
 800c1f2:	601a      	str	r2, [r3, #0]

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 800c1f4:	4b0e      	ldr	r3, [pc, #56]	; (800c230 <_nx_tcp_enable+0xb4>)
 800c1f6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800c1fa:	601a      	str	r2, [r3, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7fd f96b 	bl	80094d8 <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a0b      	ldr	r2, [pc, #44]	; (800c234 <_nx_tcp_enable+0xb8>)
 800c206:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	0800d2a1 	.word	0x0800d2a1
 800c218:	0800d28d 	.word	0x0800d28d
 800c21c:	0800c239 	.word	0x0800c239
 800c220:	0800bf4d 	.word	0x0800bf4d
 800c224:	2000aa18 	.word	0x2000aa18
 800c228:	2000aa24 	.word	0x2000aa24
 800c22c:	2000aa1c 	.word	0x2000aa1c
 800c230:	2000aa20 	.word	0x2000aa20
 800c234:	0800cd89 	.word	0x0800cd89

0800c238 <_nx_tcp_fast_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_fast_periodic_processing(NX_IP *ip_ptr)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 800c240:	4b73      	ldr	r3, [pc, #460]	; (800c410 <_nx_tcp_fast_periodic_processing+0x1d8>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	60fb      	str	r3, [r7, #12]

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800c24c:	613b      	str	r3, [r7, #16]

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800c254:	617b      	str	r3, [r7, #20]

    /* Loop through the created sockets.  */
    while (sockets--)
 800c256:	e0cf      	b.n	800c3f8 <_nx_tcp_fast_periodic_processing+0x1c0>
    {

        /* Determine if the socket is in an established or disconnect state and has delayed sending an ACK
           from a previous receive packet event.  */
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d91d      	bls.n	800c29c <_nx_tcp_fast_periodic_processing+0x64>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 800c268:	429a      	cmp	r2, r3
 800c26a:	d105      	bne.n	800c278 <_nx_tcp_fast_periodic_processing+0x40>
             (socket_ptr -> nx_tcp_socket_rx_window_last_sent < socket_ptr -> nx_tcp_socket_rx_window_current)))
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 800c274:	429a      	cmp	r2, r3
 800c276:	d211      	bcs.n	800c29c <_nx_tcp_fast_periodic_processing+0x64>
        {

            /* Determine if the ACK has expired.  */
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d306      	bcc.n	800c290 <_nx_tcp_fast_periodic_processing+0x58>
            {

                /* Send the delayed ACK, which also resets the ACK timeout.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c286:	4619      	mov	r1, r3
 800c288:	6978      	ldr	r0, [r7, #20]
 800c28a:	f000 fdeb 	bl	800ce64 <_nx_tcp_packet_send_ack>
 800c28e:	e005      	b.n	800c29c <_nx_tcp_fast_periodic_processing+0x64>
            }
            else
            {

                /* No, it hasn't expired yet.  Just decrement it for now.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	649a      	str	r2, [r3, #72]	; 0x48
            }
        }

        /* Determine if a timeout is active.  */
        if (socket_ptr -> nx_tcp_socket_timeout)
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 80a4 	beq.w	800c3f0 <_nx_tcp_fast_periodic_processing+0x1b8>
        {

            /* Yes, a timeout is active.  Determine if it has expired.  */
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d208      	bcs.n	800c2c6 <_nx_tcp_fast_periodic_processing+0x8e>
            {

                /* No, it hasn't expired yet.  Just decrement the timeout value.  */
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	1ad2      	subs	r2, r2, r3
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800c2c4:	e094      	b.n	800c3f0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d304      	bcc.n	800c2e0 <_nx_tcp_fast_periodic_processing+0xa8>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00c      	beq.n	800c2fa <_nx_tcp_fast_periodic_processing+0xc2>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d308      	bcc.n	800c302 <_nx_tcp_fast_periodic_processing+0xca>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE))
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d103      	bne.n	800c302 <_nx_tcp_fast_periodic_processing+0xca>
            {

                /* Number of retries has been exceeded.  */

                /* Close the socket via a connection reset.  */
                _nx_tcp_socket_connection_reset(socket_ptr);
 800c2fa:	6978      	ldr	r0, [r7, #20]
 800c2fc:	f001 f8dd 	bl	800d4ba <_nx_tcp_socket_connection_reset>
 800c300:	e076      	b.n	800c3f0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* YUXIN MODIFIED HERE */
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	2b03      	cmp	r3, #3
 800c308:	d003      	beq.n	800c312 <_nx_tcp_fast_periodic_processing+0xda>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d11d      	bne.n	800c34e <_nx_tcp_fast_periodic_processing+0x116>
            {

                /* Yes, the timeout on the SYN message has expired.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c318:	1c5a      	adds	r2, r3, #1
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c32c:	6979      	ldr	r1, [r7, #20]
 800c32e:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800c332:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c336:	409a      	lsls	r2, r3
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send the initial SYN message again.  Adjust the sequence number before and
                   after to ensure the same sequence as the initial SYN.  */
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	3b01      	subs	r3, #1
 800c344:	4619      	mov	r1, r3
 800c346:	6978      	ldr	r0, [r7, #20]
 800c348:	f000 ff30 	bl	800d1ac <_nx_tcp_packet_send_syn>
 800c34c:	e050      	b.n	800c3f0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* Has the TCP timeout for transmit packet or probing zero window expired?  */
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c354:	2b00      	cmp	r3, #0
 800c356:	d107      	bne.n	800c368 <_nx_tcp_fast_periodic_processing+0x130>
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d116      	bne.n	800c38e <_nx_tcp_fast_periodic_processing+0x156>
                      (socket_ptr -> nx_tcp_socket_state <= NX_TCP_CLOSE_WAIT)))
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 800c364:	2b06      	cmp	r3, #6
 800c366:	d812      	bhi.n	800c38e <_nx_tcp_fast_periodic_processing+0x156>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36c:	1e5a      	subs	r2, r3, #1
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	661a      	str	r2, [r3, #96]	; 0x60

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 800c372:	2200      	movs	r2, #0
 800c374:	6979      	ldr	r1, [r7, #20]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f001 fe4e 	bl	800e018 <_nx_tcp_socket_retransmit>

                /* Exit fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	659a      	str	r2, [r3, #88]	; 0x58
 800c38c:	e030      	b.n	800c3f0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	2b07      	cmp	r3, #7
 800c394:	d007      	beq.n	800c3a6 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800c39a:	2b09      	cmp	r3, #9
 800c39c:	d003      	beq.n	800c3a6 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800c3a2:	2b0b      	cmp	r3, #11
 800c3a4:	d11d      	bne.n	800c3e2 <_nx_tcp_fast_periodic_processing+0x1aa>

                /* We have a timeout condition on sending the FIN... so it needs to be
                   retried.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3ac:	1c5a      	adds	r2, r3, #1
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3c0:	6979      	ldr	r1, [r7, #20]
 800c3c2:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800c3c6:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800c3ca:	409a      	lsls	r2, r3
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send another FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	4619      	mov	r1, r3
 800c3da:	6978      	ldr	r0, [r7, #20]
 800c3dc:	f000 fe7b 	bl	800d0d6 <_nx_tcp_packet_send_fin>
 800c3e0:	e006      	b.n	800c3f0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	2b0a      	cmp	r3, #10
 800c3e8:	d102      	bne.n	800c3f0 <_nx_tcp_fast_periodic_processing+0x1b8>
            {

                /* Clean the transmission control block.  */
                _nx_tcp_socket_block_cleanup(socket_ptr);
 800c3ea:	6978      	ldr	r0, [r7, #20]
 800c3ec:	f001 f838 	bl	800d460 <_nx_tcp_socket_block_cleanup>
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c3f6:	617b      	str	r3, [r7, #20]
    while (sockets--)
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	1e5a      	subs	r2, r3, #1
 800c3fc:	613a      	str	r2, [r7, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f47f af2a 	bne.w	800c258 <_nx_tcp_fast_periodic_processing+0x20>
    }
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	2000aa18 	.word	0x2000aa18

0800c414 <_nx_tcp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b08a      	sub	sp, #40	; 0x28
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_TCP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	61fb      	str	r3, [r7, #28]
    /* Loop through the TCP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the TCP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	0a1a      	lsrs	r2, r3, #8
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4413      	add	r3, r2
 800c42c:	f003 031f 	and.w	r3, r3, #31
 800c430:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c438:	f04f 31ff 	mov.w	r1, #4294967295
 800c43c:	4618      	mov	r0, r3
 800c43e:	f007 fb89 	bl	8013b54 <_tx_mutex_get>

        /* Pickup the head of the TCP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	69ba      	ldr	r2, [r7, #24]
 800c446:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800c44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44e:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 800c450:	2300      	movs	r3, #0
 800c452:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d011      	beq.n	800c47e <_nx_tcp_free_port_find+0x6a>
        {

            /* Walk through the circular list of TCP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_tcp_socket_port == port)
 800c45e:	6a3b      	ldr	r3, [r7, #32]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	429a      	cmp	r2, r3
 800c466:	d102      	bne.n	800c46e <_nx_tcp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 800c468:	2301      	movs	r3, #1
 800c46a:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 800c46c:	e007      	b.n	800c47e <_nx_tcp_free_port_find+0x6a>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_tcp_socket_bound_next;
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c474:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 800c476:	6a3a      	ldr	r2, [r7, #32]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d1ef      	bne.n	800c45e <_nx_tcp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c484:	4618      	mov	r0, r3
 800c486:	f007 fddd 	bl	8014044 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d104      	bne.n	800c49a <_nx_tcp_free_port_find+0x86>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_TCP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 800c496:	2300      	movs	r3, #0
 800c498:	e00e      	b.n	800c4b8 <_nx_tcp_free_port_find+0xa4>
        }

        /* Move to the next port.  */
        port++;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	3301      	adds	r3, #1
 800c49e:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4a6:	d302      	bcc.n	800c4ae <_nx_tcp_free_port_find+0x9a>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800c4a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c4ac:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800c4ae:	69fa      	ldr	r2, [r7, #28]
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d1b6      	bne.n	800c424 <_nx_tcp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 800c4b6:	2345      	movs	r3, #69	; 0x45
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3728      	adds	r7, #40	; 0x28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <_nx_tcp_mss_option_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_mss_option_get(UCHAR *option_ptr, ULONG option_area_size, ULONG *mss)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	601a      	str	r2, [r3, #0]

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 800c4d2:	e043      	b.n	800c55c <_nx_tcp_mss_option_get+0x9c>
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d11a      	bne.n	800c512 <_nx_tcp_mss_option_get+0x52>
        {

            /* Yes, we found it!  */

            /* Move the pointer forward by one.  */
            option_ptr++;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	60fb      	str	r3, [r7, #12]

            /* Check the option length, if option length is not equal to 4, return NX_FALSE.  */
            if (*option_ptr++ != 4)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	60fa      	str	r2, [r7, #12]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b04      	cmp	r3, #4
 800c4ec:	d001      	beq.n	800c4f2 <_nx_tcp_mss_option_get+0x32>
            {
                return(NX_FALSE);
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	e03a      	b.n	800c568 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Build the mss size.  */
            *mss = (ULONG)*option_ptr++;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	1c5a      	adds	r2, r3, #1
 800c4f6:	60fa      	str	r2, [r7, #12]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	601a      	str	r2, [r3, #0]

            /* Get the LSB of the MSS.  */
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	7812      	ldrb	r2, [r2, #0]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	601a      	str	r2, [r3, #0]

            /* Finished, get out of the loop!  */
            break;
 800c510:	e029      	b.n	800c566 <_nx_tcp_mss_option_get+0xa6>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d024      	beq.n	800c564 <_nx_tcp_mss_option_get+0xa4>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	1c5a      	adds	r2, r3, #1
 800c51e:	60fa      	str	r2, [r7, #12]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d103      	bne.n	800c52e <_nx_tcp_mss_option_get+0x6e>
        {

            /* One character option!  */
            option_area_size--;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	3b01      	subs	r3, #1
 800c52a:	60bb      	str	r3, [r7, #8]
 800c52c:	e016      	b.n	800c55c <_nx_tcp_mss_option_get+0x9c>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	617b      	str	r3, [r7, #20]

            /* Return when option length is invalid. */
            if (option_length == 0)
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <_nx_tcp_mss_option_get+0x7e>
            {
                return(NX_FALSE);
 800c53a:	2300      	movs	r3, #0
 800c53c:	e014      	b.n	800c568 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	3b01      	subs	r3, #1
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d901      	bls.n	800c554 <_nx_tcp_mss_option_get+0x94>
            {
                return(NX_FALSE);
 800c550:	2300      	movs	r3, #0
 800c552:	e009      	b.n	800c568 <_nx_tcp_mss_option_get+0xa8>
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	60bb      	str	r3, [r7, #8]
    while (option_area_size >= 4)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d8b8      	bhi.n	800c4d4 <_nx_tcp_mss_option_get+0x14>
 800c562:	e000      	b.n	800c566 <_nx_tcp_mss_option_get+0xa6>
            break;
 800c564:	bf00      	nop
            }
        }
    }

    /* Return.  */
    return(NX_TRUE);
 800c566:	2301      	movs	r3, #1
}
 800c568:	4618      	mov	r0, r3
 800c56a:	371c      	adds	r7, #28
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <_nx_tcp_no_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800c574:	b590      	push	{r4, r7, lr}
 800c576:	b0d3      	sub	sp, #332	; 0x14c
 800c578:	af00      	add	r7, sp, #0
 800c57a:	f107 030c 	add.w	r3, r7, #12
 800c57e:	6018      	str	r0, [r3, #0]
 800c580:	f107 0308 	add.w	r3, r7, #8
 800c584:	6019      	str	r1, [r3, #0]
 800c586:	1d3b      	adds	r3, r7, #4
 800c588:	601a      	str	r2, [r3, #0]
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 800c58a:	f107 0314 	add.w	r3, r7, #20
 800c58e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c592:	2100      	movs	r1, #0
 800c594:	4618      	mov	r0, r3
 800c596:	f00a faa5 	bl	8016ae4 <memset>

    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 800c59a:	f107 0314 	add.w	r3, r7, #20
 800c59e:	f107 020c 	add.w	r2, r7, #12
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800c5a8:	f107 0308 	add.w	r3, r7, #8
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5b2:	2b04      	cmp	r3, #4
 800c5b4:	d12b      	bne.n	800c60e <_nx_tcp_no_connection_reset+0x9a>
    {
    NX_IPV4_HEADER *ip_header_ptr;

        /* Set the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800c5b6:	f107 0308 	add.w	r3, r7, #8
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5be:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        /* Set the connection ip.  */
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V4;
 800c5c2:	f107 0314 	add.w	r3, r7, #20
 800c5c6:	2204      	movs	r2, #4
 800c5c8:	615a      	str	r2, [r3, #20]
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 800c5ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c5ce:	68da      	ldr	r2, [r3, #12]
 800c5d0:	f107 0314 	add.w	r3, r7, #20
 800c5d4:	619a      	str	r2, [r3, #24]

        /* Assume the interface that receives the incoming packet is the best interface
           for sending responses. */
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800c5d6:	f107 0308 	add.w	r3, r7, #8
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5de:	f107 0314 	add.w	r3, r7, #20
 800c5e2:	629a      	str	r2, [r3, #40]	; 0x28
        fake_socket.nx_tcp_socket_next_hop_address = NX_NULL;
 800c5e4:	f107 0314 	add.w	r3, r7, #20
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Find the next hop info. */
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800c5ec:	f107 0314 	add.w	r3, r7, #20
 800c5f0:	6999      	ldr	r1, [r3, #24]
 800c5f2:	f107 0314 	add.w	r3, r7, #20
 800c5f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c5fa:	f107 0314 	add.w	r3, r7, #20
 800c5fe:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c602:	f107 000c 	add.w	r0, r7, #12
 800c606:	4623      	mov	r3, r4
 800c608:	6800      	ldr	r0, [r0, #0]
 800c60a:	f7fd fc79 	bl	8009f00 <_nx_ip_route_find>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800c60e:	1d3b      	adds	r3, r7, #4
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	b29a      	uxth	r2, r3
 800c616:	f107 0314 	add.w	r3, r7, #20
 800c61a:	60da      	str	r2, [r3, #12]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800c61c:	1d3b      	adds	r3, r7, #4
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	0c1a      	lsrs	r2, r3, #16
 800c624:	f107 0314 	add.w	r3, r7, #20
 800c628:	61da      	str	r2, [r3, #28]

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800c62a:	1d3b      	adds	r3, r7, #4
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c634:	2b00      	cmp	r3, #0
 800c636:	d122      	bne.n	800c67e <_nx_tcp_no_connection_reset+0x10a>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800c638:	1d3b      	adds	r3, r7, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	0f1b      	lsrs	r3, r3, #28
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800c646:	1d3b      	adds	r3, r7, #4
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	f107 0308 	add.w	r3, r7, #8
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c654:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c658:	1acb      	subs	r3, r1, r3
 800c65a:	441a      	add	r2, r3
 800c65c:	1d3b      	adds	r3, r7, #4
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	605a      	str	r2, [r3, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 800c662:	1d3b      	adds	r3, r7, #4
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d006      	beq.n	800c67e <_nx_tcp_no_connection_reset+0x10a>
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 800c670:	1d3b      	adds	r3, r7, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	1d3b      	adds	r3, r7, #4
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	605a      	str	r2, [r3, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 800c67e:	f107 0314 	add.w	r3, r7, #20
 800c682:	2280      	movs	r2, #128	; 0x80
 800c684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 800c688:	1d3b      	adds	r3, r7, #4
 800c68a:	f107 0214 	add.w	r2, r7, #20
 800c68e:	6819      	ldr	r1, [r3, #0]
 800c690:	4610      	mov	r0, r2
 800c692:	f000 fd57 	bl	800d144 <_nx_tcp_packet_send_rst>
}
 800c696:	bf00      	nop
 800c698:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd90      	pop	{r4, r7, pc}

0800c6a0 <_nx_tcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b09c      	sub	sp, #112	; 0x70
 800c6a4:	af02      	add	r7, sp, #8
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]

UINT                         index;
UINT                         port;
ULONG                       *source_ip = NX_NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	667b      	str	r3, [r7, #100]	; 0x64
ULONG                       *dest_ip = NX_NULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	663b      	str	r3, [r7, #96]	; 0x60
NX_TCP_SOCKET               *socket_ptr;
NX_TCP_HEADER               *tcp_header_ptr;
struct NX_TCP_LISTEN_STRUCT *listen_ptr;
VOID                         (*listen_callback)(NX_TCP_SOCKET *socket_ptr, UINT port);
ULONG                        option_words;
ULONG                        mss = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60bb      	str	r3, [r7, #8]
ULONG                        checksum;
NX_INTERFACE                *interface_ptr = NX_NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                         compute_checksum = 1;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	653b      	str	r3, [r7, #80]	; 0x50
NX_PACKET                   *queued_ptr;
NX_PACKET                   *queued_prev_ptr;
ULONG                       *queued_source_ip;
UINT                         queued_source_port;
UINT                         is_a_RST_request;
UINT                         is_valid_option_flag = NX_TRUE;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6c8:	2b04      	cmp	r3, #4
 800c6ca:	d10e      	bne.n	800c6ea <_nx_tcp_packet_process+0x4a>
    {

    NX_IPV4_HEADER *ip_header_ptr;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34

        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d4:	330c      	adds	r3, #12
 800c6d6:	667b      	str	r3, [r7, #100]	; 0x64

        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 800c6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6da:	3310      	adds	r3, #16
 800c6dc:	663b      	str	r3, [r7, #96]	; 0x60

        mss = 536;
 800c6de:	f44f 7306 	mov.w	r3, #536	; 0x218
 800c6e2:	60bb      	str	r3, [r7, #8]

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e8:	657b      	str	r3, [r7, #84]	; 0x54
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
    }
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 800c6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ee:	f003 0308 	and.w	r3, r3, #8
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <_nx_tcp_packet_process+0x5a>
    {
        compute_checksum = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	653b      	str	r3, [r7, #80]	; 0x50
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800c6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d023      	beq.n	800c748 <_nx_tcp_packet_process+0xa8>
#endif /* defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                           (UINT)packet_ptr -> nx_packet_length,
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800c704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c70a:	2106      	movs	r1, #6
 800c70c:	6838      	ldr	r0, [r7, #0]
 800c70e:	f7fc f95f 	bl	80089d0 <_nx_ip_checksum_compute>
 800c712:	4603      	mov	r3, r0
 800c714:	633b      	str	r3, [r7, #48]	; 0x30
                                           source_ip, dest_ip);

        checksum = NX_LOWER_16_MASK & ~checksum;
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	43db      	mvns	r3, r3
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the checksum.  */
        if (checksum != 0)
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	2b00      	cmp	r3, #0
 800c722:	d011      	beq.n	800c748 <_nx_tcp_packet_process+0xa8>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP invalid packet error count.  */
            ip_ptr -> nx_ip_tcp_invalid_packets++;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increment the TCP packet checksum error count.  */
            ip_ptr -> nx_ip_tcp_checksum_errors++;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c738:	1c5a      	adds	r2, r3, #1
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
#endif

            /* Checksum error, just release the packet.  */
            _nx_packet_release(packet_ptr);
 800c740:	6838      	ldr	r0, [r7, #0]
 800c742:	f7fe ff39 	bl	800b5b8 <_nx_packet_release>
            return;
 800c746:	e31c      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	ba1a      	rev	r2, r3
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800c758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	ba1a      	rev	r2, r3
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	ba1a      	rev	r2, r3
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	ba1a      	rev	r2, r3
 800c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c774:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800c776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	ba1a      	rev	r2, r3
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	611a      	str	r2, [r3, #16]

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	0f1b      	lsrs	r3, r3, #28
 800c786:	3b05      	subs	r3, #5
 800c788:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check for valid packet length.  */
    if (((INT)option_words < 0) || (packet_ptr -> nx_packet_length < (sizeof(NX_TCP_HEADER) + (option_words << 2))))
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	db06      	blt.n	800c79e <_nx_tcp_packet_process+0xfe>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	3314      	adds	r3, #20
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d20a      	bcs.n	800c7b4 <_nx_tcp_packet_process+0x114>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800c7ac:	6838      	ldr	r0, [r7, #0]
 800c7ae:	f7fe ff03 	bl	800b5b8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800c7b2:	e2e6      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
    }
#endif

    if (option_words)
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d01c      	beq.n	800c7f4 <_nx_tcp_packet_process+0x154>
    {

        /* Yes, there are one or more option words.  */

        /* Derive the Maximum Segment Size (MSS) in the option words.  */
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f103 0014 	add.w	r0, r3, #20
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	f107 0208 	add.w	r2, r7, #8
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f7ff fe78 	bl	800c4c0 <_nx_tcp_mss_option_get>
 800c7d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Check the status. if status is NX_FALSE, means Option Length is invalid.  */
        if (status == NX_FALSE)
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <_nx_tcp_packet_process+0x13e>
        {

            /* The option is invalid.  */
            is_valid_option_flag = NX_FALSE;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7dc:	e00a      	b.n	800c7f4 <_nx_tcp_packet_process+0x154>
        else
        {

            /* Set the default MSS if the MSS value was not found.  */
            /*lint -e{644} suppress variable might not be initialized, since "mss" was initialized in _nx_tcp_mss_option_get. */
            if (mss == 0)
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d107      	bne.n	800c7f4 <_nx_tcp_packet_process+0x154>
            {
#ifndef NX_DISABLE_IPV4
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d102      	bne.n	800c7f4 <_nx_tcp_packet_process+0x154>
                {
                    mss = 536;
 800c7ee:	f44f 7306 	mov.w	r3, #536	; 0x218
 800c7f2:	60bb      	str	r3, [r7, #8]
        }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
    }

    /* Pickup the destination TCP port.  */
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	623b      	str	r3, [r7, #32]

    /* Pickup the source TCP port.  */
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	0c1b      	lsrs	r3, r3, #16
 800c802:	61fb      	str	r3, [r7, #28]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	0a1a      	lsrs	r2, r3, #8
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	4413      	add	r3, r2
 800c80c:	f003 031f 	and.w	r3, r3, #31
 800c810:	61bb      	str	r3, [r7, #24]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800c81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81e:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 800c820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c822:	2b00      	cmp	r3, #0
 800c824:	d066      	beq.n	800c8f4 <_nx_tcp_packet_process+0x254>

        /*  Yes, loop to examine the list of bound ports on this index.  */
        do
        {

            find_a_match = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if the port has been found.  */
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800c82a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	6a3a      	ldr	r2, [r7, #32]
 800c830:	429a      	cmp	r2, r3
 800c832:	d152      	bne.n	800c8da <_nx_tcp_packet_process+0x23a>
                (socket_ptr -> nx_tcp_socket_connect_port == source_port))
 800c834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c836:	69db      	ldr	r3, [r3, #28]
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800c838:	69fa      	ldr	r2, [r7, #28]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d14d      	bne.n	800c8da <_nx_tcp_packet_process+0x23a>
            {

                /* Make sure they are the same IP protocol */
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 800c83e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c848:	4293      	cmp	r3, r2
 800c84a:	d10c      	bne.n	800c866 <_nx_tcp_packet_process+0x1c6>
                {

#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c852:	2b04      	cmp	r3, #4
 800c854:	d107      	bne.n	800c866 <_nx_tcp_packet_process+0x1c6>
                    {

                        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 == *source_ip)
 800c856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c858:	699a      	ldr	r2, [r3, #24]
 800c85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d101      	bne.n	800c866 <_nx_tcp_packet_process+0x1c6>
                        {
                            find_a_match = 1;
 800c862:	2301      	movs	r3, #1
 800c864:	63bb      	str	r3, [r7, #56]	; 0x38
                        }
                    }
#endif /* FEATURE_NX_IPV6 */
                }

                if (find_a_match)
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d036      	beq.n	800c8da <_nx_tcp_packet_process+0x23a>
                    /* Determine if we need to update the tcp port head pointer.  This should
                       only be done if the found socket pointer is not the head pointer and
                       the mutex for this IP instance is available.  */

                    /* Move the port head pointer to this socket.  */
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	69ba      	ldr	r2, [r7, #24]
 800c870:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800c874:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* If this packet contains SYN */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c882:	2b00      	cmp	r3, #0
 800c884:	d024      	beq.n	800c8d0 <_nx_tcp_packet_process+0x230>
                    {

                        /* Record the MSS value if it is present and the   Otherwise use 536, as
                           outlined in RFC 1122 section 4.2.2.6. */
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c88a:	625a      	str	r2, [r3, #36]	; 0x24

                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 800c88c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c88e:	691a      	ldr	r2, [r3, #16]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	429a      	cmp	r2, r3
 800c894:	d208      	bcs.n	800c8a8 <_nx_tcp_packet_process+0x208>
 800c896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d004      	beq.n	800c8a8 <_nx_tcp_packet_process+0x208>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 800c89e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8a0:	691a      	ldr	r2, [r3, #16]
 800c8a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8a4:	621a      	str	r2, [r3, #32]
 800c8a6:	e00b      	b.n	800c8c0 <_nx_tcp_packet_process+0x220>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800c8a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ac:	2b03      	cmp	r3, #3
 800c8ae:	d104      	bne.n	800c8ba <_nx_tcp_packet_process+0x21a>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 800c8b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8b2:	6a1a      	ldr	r2, [r3, #32]
 800c8b4:	68bb      	ldr	r3, [r7, #8]
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d902      	bls.n	800c8c0 <_nx_tcp_packet_process+0x220>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8be:	621a      	str	r2, [r3, #32]
                        }

                        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800c8c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8c6:	6a12      	ldr	r2, [r2, #32]
 800c8c8:	fb02 f203 	mul.w	r2, r2, r3
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800c8cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8ce:	631a      	str	r2, [r3, #48]	; 0x30
                        socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
                    }

                    /* Process the packet within an existing TCP connection.  */
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c8d4:	f001 f8e6 	bl	800daa4 <_nx_tcp_socket_packet_process>

                    /* Get out of the search loop and this function!  */
                    return;
 800c8d8:	e253      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 800c8da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8e0:	65fb      	str	r3, [r7, #92]	; 0x5c
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	69ba      	ldr	r2, [r7, #24]
 800c8e6:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800c8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d198      	bne.n	800c826 <_nx_tcp_packet_process+0x186>
    }

    /* At this point, we know there is not an existing TCP connection.  */

    /* If this packet contains the valid option.  */
    if (is_valid_option_flag == NX_FALSE)
 800c8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10f      	bne.n	800c91a <_nx_tcp_packet_process+0x27a>
    {

        /* Send RST message.
           TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
           a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800c8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fe38 	bl	800c574 <_nx_tcp_no_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error count.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

        /* Not a connection request, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800c912:	6838      	ldr	r0, [r7, #0]
 800c914:	f7fe fe50 	bl	800b5b8 <_nx_packet_release>

        return;
 800c918:	e233      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c922:	2b00      	cmp	r3, #0
 800c924:	f040 8209 	bne.w	800cd3a <_nx_tcp_packet_process+0x69a>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f000 8203 	beq.w	800cd3a <_nx_tcp_packet_process+0x69a>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d145      	bne.n	800c9ca <_nx_tcp_packet_process+0x32a>
        {

            /* Check for LAND attack packet. This is an incoming packet with matching
               Source and Destination IP address, and matching source and destination port. */
            if ((*source_ip == *dest_ip) && (source_port == port))
 800c93e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	429a      	cmp	r2, r3
 800c948:	d10e      	bne.n	800c968 <_nx_tcp_packet_process+0x2c8>
 800c94a:	69fa      	ldr	r2, [r7, #28]
 800c94c:	6a3b      	ldr	r3, [r7, #32]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d10a      	bne.n	800c968 <_nx_tcp_packet_process+0x2c8>

                /* Bogus packet. Drop it! */

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet we will not process any further.  */
                _nx_packet_release(packet_ptr);
 800c960:	6838      	ldr	r0, [r7, #0]
 800c962:	f7fe fe29 	bl	800b5b8 <_nx_packet_release>
                return;
 800c966:	e20c      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>

            /* It shall not make connections if the source IP address
               is broadcast or multicast.   */
            if (
                /* Check for Multicast address */
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800c968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
            if (
 800c970:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800c974:	d01e      	beq.n	800c9b4 <_nx_tcp_packet_process+0x314>
                /* Check for subnet-directed broadcast */
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800c976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	401a      	ands	r2, r3
 800c980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c982:	69db      	ldr	r3, [r3, #28]
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800c984:	429a      	cmp	r2, r3
 800c986:	d10a      	bne.n	800c99e <_nx_tcp_packet_process+0x2fe>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800c988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	43db      	mvns	r3, r3
 800c992:	401a      	ands	r2, r3
 800c994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	43db      	mvns	r3, r3
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d00a      	beq.n	800c9b4 <_nx_tcp_packet_process+0x314>
                /* Check for local subnet address */
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800c99e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9a4:	69db      	ldr	r3, [r3, #28]
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d004      	beq.n	800c9b4 <_nx_tcp_packet_process+0x314>
                /* Check for limited broadcast */
                (*source_ip == NX_IP_LIMITED_BROADCAST)
 800c9aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ac:	681b      	ldr	r3, [r3, #0]
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	d10a      	bne.n	800c9ca <_nx_tcp_packet_process+0x32a>
               )
            {

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800c9c2:	6838      	ldr	r0, [r7, #0]
 800c9c4:	f7fe fdf8 	bl	800b5b8 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800c9c8:	e1db      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800c9d0:	65bb      	str	r3, [r7, #88]	; 0x58
        do
        {

            /* Determine if this port is in a listen mode.  */
            if (listen_ptr -> nx_tcp_listen_port == port)
 800c9d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6a3a      	ldr	r2, [r7, #32]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	f040 81a4 	bne.w	800cd26 <_nx_tcp_packet_process+0x686>

                /* Determine if the packet is an initial connection request.
                   The incoming SYN packet is a connection request.
                   The incoming RST packet is related to a previous connection request.
                   Fourth other text or control. RFC793, Section3.9, Page66. */
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800c9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d110      	bne.n	800ca0c <_nx_tcp_packet_process+0x36c>
                    (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)))
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10a      	bne.n	800ca0c <_nx_tcp_packet_process+0x36c>
                {

#ifndef NX_DISABLE_TCP_INFO
                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO */

                    /* Release the packet.  */
                    _nx_packet_release(packet_ptr);
 800ca04:	6838      	ldr	r0, [r7, #0]
 800ca06:	f7fe fdd7 	bl	800b5b8 <_nx_packet_release>

                    return;
 800ca0a:	e1ba      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
                }

#ifndef NX_DISABLE_TCP_INFO

                /* Check for a SYN bit set.  */
                if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT))
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00d      	beq.n	800ca34 <_nx_tcp_packet_process+0x394>
                {

                    /* Increment the passive TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_passive_connections++;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ca1e:	1c5a      	adds	r2, r3, #1
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

                    /* Increment the TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_connections++;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ca2c:	1c5a      	adds	r2, r3, #1
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif

                /* Okay, this port is in a listen mode.  We now need to see if
                   there is an available socket for the new connection request
                   present.  */
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800ca34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 80b2 	beq.w	800cba2 <_nx_tcp_packet_process+0x502>
                    ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT) == NX_NULL))
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f040 80ab 	bne.w	800cba2 <_nx_tcp_packet_process+0x502>
                    /* Yes there is indeed a socket present.  We now need to
                       fill in the appropriate info and call the server callback
                       routine.  */

                    /* Allocate the supplied server socket.  */
                    socket_ptr = listen_ptr -> nx_tcp_listen_socket_ptr;
 800ca4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Clear the server socket pointer in the listen request.  If the
                       application wishes to honor more server connections on this port,
                       the application must call relisten with a new server socket
                       pointer.  */
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 800ca52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca54:	2200      	movs	r2, #0
 800ca56:	609a      	str	r2, [r3, #8]

                    /* Fill the socket in with the appropriate information.  */


#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	d116      	bne.n	800ca90 <_nx_tcp_packet_process+0x3f0>
                    {

                        /* Assume the interface that receives the incoming packet is the best interface
                           for sending responses. */
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 800ca62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca66:	629a      	str	r2, [r3, #40]	; 0x28
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 800ca68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Set the next hop address.  */
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 800ca6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca70:	6819      	ldr	r1, [r3, #0]
 800ca72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca74:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ca78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca7a:	332c      	adds	r3, #44	; 0x2c
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7fd fa3f 	bl	8009f00 <_nx_ip_route_find>
                                          &socket_ptr -> nx_tcp_socket_next_hop_address);

                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 800ca82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca84:	2204      	movs	r2, #4
 800ca86:	615a      	str	r2, [r3, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 800ca88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca8e:	619a      	str	r2, [r3, #24]
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
                    }
#endif /* FEATURE_NX_IPV6 */

                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 800ca90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca92:	69fa      	ldr	r2, [r7, #28]
 800ca94:	61da      	str	r2, [r3, #28]
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca9c:	641a      	str	r2, [r3, #64]	; 0x40


                    /* Yes, MSS was found, so store it!  */
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caa2:	625a      	str	r2, [r3, #36]	; 0x24
                     */
                    socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

                    /* Set the initial slow start threshold to be the advertised window size. */
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800caa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caaa:	635a      	str	r2, [r3, #52]	; 0x34

                    /* Slow start:  setup initial window (IW) to be MSS,  RFC 2581, 3.1 */
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab0:	659a      	str	r2, [r3, #88]	; 0x58

                    /* Initialize the transmit outstanding byte count to zero. */
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800cab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab4:	2200      	movs	r2, #0
 800cab6:	65da      	str	r2, [r3, #92]	; 0x5c

                    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
                    index = (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	0a1a      	lsrs	r2, r3, #8
 800cabc:	6a3b      	ldr	r3, [r7, #32]
 800cabe:	4413      	add	r3, r2
 800cac0:	f003 031f 	and.w	r3, r3, #31
 800cac4:	61bb      	str	r3, [r7, #24]

                    /* Determine if the list is NULL.  */
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800cace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d028      	beq.n	800cb28 <_nx_tcp_packet_process+0x488>
                    {

                        /* There are already sockets on this list... just add this one
                           to the end.  */
                        socket_ptr -> nx_tcp_socket_bound_next =
                            ip_ptr -> nx_ip_tcp_port_table[index];
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	69ba      	ldr	r2, [r7, #24]
 800cada:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800cade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                        socket_ptr -> nx_tcp_socket_bound_next =
 800cae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cae4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	69ba      	ldr	r2, [r7, #24]
 800caec:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800caf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
                        socket_ptr -> nx_tcp_socket_bound_previous =
 800caf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cafa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	69ba      	ldr	r2, [r7, #24]
 800cb02:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800cb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cb0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                            socket_ptr;
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	69ba      	ldr	r2, [r7, #24]
 800cb18:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800cb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb22:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800cb26:	e00e      	b.n	800cb46 <_nx_tcp_packet_process+0x4a6>
                    else
                    {

                        /* Nothing is on the TCP port list.  Add this TCP socket to an
                           empty list.  */
                        socket_ptr -> nx_tcp_socket_bound_next =      socket_ptr;
 800cb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 800cb30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb34:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	69ba      	ldr	r2, [r7, #24]
 800cb3c:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800cb40:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cb42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    }

                    /* Pickup the listen callback function.  */
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 800cb46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	617b      	str	r3, [r7, #20]

                    /* Release the incoming packet.  */
                    _nx_packet_release(packet_ptr);
 800cb4c:	6838      	ldr	r0, [r7, #0]
 800cb4e:	f7fe fd33 	bl	800b5b8 <_nx_packet_release>

                    /* Determine if an accept call with suspension has already been made
                       for this socket.  If so, the SYN message needs to be sent from
                       here.  */
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800cb52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	2b04      	cmp	r3, #4
 800cb58:	d11a      	bne.n	800cb90 <_nx_tcp_packet_process+0x4f0>
                        /* The application is suspended on an accept call for this socket.
                           Simply send the SYN now and keep the thread suspended until the
                           other side completes the connection.  */

                        /* Send the SYN message, but increment the ACK first.  */
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800cb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb62:	641a      	str	r2, [r3, #64]	; 0x40

                        /* Increment the sequence number for the SYN message.  */
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 800cb64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb6c:	63da      	str	r2, [r3, #60]	; 0x3c

                        /* Setup a timeout so the connection attempt can be sent again.  */
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800cb6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb70:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800cb74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb76:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800cb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                        /* Send the SYN+ACK message.  */
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800cb82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb86:	3b01      	subs	r3, #1
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cb8c:	f000 fb0e 	bl	800d1ac <_nx_tcp_packet_send_syn>
                    }

                    /* Determine if there is a listen callback function.  */
                    if (listen_callback)
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 80c6 	beq.w	800cd24 <_nx_tcp_packet_process+0x684>
                    {
                        /* Call the user's listen callback function.  */
                        (listen_callback)(socket_ptr, port);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	6a39      	ldr	r1, [r7, #32]
 800cb9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cb9e:	4798      	blx	r3
                    if (listen_callback)
 800cba0:	e0c0      	b.n	800cd24 <_nx_tcp_packet_process+0x684>
                        /* If trace is enabled, insert this event into the trace buffer.  */
                        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_SYN_RECEIVE, ip_ptr, NX_NULL, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
                    }

                    /* Check for the same connection request already in the queue.  */
                    queued_count = listen_ptr -> nx_tcp_listen_queue_current;
 800cba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	64fb      	str	r3, [r7, #76]	; 0x4c
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800cba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	64bb      	str	r3, [r7, #72]	; 0x48
                    queued_prev_ptr = queued_ptr;
 800cbae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbb0:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Initialize the check for queued request to false.*/
                    is_a_RST_request = NX_FALSE;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Loop through the queued list in order to search for duplicate request.  */
                    while (queued_count--)
 800cbb6:	e05c      	b.n	800cc72 <_nx_tcp_packet_process+0x5d2>
                    {

                        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 800cbb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	0c1b      	lsrs	r3, r3, #16
 800cbc0:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_IPV4
                        /* Pickup the queued source port and source IP address for comparison.  */
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800cbc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	d121      	bne.n	800cc10 <_nx_tcp_packet_process+0x570>
                        {

                            /*lint -e{929} -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                            queued_source_ip = (ULONG *)(((ULONG *)queued_ptr -> nx_packet_prepend_ptr) - 2);
 800cbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	3b08      	subs	r3, #8
 800cbd2:	60fb      	str	r3, [r7, #12]

                            /* Determine if this matches the current connection request.  */
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d117      	bne.n	800cc10 <_nx_tcp_packet_process+0x570>
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d113      	bne.n	800cc10 <_nx_tcp_packet_process+0x570>
                            {

                                /* Possible duplicate connection request to one that is already queued.  */

                                /* Check for a RST (reset) bit set.  */
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <_nx_tcp_packet_process+0x55a>
                                {

                                    /* RST packet matches a previously queued connection request. */
                                    is_a_RST_request = NX_TRUE;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbf8:	e00a      	b.n	800cc10 <_nx_tcp_packet_process+0x570>
                                }
                                else
                                {
#ifndef NX_DISABLE_TCP_INFO
                                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
                                    /* Simply release the packet and return.  */
                                    _nx_packet_release(packet_ptr);
 800cc08:	6838      	ldr	r0, [r7, #0]
 800cc0a:	f7fe fcd5 	bl	800b5b8 <_nx_packet_release>

                                    /* Return!  */
                                    return;
 800cc0e:	e0b8      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
                        }
#endif /* FEATURE_NX_IPV6  */

                        /* Handle the case of the RST packet which cancels a previously received
                           connection request. */
                        if (is_a_RST_request)
 800cc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d028      	beq.n	800cc68 <_nx_tcp_packet_process+0x5c8>
                        {

                            /* A previous connection request needs to be removed from the listen queue. */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 800cc16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc18:	695b      	ldr	r3, [r3, #20]
 800cc1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d104      	bne.n	800cc2a <_nx_tcp_packet_process+0x58a>
                            {

                                /* Reset the front (oldest) of the queue to the next request. */
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 800cc20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc22:	69da      	ldr	r2, [r3, #28]
 800cc24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc26:	615a      	str	r2, [r3, #20]
 800cc28:	e003      	b.n	800cc32 <_nx_tcp_packet_process+0x592>
                            else
                            {

                                /* Link around the request we are removing. */
                                /*lint -e{613} suppress possible use of null pointer, since 'queued_prev_ptr' must not be NULL.  */
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 800cc2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc2c:	69da      	ldr	r2, [r3, #28]
 800cc2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc30:	61da      	str	r2, [r3, #28]
                            }

                            /* Is the request being removed the tail (most recent connection?)   */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 800cc32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d102      	bne.n	800cc42 <_nx_tcp_packet_process+0x5a2>
                            {

                                /* Yes, set the previous connection request as the tail. */
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 800cc3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc40:	619a      	str	r2, [r3, #24]
                            }

                            /* Release the connection request packet.  */
                            _nx_packet_release(queued_ptr);
 800cc42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cc44:	f7fe fcb8 	bl	800b5b8 <_nx_packet_release>

                            /* Update the listen queue. */
                            listen_ptr -> nx_tcp_listen_queue_current--;
 800cc48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	1e5a      	subs	r2, r3, #1
 800cc4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc50:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_TCP_INFO
                            /* Increment the TCP dropped packet count.  */
                            ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                            /* Simply release the packet and return.  */
                            _nx_packet_release(packet_ptr);
 800cc60:	6838      	ldr	r0, [r7, #0]
 800cc62:	f7fe fca9 	bl	800b5b8 <_nx_packet_release>

                            /* Return!  */
                            return;
 800cc66:	e08c      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
                        }

                        /* Move to next item in the queue.  */
                        queued_prev_ptr = queued_ptr;
 800cc68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc6a:	647b      	str	r3, [r7, #68]	; 0x44
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 800cc6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc6e:	69db      	ldr	r3, [r3, #28]
 800cc70:	64bb      	str	r3, [r7, #72]	; 0x48
                    while (queued_count--)
 800cc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc74:	1e5a      	subs	r2, r3, #1
 800cc76:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d19d      	bne.n	800cbb8 <_nx_tcp_packet_process+0x518>
                    }

                    /* Not a duplicate connection request, place this request on the listen queue.  */

                    /* Is this a RST packet? */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00a      	beq.n	800cc9e <_nx_tcp_packet_process+0x5fe>
                    {

                        /* Yes, so not a connection request. Do not place on the listen queue. */
#ifndef NX_DISABLE_TCP_INFO
                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800cc96:	6838      	ldr	r0, [r7, #0]
 800cc98:	f7fe fc8e 	bl	800b5b8 <_nx_packet_release>

                        /* Return!  */
                        return;
 800cc9c:	e071      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
                    }

                    /* Set the next pointer of the packet to NULL.  */
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2200      	movs	r2, #0
 800cca2:	61da      	str	r2, [r3, #28]

                    /* Queue the new connection request.  */
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 800cca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d004      	beq.n	800ccb6 <_nx_tcp_packet_process+0x616>
                    {

                        /* There is a connection request already queued, just link packet to tail.  */
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 800ccac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccae:	699b      	ldr	r3, [r3, #24]
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	61da      	str	r2, [r3, #28]
 800ccb4:	e002      	b.n	800ccbc <_nx_tcp_packet_process+0x61c>
                    }
                    else
                    {

                        /* The queue is empty.  Setup head pointer to the new packet.  */
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 800ccb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	615a      	str	r2, [r3, #20]
                    }

                    /* Setup the tail pointer to the new packet and increment the queue count.  */
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 800ccbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	619a      	str	r2, [r3, #24]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 800ccc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	1c5a      	adds	r2, r3, #1
 800ccc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccca:	611a      	str	r2, [r3, #16]

                    /* Add debug information. */
                    NX_PACKET_DEBUG(NX_PACKET_TCP_LISTEN_QUEUE, __LINE__, packet_ptr);

                    /* Determine if the queue depth has been exceeded.  */
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 800cccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccce:	691a      	ldr	r2, [r3, #16]
 800ccd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d953      	bls.n	800cd80 <_nx_tcp_packet_process+0x6e0>
                    {

#ifndef NX_DISABLE_TCP_INFO

                        /* Increment the TCP connections dropped count.  */
                        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ccde:	1c5a      	adds	r2, r3, #1
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                        ip_ptr -> nx_ip_tcp_connections--;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ccec:	1e5a      	subs	r2, r3, #1
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Save the head packet pointer, since this will be released below.  */
                        packet_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800cd02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	603b      	str	r3, [r7, #0]

                        /* Remove the oldest packet from the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 800cd08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	69da      	ldr	r2, [r3, #28]
 800cd0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd10:	615a      	str	r2, [r3, #20]

                        /* Decrement the number of packets in the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_current--;
 800cd12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	1e5a      	subs	r2, r3, #1
 800cd18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd1a:	611a      	str	r2, [r3, #16]

                        /* We have exceeded the number of connections that can be
                           queued for this port.  */

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800cd1c:	6838      	ldr	r0, [r7, #0]
 800cd1e:	f7fe fc4b 	bl	800b5b8 <_nx_packet_release>
                    }
                }

                /* Finished processing, just return.  */
                return;
 800cd22:	e02d      	b.n	800cd80 <_nx_tcp_packet_process+0x6e0>
 800cd24:	e02c      	b.n	800cd80 <_nx_tcp_packet_process+0x6e0>
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 800cd26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	65bb      	str	r3, [r7, #88]	; 0x58
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800cd32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd34:	429a      	cmp	r2, r3
 800cd36:	f47f ae4c 	bne.w	800c9d2 <_nx_tcp_packet_process+0x332>
    }

#ifndef NX_DISABLE_TCP_INFO

    /* Determine if a connection request is present.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d006      	beq.n	800cd54 <_nx_tcp_packet_process+0x6b4>
    {

        /* Yes, increment the TCP connections dropped count.  */
        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the TCP dropped packet count.  */
    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO  */

    /* Determine if a RST is present. If so, don't send a RST in response.  */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d104      	bne.n	800cd78 <_nx_tcp_packet_process+0x6d8>
    {

        /* Non RST is present, send reset when no connection is present.  */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800cd6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7ff fbfe 	bl	800c574 <_nx_tcp_no_connection_reset>
    }

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);
 800cd78:	6838      	ldr	r0, [r7, #0]
 800cd7a:	f7fe fc1d 	bl	800b5b8 <_nx_packet_release>

    return;
 800cd7e:	e000      	b.n	800cd82 <_nx_tcp_packet_process+0x6e2>
                return;
 800cd80:	bf00      	nop
}
 800cd82:	3768      	adds	r7, #104	; 0x68
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <_nx_tcp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_TCP_HEADER))
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd96:	2b13      	cmp	r3, #19
 800cd98:	d80a      	bhi.n	800cdb0 <_nx_tcp_packet_receive+0x28>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800cda8:	6838      	ldr	r0, [r7, #0]
 800cdaa:	f7fe fc05 	bl	800b5b8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800cdae:	e052      	b.n	800ce56 <_nx_tcp_packet_receive+0xce>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cdb0:	f3ef 8305 	mrs	r3, IPSR
 800cdb4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cdb6:	69ba      	ldr	r2, [r7, #24]
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800cdb8:	4b28      	ldr	r3, [pc, #160]	; (800ce5c <_nx_tcp_packet_receive+0xd4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <_nx_tcp_packet_receive+0x48>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800cdc8:	4b25      	ldr	r3, [pc, #148]	; (800ce60 <_nx_tcp_packet_receive+0xd8>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d03e      	beq.n	800ce4e <_nx_tcp_packet_receive+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdd0:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd4:	617b      	str	r3, [r7, #20]
    return(posture);
 800cdd6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cdd8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdda:	b672      	cpsid	i
    return(int_posture);
 800cddc:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback.  Just place the message at the
           end of the TCP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800cdde:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d013      	beq.n	800ce12 <_nx_tcp_packet_receive+0x8a>
        {

            /* Link the current packet at the end of the queue.  */
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	61da      	str	r2, [r3, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	61da      	str	r2, [r3, #28]

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
 800ce10:	e00e      	b.n	800ce30 <_nx_tcp_packet_receive+0xa8>
        }
        else
        {

            /* Empty queue, add to the head of the TCP message queue.  */
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2200      	movs	r2, #0
 800ce26:	61da      	str	r2, [r3, #28]

            /* Set the initial count TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f383 8810 	msr	PRIMASK, r3
}
 800ce3a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ce42:	2200      	movs	r2, #0
 800ce44:	2180      	movs	r1, #128	; 0x80
 800ce46:	4618      	mov	r0, r3
 800ce48:	f006 fa22 	bl	8013290 <_tx_event_flags_set>
 800ce4c:	e003      	b.n	800ce56 <_nx_tcp_packet_receive+0xce>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff fc25 	bl	800c6a0 <_nx_tcp_packet_process>
    }
}
 800ce56:	3720      	adds	r7, #32
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20000094 	.word	0x20000094
 800ce60:	2000aaf8 	.word	0x2000aaf8

0800ce64 <_nx_tcp_packet_send_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af04      	add	r7, sp, #16
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce72:	2200      	movs	r2, #0
 800ce74:	9202      	str	r2, [sp, #8]
 800ce76:	2200      	movs	r2, #0
 800ce78:	9201      	str	r2, [sp, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	9200      	str	r2, [sp, #0]
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f80b 	bl	800cea0 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800ce8a:	4b04      	ldr	r3, [pc, #16]	; (800ce9c <_nx_tcp_packet_send_ack+0x38>)
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ce92:	bf00      	nop
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	2000aa24 	.word	0x2000aa24

0800cea0 <_nx_tcp_packet_send_control>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 800cea0:	b5b0      	push	{r4, r5, r7, lr}
 800cea2:	b092      	sub	sp, #72	; 0x48
 800cea4:	af04      	add	r7, sp, #16
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]

NX_IP         *ip_ptr;
NX_PACKET     *packet_ptr;
NX_TCP_HEADER *tcp_header_ptr;
ULONG          checksum;
ULONG          data_offset = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	623b      	str	r3, [r7, #32]
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	637b      	str	r3, [r7, #52]	; 0x34
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800ceba:	2301      	movs	r3, #1
 800cebc:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cec4:	61fb      	str	r3, [r7, #28]

    if (control_bits & NX_TCP_SYN_BIT)
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d006      	beq.n	800cede <_nx_tcp_packet_send_control+0x3e>
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 800ced0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ced4:	62bb      	str	r3, [r7, #40]	; 0x28
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
 800cedc:	e005      	b.n	800ceea <_nx_tcp_packet_send_control+0x4a>
    }
    else
    {

        /* Set header size. */
        header_size = NX_TCP_HEADER_SIZE;
 800cede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800cee2:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Set window size. */
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current >> socket_ptr -> nx_tcp_rcv_win_scale_value;
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cee8:	627b      	str	r3, [r7, #36]	; 0x24
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800cef6:	f107 0110 	add.w	r1, r7, #16
 800cefa:	2300      	movs	r3, #0
 800cefc:	f7fd fec8 	bl	800ac90 <_nx_packet_allocate>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f040 80e3 	bne.w	800d0ce <_nx_tcp_packet_send_control+0x22e>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	695a      	ldr	r2, [r3, #20]
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	2b1c      	cmp	r3, #28
 800cf14:	d804      	bhi.n	800cf20 <_nx_tcp_packet_send_control+0x80>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(packet_ptr);
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe fb4d 	bl	800b5b8 <_nx_packet_release>
        return;
 800cf1e:	e0d7      	b.n	800d0d0 <_nx_tcp_packet_send_control+0x230>
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	695a      	ldr	r2, [r3, #20]
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	b2d2      	uxtb	r2, r2
 800cf28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	2b04      	cmp	r3, #4
 800cf32:	d103      	bne.n	800cf3c <_nx_tcp_packet_send_control+0x9c>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cf3a:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_IPSEC_ENABLE
    packet_ptr -> nx_packet_ipsec_sa_ptr = socket_ptr -> nx_tcp_socket_egress_sa;
#endif

    /* Setup the packet payload pointers and length for a basic TCP packet.  */
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	3214      	adds	r2, #20
 800cf44:	60da      	str	r2, [r3, #12]

    /* Setup the packet length.  */
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	2214      	movs	r2, #20
 800cf4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	61bb      	str	r3, [r7, #24]

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	041a      	lsls	r2, r3, #16
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	69db      	ldr	r3, [r3, #28]
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	601a      	str	r2, [r3, #0]
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	605a      	str	r2, [r3, #4]
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	609a      	str	r2, [r3, #8]
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 800cf6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	431a      	orrs	r2, r3
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	431a      	orrs	r2, r3
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	60da      	str	r2, [r3, #12]
    tcp_header_ptr -> nx_tcp_header_word_4 =        0;
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	611a      	str	r2, [r3, #16]

    /* Remember the last ACKed sequence and the last reported window size.  */
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	ba1a      	rev	r2, r3
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	ba1a      	rev	r2, r3
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	ba1a      	rev	r2, r3
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	ba1a      	rev	r2, r3
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	ba1a      	rev	r2, r3
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	611a      	str	r2, [r3, #16]

    /* Check whether or not data is set. */
    if (data)
 800cfc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00a      	beq.n	800cfde <_nx_tcp_packet_send_control+0x13e>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	68d3      	ldr	r3, [r2, #12]
 800cfcc:	1c59      	adds	r1, r3, #1
 800cfce:	60d1      	str	r1, [r2, #12]
 800cfd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfd2:	7812      	ldrb	r2, [r2, #0]
 800cfd4:	701a      	strb	r2, [r3, #0]
        packet_ptr -> nx_packet_length++;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfda:	3201      	adds	r2, #1
 800cfdc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d018      	beq.n	800d01a <_nx_tcp_packet_send_control+0x17a>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 800cfe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfea:	ba1b      	rev	r3, r3
 800cfec:	64bb      	str	r3, [r7, #72]	; 0x48
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 800cfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff0:	ba1b      	rev	r3, r3
 800cff2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cffa:	601a      	str	r2, [r3, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	3304      	adds	r3, #4
 800d002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d004:	601a      	str	r2, [r3, #0]

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	68da      	ldr	r2, [r3, #12]
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	3208      	adds	r2, #8
 800d00e:	60da      	str	r2, [r3, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	3208      	adds	r2, #8
 800d018:	625a      	str	r2, [r3, #36]	; 0x24
    }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d020:	f003 0304 	and.w	r3, r3, #4
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <_nx_tcp_packet_send_control+0x18c>
    {
        compute_checksum = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	62fb      	str	r3, [r7, #44]	; 0x2c
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d028      	beq.n	800d084 <_nx_tcp_packet_send_control+0x1e4>
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	2b04      	cmp	r3, #4
 800d038:	d106      	bne.n	800d048 <_nx_tcp_packet_send_control+0x1a8>
        {

            /* For IPv4 the IP instance has only one global address. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03e:	3314      	adds	r3, #20
 800d040:	637b      	str	r3, [r7, #52]	; 0x34

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	3318      	adds	r3, #24
 800d046:	633b      	str	r3, [r7, #48]	; 0x30
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800d048:	6938      	ldr	r0, [r7, #16]
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d054:	2106      	movs	r1, #6
 800d056:	f7fb fcbb 	bl	80089d0 <_nx_ip_checksum_compute>
 800d05a:	4603      	mov	r3, r0
 800d05c:	617b      	str	r3, [r7, #20]

        checksum = ~checksum & NX_LOWER_16_MASK;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	43db      	mvns	r3, r3
 800d062:	b29b      	uxth	r3, r3
 800d064:	617b      	str	r3, [r7, #20]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	ba1a      	rev	r2, r3
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	611a      	str	r2, [r3, #16]
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	041a      	lsls	r2, r3, #16
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	611a      	str	r2, [r3, #16]
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	ba1a      	rev	r2, r3
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	611a      	str	r2, [r3, #16]
 800d082:	e005      	b.n	800d090 <_nx_tcp_packet_send_control+0x1f0>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	f042 0204 	orr.w	r2, r2, #4
 800d08e:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	695b      	ldr	r3, [r3, #20]
 800d094:	2b04      	cmp	r3, #4
 800d096:	d11b      	bne.n	800d0d0 <_nx_tcp_packet_send_control+0x230>
    {

        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800d098:	6938      	ldr	r0, [r7, #16]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	699c      	ldr	r4, [r3, #24]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                           socket_ptr -> nx_tcp_socket_type_of_service, socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800d0b0:	68f9      	ldr	r1, [r7, #12]
 800d0b2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800d0b4:	9103      	str	r1, [sp, #12]
 800d0b6:	9202      	str	r2, [sp, #8]
 800d0b8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800d0bc:	9201      	str	r2, [sp, #4]
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	462b      	mov	r3, r5
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	4601      	mov	r1, r0
 800d0c6:	69f8      	ldr	r0, [r7, #28]
 800d0c8:	f7fc fea8 	bl	8009e1c <_nx_ip_packet_send>
 800d0cc:	e000      	b.n	800d0d0 <_nx_tcp_packet_send_control+0x230>
                return;
 800d0ce:	bf00      	nop
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
    }
#endif /* FEATURE_NX_IPV6 */
}
 800d0d0:	3738      	adds	r7, #56	; 0x38
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bdb0      	pop	{r4, r5, r7, pc}

0800d0d6 <_nx_tcp_packet_send_fin>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b086      	sub	sp, #24
 800d0da:	af04      	add	r7, sp, #16
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	9202      	str	r2, [sp, #8]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	9201      	str	r2, [sp, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	9200      	str	r2, [sp, #0]
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fed2 	bl	800cea0 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 800d0fc:	bf00      	nop
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <_nx_tcp_packet_send_probe>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af04      	add	r7, sp, #16
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	4613      	mov	r3, r2
 800d110:	71fb      	strb	r3, [r7, #7]

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d116:	1dfb      	adds	r3, r7, #7
 800d118:	9302      	str	r3, [sp, #8]
 800d11a:	2300      	movs	r3, #0
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	2300      	movs	r3, #0
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	4613      	mov	r3, r2
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f7ff feb8 	bl	800cea0 <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800d130:	4b03      	ldr	r3, [pc, #12]	; (800d140 <_nx_tcp_packet_send_probe+0x3c>)
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d138:	bf00      	nop
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2000aa24 	.word	0x2000aa24

0800d144 <_nx_tcp_packet_send_rst>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af04      	add	r7, sp, #16
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00e      	beq.n	800d178 <_nx_tcp_packet_send_rst+0x34>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	689a      	ldr	r2, [r3, #8]
 800d15e:	2300      	movs	r3, #0
 800d160:	9302      	str	r3, [sp, #8]
 800d162:	2300      	movs	r3, #0
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	2300      	movs	r3, #0
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	2300      	movs	r3, #0
 800d16c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7ff fe95 	bl	800cea0 <_nx_tcp_packet_send_control>
 800d176:	e00d      	b.n	800d194 <_nx_tcp_packet_send_rst+0x50>
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	9202      	str	r2, [sp, #8]
 800d180:	2200      	movs	r2, #0
 800d182:	9201      	str	r2, [sp, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	9200      	str	r2, [sp, #0]
 800d188:	2200      	movs	r2, #0
 800d18a:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff fe86 	bl	800cea0 <_nx_tcp_packet_send_control>
                                    header_ptr -> nx_tcp_sequence_number, 0, 0, NX_NULL);
    }

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d19a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d19e:	3201      	adds	r2, #1
 800d1a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
#endif /* NX_DISABLE_TCP_INFO */
}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <_nx_tcp_packet_send_syn>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_syn(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08a      	sub	sp, #40	; 0x28
 800d1b0:	af04      	add	r7, sp, #16
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
ULONG        option_word_2;
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
UINT         include_window_scaling = NX_FALSE;
UINT         scale_factor;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
ULONG        mss = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d104      	bne.n	800d1cc <_nx_tcp_packet_send_syn+0x20>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c8:	3b28      	subs	r3, #40	; 0x28
 800d1ca:	617b      	str	r3, [r7, #20]
        }
#endif /* NX_IPSEC_ENABLE */
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	617b      	str	r3, [r7, #20]

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	697a      	ldr	r2, [r7, #20]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d906      	bls.n	800d1ea <_nx_tcp_packet_send_syn+0x3e>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d002      	beq.n	800d1ea <_nx_tcp_packet_send_syn+0x3e>
    {

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	617b      	str	r3, [r7, #20]
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	d115      	bne.n	800d21e <_nx_tcp_packet_send_syn+0x72>
    {

        /* Update the connect MSS for TCP server socket. */
        if (mss < socket_ptr -> nx_tcp_socket_peer_mss)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d203      	bcs.n	800d204 <_nx_tcp_packet_send_syn+0x58>
        {
            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	621a      	str	r2, [r3, #32]
 800d202:	e003      	b.n	800d20c <_nx_tcp_packet_send_syn+0x60>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_connect_mss =  socket_ptr -> nx_tcp_socket_peer_mss;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	621a      	str	r2, [r3, #32]
        }

        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
        socket_ptr -> nx_tcp_socket_connect_mss2 =
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6a1b      	ldr	r3, [r3, #32]
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	6a12      	ldr	r2, [r2, #32]
 800d214:	fb02 f203 	mul.w	r2, r2, r3
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	631a      	str	r2, [r3, #48]	; 0x30
 800d21c:	e002      	b.n	800d224 <_nx_tcp_packet_send_syn+0x78>
    }
    else
    {

        /* Set the MSS. */
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	621a      	str	r2, [r3, #32]
    }

    /* Build the MSS option.  */
    option_word_1 = NX_TCP_MSS_OPTION | mss;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d22a:	613b      	str	r3, [r7, #16]

    /* Set default option word2. */
    option_word_2 = NX_TCP_OPTION_END;
 800d22c:	4b16      	ldr	r3, [pc, #88]	; (800d288 <_nx_tcp_packet_send_syn+0xdc>)
 800d22e:	60fb      	str	r3, [r7, #12]
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d234:	2b03      	cmp	r3, #3
 800d236:	d10d      	bne.n	800d254 <_nx_tcp_packet_send_syn+0xa8>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 800d238:	2300      	movs	r3, #0
 800d23a:	9302      	str	r3, [sp, #8]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	2300      	movs	r3, #0
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff fe27 	bl	800cea0 <_nx_tcp_packet_send_control>
 800d252:	e00e      	b.n	800d272 <_nx_tcp_packet_send_syn+0xc6>
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d258:	2300      	movs	r3, #0
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	9301      	str	r3, [sp, #4]
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	4613      	mov	r3, r2
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7ff fe17 	bl	800cea0 <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d27e:	bf00      	nop
 800d280:	3718      	adds	r7, #24
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	01010100 	.word	0x01010100

0800d28c <_nx_tcp_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_periodic_processing(NX_IP *ip_ptr)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <_nx_tcp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800d2ac:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d2b0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d2b2:	b672      	cpsid	i
    return(int_posture);
 800d2b4:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800d2b6:	61bb      	str	r3, [r7, #24]

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800d2be:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	f383 8810 	msr	PRIMASK, r3
}
 800d2e2:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 800d2e4:	e00b      	b.n	800d2fe <_nx_tcp_queue_process+0x5e>
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	69db      	ldr	r3, [r3, #28]
 800d2ee:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	61da      	str	r2, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800d2f6:	6979      	ldr	r1, [r7, #20]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7ff f9d1 	bl	800c6a0 <_nx_tcp_packet_process>
    while (queue_head)
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1f0      	bne.n	800d2e6 <_nx_tcp_queue_process+0x46>
    }
}
 800d304:	bf00      	nop
 800d306:	bf00      	nop
 800d308:	3720      	adds	r7, #32
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
	...

0800d310 <_nx_tcp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b08e      	sub	sp, #56	; 0x38
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d31a:	f3ef 8310 	mrs	r3, PRIMASK
 800d31e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d322:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d324:	b672      	cpsid	i
    return(int_posture);
 800d326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800d328:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d32e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800d330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d332:	2b00      	cmp	r3, #0
 800d334:	d004      	beq.n	800d340 <_nx_tcp_receive_cleanup+0x30>
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a43      	ldr	r2, [pc, #268]	; (800d448 <_nx_tcp_receive_cleanup+0x138>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d006      	beq.n	800d34e <_nx_tcp_receive_cleanup+0x3e>
 800d340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d342:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	f383 8810 	msr	PRIMASK, r3
}
 800d34a:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800d34c:	e078      	b.n	800d440 <_nx_tcp_receive_cleanup+0x130>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d352:	2b00      	cmp	r3, #0
 800d354:	d106      	bne.n	800d364 <_nx_tcp_receive_cleanup+0x54>
 800d356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d358:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	f383 8810 	msr	PRIMASK, r3
}
 800d360:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800d362:	e06d      	b.n	800d440 <_nx_tcp_receive_cleanup+0x130>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d364:	f3ef 8305 	mrs	r3, IPSR
 800d368:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d36a:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800d36c:	4b37      	ldr	r3, [pc, #220]	; (800d44c <_nx_tcp_receive_cleanup+0x13c>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4313      	orrs	r3, r2
 800d372:	2b00      	cmp	r3, #0
 800d374:	d104      	bne.n	800d380 <_nx_tcp_receive_cleanup+0x70>
 800d376:	4b36      	ldr	r3, [pc, #216]	; (800d450 <_nx_tcp_receive_cleanup+0x140>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a36      	ldr	r2, [pc, #216]	; (800d454 <_nx_tcp_receive_cleanup+0x144>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d116      	bne.n	800d3ae <_nx_tcp_receive_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a35      	ldr	r2, [pc, #212]	; (800d458 <_nx_tcp_receive_cleanup+0x148>)
 800d384:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d38c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d390:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	f383 8810 	msr	PRIMASK, r3
}
 800d398:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f005 ff72 	bl	8013290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800d3ac:	e048      	b.n	800d440 <_nx_tcp_receive_cleanup+0x130>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d104      	bne.n	800d3c8 <_nx_tcp_receive_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800d3c6:	e00e      	b.n	800d3e6 <_nx_tcp_receive_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d3da:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d3e4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d3ec:	1e5a      	subs	r2, r3, #1
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f8:	2b0c      	cmp	r3, #12
 800d3fa:	d11b      	bne.n	800d434 <_nx_tcp_receive_cleanup+0x124>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which receive error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	2b05      	cmp	r3, #5
 800d402:	d004      	beq.n	800d40e <_nx_tcp_receive_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2238      	movs	r2, #56	; 0x38
 800d408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800d40c:	e003      	b.n	800d416 <_nx_tcp_receive_cleanup+0x106>
            }
            else
            {

                /* Setup return status.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d416:	4b11      	ldr	r3, [pc, #68]	; (800d45c <_nx_tcp_receive_cleanup+0x14c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	4a0f      	ldr	r2, [pc, #60]	; (800d45c <_nx_tcp_receive_cleanup+0x14c>)
 800d41e:	6013      	str	r3, [r2, #0]
 800d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d422:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	f383 8810 	msr	PRIMASK, r3
}
 800d42a:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f007 fe63 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800d432:	e005      	b.n	800d440 <_nx_tcp_receive_cleanup+0x130>
 800d434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d436:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f383 8810 	msr	PRIMASK, r3
}
 800d43e:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800d440:	3738      	adds	r7, #56	; 0x38
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	54435020 	.word	0x54435020
 800d44c:	20000094 	.word	0x20000094
 800d450:	2000aaf8 	.word	0x2000aaf8
 800d454:	2000ab98 	.word	0x2000ab98
 800d458:	0800b861 	.word	0x0800b861
 800d45c:	2000aaf4 	.word	0x2000aaf4

0800d460 <_nx_tcp_socket_block_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	615a      	str	r2, [r3, #20]
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
#else /* FEATURE_NX_IPV6 */
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = 0;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	619a      	str	r2, [r3, #24]
#endif /* FEATURE_NX_IPV6 */

    /* Clean up the connect port.  */
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	61da      	str	r2, [r3, #28]

    /* Reset zero window probe flag. */
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

    /* Simply clear the timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = 0;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Reset duplicated ack received. */
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d003      	beq.n	800d4a8 <_nx_tcp_socket_block_cleanup+0x48>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Client socket, return to a CLOSED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	639a      	str	r2, [r3, #56]	; 0x38
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
    }
}
 800d4a6:	e002      	b.n	800d4ae <_nx_tcp_socket_block_cleanup+0x4e>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2202      	movs	r2, #2
 800d4ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d4ae:	bf00      	nop
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr

0800d4ba <_nx_tcp_socket_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b084      	sub	sp, #16
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	60fb      	str	r3, [r7, #12]

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff ffc9 	bl	800d460 <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <_nx_tcp_socket_connection_reset+0x24>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f002 fe8d 	bl	80101f8 <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Check for queued receive packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00a      	beq.n	800d4fe <_nx_tcp_socket_connection_reset+0x44>
    {

        /* Release all received packets.  */
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fd67 	bl	800dfbc <_nx_tcp_socket_receive_queue_flush>
    }

    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800d4ee:	e006      	b.n	800d4fe <_nx_tcp_socket_connection_reset+0x44>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff ff09 	bl	800d310 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1f3      	bne.n	800d4f0 <_nx_tcp_socket_connection_reset+0x36>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800d508:	e006      	b.n	800d518 <_nx_tcp_socket_connection_reset+0x5e>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d510:	2100      	movs	r1, #0
 800d512:	4618      	mov	r0, r3
 800d514:	f002 feb8 	bl	8010288 <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1f3      	bne.n	800d50a <_nx_tcp_socket_connection_reset+0x50>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d006      	beq.n	800d53a <_nx_tcp_socket_connection_reset+0x80>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d532:	2100      	movs	r1, #0
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fc73 	bl	800be20 <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d540:	2b00      	cmp	r3, #0
 800d542:	d006      	beq.n	800d552 <_nx_tcp_socket_connection_reset+0x98>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d54a:	2100      	movs	r1, #0
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fe fd93 	bl	800c078 <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b05      	cmp	r3, #5
 800d556:	d109      	bne.n	800d56c <_nx_tcp_socket_connection_reset+0xb2>
    {

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <_nx_tcp_socket_connection_reset+0xb2>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	4798      	blx	r3

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 800d56c:	bf00      	nop
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <_nx_tcp_socket_create>:
/**************************************************************************/
UINT  _nx_tcp_socket_create(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG window_size,
                            VOID (*tcp_urgent_data_callback)(NX_TCP_SOCKET *socket_ptr),
                            VOID (*tcp_disconnect_callback)(NX_TCP_SOCKET *socket_ptr))
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b08a      	sub	sp, #40	; 0x28
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
 800d580:	603b      	str	r3, [r7, #0]

NX_TCP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_TCP_SOCKET));
 800d582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d586:	2100      	movs	r1, #0
 800d588:	68b8      	ldr	r0, [r7, #8]
 800d58a:	f009 faab 	bl	8016ae4 <memset>

    /* Fill in the basic information in the new TCP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_tcp_socket_ip_ptr =  ip_ptr;
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* By default, indicate the socket is a client socket.  */
    socket_ptr -> nx_tcp_socket_client_type =  NX_TRUE;
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2201      	movs	r2, #1
 800d59a:	609a      	str	r2, [r3, #8]

    /* Save the TCP socket's name.  */
    socket_ptr -> nx_tcp_socket_name =  name;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	605a      	str	r2, [r3, #4]

    /* Setup the counter for duplicated ACK packet.  */
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Setup this socket's maximum segment size (mss).  */
    socket_ptr -> nx_tcp_socket_mss = 0;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	611a      	str	r2, [r3, #16]

    /* Setup the default receiver's maximum segment size.  */
    socket_ptr -> nx_tcp_socket_connect_mss =  NX_TCP_MSS_SIZE;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800d5b4:	621a      	str	r2, [r3, #32]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_tcp_socket_type_of_service =  type_of_service;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_tcp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_tcp_socket_time_to_live =  time_to_live;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_FALSE;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    /* Setup the delayed ACK timeout periodic rate.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800d5da:	4b48      	ldr	r3, [pc, #288]	; (800d6fc <_nx_tcp_socket_create+0x188>)
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	649a      	str	r2, [r3, #72]	; 0x48

    /* Setup the default transmit timeout.  */
    socket_ptr -> nx_tcp_socket_timeout_rate =         _nx_tcp_transmit_timer_rate;
 800d5e2:	4b47      	ldr	r3, [pc, #284]	; (800d700 <_nx_tcp_socket_create+0x18c>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    socket_ptr -> nx_tcp_socket_timeout_max_retries =  NX_TCP_MAXIMUM_RETRIES;
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	220a      	movs	r2, #10
 800d5f0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    socket_ptr -> nx_tcp_socket_timeout_shift =        NX_TCP_RETRY_SHIFT;
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    /* Setup the default maximum transmit queue depth.  */
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum_default =  NX_TCP_MAXIMUM_TX_QUEUE;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2214      	movs	r2, #20
 800d600:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    socket_ptr -> nx_tcp_socket_transmit_queue_maximum =          NX_TCP_MAXIMUM_TX_QUEUE;
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2214      	movs	r2, #20
 800d608:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    /* Window scaling feature is enabled.  Record this user-specified window size. */
    socket_ptr -> nx_tcp_socket_rx_window_maximum = window_size;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Setup the sliding window information.  */
    socket_ptr -> nx_tcp_socket_rx_window_default =   window_size;
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d610:	671a      	str	r2, [r3, #112]	; 0x70
    socket_ptr -> nx_tcp_socket_rx_window_current =   window_size;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d616:	675a      	str	r2, [r3, #116]	; 0x74
    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2200      	movs	r2, #0
 800d61c:	65da      	str	r2, [r3, #92]	; 0x5c
    socket_ptr -> nx_tcp_socket_tx_window_advertised = 0;
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	2200      	movs	r2, #0
 800d622:	655a      	str	r2, [r3, #84]	; 0x54
    socket_ptr -> nx_tcp_socket_tx_window_congestion = 0;
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	2200      	movs	r2, #0
 800d628:	659a      	str	r2, [r3, #88]	; 0x58


    /* Initialize the ack_n_packet counter. */
    socket_ptr -> nx_tcp_socket_ack_n_packet_counter = 1;
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2201      	movs	r2, #1
 800d62e:	669a      	str	r2, [r3, #104]	; 0x68

    /* Save the application callback routines.  */
    socket_ptr -> nx_tcp_urgent_data_callback = tcp_urgent_data_callback;
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d634:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    socket_ptr -> nx_tcp_disconnect_callback =  tcp_disconnect_callback;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d63c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_tcp_receive_callback =  NX_NULL;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	2200      	movs	r2, #0
 800d644:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Setup the initial TCP socket state.  */
    socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2201      	movs	r2, #1
 800d64c:	639a      	str	r2, [r3, #56]	; 0x38

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, window_size, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Get protection while we insert the TCP socket into the created list.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d654:	f04f 31ff 	mov.w	r1, #4294967295
 800d658:	4618      	mov	r0, r3
 800d65a:	f006 fa7b 	bl	8013b54 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d65e:	f3ef 8310 	mrs	r3, PRIMASK
 800d662:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d664:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d666:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d668:	b672      	cpsid	i
    return(int_posture);
 800d66a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new TCP socket to the IP structure.  */
    TX_DISABLE
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the TCP ID field in the TCP control block.  */
    socket_ptr -> nx_tcp_socket_id =  NX_TCP_ID;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	4a24      	ldr	r2, [pc, #144]	; (800d704 <_nx_tcp_socket_create+0x190>)
 800d672:	601a      	str	r2, [r3, #0]

    /* Place the new TCP control block on the list of created TCP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_tcp_created_sockets_ptr)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d01a      	beq.n	800d6b4 <_nx_tcp_socket_create+0x140>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_tcp_created_sockets_ptr) -> nx_tcp_socket_created_previous;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800d684:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d688:	623b      	str	r3, [r7, #32]

        /* Place the new TCP socket control block in the list.  */
        (ip_ptr -> nx_ip_tcp_created_sockets_ptr) -> nx_tcp_socket_created_previous =  socket_ptr;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        tail_ptr ->  nx_tcp_socket_created_next =  socket_ptr;
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

        /* Setup this TCP socket's created links.  */
        socket_ptr -> nx_tcp_socket_created_previous =  tail_ptr;
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	6a3a      	ldr	r2, [r7, #32]
 800d6a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        socket_ptr -> nx_tcp_socket_created_next =      ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800d6b2:	e00b      	b.n	800d6cc <_nx_tcp_socket_create+0x158>
    }
    else
    {

        /* The created TCP socket list is empty.  Add TCP socket control block to empty list.  */
        ip_ptr -> nx_ip_tcp_created_sockets_ptr =       socket_ptr;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	68ba      	ldr	r2, [r7, #8]
 800d6b8:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
        socket_ptr -> nx_tcp_socket_created_previous =  socket_ptr;
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        socket_ptr -> nx_tcp_socket_created_next =      socket_ptr;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    }

    /* Increment the created TCP socket counter.  */
    ip_ptr -> nx_ip_tcp_created_sockets_count++;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800d6d2:	1c5a      	adds	r2, r3, #1
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f383 8810 	msr	PRIMASK, r3
}
 800d6e4:	bf00      	nop
#endif /* NX_IPSEC_ENABLE */
    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f006 fca9 	bl	8014044 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3728      	adds	r7, #40	; 0x28
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	2000aa24 	.word	0x2000aa24
 800d700:	2000aa1c 	.word	0x2000aa1c
 800d704:	54435020 	.word	0x54435020

0800d708 <_nx_tcp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_delete(NX_TCP_SOCKET *socket_ptr)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d716:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_DELETE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, 0, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d71e:	f04f 31ff 	mov.w	r1, #4294967295
 800d722:	4618      	mov	r0, r3
 800d724:	f006 fa16 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket has been created.  */
    if (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a35      	ldr	r2, [pc, #212]	; (800d804 <_nx_tcp_socket_delete+0xfc>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d007      	beq.n	800d742 <_nx_tcp_socket_delete+0x3a>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d738:	4618      	mov	r0, r3
 800d73a:	f006 fc83 	bl	8014044 <_tx_mutex_put>

        /* Return a not created error code.  */
        return(NX_NOT_CREATED);
 800d73e:	2327      	movs	r3, #39	; 0x27
 800d740:	e05b      	b.n	800d7fa <_nx_tcp_socket_delete+0xf2>
    }

    /* Determine if the socket is still bound to port.  */
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d108      	bne.n	800d75e <_nx_tcp_socket_delete+0x56>
        (socket_ptr -> nx_tcp_socket_bind_in_progress) ||
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    if ((socket_ptr -> nx_tcp_socket_bound_next) ||
 800d752:	2b00      	cmp	r3, #0
 800d754:	d103      	bne.n	800d75e <_nx_tcp_socket_delete+0x56>
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED))
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        (socket_ptr -> nx_tcp_socket_bind_in_progress) ||
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d007      	beq.n	800d76e <_nx_tcp_socket_delete+0x66>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d764:	4618      	mov	r0, r3
 800d766:	f006 fc6d 	bl	8014044 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 800d76a:	2342      	movs	r3, #66	; 0x42
 800d76c:	e045      	b.n	800d7fa <_nx_tcp_socket_delete+0xf2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d76e:	f3ef 8310 	mrs	r3, PRIMASK
 800d772:	617b      	str	r3, [r7, #20]
    return(posture);
 800d774:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d776:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d778:	b672      	cpsid	i
    return(int_posture);
 800d77a:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800d77c:	61bb      	str	r3, [r7, #24]

    /* Now, remove the TCP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_tcp_socket_id =  0;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_tcp_socket_created_next)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d104      	bne.n	800d79a <_nx_tcp_socket_delete+0x92>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_tcp_created_sockets_ptr =  NX_NULL;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	2200      	movs	r2, #0
 800d794:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
 800d798:	e01b      	b.n	800d7d2 <_nx_tcp_socket_delete+0xca>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_tcp_socket_created_next) -> nx_tcp_socket_created_previous =
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
            socket_ptr -> nx_tcp_socket_created_previous;
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
        (socket_ptr -> nx_tcp_socket_created_next) -> nx_tcp_socket_created_previous =
 800d7a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        (socket_ptr -> nx_tcp_socket_created_previous) -> nx_tcp_socket_created_next =
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
            socket_ptr -> nx_tcp_socket_created_next;
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
        (socket_ptr -> nx_tcp_socket_created_previous) -> nx_tcp_socket_created_next =
 800d7b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_tcp_created_sockets_ptr == socket_ptr)
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d105      	bne.n	800d7d2 <_nx_tcp_socket_delete+0xca>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_tcp_created_sockets_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_tcp_created_sockets_count--;
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800d7d8:	1e5a      	subs	r2, r3, #1
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f383 8810 	msr	PRIMASK, r3
}
 800d7ea:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(ip_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f006 fc26 	bl	8014044 <_tx_mutex_put>

    /* Return success.  */
    return(NX_SUCCESS);
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3720      	adds	r7, #32
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	54435020 	.word	0x54435020

0800d808 <_nx_tcp_socket_disconnect>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_disconnect(NX_TCP_SOCKET *socket_ptr, ULONG wait_option)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b08c      	sub	sp, #48	; 0x30
 800d80c:	af02      	add	r7, sp, #8
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
#endif
UINT          status;
NX_IP        *ip_ptr;

    /* Setup IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d818:	623b      	str	r3, [r7, #32]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_DISCONNECT, ip_ptr, socket_ptr, wait_option, socket_ptr -> nx_tcp_socket_state, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Default status to success.  */
    status =  NX_SUCCESS;
 800d81a:	2300      	movs	r3, #0
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Obtain the IP mutex so we can access socket and IP information.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d824:	f04f 31ff 	mov.w	r1, #4294967295
 800d828:	4618      	mov	r0, r3
 800d82a:	f006 f993 	bl	8013b54 <_tx_mutex_get>

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the TCP disconnections count.  */
    ip_ptr -> nx_ip_tcp_disconnections++;
 800d82e:	6a3b      	ldr	r3, [r7, #32]
 800d830:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d834:	1c5a      	adds	r2, r3, #1
 800d836:	6a3b      	ldr	r3, [r7, #32]
 800d838:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif

    /* Determine if the socket is in a state not valid for a disconnect.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) &&
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d840:	2b05      	cmp	r3, #5
 800d842:	d013      	beq.n	800d86c <_nx_tcp_socket_disconnect+0x64>
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) &&
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) &&
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d00f      	beq.n	800d86c <_nx_tcp_socket_disconnect+0x64>
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED) &&
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) &&
 800d850:	2b04      	cmp	r3, #4
 800d852:	d00b      	beq.n	800d86c <_nx_tcp_socket_disconnect+0x64>
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED) &&
 800d858:	2b06      	cmp	r3, #6
 800d85a:	d007      	beq.n	800d86c <_nx_tcp_socket_disconnect+0x64>
    {

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d862:	4618      	mov	r0, r3
 800d864:	f006 fbee 	bl	8014044 <_tx_mutex_put>

        /* Return a not connected error code.  */
        return(NX_NOT_CONNECTED);
 800d868:	2338      	movs	r3, #56	; 0x38
 800d86a:	e112      	b.n	800da92 <_nx_tcp_socket_disconnect+0x28a>
    socket_ptr -> nx_tcp_socket_keepalive_timeout =  0;
    socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
#endif

    /* Determine if the connection wasn't fully completed.  */
    if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	2b03      	cmp	r3, #3
 800d872:	d003      	beq.n	800d87c <_nx_tcp_socket_disconnect+0x74>
        (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 800d878:	2b04      	cmp	r3, #4
 800d87a:	d14c      	bne.n	800d916 <_nx_tcp_socket_disconnect+0x10e>
    {

        /* Connection wasn't fully completed, reset to the proper socket state.  */
        if (socket_ptr -> nx_tcp_socket_client_type)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d01d      	beq.n	800d8c0 <_nx_tcp_socket_disconnect+0xb8>
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d888:	2b04      	cmp	r3, #4
 800d88a:	d115      	bne.n	800d8b8 <_nx_tcp_socket_disconnect+0xb0>
            {

                /* Setup FIN timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Increment the sequence number.  */
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Send FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fc0f 	bl	800d0d6 <_nx_tcp_packet_send_fin>
            }

            /* Client socket, return to a CLOSED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	639a      	str	r2, [r3, #56]	; 0x38
 800d8be:	e025      	b.n	800d90c <_nx_tcp_socket_disconnect+0x104>
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED) &&
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c4:	2b04      	cmp	r3, #4
 800d8c6:	d119      	bne.n	800d8fc <_nx_tcp_socket_disconnect+0xf4>
                (socket_ptr -> nx_tcp_socket_connect_interface != NX_NULL))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED) &&
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d015      	beq.n	800d8fc <_nx_tcp_socket_disconnect+0xf4>
            {

                /* Setup FIN timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Increment the sequence number.  */
                socket_ptr -> nx_tcp_socket_tx_sequence++;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Send FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff fbed 	bl	800d0d6 <_nx_tcp_packet_send_fin>
            }

            /* Server socket, return to LISTEN state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2202      	movs	r2, #2
 800d900:	639a      	str	r2, [r3, #56]	; 0x38

            /* Move back the acknowledgment number just in case there is a retry.  */
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d906:	1e5a      	subs	r2, r3, #1
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	641a      	str	r2, [r3, #64]	; 0x40
        }

        /* Socket is no longer active. Clear the timeout. */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800d914:	e058      	b.n	800d9c8 <_nx_tcp_socket_disconnect+0x1c0>

#ifndef NX_DISABLE_RESET_DISCONNECT

    /* Determine if there is no timeout associated with the disconnect. If this is the case,
       we will send a RST and simply enter a closed state.  */
    else if (wait_option == NX_NO_WAIT)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d114      	bne.n	800d946 <_nx_tcp_socket_disconnect+0x13e>
    {

        /* No timeout was specified, simply send a RST and enter a closed or listen state.  */

        /* Clear this field so the RST packet handler knows this is a fake header. */
        tcp_header.nx_tcp_header_word_3 = NX_TCP_ACK_BIT;
 800d91c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d920:	61bb      	str	r3, [r7, #24]

        /* Send the RST packet. We just want to create a fake header, so assume this packet is incoming packet.  */
        tcp_header.nx_tcp_acknowledgment_number =  socket_ptr -> nx_tcp_socket_tx_sequence;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d926:	617b      	str	r3, [r7, #20]
        tcp_header.nx_tcp_sequence_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92c:	613b      	str	r3, [r7, #16]
        _nx_tcp_packet_send_rst(socket_ptr, &tcp_header);
 800d92e:	f107 030c 	add.w	r3, r7, #12
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff fc05 	bl	800d144 <_nx_tcp_packet_send_rst>

        /* Cleanup the transmission control block.  */
        _nx_tcp_socket_block_cleanup(socket_ptr);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fd90 	bl	800d460 <_nx_tcp_socket_block_cleanup>

        /* No suspension is requested, just set the return status to in progress.  */
        status =  NX_IN_PROGRESS;
 800d940:	2337      	movs	r3, #55	; 0x37
 800d942:	627b      	str	r3, [r7, #36]	; 0x24
 800d944:	e040      	b.n	800d9c8 <_nx_tcp_socket_disconnect+0x1c0>
    }
#endif

    /* Determine if this is an active disconnect, i.e. initiated by the application rather
       than in response to a disconnect from the connected socket.  */
    else if (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94a:	2b06      	cmp	r3, #6
 800d94c:	d01e      	beq.n	800d98c <_nx_tcp_socket_disconnect+0x184>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_1, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move the TCP state to FIN WAIT 1 state, the first state of an active close.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_1;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2207      	movs	r2, #7
 800d952:	639a      	str	r2, [r3, #56]	; 0x38

        /* Determine if the transmit queue is empty.  Only setup a FIN timeout here when
           there are no more transmit packets waiting to be ACKed.  If there are transmit
           packets still waiting, the FIN timeout will be setup when the transmit queue is completely
           acknowledged.  */
        if (socket_ptr -> nx_tcp_socket_transmit_sent_head == NX_NULL)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d109      	bne.n	800d972 <_nx_tcp_socket_disconnect+0x16a>
        {

            /* No transmit packets queue, setup FIN timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        }

        /* Increment the sequence number.  */
        socket_ptr -> nx_tcp_socket_tx_sequence++;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d976:	1c5a      	adds	r2, r3, #1
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Send FIN packet.  */
        _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d980:	3b01      	subs	r3, #1
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff fba6 	bl	800d0d6 <_nx_tcp_packet_send_fin>
 800d98a:	e01d      	b.n	800d9c8 <_nx_tcp_socket_disconnect+0x1c0>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LAST_ACK, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move the TCP state to wait for the last ACK message for the complete disconnect.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LAST_ACK;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	220b      	movs	r2, #11
 800d990:	639a      	str	r2, [r3, #56]	; 0x38

        /* Determine if the transmit queue is empty.  Only setup a FIN timeout here when
           there are no more transmit packets waiting to be ACKed.  If there are transmit
           packets still waiting, the FIN timeout will be setup when the transmit queue is completely
           acknowledged.  */
        if (socket_ptr -> nx_tcp_socket_transmit_sent_head == NX_NULL)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d109      	bne.n	800d9b0 <_nx_tcp_socket_disconnect+0x1a8>
        {

            /* No transmit packets queue, setup FIN timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        }

        /* Increment the sequence number.  */
        socket_ptr -> nx_tcp_socket_tx_sequence++;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b4:	1c5a      	adds	r2, r3, #1
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Send FIN packet.  */
        _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fb87 	bl	800d0d6 <_nx_tcp_packet_send_fin>
    }

    /* Optionally suspend the thread.  If timeout occurs, return a disconnect timeout status.  If
       immediate response is selected, return a disconnect in progress status.  Only on a real
       disconnect should success be returned.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE) &&
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d02b      	beq.n	800da28 <_nx_tcp_socket_disconnect+0x220>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d027      	beq.n	800da28 <_nx_tcp_socket_disconnect+0x220>
#ifdef NX_DISABLE_RESET_DISCONNECT
        (wait_option) &&
#endif
        (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 800d9d8:	6a3b      	ldr	r3, [r7, #32]
 800d9da:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800d9de:	4b2f      	ldr	r3, [pc, #188]	; (800da9c <_nx_tcp_socket_disconnect+0x294>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_LISTEN_STATE) &&
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d020      	beq.n	800da28 <_nx_tcp_socket_disconnect+0x220>
    {

        /* Suspend the thread on socket disconnect.  */
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), _nx_tcp_disconnect_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	4929      	ldr	r1, [pc, #164]	; (800daa0 <_nx_tcp_socket_disconnect+0x298>)
 800d9fc:	f002 fba2 	bl	8010144 <_nx_tcp_socket_thread_suspend>

        /* Reobtain the IP mutex.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800da00:	6a3b      	ldr	r3, [r7, #32]
 800da02:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800da06:	f04f 31ff 	mov.w	r1, #4294967295
 800da0a:	4618      	mov	r0, r3
 800da0c:	f006 f8a2 	bl	8013b54 <_tx_mutex_get>

        /* Determine if the socket is in the timed wait state.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_TIMED_WAIT)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da14:	2b0a      	cmp	r3, #10
 800da16:	d002      	beq.n	800da1e <_nx_tcp_socket_disconnect+0x216>
        {

            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff fd21 	bl	800d460 <_nx_tcp_socket_block_cleanup>
        }

        /* Use the thread return the completion code.  */
        status =  _tx_thread_current_ptr -> tx_thread_suspend_status;
 800da1e:	4b1f      	ldr	r3, [pc, #124]	; (800da9c <_nx_tcp_socket_disconnect+0x294>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da26:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* We now need to check for any remaining sent packets in the transmit queue.
       If found they need to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_head)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <_nx_tcp_socket_disconnect+0x230>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f002 fbe0 	bl	80101f8 <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Clear any connection suspension on this socket.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00e      	beq.n	800da60 <_nx_tcp_socket_disconnect+0x258>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800da48:	2100      	movs	r1, #0
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe f9e8 	bl	800be20 <_nx_tcp_connect_cleanup>
    }

    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800da50:	e006      	b.n	800da60 <_nx_tcp_socket_disconnect+0x258>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800da58:	2100      	movs	r1, #0
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff fc58 	bl	800d310 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f3      	bne.n	800da52 <_nx_tcp_socket_disconnect+0x24a>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800da6a:	e006      	b.n	800da7a <_nx_tcp_socket_disconnect+0x272>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da72:	2100      	movs	r1, #0
 800da74:	4618      	mov	r0, r3
 800da76:	f002 fc07 	bl	8010288 <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1f3      	bne.n	800da6c <_nx_tcp_socket_disconnect+0x264>
    }

    /* Release the IP protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800da84:	6a3b      	ldr	r3, [r7, #32]
 800da86:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800da8a:	4618      	mov	r0, r3
 800da8c:	f006 fada 	bl	8014044 <_tx_mutex_put>

    /* Return in-progress completion status.  */
    return(status);
 800da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da92:	4618      	mov	r0, r3
 800da94:	3728      	adds	r7, #40	; 0x28
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	2000aaf8 	.word	0x2000aaf8
 800daa0:	0800c079 	.word	0x0800c079

0800daa4 <_nx_tcp_socket_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_packet_process(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800daa4:	b5b0      	push	{r4, r5, r7, lr}
 800daa6:	b090      	sub	sp, #64	; 0x40
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]

UINT          packet_queued =  NX_FALSE;
 800daae:	2300      	movs	r3, #0
 800dab0:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG         packet_data_length;
ULONG         packet_sequence;
ULONG         rx_sequence;
ULONG         rx_window;
UINT          outside_of_window;
ULONG         mss = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	60bb      	str	r3, [r7, #8]

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	f107 040c 	add.w	r4, r7, #12
 800dabe:	461d      	mov	r5, r3
 800dac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dac4:	682b      	ldr	r3, [r5, #0]
 800dac6:	6023      	str	r3, [r4, #0]

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	0f1b      	lsrs	r3, r3, #28
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	637b      	str	r3, [r7, #52]	; 0x34

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad4:	2b03      	cmp	r3, #3
 800dad6:	f240 80b5 	bls.w	800dc44 <_nx_tcp_socket_packet_process+0x1a0>
    {

        /* Step1: Check sequence number. According to RFC 793, Section 3.9, Page 69.  */

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup the rx sequence.  */
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daec:	62bb      	str	r3, [r7, #40]	; 0x28
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Pickup the rx window.  */
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf2:	627b      	str	r3, [r7, #36]	; 0x24

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;
 800daf4:	2301      	movs	r3, #1
 800daf6:	63bb      	str	r3, [r7, #56]	; 0x38

        if (packet_data_length == 0)
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d12b      	bne.n	800db56 <_nx_tcp_socket_packet_process+0xb2>
        {
            if (rx_window == 0)
 800dafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db00:	2b00      	cmp	r3, #0
 800db02:	d119      	bne.n	800db38 <_nx_tcp_socket_packet_process+0x94>
            {
                if (packet_sequence == rx_sequence)
 800db04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db08:	429a      	cmp	r2, r3
 800db0a:	d102      	bne.n	800db12 <_nx_tcp_socket_packet_process+0x6e>
                {
                    outside_of_window = NX_FALSE;
 800db0c:	2300      	movs	r3, #0
 800db0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800db10:	e044      	b.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
                }
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10a      	bne.n	800db32 <_nx_tcp_socket_packet_process+0x8e>
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800db22:	2b00      	cmp	r3, #0
 800db24:	d105      	bne.n	800db32 <_nx_tcp_socket_packet_process+0x8e>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	f403 13b8 	and.w	r3, r3, #1507328	; 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800db2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db30:	d134      	bne.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
                {

                    /* If the RCV.WND is zero, no segments will be acceptable, but
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
 800db32:	2300      	movs	r3, #0
 800db34:	63bb      	str	r3, [r7, #56]	; 0x38
 800db36:	e031      	b.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
                }
            }
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800db38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	db2c      	blt.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
                     ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0))
 800db42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	441a      	add	r2, r3
 800db48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4a:	1ad3      	subs	r3, r2, r3
            else if (((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	dd25      	ble.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800db50:	2300      	movs	r3, #0
 800db52:	63bb      	str	r3, [r7, #56]	; 0x38
 800db54:	e022      	b.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
            }
        }
        else
        {
            if ((rx_window > 0) &&
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01f      	beq.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800db5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db60:	1ad3      	subs	r3, r2, r3
            if ((rx_window > 0) &&
 800db62:	2b00      	cmp	r3, #0
 800db64:	db06      	blt.n	800db74 <_nx_tcp_socket_packet_process+0xd0>
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 800db66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	441a      	add	r2, r3
 800db6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6e:	1ad3      	subs	r3, r2, r3
                ((((INT)packet_sequence - (INT)rx_sequence >= 0) &&
 800db70:	2b00      	cmp	r3, #0
 800db72:	dc11      	bgt.n	800db98 <_nx_tcp_socket_packet_process+0xf4>
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 800db74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	441a      	add	r2, r3
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	3b01      	subs	r3, #1
                  ((INT)rx_sequence + (INT)rx_window - (INT)packet_sequence > 0)) ||
 800db80:	2b00      	cmp	r3, #0
 800db82:	db0b      	blt.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
                  ((INT)rx_sequence + 1 + ((INT)rx_window - (INT)packet_sequence) - (INT)packet_data_length > 0))))
 800db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	1acb      	subs	r3, r1, r3
 800db8e:	441a      	add	r2, r3
 800db90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db92:	1ad3      	subs	r3, r2, r3
                 (((INT)packet_sequence + ((INT)packet_data_length - 1) - (INT)rx_sequence >= 0) &&
 800db94:	2b00      	cmp	r3, #0
 800db96:	dd01      	ble.n	800db9c <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800db98:	2300      	movs	r3, #0
 800db9a:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* Detect whether or not the data is outside the window.  */
        if (outside_of_window)
 800db9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d016      	beq.n	800dbd0 <_nx_tcp_socket_packet_process+0x12c>
        {

            /* If an incoming segment is not acceptable, an acknowledgment should be sent in reply
               (unless the RST bit is set, if so drop the segment and return).
               Section 3.9, Page 69, RFC 793.  */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d105      	bne.n	800dbb8 <_nx_tcp_socket_packet_process+0x114>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff f956 	bl	800ce64 <_nx_tcp_packet_send_ack>
            }

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP dropped packet count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dbbe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800dbc2:	3201      	adds	r2, #1
 800dbc4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800dbc8:	6838      	ldr	r0, [r7, #0]
 800dbca:	f7fd fcf5 	bl	800b5b8 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800dbce:	e0fe      	b.n	800ddce <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00e      	beq.n	800dbf8 <_nx_tcp_socket_packet_process+0x154>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dbe0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800dbe4:	3201      	adds	r2, #1
 800dbe6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_copy.nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff fc65 	bl	800d4ba <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800dbf0:	6838      	ldr	r0, [r7, #0]
 800dbf2:	f7fd fce1 	bl	800b5b8 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800dbf6:	e0ea      	b.n	800ddce <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00f      	beq.n	800dc22 <_nx_tcp_socket_packet_process+0x17e>

            /* The SYN is in the window it is an error, send a reset.  */

            /* Adjust the SEQ for the SYN bit. */
            /* The reset logic uses the sequence number in tcp_header_ptr as its ACK number. */
            tcp_header_copy.nx_tcp_sequence_number++;
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	3301      	adds	r3, #1
 800dc06:	613b      	str	r3, [r7, #16]

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800dc08:	f107 030c 	add.w	r3, r7, #12
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff fa98 	bl	800d144 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7ff fc50 	bl	800d4ba <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800dc1a:	6838      	ldr	r0, [r7, #0]
 800dc1c:	f7fd fccc 	bl	800b5b8 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800dc20:	e0d5      	b.n	800ddce <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc26:	2b04      	cmp	r3, #4
 800dc28:	d00c      	beq.n	800dc44 <_nx_tcp_socket_packet_process+0x1a0>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 800dc2a:	f107 030c 	add.w	r3, r7, #12
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f001 f831 	bl	800ec98 <_nx_tcp_socket_state_ack_check>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d103      	bne.n	800dc44 <_nx_tcp_socket_packet_process+0x1a0>
            {

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800dc3c:	6838      	ldr	r0, [r7, #0]
 800dc3e:	f7fd fcbb 	bl	800b5b8 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800dc42:	e0c4      	b.n	800ddce <_nx_tcp_socket_packet_process+0x32a>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 800dc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc46:	2b14      	cmp	r3, #20
 800dc48:	d93b      	bls.n	800dcc2 <_nx_tcp_socket_packet_process+0x21e>
    {

        /* There are one or more option words.  */
        /* The illegal option length is validated during MSS option get function. */
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	f103 0014 	add.w	r0, r3, #20
 800dc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc54:	3b14      	subs	r3, #20
 800dc56:	f107 0208 	add.w	r2, r7, #8
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	f7fe fc30 	bl	800c4c0 <_nx_tcp_mss_option_get>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d12d      	bne.n	800dcc2 <_nx_tcp_socket_packet_process+0x21e>
            /* TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
               a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */

            /* Preprocess the sequence number if the incoming segment does not have an ACK field.
               Reset Generation, RFC793, Section3.4, Page37. */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d113      	bne.n	800dc98 <_nx_tcp_socket_packet_process+0x1f4>
            {

                /* Update sequence number to set the reset acknowledge number.  */
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc78:	1acb      	subs	r3, r1, r3
 800dc7a:	4413      	add	r3, r2
 800dc7c:	613b      	str	r3, [r7, #16]

                /* Check the SYN and FIN bits.  */
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d104      	bne.n	800dc92 <_nx_tcp_socket_packet_process+0x1ee>
                    (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_FIN_BIT))
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d002      	beq.n	800dc98 <_nx_tcp_socket_packet_process+0x1f4>
                {

                    /* Update sequence number to set the reset acknowledge number.  */
                    tcp_header_copy.nx_tcp_sequence_number++;
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	3301      	adds	r3, #1
 800dc96:	613b      	str	r3, [r7, #16]
                }
            }

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800dc98:	f107 030c 	add.w	r3, r7, #12
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7ff fa50 	bl	800d144 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff fc08 	bl	800d4ba <_nx_tcp_socket_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
            /* Increment the TCP invalid packet error count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_invalid_packets++;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dcb0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800dcb4:	3201      	adds	r2, #1
 800dcb6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800dcba:	6838      	ldr	r0, [r7, #0]
 800dcbc:	f7fd fc7c 	bl	800b5b8 <_nx_packet_release>

            return;
 800dcc0:	e085      	b.n	800ddce <_nx_tcp_socket_packet_process+0x32a>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc6:	3b03      	subs	r3, #3
 800dcc8:	2b08      	cmp	r3, #8
 800dcca:	d866      	bhi.n	800dd9a <_nx_tcp_socket_packet_process+0x2f6>
 800dccc:	a201      	add	r2, pc, #4	; (adr r2, 800dcd4 <_nx_tcp_socket_packet_process+0x230>)
 800dcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd2:	bf00      	nop
 800dcd4:	0800dcf9 	.word	0x0800dcf9
 800dcd8:	0800dd1b 	.word	0x0800dd1b
 800dcdc:	0800dd3b 	.word	0x0800dd3b
 800dce0:	0800dd53 	.word	0x0800dd53
 800dce4:	0800dd69 	.word	0x0800dd69
 800dce8:	0800dd7b 	.word	0x0800dd7b
 800dcec:	0800dd8d 	.word	0x0800dd8d
 800dcf0:	0800dd9b 	.word	0x0800dd9b
 800dcf4:	0800dd5b 	.word	0x0800dd5b

    case  NX_TCP_SYN_SENT:

        /* Call the SYN SENT state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 800dcf8:	f107 030c 	add.w	r3, r7, #12
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f002 f864 	bl	800fdce <_nx_tcp_socket_state_syn_sent>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0a:	2b05      	cmp	r3, #5
 800dd0c:	d147      	bne.n	800dd9e <_nx_tcp_socket_packet_process+0x2fa>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dd0e:	6839      	ldr	r1, [r7, #0]
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f001 fbaf 	bl	800f474 <_nx_tcp_socket_state_data_check>
 800dd16:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800dd18:	e041      	b.n	800dd9e <_nx_tcp_socket_packet_process+0x2fa>

    case  NX_TCP_SYN_RECEIVED:

        /* Call the SYN RECEIVED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 800dd1a:	f107 030c 	add.w	r3, r7, #12
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f001 fff7 	bl	800fd14 <_nx_tcp_socket_state_syn_received>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd2a:	2b05      	cmp	r3, #5
 800dd2c:	d139      	bne.n	800dda2 <_nx_tcp_socket_packet_process+0x2fe>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dd2e:	6839      	ldr	r1, [r7, #0]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f001 fb9f 	bl	800f474 <_nx_tcp_socket_state_data_check>
 800dd36:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800dd38:	e033      	b.n	800dda2 <_nx_tcp_socket_packet_process+0x2fe>

    case  NX_TCP_ESTABLISHED:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f001 fb99 	bl	800f474 <_nx_tcp_socket_state_data_check>
 800dd42:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the ESTABLISHED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_established(socket_ptr);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f001 fecd 	bl	800fae4 <_nx_tcp_socket_state_established>

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f002 f928 	bl	800ffa0 <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 800dd50:	e028      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSE_WAIT:

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f002 f924 	bl	800ffa0 <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 800dd58:	e024      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_LAST_ACK:

        /* Call the LAST ACK state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 800dd5a:	f107 030c 	add.w	r3, r7, #12
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f001 ffad 	bl	800fcc0 <_nx_tcp_socket_state_last_ack>

        /* State processing is complete.  */
        break;
 800dd66:	e01d      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_1:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f001 fb82 	bl	800f474 <_nx_tcp_socket_state_data_check>
 800dd70:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 1 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f001 fefa 	bl	800fb6c <_nx_tcp_socket_state_fin_wait1>

        /* State processing is complete.  */
        break;
 800dd78:	e014      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_2:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f001 fb79 	bl	800f474 <_nx_tcp_socket_state_data_check>
 800dd82:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 2 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f001 ff5d 	bl	800fc44 <_nx_tcp_socket_state_fin_wait2>

        /* State processing is complete.  */
        break;
 800dd8a:	e00b      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSING:

        /* Call the CLOSING state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 800dd8c:	f107 030c 	add.w	r3, r7, #12
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f001 fa72 	bl	800f27c <_nx_tcp_socket_state_closing>

        /* State processing is complete.  */
        break;
 800dd98:	e004      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>

        /* State processing is complete.  */
        break;

    default:
        break;
 800dd9a:	bf00      	nop
 800dd9c:	e002      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>
        break;
 800dd9e:	bf00      	nop
 800dda0:	e000      	b.n	800dda4 <_nx_tcp_socket_packet_process+0x300>
        break;
 800dda2:	bf00      	nop
    }

    /* Check for an URG (urgent) bit set.  */
    /*lint -e{644} suppress variable might not be initialized, since "tcp_header_copy" was initialized. */
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d009      	beq.n	800ddc2 <_nx_tcp_socket_packet_process+0x31e>
    {

        /* Yes, an Urgent bit is set.  */

        /* Pickup the urgent callback function specified when the socket was created.  */
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddb4:	623b      	str	r3, [r7, #32]

        /* Determine if there is an urgent callback function specified.  */
        if (urgent_callback)
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <_nx_tcp_socket_packet_process+0x31e>
        {

            /* Yes, call the application's urgent callback function to alert the application
               of the presence of the urgent bit.  */
            (urgent_callback)(socket_ptr);
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	4798      	blx	r3
        }
    }

    /* Determine if we need to release the packet.  */
    if (!packet_queued)
 800ddc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d102      	bne.n	800ddce <_nx_tcp_socket_packet_process+0x32a>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
 800ddc8:	6838      	ldr	r0, [r7, #0]
 800ddca:	f7fd fbf5 	bl	800b5b8 <_nx_packet_release>
    }
}
 800ddce:	3740      	adds	r7, #64	; 0x40
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bdb0      	pop	{r4, r5, r7, pc}

0800ddd4 <_nx_tcp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_receive(NX_TCP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b08a      	sub	sp, #40	; 0x28
 800ddd8:	af02      	add	r7, sp, #8
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dde6:	61bb      	str	r3, [r7, #24]

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2200      	movs	r2, #0
 800ddec:	601a      	str	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_RECEIVE, socket_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, &trace_event, &trace_timestamp);

    /* Get protection while we look at this socket.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ddf4:	f04f 31ff 	mov.w	r1, #4294967295
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f005 feab 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket is currently bound.  */
    if (!socket_ptr ->  nx_tcp_socket_bound_next)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d107      	bne.n	800de18 <_nx_tcp_socket_receive+0x44>
    {

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800de0e:	4618      	mov	r0, r3
 800de10:	f006 f918 	bl	8014044 <_tx_mutex_put>

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800de14:	2324      	movs	r3, #36	; 0x24
 800de16:	e0c9      	b.n	800dfac <_nx_tcp_socket_receive+0x1d8>
    }

    /* Do not return without data if there is data on the queue. */
    if (!socket_ptr -> nx_tcp_socket_receive_queue_head)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d113      	bne.n	800de4a <_nx_tcp_socket_receive+0x76>
        /* There is no data on the queue. */

        /* Determine if the socket is still in an active state, but also allow
           a receive socket operation if there are still more queued receive
           packets for this socket.  */
        if ((socket_ptr -> nx_tcp_socket_state < NX_TCP_SYN_SENT)   ||
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	2b02      	cmp	r3, #2
 800de28:	d907      	bls.n	800de3a <_nx_tcp_socket_receive+0x66>
            (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSE_WAIT) ||
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if ((socket_ptr -> nx_tcp_socket_state < NX_TCP_SYN_SENT)   ||
 800de2e:	2b06      	cmp	r3, #6
 800de30:	d003      	beq.n	800de3a <_nx_tcp_socket_receive+0x66>
            (socket_ptr -> nx_tcp_socket_state >= NX_TCP_CLOSING))
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSE_WAIT) ||
 800de36:	2b08      	cmp	r3, #8
 800de38:	d907      	bls.n	800de4a <_nx_tcp_socket_receive+0x76>
        {

            /* Release the IP protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800de40:	4618      	mov	r0, r3
 800de42:	f006 f8ff 	bl	8014044 <_tx_mutex_put>

            /* Return an error code.  */
            return(NX_NOT_CONNECTED);
 800de46:	2338      	movs	r3, #56	; 0x38
 800de48:	e0b0      	b.n	800dfac <_nx_tcp_socket_receive+0x1d8>

    /* Pickup the important information from the socket.  */

    /* Attempt to build a pointer to the first packet in the socket's
       receive queue.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_head)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800de50:	2b00      	cmp	r3, #0
 800de52:	d004      	beq.n	800de5e <_nx_tcp_socket_receive+0x8a>
    {

        /* Yes, there is a packet on the receive queue.  Setup a pointer to it and
           its header.  */
        head_packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800de5a:	61fb      	str	r3, [r7, #28]
 800de5c:	e001      	b.n	800de62 <_nx_tcp_socket_receive+0x8e>
    }
    else
    {

        /* Just set the pointers to NULL.  */
        head_packet_ptr =  NX_NULL;
 800de5e:	2300      	movs	r3, #0
 800de60:	61fb      	str	r3, [r7, #28]
    }

    /* Determine if there is a receive packet available.  */
    /*lint -e{923} suppress cast of ULONT to pointer.  */
    if ((head_packet_ptr) && (head_packet_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_PACKET_READY)))
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d073      	beq.n	800df50 <_nx_tcp_socket_receive+0x17c>
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	69db      	ldr	r3, [r3, #28]
 800de6c:	f1b3 3fbb 	cmp.w	r3, #3149642683	; 0xbbbbbbbb
 800de70:	d16e      	bne.n	800df50 <_nx_tcp_socket_receive+0x17c>
    {


        /* Yes, the first packet in the queue is available and has been ACKed.  Remove it
           from the queue and return it to the caller.  */
        if (head_packet_ptr == socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800de78:	69fa      	ldr	r2, [r7, #28]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d108      	bne.n	800de90 <_nx_tcp_socket_receive+0xbc>
        {

            /* Only item in the queue.  Set the head and tail pointers to NULL.  */
            socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800de8e:	e004      	b.n	800de9a <_nx_tcp_socket_receive+0xc6>
        else
        {

            /* Simply update the head pointer to the packet after the current. The tail pointer does not
               need update.  */
            socket_ptr -> nx_tcp_socket_receive_queue_head =  head_packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	6a1a      	ldr	r2, [r3, #32]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        }

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dea0:	1e5a      	subs	r2, r3, #1
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        header_ptr =  (NX_TCP_HEADER *)head_packet_ptr -> nx_packet_prepend_ptr;
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	617b      	str	r3, [r7, #20]

        /* Calculate the header size for this packet.  */
        header_length =  (header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	0f1b      	lsrs	r3, r3, #28
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	613b      	str	r3, [r7, #16]

        /* Adjust the packet prepend pointer and length to position past the TCP header.  */
        head_packet_ptr -> nx_packet_prepend_ptr =  head_packet_ptr -> nx_packet_prepend_ptr + header_length;
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	689a      	ldr	r2, [r3, #8]
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	441a      	add	r2, r3
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	609a      	str	r2, [r3, #8]
        head_packet_ptr -> nx_packet_length =       head_packet_ptr -> nx_packet_length - header_length;
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	1ad2      	subs	r2, r2, r3
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	625a      	str	r2, [r3, #36]	; 0x24

        /* Indicate that this TCP packet is no longer enqueued by marking it again as allocated. This is what
           it was prior to being part of the TCP receive queue.  */
        /*lint -e{923} suppress cast of ULONT to pointer.  */
        head_packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800ded6:	621a      	str	r2, [r3, #32]

        /* Clear the queue next pointer.  */
        head_packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	2200      	movs	r2, #0
 800dedc:	61da      	str	r2, [r3, #28]

        /* Place the packet pointer in the return pointer.  */
        *packet_ptr =  head_packet_ptr;
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	69fa      	ldr	r2, [r7, #28]
 800dee2:	601a      	str	r2, [r3, #0]

        /* Check the receive queue count.  */
        if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d104      	bne.n	800def8 <_nx_tcp_socket_receive+0x124>
        {

            /* Make sure the current receive window is the default window!  */
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	675a      	str	r2, [r3, #116]	; 0x74
 800def6:	e007      	b.n	800df08 <_nx_tcp_socket_receive+0x134>
        }
        else
        {

            /* Increase the receive window size.  */
            socket_ptr -> nx_tcp_socket_rx_window_current += (*packet_ptr) -> nx_packet_length;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df02:	441a      	add	r2, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98. */
        if (((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2)) &&
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df10:	1ad2      	subs	r2, r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df16:	085b      	lsrs	r3, r3, #1
 800df18:	429a      	cmp	r2, r3
 800df1a:	d311      	bcc.n	800df40 <_nx_tcp_socket_receive+0x16c>
            ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_2)))
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if (((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2)) &&
 800df20:	2b05      	cmp	r3, #5
 800df22:	d007      	beq.n	800df34 <_nx_tcp_socket_receive+0x160>
            ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_2)))
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	2b07      	cmp	r3, #7
 800df2a:	d003      	beq.n	800df34 <_nx_tcp_socket_receive+0x160>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df30:	2b08      	cmp	r3, #8
 800df32:	d105      	bne.n	800df40 <_nx_tcp_socket_receive+0x16c>
        {

            /* Send a Window Update.  */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df38:	4619      	mov	r1, r3
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7fe ff92 	bl	800ce64 <_nx_tcp_packet_send_ack>
        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_TCP_SOCKET_RECEIVE, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length, socket_ptr -> nx_tcp_socket_rx_sequence);
#endif /* TX_ENABLE_EVENT_TRACE */

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800df46:	4618      	mov	r0, r3
 800df48:	f006 f87c 	bl	8014044 <_tx_mutex_put>

        /* Return a successful status.  */
        return(NX_SUCCESS);
 800df4c:	2300      	movs	r3, #0
 800df4e:	e02d      	b.n	800dfac <_nx_tcp_socket_receive+0x1d8>
    }
    else if ((wait_option) && (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d023      	beq.n	800df9e <_nx_tcp_socket_receive+0x1ca>
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800df5c:	4b15      	ldr	r3, [pc, #84]	; (800dfb4 <_nx_tcp_socket_receive+0x1e0>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	429a      	cmp	r2, r3
 800df62:	d01c      	beq.n	800df9e <_nx_tcp_socket_receive+0x1ca>
    {

        /* Suspend the thread on this socket's receive queue.  */

        /* Save the return packet pointer address as well.  */
        _tx_thread_current_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800df64:	4b13      	ldr	r3, [pc, #76]	; (800dfb4 <_nx_tcp_socket_receive+0x1e0>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Increment the suspended thread count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count++;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Suspend the thread on the receive queue.  */
        /* Note that the mutex is released inside _nx_tcp_socket_thread_suspend(). */
        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), _nx_tcp_receive_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	4613      	mov	r3, r2
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	490a      	ldr	r1, [pc, #40]	; (800dfb8 <_nx_tcp_socket_receive+0x1e4>)
 800df90:	f002 f8d8 	bl	8010144 <_nx_tcp_socket_thread_suspend>
            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_TCP_SOCKET_RECEIVE, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length, socket_ptr -> nx_tcp_socket_rx_sequence);
        }
#endif /* TX_ENABLE_EVENT_TRACE */
        /* If not, just return the error code.  */
        return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 800df94:	4b07      	ldr	r3, [pc, #28]	; (800dfb4 <_nx_tcp_socket_receive+0x1e0>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df9c:	e006      	b.n	800dfac <_nx_tcp_socket_receive+0x1d8>
    }
    else
    {

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f006 f84d 	bl	8014044 <_tx_mutex_put>

        /* Return an empty receive queue error message.  */
        return(NX_NO_PACKET);
 800dfaa:	2301      	movs	r3, #1
    }
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3720      	adds	r7, #32
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	2000aaf8 	.word	0x2000aaf8
 800dfb8:	0800d311 	.word	0x0800d311

0800dfbc <_nx_tcp_socket_receive_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_receive_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dfca:	60fb      	str	r3, [r7, #12]

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800dfdc:	e012      	b.n	800e004 <_nx_tcp_socket_receive_queue_flush+0x48>
    {

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6a1b      	ldr	r3, [r3, #32]
 800dfe2:	60bb      	str	r3, [r7, #8]

        /* Mark it as allocated so it will be released.  */
        /*lint -e{923} suppress cast of ULONT to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800dfea:	621a      	str	r2, [r3, #32]

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7fd fae3 	bl	800b5b8 <_nx_packet_release>

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	60fb      	str	r3, [r7, #12]

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dffc:	1e5a      	subs	r2, r3, #1
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    while (socket_ptr -> nx_tcp_socket_receive_queue_count)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1e7      	bne.n	800dfde <_nx_tcp_socket_receive_queue_flush+0x22>
    }
}
 800e00e:	bf00      	nop
 800e010:	bf00      	nop
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <_nx_tcp_socket_retransmit>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b097      	sub	sp, #92	; 0x5c
 800e01c:	af04      	add	r7, sp, #16
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d164      	bne.n	800e0f6 <_nx_tcp_socket_retransmit+0xde>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e032:	647b      	str	r3, [r7, #68]	; 0x44

        if (packet_ptr)
 800e034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e036:	2b00      	cmp	r3, #0
 800e038:	d02f      	beq.n	800e09a <_nx_tcp_socket_retransmit+0x82>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800e03a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	613b      	str	r3, [r7, #16]

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	ba1a      	rev	r2, r3
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	60da      	str	r2, [r3, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	ba1a      	rev	r2, r3
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	605a      	str	r2, [r3, #4]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 800e054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e056:	689a      	ldr	r2, [r3, #8]
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	0f1b      	lsrs	r3, r3, #28
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	781a      	ldrb	r2, [r3, #0]
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	2200      	movs	r2, #0
 800e080:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	ba1a      	rev	r2, r3
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	605a      	str	r2, [r3, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	ba1a      	rev	r2, r3
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	60da      	str	r2, [r3, #12]
 800e098:	e005      	b.n	800e0a6 <_nx_tcp_socket_retransmit+0x8e>
        }
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 816b 	beq.w	800e37c <_nx_tcp_socket_retransmit+0x364>

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e0ac:	1c5a      	adds	r2, r3, #1
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e0ba:	1c5a      	adds	r2, r3, #1
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e0ce:	68b9      	ldr	r1, [r7, #8]
 800e0d0:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800e0d4:	fb01 f303 	mul.w	r3, r1, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800e0d8:	409a      	lsls	r2, r3
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	68b8      	ldr	r0, [r7, #8]
 800e0f0:	f7ff f808 	bl	800d104 <_nx_tcp_packet_send_probe>
                                  socket_ptr -> nx_tcp_socket_zero_window_probe_data);

        return;
 800e0f4:	e145      	b.n	800e382 <_nx_tcp_socket_retransmit+0x36a>
    }
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d103      	bne.n	800e108 <_nx_tcp_socket_retransmit+0xf0>
    {

        /* If advertised window isn't zero, reset zero window probe flag. */
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2200      	movs	r2, #0
 800e104:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }

    /* Increment the retry counter only if the receiver window is open. */
    /* Increment the retry counter.  */
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e10e:	1c5a      	adds	r2, r3, #1
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d004      	beq.n	800e126 <_nx_tcp_socket_retransmit+0x10e>
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e122:	2b00      	cmp	r3, #0
 800e124:	d12a      	bne.n	800e17c <_nx_tcp_socket_retransmit+0x164>
    {

        /* Timed out on an outgoing packet.  Enter slow start mode. */
        /* Compute the flight size / 2 value. */
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e12a:	085b      	lsrs	r3, r3, #1
 800e12c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Make sure we have at least 2 * MSS */
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e136:	429a      	cmp	r2, r3
 800e138:	d203      	bcs.n	800e142 <_nx_tcp_socket_retransmit+0x12a>
        {
            window = socket_ptr -> nx_tcp_socket_connect_mss << 1;
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	6a1b      	ldr	r3, [r3, #32]
 800e13e:	005b      	lsls	r3, r3, #1
 800e140:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Set the slow_start_threshold */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e146:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the current window to be MSS size. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	6a1a      	ldr	r2, [r3, #32]
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Determine if this socket needs fast retransmit.  */
        if (need_fast_retransmit == NX_TRUE)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d112      	bne.n	800e17c <_nx_tcp_socket_retransmit+0x164>
        {

            /* Update cwnd to ssthreshold plus 3 * MSS.  */
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	0059      	lsls	r1, r3, #1
 800e160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e162:	440b      	add	r3, r1
 800e164:	441a      	add	r2, r3
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	659a      	str	r2, [r3, #88]	; 0x58

            /* Now TCP is in fast recovery procedure. */
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	2201      	movs	r2, #1
 800e16e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

            /* Update the transmit sequence that enters fast transmit. */
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e176:	1e5a      	subs	r2, r3, #1
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    /* Setup the next timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800e18e:	fb01 f303 	mul.w	r3, r1, r3
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800e192:	409a      	lsls	r2, r3
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Get available size of packet that can be sent. */
    available = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e19e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup the head of the transmit queue.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e1a6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if the packet has been released by the
       application I/O driver.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800e1a8:	e0de      	b.n	800e368 <_nx_tcp_socket_retransmit+0x350>
    {

    /* Update the ACK number in case it has changed since the data was originally transmitted. */
    ULONG          checksum;
    NX_TCP_HEADER *header_ptr;
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	637b      	str	r3, [r7, #52]	; 0x34
    NX_PACKET     *next_ptr;
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    UINT           compute_checksum = 1;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef NX_DISABLE_TCP_TX_CHECKSUM
        compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 800e1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1bc:	3314      	adds	r3, #20
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	f200 80de 	bhi.w	800e380 <_nx_tcp_socket_retransmit+0x368>
            /* This packet can not be sent. */
            break;
        }

        /* Decrease the available size. */
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800e1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	3314      	adds	r3, #20
 800e1ce:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Pickup next packet. */
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800e1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	2b04      	cmp	r3, #4
 800e1dc:	d10a      	bne.n	800e1f4 <_nx_tcp_socket_retransmit+0x1dc>
        {

            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800e1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1e0:	2204      	movs	r2, #4
 800e1e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Get the source and destination addresses. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ea:	3314      	adds	r3, #20
 800e1ec:	63bb      	str	r3, [r7, #56]	; 0x38
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	3318      	adds	r3, #24
 800e1f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif /* FEATURE_NX_IPV6 */

        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800e1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Record the original data.  */
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 800e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	627b      	str	r3, [r7, #36]	; 0x24
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	623b      	str	r3, [r7, #32]
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	61fb      	str	r3, [r7, #28]

        /* Update the ACK number in the TCP header.  */
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	609a      	str	r2, [r3, #8]

        /* Convert to network byte order for checksum */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	ba1a      	rev	r2, r3
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	609a      	str	r2, [r3, #8]
        if (window_size > 0xFFFF)
        {
            window_size = 0xFFFF;
        }
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e222:	61bb      	str	r3, [r7, #24]
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800e22a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800e22e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e230:	60d3      	str	r3, [r2, #12]

        /* Swap the content to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800e232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	ba1a      	rev	r2, r3
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	60da      	str	r2, [r3, #12]

        /* Convert back to host byte order to so we can zero out the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	ba1a      	rev	r2, r3
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	611a      	str	r2, [r3, #16]

        /* Remember the last ACKed sequence and the last reported window size.  */
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	679a      	str	r2, [r3, #120]	; 0x78

        /* Zero out existing checksum before computing new one. */
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	611a      	str	r2, [r3, #16]

        /* Convert back to network byte order to so we can do the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	691b      	ldr	r3, [r3, #16]
 800e264:	ba1a      	rev	r2, r3
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	611a      	str	r2, [r3, #16]


#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e270:	f003 0304 	and.w	r3, r3, #4
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <_nx_tcp_socket_retransmit+0x264>
        {
            compute_checksum = 0;
 800e278:	2300      	movs	r3, #0
 800e27a:	633b      	str	r3, [r7, #48]	; 0x30
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d020      	beq.n	800e2c4 <_nx_tcp_socket_retransmit+0x2ac>
#endif /* defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
        {
            /* Calculate the TCP checksum without protection.  */
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                                packet_ptr -> nx_packet_length,
 800e282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800e286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28c:	2106      	movs	r1, #6
 800e28e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e290:	f7fa fb9e 	bl	80089d0 <_nx_ip_checksum_compute>
 800e294:	4603      	mov	r3, r0
 800e296:	617b      	str	r3, [r7, #20]
                                                source_ip, dest_ip);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	43db      	mvns	r3, r3
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	617b      	str	r3, [r7, #20]

            /* Convert back to host byte order */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	ba1a      	rev	r2, r3
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	611a      	str	r2, [r3, #16]

            /* Move the checksum into header.  */
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	691a      	ldr	r2, [r3, #16]
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	041b      	lsls	r3, r3, #16
 800e2b2:	431a      	orrs	r2, r3
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	611a      	str	r2, [r3, #16]

            /* Convert back to network byte order for transmit. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	ba1a      	rev	r2, r3
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	611a      	str	r2, [r3, #16]
 800e2c2:	e005      	b.n	800e2d0 <_nx_tcp_socket_retransmit+0x2b8>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800e2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c8:	f043 0204 	orr.w	r2, r3, #4
 800e2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2ce:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

        /* Determine if the retransmitted packet is identical to the original packet.
           RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800e2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d10d      	bne.n	800e2f6 <_nx_tcp_socket_retransmit+0x2de>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2dc:	68db      	ldr	r3, [r3, #12]
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800e2de:	6a3a      	ldr	r2, [r7, #32]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d108      	bne.n	800e2f6 <_nx_tcp_socket_retransmit+0x2de>
            (header_ptr -> nx_tcp_header_word_4 == original_header_word_4))
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	691b      	ldr	r3, [r3, #16]
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800e2e8:	69fa      	ldr	r2, [r7, #28]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d103      	bne.n	800e2f6 <_nx_tcp_socket_retransmit+0x2de>
        {

            /* Yes, identical packet, update the identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 800e2ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        }


#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP retransmit count.  */
        ip_ptr -> nx_ip_tcp_retransmit_packets++;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e2fc:	1c5a      	adds	r2, r3, #1
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Increment the TCP retransmit count for the socket.  */
        socket_ptr -> nx_tcp_socket_retransmit_packets++;
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RETRY, ip_ptr, socket_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_timeout_retries, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800e312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e314:	2200      	movs	r2, #0
 800e316:	61da      	str	r2, [r3, #28]
        /* Yes, the driver has finished with the packet at the head of the
           transmit sent list... so it can be sent again!  */

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	695b      	ldr	r3, [r3, #20]
 800e31c:	2b04      	cmp	r3, #4
 800e31e:	d118      	bne.n	800e352 <_nx_tcp_socket_retransmit+0x33a>
        {
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	6998      	ldr	r0, [r3, #24]
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
                               socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
                               socket_ptr -> nx_tcp_socket_type_of_service,
                               socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800e336:	68b9      	ldr	r1, [r7, #8]
 800e338:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800e33a:	9103      	str	r1, [sp, #12]
 800e33c:	9202      	str	r2, [sp, #8]
 800e33e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800e342:	9201      	str	r2, [sp, #4]
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	4623      	mov	r3, r4
 800e348:	4602      	mov	r2, r0
 800e34a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7fb fd65 	bl	8009e1c <_nx_ip_packet_send>
#endif /* FEATURE_NX_IPV6 */

        /* Move to next packet. */
        /* During fast recovery, only one packet is retransmitted at once. */
        /* After a timeout, the sending data can be at most one SMSS. */
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800e352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e354:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800e358:	d013      	beq.n	800e382 <_nx_tcp_socket_retransmit+0x36a>
            (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800e360:	2b01      	cmp	r3, #1
 800e362:	d00e      	beq.n	800e382 <_nx_tcp_socket_retransmit+0x36a>
        {
            break;
        }
        else
        {
            packet_ptr = next_ptr;
 800e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e366:	647b      	str	r3, [r7, #68]	; 0x44
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800e368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d009      	beq.n	800e382 <_nx_tcp_socket_retransmit+0x36a>
 800e36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e370:	69db      	ldr	r3, [r3, #28]
 800e372:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800e376:	f43f af18 	beq.w	800e1aa <_nx_tcp_socket_retransmit+0x192>
 800e37a:	e002      	b.n	800e382 <_nx_tcp_socket_retransmit+0x36a>
            return;
 800e37c:	bf00      	nop
 800e37e:	e000      	b.n	800e382 <_nx_tcp_socket_retransmit+0x36a>
            break;
 800e380:	bf00      	nop
        }
    }
}
 800e382:	374c      	adds	r7, #76	; 0x4c
 800e384:	46bd      	mov	sp, r7
 800e386:	bd90      	pop	{r4, r7, pc}

0800e388 <_nx_tcp_socket_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_send(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr, ULONG wait_option)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]

    return(_nx_tcp_socket_send_internal(socket_ptr, packet_ptr, wait_option));
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	68b9      	ldr	r1, [r7, #8]
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f000 f805 	bl	800e3a8 <_nx_tcp_socket_send_internal>
 800e39e:	4603      	mov	r3, r0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <_nx_tcp_socket_send_internal>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_send_internal(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr, ULONG wait_option)
{
 800e3a8:	b5b0      	push	{r4, r5, r7, lr}
 800e3aa:	b0aa      	sub	sp, #168	; 0xa8
 800e3ac:	af06      	add	r7, sp, #24
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

NX_IP          *ip_ptr;
NX_PACKET_POOL *pool_ptr;
NX_TCP_HEADER  *header_ptr;
ULONG           checksum = 0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
ULONG           sequence_number;
ULONG           tx_window_current;
ULONG           remaining_bytes;
ULONG          *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	67fb      	str	r3, [r7, #124]	; 0x7c
ULONG           send_mss;
NX_PACKET      *send_packet = packet_ptr;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	61bb      	str	r3, [r7, #24]
NX_PACKET      *current_packet;
UCHAR          *current_ptr;
ULONG           data_offset = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	673b      	str	r3, [r7, #112]	; 0x70
ULONG           source_data_size;
ULONG           copy_size;
UINT            data_left;
UINT            ret;
UCHAR           preempted = NX_FALSE;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
UCHAR           adjust_packet;
UINT            old_threshold = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	617b      	str	r3, [r7, #20]
ULONG           window_size;
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Check packet length. */
    if (packet_ptr -> nx_packet_length == 0)
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d102      	bne.n	800e3e8 <_nx_tcp_socket_send_internal+0x40>
    {

        /* Empty packet is not allowed. */
        return(NX_INVALID_PACKET);
 800e3e2:	2312      	movs	r3, #18
 800e3e4:	f000 bc4f 	b.w	800ec86 <_nx_tcp_socket_send_internal+0x8de>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3e8:	f3ef 8310 	mrs	r3, PRIMASK
 800e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e3f0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3f2:	b672      	cpsid	i
    return(int_posture);
 800e3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    /* Lockout interrupts.  */
    TX_DISABLE
 800e3f6:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if the socket is currently bound.  */
    if (!socket_ptr ->  nx_tcp_socket_bound_next)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d108      	bne.n	800e414 <_nx_tcp_socket_send_internal+0x6c>
 800e402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e404:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	f383 8810 	msr	PRIMASK, r3
}
 800e40c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800e40e:	2324      	movs	r3, #36	; 0x24
 800e410:	f000 bc39 	b.w	800ec86 <_nx_tcp_socket_send_internal+0x8de>
    }

    /* Check if the connection is in progress. */
    if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) || (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e418:	2b03      	cmp	r3, #3
 800e41a:	d003      	beq.n	800e424 <_nx_tcp_socket_send_internal+0x7c>
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e420:	2b04      	cmp	r3, #4
 800e422:	d104      	bne.n	800e42e <_nx_tcp_socket_send_internal+0x86>
    {

        /* Yes it it. Wait for establish state. */
        _nx_tcp_socket_state_wait(socket_ptr, NX_TCP_ESTABLISHED, wait_option);
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	2105      	movs	r1, #5
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f001 fe19 	bl	8010060 <_nx_tcp_socket_state_wait>
    }

    /* Check for the socket being in an established state.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT))
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e432:	2b05      	cmp	r3, #5
 800e434:	d00c      	beq.n	800e450 <_nx_tcp_socket_send_internal+0xa8>
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e43a:	2b06      	cmp	r3, #6
 800e43c:	d008      	beq.n	800e450 <_nx_tcp_socket_send_internal+0xa8>
 800e43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e440:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	f383 8810 	msr	PRIMASK, r3
}
 800e448:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not connected, return an error message.  */
        return(NX_NOT_CONNECTED);
 800e44a:	2338      	movs	r3, #56	; 0x38
 800e44c:	f000 bc1b 	b.w	800ec86 <_nx_tcp_socket_send_internal+0x8de>
    }

    /* Pickup the important information from the socket.  */

    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e456:	65bb      	str	r3, [r7, #88]	; 0x58
 800e458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e45a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	f383 8810 	msr	PRIMASK, r3
}
 800e462:	bf00      	nop

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	2b04      	cmp	r3, #4
 800e46a:	d10d      	bne.n	800e488 <_nx_tcp_socket_send_internal+0xe0>
    {

        /* Set the source address. */
        source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e470:	3314      	adds	r3, #20
 800e472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Set the destinatino address. */
        dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3318      	adds	r3, #24
 800e47a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	631a      	str	r2, [r3, #48]	; 0x30

        /* Calculate the data offset required by fragmented TCP packet. */
        data_offset = NX_PHYSICAL_HEADER + sizeof(NX_IPV4_HEADER) + sizeof(NX_TCP_HEADER);
 800e484:	2338      	movs	r3, #56	; 0x38
 800e486:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_SOCKET_SEND, socket_ptr, packet_ptr, packet_ptr -> nx_packet_length, socket_ptr -> nx_tcp_socket_tx_sequence, NX_TRACE_TCP_EVENTS, 0, 0);

    /* Get the max mss this socket could send  */
    send_mss = socket_ptr -> nx_tcp_socket_connect_mss;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6a1b      	ldr	r3, [r3, #32]
 800e48c:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get original pool. */
    pool_ptr = packet_ptr -> nx_packet_pool_owner;
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	653b      	str	r3, [r7, #80]	; 0x50
    /* Loop to send the packet. */
    for (;;)
    {

        /* Place protection while we check the sequence number for the new TCP packet.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e496:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e49a:	f04f 31ff 	mov.w	r1, #4294967295
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f005 fb58 	bl	8013b54 <_tx_mutex_get>

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d91e      	bls.n	800e4ee <_nx_tcp_socket_send_internal+0x146>
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d003      	beq.n	800e4c8 <_nx_tcp_socket_send_internal+0x120>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d116      	bne.n	800e4f6 <_nx_tcp_socket_send_internal+0x14e>
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6a1b      	ldr	r3, [r3, #32]
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e4d2:	4413      	add	r3, r2
 800e4d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Make sure the tx_window_current is less or equal to swnd. */
                if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_window_advertised)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d908      	bls.n	800e4f6 <_nx_tcp_socket_send_internal+0x14e>
                {
                    tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e4ec:	e003      	b.n	800e4f6 <_nx_tcp_socket_send_internal+0x14e>
                }
            }
        }
        else
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d907      	bls.n	800e512 <_nx_tcp_socket_send_internal+0x16a>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e506:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e510:	e002      	b.n	800e518 <_nx_tcp_socket_send_internal+0x170>
        }
        else    /* Set tx_window_current to zero. */
        {
            tx_window_current = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* Pick up the min(tx_window, send_mss). */
        if (tx_window_current > send_mss)
 800e518:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e51c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e51e:	429a      	cmp	r2, r3
 800e520:	d902      	bls.n	800e528 <_nx_tcp_socket_send_internal+0x180>
        {
            tx_window_current = send_mss;
 800e522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }


        /* Store the data that is left. */
        data_left = packet_ptr -> nx_packet_length;
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Check whether data can be sent. */
        if ((tx_window_current != 0) && (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 800e52e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e532:	2b00      	cmp	r3, #0
 800e534:	f000 8306 	beq.w	800eb44 <_nx_tcp_socket_send_internal+0x79c>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e544:	429a      	cmp	r2, r3
 800e546:	f080 82fd 	bcs.w	800eb44 <_nx_tcp_socket_send_internal+0x79c>
        {

            /* Whether to adjust the packet? */
            if (packet_ptr -> nx_packet_length > tx_window_current)
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e552:	429a      	cmp	r2, r3
 800e554:	d203      	bcs.n	800e55e <_nx_tcp_socket_send_internal+0x1b6>
            {

                /* Packet need to be fragmented. */
                adjust_packet = NX_TRUE;
 800e556:	2301      	movs	r3, #1
 800e558:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800e55c:	e04c      	b.n	800e5f8 <_nx_tcp_socket_send_internal+0x250>
            }
            /*lint -e(923) suppress cast of pointer to ULONG.  */
            else if (((ALIGN_TYPE)packet_ptr -> nx_packet_prepend_ptr) & 3)
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	f003 0303 	and.w	r3, r3, #3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <_nx_tcp_socket_send_internal+0x1ca>
            {

                /* Starting address of TCP header need to be four bytes aligned. */
                adjust_packet = NX_TRUE;
 800e56a:	2301      	movs	r3, #1
 800e56c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800e570:	e042      	b.n	800e5f8 <_nx_tcp_socket_send_internal+0x250>
            }
#ifndef NX_DISABLE_PACKET_CHAIN
            else if ((packet_ptr -> nx_packet_next != NX_NULL) &&
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00f      	beq.n	800e59a <_nx_tcp_socket_send_internal+0x1f2>
                     ((packet_ptr -> nx_packet_length + data_offset) < pool_ptr -> nx_packet_pool_payload_size) &&
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e57e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e580:	441a      	add	r2, r3
 800e582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            else if ((packet_ptr -> nx_packet_next != NX_NULL) &&
 800e586:	429a      	cmp	r2, r3
 800e588:	d207      	bcs.n	800e59a <_nx_tcp_socket_send_internal+0x1f2>
                     (pool_ptr -> nx_packet_pool_available > 0))
 800e58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e58c:	689b      	ldr	r3, [r3, #8]
                     ((packet_ptr -> nx_packet_length + data_offset) < pool_ptr -> nx_packet_pool_payload_size) &&
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d003      	beq.n	800e59a <_nx_tcp_socket_send_internal+0x1f2>
            {

                /* All data can be sent in one packet but they are in chained packets. */
                adjust_packet = NX_TRUE;
 800e592:	2301      	movs	r3, #1
 800e594:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800e598:	e02e      	b.n	800e5f8 <_nx_tcp_socket_send_internal+0x250>
            }
            else if (packet_ptr -> nx_packet_prepend_ptr == packet_ptr -> nx_packet_append_ptr)
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d125      	bne.n	800e5f2 <_nx_tcp_socket_send_internal+0x24a>
            {

                /* Loop to find the first byte of data. */
                current_packet = packet_ptr -> nx_packet_next;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	67bb      	str	r3, [r7, #120]	; 0x78

                while ((current_packet != NX_NULL) && (current_packet -> nx_packet_prepend_ptr == current_packet -> nx_packet_append_ptr))
 800e5ac:	e002      	b.n	800e5b4 <_nx_tcp_socket_send_internal+0x20c>
                {

                    /* Move to next packet. */
                    current_packet = current_packet -> nx_packet_next;
 800e5ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	67bb      	str	r3, [r7, #120]	; 0x78
                while ((current_packet != NX_NULL) && (current_packet -> nx_packet_prepend_ptr == current_packet -> nx_packet_append_ptr))
 800e5b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d005      	beq.n	800e5c6 <_nx_tcp_socket_send_internal+0x21e>
 800e5ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5bc:	689a      	ldr	r2, [r3, #8]
 800e5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d0f3      	beq.n	800e5ae <_nx_tcp_socket_send_internal+0x206>
                }

                /* packet length is not 0. Therefore the packet chain is expected to contain data. */
                NX_ASSERT(current_packet != NX_NULL);
 800e5c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d104      	bne.n	800e5d6 <_nx_tcp_socket_send_internal+0x22e>
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	f006 fcd8 	bl	8014f84 <_tx_thread_sleep>
 800e5d4:	e7fa      	b.n	800e5cc <_nx_tcp_socket_send_internal+0x224>

                /*lint -e{923} suppress cast of pointer to ULONG.  */
                if (((ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr) & 3)
 800e5d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	f003 0303 	and.w	r3, r3, #3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d003      	beq.n	800e5ea <_nx_tcp_socket_send_internal+0x242>
                {

                    /* Starting address of TCP data need to be four bytes aligned. */
                    adjust_packet = NX_TRUE;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800e5e8:	e006      	b.n	800e5f8 <_nx_tcp_socket_send_internal+0x250>
                }
                else
                {

                    /* Packet can be sent directly. */
                    adjust_packet = NX_FALSE;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800e5f0:	e002      	b.n	800e5f8 <_nx_tcp_socket_send_internal+0x250>
#endif /* NX_DISABLE_PACKET_CHAIN */
            else
            {

                /* Packet can be sent directly. */
                adjust_packet = NX_FALSE;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            }

            /* Adjust the packet? */
            if (adjust_packet)
 800e5f8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f000 80c1 	beq.w	800e784 <_nx_tcp_socket_send_internal+0x3dc>
            {

                /* Yes. Obtain the size of the packet can be sent. */
                if (packet_ptr -> nx_packet_length > tx_window_current)
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e606:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d204      	bcs.n	800e618 <_nx_tcp_socket_send_internal+0x270>
                {
                    remaining_bytes = tx_window_current;
 800e60e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e616:	e003      	b.n	800e620 <_nx_tcp_socket_send_internal+0x278>
                }
                else
                {
                    remaining_bytes = packet_ptr -> nx_packet_length;
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                }

                /* Points to the source packet. */
                current_packet = packet_ptr;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Mark the beginning of data. */
                current_ptr = packet_ptr -> nx_packet_prepend_ptr;
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	689b      	ldr	r3, [r3, #8]
 800e628:	677b      	str	r3, [r7, #116]	; 0x74

                /* Release the protection.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e62a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e62c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e630:	4618      	mov	r0, r3
 800e632:	f005 fd07 	bl	8014044 <_tx_mutex_put>

                /* Obtain a new segmentation. */
                ret = _nx_packet_allocate(pool_ptr, &send_packet,
 800e636:	f107 0118 	add.w	r1, r7, #24
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e63e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e640:	f7fc fb26 	bl	800ac90 <_nx_packet_allocate>
 800e644:	64b8      	str	r0, [r7, #72]	; 0x48
                                          data_offset, wait_option);

                if (ret != NX_SUCCESS)
 800e646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00d      	beq.n	800e668 <_nx_tcp_socket_send_internal+0x2c0>
                {

                    /* Restore preemption? */
                    if (preempted == NX_TRUE)
 800e64c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e650:	2b01      	cmp	r3, #1
 800e652:	d107      	bne.n	800e664 <_nx_tcp_socket_send_internal+0x2bc>
                    {

                        /*lint -e{644} -e{530} suppress variable might not be initialized, since "old_threshold" was initialized when preempted was set to NX_TRUE. */
                        tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800e654:	4b9d      	ldr	r3, [pc, #628]	; (800e8cc <_nx_tcp_socket_send_internal+0x524>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	6979      	ldr	r1, [r7, #20]
 800e65a:	f107 0214 	add.w	r2, r7, #20
 800e65e:	4618      	mov	r0, r3
 800e660:	f006 fae6 	bl	8014c30 <_tx_thread_preemption_change>
                    }

                    /* Packet allocate failure. Return.*/
                    return(ret);
 800e664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e666:	e30e      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
                }

                /* Regain exclusive access to IP instance. */
                tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e66a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e66e:	f04f 31ff 	mov.w	r1, #4294967295
 800e672:	4618      	mov	r0, r3
 800e674:	f005 fa6e 	bl	8013b54 <_tx_mutex_get>

                /* Add debug information. */
                NX_PACKET_DEBUG(__FILE__, __LINE__, send_packet);

                /* Loop through the entire source packet. */
                while (remaining_bytes)
 800e678:	e079      	b.n	800e76e <_nx_tcp_socket_send_internal+0x3c6>
                {

                    /* Figure out whether or not the source packet still contains data. */
                    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                    source_data_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_ptr);
 800e67a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e67c:	68da      	ldr	r2, [r3, #12]
 800e67e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	66fb      	str	r3, [r7, #108]	; 0x6c
                    while (source_data_size == 0)
 800e684:	e025      	b.n	800e6d2 <_nx_tcp_socket_send_internal+0x32a>
                    {

#ifndef NX_DISABLE_PACKET_CHAIN
                        /* The current buffer is exhausted.  Move to the next buffer on the source packet chain. */
                        current_packet = current_packet -> nx_packet_next;
 800e686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	67bb      	str	r3, [r7, #120]	; 0x78

                        if (current_packet == NX_NULL)
 800e68c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d117      	bne.n	800e6c2 <_nx_tcp_socket_send_internal+0x31a>
                        {
#endif /* NX_DISABLE_PACKET_CHAIN */

                            /* Restore preemption? */
                            if (preempted == NX_TRUE)
 800e692:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e696:	2b01      	cmp	r3, #1
 800e698:	d107      	bne.n	800e6aa <_nx_tcp_socket_send_internal+0x302>
                            {
                                tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800e69a:	4b8c      	ldr	r3, [pc, #560]	; (800e8cc <_nx_tcp_socket_send_internal+0x524>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6979      	ldr	r1, [r7, #20]
 800e6a0:	f107 0214 	add.w	r2, r7, #20
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f006 fac3 	bl	8014c30 <_tx_thread_preemption_change>
                            }

                            /* No more data in the source packet. However there are still bytes remaining even though
                               the packet is not done yet. This is an unrecoverable error. */
                            /*lint -e{644} suppress variable might not be initialized, since "send_packet" was initialized in _nx_packet_allocate. */
                            _nx_packet_release(send_packet);
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fc ff83 	bl	800b5b8 <_nx_packet_release>

                            /* Release the protection.  */
                            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e6b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f005 fcc3 	bl	8014044 <_tx_mutex_put>

                            /* Add debug information. */
                            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

                            return(NX_INVALID_PACKET);
 800e6be:	2312      	movs	r3, #18
 800e6c0:	e2e1      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
#ifndef NX_DISABLE_PACKET_CHAIN
                        }

                        /* Mark the beginning of data in the next packet. */
                        current_ptr = current_packet -> nx_packet_prepend_ptr;
 800e6c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6c4:	689b      	ldr	r3, [r3, #8]
 800e6c6:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Compute the amount of data present in this source buffer. */
                        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                        source_data_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_ptr);
 800e6c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6ca:	68da      	ldr	r2, [r3, #12]
 800e6cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	66fb      	str	r3, [r7, #108]	; 0x6c
                    while (source_data_size == 0)
 800e6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d0d6      	beq.n	800e686 <_nx_tcp_socket_send_internal+0x2de>
#endif /* NX_DISABLE_PACKET_CHAIN */
                    }


                    /* copy_size = min(send_packet, source) */
                    if (remaining_bytes > source_data_size)
 800e6d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d902      	bls.n	800e6e8 <_nx_tcp_socket_send_internal+0x340>
                    {
                        copy_size = source_data_size;
 800e6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6e6:	e002      	b.n	800e6ee <_nx_tcp_socket_send_internal+0x346>
                    }
                    else
                    {
                        copy_size = remaining_bytes;
 800e6e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6ec:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Release the mutex before a blocking call. */
                    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e6ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6f0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f005 fca5 	bl	8014044 <_tx_mutex_put>

                    /* Append data. */
                    ret = _nx_packet_data_append(send_packet, current_ptr, copy_size,
 800e6fa:	69b8      	ldr	r0, [r7, #24]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e702:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e704:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e706:	f7fc fc1d 	bl	800af44 <_nx_packet_data_append>
 800e70a:	64b8      	str	r0, [r7, #72]	; 0x48
                                                 pool_ptr, wait_option);

                    /* Regain exclusive access to IP instance. */
                    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e70c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e70e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e712:	f04f 31ff 	mov.w	r1, #4294967295
 800e716:	4618      	mov	r0, r3
 800e718:	f005 fa1c 	bl	8013b54 <_tx_mutex_get>

                    /* Check for errors with data append. */
                    if (ret != NX_SUCCESS)
 800e71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d01b      	beq.n	800e75a <_nx_tcp_socket_send_internal+0x3b2>
                    {

                        /* Append failed. */
                        if (send_packet -> nx_packet_length == 0)
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e726:	2b00      	cmp	r3, #0
 800e728:	d126      	bne.n	800e778 <_nx_tcp_socket_send_internal+0x3d0>
                        {

                            /* The packet is empty, return. */
                            /* Restore preemption? */
                            if (preempted == NX_TRUE)
 800e72a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d107      	bne.n	800e742 <_nx_tcp_socket_send_internal+0x39a>
                            {

                                /*lint -e{644} -e{530} suppress variable might not be initialized, since "old_threshold" was initialized when preempted was set to NX_TRUE. */
                                tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800e732:	4b66      	ldr	r3, [pc, #408]	; (800e8cc <_nx_tcp_socket_send_internal+0x524>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	6979      	ldr	r1, [r7, #20]
 800e738:	f107 0214 	add.w	r2, r7, #20
 800e73c:	4618      	mov	r0, r3
 800e73e:	f006 fa77 	bl	8014c30 <_tx_thread_preemption_change>
                            }

                            /* Release the protection.  */
                            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e744:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e748:	4618      	mov	r0, r3
 800e74a:	f005 fc7b 	bl	8014044 <_tx_mutex_put>

                            /* Release the packet. */
                            _nx_packet_release(send_packet);
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	4618      	mov	r0, r3
 800e752:	f7fc ff31 	bl	800b5b8 <_nx_packet_release>

                            /* Packet allocate failure. Return.*/
                            return(ret);
 800e756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e758:	e295      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
                        /* Partial data can be sent. Just break. */
                        break;
                    }

                    /* Reduce the remaining_bytes counter by the amount being copied over. */
                    remaining_bytes -= copy_size;
 800e75a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e75e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                    /* Advance the prepend ptr on the source buffer, by the amount being copied. */
                    current_ptr += copy_size;
 800e766:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e76a:	4413      	add	r3, r2
 800e76c:	677b      	str	r3, [r7, #116]	; 0x74
                while (remaining_bytes)
 800e76e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e772:	2b00      	cmp	r3, #0
 800e774:	d181      	bne.n	800e67a <_nx_tcp_socket_send_internal+0x2d2>
 800e776:	e000      	b.n	800e77a <_nx_tcp_socket_send_internal+0x3d2>
                        break;
 800e778:	bf00      	nop
                }

                send_packet -> nx_packet_address = packet_ptr -> nx_packet_address;
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e780:	631a      	str	r2, [r3, #48]	; 0x30
 800e782:	e001      	b.n	800e788 <_nx_tcp_socket_send_internal+0x3e0>
            }
            else
            {

                /* Send the packet directly. */
                send_packet = packet_ptr;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	61bb      	str	r3, [r7, #24]
            }

            /* Now the send_packet can be sent. */
            /* Set IP version. */
            send_packet -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	695a      	ldr	r2, [r3, #20]
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	b2d2      	uxtb	r2, r2
 800e790:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#ifdef NX_IPSEC_ENABLE
            send_packet -> nx_packet_ipsec_sa_ptr = socket_ptr -> nx_tcp_socket_egress_sa;
#endif /* NX_IPSEC_ENABLE */

            /* Prepend the TCP header to the packet.  First, make room for the TCP header.  */
            send_packet -> nx_packet_prepend_ptr =  send_packet -> nx_packet_prepend_ptr - sizeof(NX_TCP_HEADER);
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	689a      	ldr	r2, [r3, #8]
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	3a14      	subs	r2, #20
 800e79c:	609a      	str	r2, [r3, #8]

            /* Add the length of the TCP header.  */
            send_packet -> nx_packet_length =  send_packet -> nx_packet_length + (ULONG)sizeof(NX_TCP_HEADER);
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	3214      	adds	r2, #20
 800e7a6:	625a      	str	r2, [r3, #36]	; 0x24

            /* Pickup the pointer to the head of the TCP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            header_ptr =  (NX_TCP_HEADER *)send_packet -> nx_packet_prepend_ptr;
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	647b      	str	r3, [r7, #68]	; 0x44

            /* Build the output request in the TCP header.  */
            header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	041a      	lsls	r2, r3, #16
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	69db      	ldr	r3, [r3, #28]
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7bc:	601a      	str	r2, [r3, #0]
            header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7c4:	609a      	str	r2, [r3, #8]
            if (window_size > 0xFFFF)
            {
                window_size = 0xFFFF;
            }
#else
            window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ca:	643b      	str	r3, [r7, #64]	; 0x40
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

            header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 800e7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ce:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800e7d2:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800e7d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7d8:	60d3      	str	r3, [r2, #12]
            header_ptr -> nx_tcp_header_word_4 =        0;
 800e7da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7dc:	2200      	movs	r2, #0
 800e7de:	611a      	str	r2, [r3, #16]

            /* Remember the last ACKed sequence and the last reported window size.  */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800e7f0:	4b37      	ldr	r3, [pc, #220]	; (800e8d0 <_nx_tcp_socket_send_internal+0x528>)
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	649a      	str	r2, [r3, #72]	; 0x48

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the TCP header.  */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_0);
 800e7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	ba1a      	rev	r2, r3
 800e7fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e800:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 800e802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	ba1a      	rev	r2, r3
 800e808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e80a:	609a      	str	r2, [r3, #8]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800e80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	ba1a      	rev	r2, r3
 800e812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e814:	60da      	str	r2, [r3, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800e816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	ba1a      	rev	r2, r3
 800e81c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e81e:	611a      	str	r2, [r3, #16]

            /* Release the protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e822:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e826:	4618      	mov	r0, r3
 800e828:	f005 fc0c 	bl	8014044 <_tx_mutex_put>

            /* Pickup the current transmit sequence number.  */
            header_ptr -> nx_tcp_sequence_number =  socket_ptr -> nx_tcp_socket_tx_sequence;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e832:	605a      	str	r2, [r3, #4]
            sequence_number =  header_ptr -> nx_tcp_sequence_number;
 800e834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Swap the headers for endianness. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800e83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	ba1a      	rev	r2, r3
 800e840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e842:	605a      	str	r2, [r3, #4]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e84a:	f003 0304 	and.w	r3, r3, #4
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d001      	beq.n	800e856 <_nx_tcp_socket_send_internal+0x4ae>
            {
                compute_checksum = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	663b      	str	r3, [r7, #96]	; 0x60
                compute_checksum = 1;
            }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
            if (compute_checksum)
 800e856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d013      	beq.n	800e884 <_nx_tcp_socket_send_internal+0x4dc>
#endif /* defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
            {
                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(send_packet, NX_PROTOCOL_TCP,
 800e85c:	69b8      	ldr	r0, [r7, #24]
                                                    (UINT)send_packet -> nx_packet_length,
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum =  _nx_ip_checksum_compute(send_packet, NX_PROTOCOL_TCP,
 800e862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e86a:	2106      	movs	r1, #6
 800e86c:	f7fa f8b0 	bl	80089d0 <_nx_ip_checksum_compute>
 800e870:	4603      	mov	r3, r0
 800e872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                                                    source_ip, dest_ip);
                checksum = ~checksum & NX_LOWER_16_MASK;
 800e876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e87a:	43db      	mvns	r3, r3
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e882:	e005      	b.n	800e890 <_nx_tcp_socket_send_internal+0x4e8>
            }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            else
            {
                send_packet -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	f042 0204 	orr.w	r2, r2, #4
 800e88e:	639a      	str	r2, [r3, #56]	; 0x38
            }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

            /* Place protection while we check the sequence number for the new TCP packet.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e892:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e896:	f04f 31ff 	mov.w	r1, #4294967295
 800e89a:	4618      	mov	r0, r3
 800e89c:	f005 f95a 	bl	8013b54 <_tx_mutex_get>

            /* Determine if the sequence number is the same.  */
            if (sequence_number != socket_ptr -> nx_tcp_socket_tx_sequence)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d014      	beq.n	800e8d4 <_nx_tcp_socket_send_internal+0x52c>
            {

                /* Another transmit on this socket took place and changed the sequence.  We need to
                   recalculate the checksum with a new sequence number.  Release protection and
                   just resume the loop.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e8aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8ac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f005 fbc7 	bl	8014044 <_tx_mutex_put>

                /* Release the packet when the sequence is changed. */
                if (send_packet != packet_ptr)
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	f000 81e1 	beq.w	800ec82 <_nx_tcp_socket_send_internal+0x8da>
                {
                    _nx_packet_release(send_packet);
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fc fe78 	bl	800b5b8 <_nx_packet_release>
                }
                continue;
 800e8c8:	e1db      	b.n	800ec82 <_nx_tcp_socket_send_internal+0x8da>
 800e8ca:	bf00      	nop
 800e8cc:	2000aaf8 	.word	0x2000aaf8
 800e8d0:	2000aa24 	.word	0x2000aa24
            }

            /* Check for the socket being in an established state.  It's possible the connection could have gone
               away during the TCP checksum calculation above.  */
            if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSE_WAIT))
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d8:	2b05      	cmp	r3, #5
 800e8da:	d01f      	beq.n	800e91c <_nx_tcp_socket_send_internal+0x574>
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e0:	2b06      	cmp	r3, #6
 800e8e2:	d01b      	beq.n	800e91c <_nx_tcp_socket_send_internal+0x574>
            {

                /* Restore preemption? */
                if (preempted == NX_TRUE)
 800e8e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d107      	bne.n	800e8fc <_nx_tcp_socket_send_internal+0x554>
                {
                    tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800e8ec:	4b94      	ldr	r3, [pc, #592]	; (800eb40 <_nx_tcp_socket_send_internal+0x798>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6979      	ldr	r1, [r7, #20]
 800e8f2:	f107 0214 	add.w	r2, r7, #20
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f006 f99a 	bl	8014c30 <_tx_thread_preemption_change>
                }

                /* Release protection.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e8fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e902:	4618      	mov	r0, r3
 800e904:	f005 fb9e 	bl	8014044 <_tx_mutex_put>

                /* Release the packet when the sequence is changed. */
                if (send_packet != packet_ptr)
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d003      	beq.n	800e918 <_nx_tcp_socket_send_internal+0x570>
                {
                    _nx_packet_release(send_packet);
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	4618      	mov	r0, r3
 800e914:	f7fc fe50 	bl	800b5b8 <_nx_packet_release>

                /* Add debug information. */
                NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

                /* Socket is not connected, return an error message.  */
                return(NX_NOT_CONNECTED);
 800e918:	2338      	movs	r3, #56	; 0x38
 800e91a:	e1b4      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e91c:	f3ef 8310 	mrs	r3, PRIMASK
 800e920:	623b      	str	r3, [r7, #32]
    return(posture);
 800e922:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e924:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e926:	b672      	cpsid	i
    return(int_posture);
 800e928:	69fb      	ldr	r3, [r7, #28]
            }

            /* Disable interrupts.  */
            TX_DISABLE
 800e92a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Adjust the transmit sequence number to reflect the output data.  */
            socket_ptr -> nx_tcp_socket_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence +
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            socket_ptr -> nx_tcp_socket_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence +
 800e934:	4413      	add	r3, r2
 800e936:	f1a3 0214 	sub.w	r2, r3, #20
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	63da      	str	r2, [r3, #60]	; 0x3c
 800e93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e940:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e944:	f383 8810 	msr	PRIMASK, r3
}
 800e948:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Reset zero window probe flag. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            /* Move the checksum into header.  */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800e952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	ba1a      	rev	r2, r3
 800e958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e95a:	611a      	str	r2, [r3, #16]
            header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 800e95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e960:	041a      	lsls	r2, r3, #16
 800e962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e964:	611a      	str	r2, [r3, #16]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800e966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	ba1a      	rev	r2, r3
 800e96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e96e:	611a      	str	r2, [r3, #16]

            /* Place the packet on the sent list.  */
            data_left -= (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	3314      	adds	r3, #20
 800e97a:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (socket_ptr -> nx_tcp_socket_transmit_sent_head)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e982:	2b00      	cmp	r3, #0
 800e984:	d009      	beq.n	800e99a <_nx_tcp_socket_send_internal+0x5f2>
            {

                /* Yes, other packets are on the list already.  Just add this one to the tail.  */
                (socket_ptr -> nx_tcp_socket_transmit_sent_tail) -> nx_packet_union_next.nx_packet_tcp_queue_next =  send_packet;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e98c:	69ba      	ldr	r2, [r7, #24]
 800e98e:	621a      	str	r2, [r3, #32]
                socket_ptr -> nx_tcp_socket_transmit_sent_tail =  send_packet;
 800e990:	69ba      	ldr	r2, [r7, #24]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800e998:	e014      	b.n	800e9c4 <_nx_tcp_socket_send_internal+0x61c>
            }
            else
            {

                /* Empty list, just setup the head and tail to the current packet.  */
                socket_ptr -> nx_tcp_socket_transmit_sent_head =  send_packet;
 800e99a:	69ba      	ldr	r2, [r7, #24]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                socket_ptr -> nx_tcp_socket_transmit_sent_tail =  send_packet;
 800e9a2:	69ba      	ldr	r2, [r7, #24]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

                /* Setup a timeout for the packet at the head of the list.  */
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	65da      	str	r2, [r3, #92]	; 0x5c
            }

            /* Set the next pointer to NX_PACKET_ENQUEUED to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            send_packet -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800e9ca:	621a      	str	r2, [r3, #32]

            /* Increment the packet sent count.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count++;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e9d2:	1c5a      	adds	r2, r3, #1
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Increase the transmit outstanding byte count. */
            socket_ptr -> nx_tcp_socket_tx_outstanding_bytes +=
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
                (send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            socket_ptr -> nx_tcp_socket_tx_outstanding_bytes +=
 800e9e2:	4413      	add	r3, r2
 800e9e4:	f1a3 0214 	sub.w	r2, r3, #20
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	65da      	str	r2, [r3, #92]	; 0x5c
#ifndef NX_DISABLE_TCP_INFO
            /* Increment the TCP packet sent count and bytes sent count.  */
            ip_ptr -> nx_ip_tcp_packets_sent++;
 800e9ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            ip_ptr -> nx_ip_tcp_bytes_sent += send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER);
 800e9fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea04:	4413      	add	r3, r2
 800ea06:	f1a3 0214 	sub.w	r2, r3, #20
 800ea0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

            /* Increment the TCP packet sent count and bytes sent count for the socket.  */
            socket_ptr -> nx_tcp_socket_packets_sent++;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea14:	1c5a      	adds	r2, r3, #1
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	67da      	str	r2, [r3, #124]	; 0x7c
            socket_ptr -> nx_tcp_socket_bytes_sent += send_packet -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea24:	4413      	add	r3, r2
 800ea26:	f1a3 0214 	sub.w	r2, r3, #20
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_SEND, ip_ptr, socket_ptr, send_packet, socket_ptr -> nx_tcp_socket_tx_sequence - (send_packet -> nx_packet_length - sizeof(NX_TCP_HEADER)), NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the TCP packet to the IP component.  */
#ifndef NX_DISABLE_IPV4
            if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	695b      	ldr	r3, [r3, #20]
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	d119      	bne.n	800ea6c <_nx_tcp_socket_send_internal+0x6c4>
            {


                _nx_ip_packet_send(ip_ptr, send_packet,
 800ea38:	69b8      	ldr	r0, [r7, #24]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	699c      	ldr	r4, [r3, #24]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                                   socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
                                   socket_ptr -> nx_tcp_socket_type_of_service,
                                   socket_ptr -> nx_tcp_socket_time_to_live,
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
                _nx_ip_packet_send(ip_ptr, send_packet,
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800ea50:	68f9      	ldr	r1, [r7, #12]
 800ea52:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ea54:	9103      	str	r1, [sp, #12]
 800ea56:	9202      	str	r2, [sp, #8]
 800ea58:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800ea5c:	9201      	str	r2, [sp, #4]
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	462b      	mov	r3, r5
 800ea62:	4622      	mov	r2, r4
 800ea64:	4601      	mov	r1, r0
 800ea66:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ea68:	f7fb f9d8 	bl	8009e1c <_nx_ip_packet_send>
                                     socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                                     socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
            }
#endif /* FEATURE_NX_IPV6 */

            if (data_left == 0)
 800ea6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d11a      	bne.n	800eaa8 <_nx_tcp_socket_send_internal+0x700>
            {

                /* Release the packet. */
                if (send_packet != packet_ptr)
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d002      	beq.n	800ea80 <_nx_tcp_socket_send_internal+0x6d8>
                {
                    _nx_packet_release(packet_ptr);
 800ea7a:	68b8      	ldr	r0, [r7, #8]
 800ea7c:	f7fc fd9c 	bl	800b5b8 <_nx_packet_release>
                }

                /* Restore preemption? */
                if (preempted == NX_TRUE)
 800ea80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d107      	bne.n	800ea98 <_nx_tcp_socket_send_internal+0x6f0>
                {
                    tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800ea88:	4b2d      	ldr	r3, [pc, #180]	; (800eb40 <_nx_tcp_socket_send_internal+0x798>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6979      	ldr	r1, [r7, #20]
 800ea8e:	f107 0214 	add.w	r2, r7, #20
 800ea92:	4618      	mov	r0, r3
 800ea94:	f006 f8cc 	bl	8014c30 <_tx_thread_preemption_change>
                }

                /* Release the protection.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ea98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea9a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f005 fad0 	bl	8014044 <_tx_mutex_put>

                /* Add debug information. */
                NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

                /* Return successful status.  */
                return(NX_SUCCESS);
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	e0ee      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
            }
            else
            {

                /* Adjust the orginal packet. */
                current_packet = packet_ptr;
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	67bb      	str	r3, [r7, #120]	; 0x78

                remaining_bytes = packet_ptr -> nx_packet_length - data_left;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifndef NX_DISABLE_PACKET_CHAIN
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                while (remaining_bytes >
 800eab8:	e023      	b.n	800eb02 <_nx_tcp_socket_send_internal+0x75a>
                       (UINT)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr))
                {

                    /* Trim all data in the train. */
                    /*lint -e{923} suppress cast of pointer to ULONG.  */
                    packet_ptr -> nx_packet_length -= (ULONG)((ALIGN_TYPE)current_packet -> nx_packet_append_ptr - (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr);
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eabe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	4619      	mov	r1, r3
 800eac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	1acb      	subs	r3, r1, r3
 800eaca:	441a      	add	r2, r3
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	625a      	str	r2, [r3, #36]	; 0x24

                    /*lint -e{923} suppress cast of pointer to ULONG.  */
                    remaining_bytes -= (ULONG)((ALIGN_TYPE)current_packet -> nx_packet_append_ptr - (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr);
 800ead0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	461a      	mov	r2, r3
 800ead6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800eae0:	4413      	add	r3, r2
 800eae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                    /*lint -e{923} suppress cast between ULONG and pointer.  */
                    current_packet -> nx_packet_append_ptr = (UCHAR *)(((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3));
 800eae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	f023 0303 	bic.w	r3, r3, #3
 800eaee:	461a      	mov	r2, r3
 800eaf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaf2:	60da      	str	r2, [r3, #12]
                    current_packet -> nx_packet_prepend_ptr = current_packet -> nx_packet_append_ptr;
 800eaf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaf6:	68da      	ldr	r2, [r3, #12]
 800eaf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eafa:	609a      	str	r2, [r3, #8]

                    /* Pointer to next packet. */
                    current_packet = current_packet -> nx_packet_next;
 800eafc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	67bb      	str	r3, [r7, #120]	; 0x78
                       (UINT)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr))
 800eb02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb04:	68da      	ldr	r2, [r3, #12]
 800eb06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	1ad3      	subs	r3, r2, r3
 800eb0c:	461a      	mov	r2, r3
                while (remaining_bytes >
 800eb0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d8d1      	bhi.n	800eaba <_nx_tcp_socket_send_internal+0x712>
                }
#endif /* NX_DISABLE_PACKET_CHAIN */

                /* Trim partial data in the packet. */
                packet_ptr -> nx_packet_length -= remaining_bytes;
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb1e:	1ad2      	subs	r2, r2, r3
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	625a      	str	r2, [r3, #36]	; 0x24
                current_packet -> nx_packet_prepend_ptr += remaining_bytes;
 800eb24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb26:	689a      	ldr	r2, [r3, #8]
 800eb28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb2c:	441a      	add	r2, r3
 800eb2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb30:	609a      	str	r2, [r3, #8]

                /* Release the protection.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800eb32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb34:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f005 fa83 	bl	8014044 <_tx_mutex_put>
            if (data_left == 0)
 800eb3e:	e0a1      	b.n	800ec84 <_nx_tcp_socket_send_internal+0x8dc>
 800eb40:	2000aaf8 	.word	0x2000aaf8
            }
        }
        else if ((wait_option) && (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d06b      	beq.n	800ec22 <_nx_tcp_socket_send_internal+0x87a>
 800eb4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb4c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800eb50:	4b4f      	ldr	r3, [pc, #316]	; (800ec90 <_nx_tcp_socket_send_internal+0x8e8>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d064      	beq.n	800ec22 <_nx_tcp_socket_send_internal+0x87a>
        {

            /* Suspend the thread on this socket's transmit queue.  */

            /* Save the return packet pointer address as well.  */
            _tx_thread_current_ptr -> tx_thread_additional_suspend_info =  (VOID *)packet_ptr;
 800eb58:	4b4d      	ldr	r3, [pc, #308]	; (800ec90 <_nx_tcp_socket_send_internal+0x8e8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

            /* Increment the suspended thread count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count++;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800eb66:	1c5a      	adds	r2, r3, #1
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

            if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d112      	bne.n	800eb9e <_nx_tcp_socket_send_internal+0x7f6>
            {

                /* Set data for zero window probe. */
                socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
                socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	781a      	ldrb	r2, [r3, #0]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
                socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            }

            /* Need preemption? */
            if (preempted == NX_FALSE)
 800eb9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d11d      	bne.n	800ebe2 <_nx_tcp_socket_send_internal+0x83a>
            {
            UINT ip_thread_priority;

                /* Yes. It will be able to send packet out immediately TCP window is non zero. */
                tx_thread_info_get(&ip_ptr -> nx_ip_thread, NX_NULL, NX_NULL, NX_NULL, &ip_thread_priority, NX_NULL,
 800eba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba8:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800ebac:	2300      	movs	r3, #0
 800ebae:	9304      	str	r3, [sp, #16]
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	9303      	str	r3, [sp, #12]
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9302      	str	r3, [sp, #8]
 800ebb8:	2300      	movs	r3, #0
 800ebba:	9301      	str	r3, [sp, #4]
 800ebbc:	f107 0310 	add.w	r3, r7, #16
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	f005 ff9c 	bl	8014b04 <_tx_thread_info_get>
                                   NX_NULL, NX_NULL, NX_NULL);

                /*lint -e{644} suppress variable might not be initialized, since "ip_thread_priority" was initialized before TCP is enabled. */
                tx_thread_preemption_change(_tx_thread_current_ptr, ip_thread_priority, &old_threshold);
 800ebcc:	4b30      	ldr	r3, [pc, #192]	; (800ec90 <_nx_tcp_socket_send_internal+0x8e8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6939      	ldr	r1, [r7, #16]
 800ebd2:	f107 0214 	add.w	r2, r7, #20
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f006 f82a 	bl	8014c30 <_tx_thread_preemption_change>
                preempted = NX_TRUE;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }

            /* Suspend the thread on the transmit suspension list.  */
            _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), _nx_tcp_transmit_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800ebe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebea:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	4927      	ldr	r1, [pc, #156]	; (800ec94 <_nx_tcp_socket_send_internal+0x8ec>)
 800ebf8:	f001 faa4 	bl	8010144 <_nx_tcp_socket_thread_suspend>

            /* Determine if the send request was successful.  */
            if (_tx_thread_current_ptr -> tx_thread_suspend_status)
 800ebfc:	4b24      	ldr	r3, [pc, #144]	; (800ec90 <_nx_tcp_socket_send_internal+0x8e8>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d03d      	beq.n	800ec84 <_nx_tcp_socket_send_internal+0x8dc>
            {

                /* Restore preemption. */
                tx_thread_preemption_change(_tx_thread_current_ptr, old_threshold, &old_threshold);
 800ec08:	4b21      	ldr	r3, [pc, #132]	; (800ec90 <_nx_tcp_socket_send_internal+0x8e8>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	6979      	ldr	r1, [r7, #20]
 800ec0e:	f107 0214 	add.w	r2, r7, #20
 800ec12:	4618      	mov	r0, r3
 800ec14:	f006 f80c 	bl	8014c30 <_tx_thread_preemption_change>

                /* Add debug information. */
                NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

                /* Just return the error code.  */
                return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 800ec18:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <_nx_tcp_socket_send_internal+0x8e8>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec20:	e031      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
        }
        else
        {

            /* Check advertised window. */
            if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d112      	bne.n	800ec52 <_nx_tcp_socket_send_internal+0x8aa>
            {

                /* Set data for zero window probe. */
                socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
                socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr);
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	781a      	ldrb	r2, [r3, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
                socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            }

            /* Determine which transmit error is present.  */
            if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d207      	bcs.n	800ec72 <_nx_tcp_socket_send_internal+0x8ca>
            {

                /* Release protection.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ec62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec64:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f005 f9eb 	bl	8014044 <_tx_mutex_put>

                /* Add debug information. */
                NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

                /* Not a queue depth problem, return a window overflow error.  */
                return(NX_WINDOW_OVERFLOW);
 800ec6e:	2339      	movs	r3, #57	; 0x39
 800ec70:	e009      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
            }
            else
            {

                /* Release protection.  */
                tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ec72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f005 f9e3 	bl	8014044 <_tx_mutex_put>

                /* Add debug information. */
                NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

                /* Return a transmit queue exceeded error.  */
                return(NX_TX_QUEUE_DEPTH);
 800ec7e:	2349      	movs	r3, #73	; 0x49
 800ec80:	e001      	b.n	800ec86 <_nx_tcp_socket_send_internal+0x8de>
                continue;
 800ec82:	bf00      	nop
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ec84:	e406      	b.n	800e494 <_nx_tcp_socket_send_internal+0xec>
            }
        }
    }
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3790      	adds	r7, #144	; 0x90
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	2000aaf8 	.word	0x2000aaf8
 800ec94:	08010289 	.word	0x08010289

0800ec98 <_nx_tcp_socket_state_ack_check>:
/*                                            fixed compiler warnings,    */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_ack_check(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b090      	sub	sp, #64	; 0x40
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]

NX_TCP_HEADER *search_header_ptr = NX_NULL;
 800eca2:	2300      	movs	r3, #0
 800eca4:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG          starting_tx_sequence;
ULONG          ending_tx_sequence;
ULONG          ending_rx_sequence;
ULONG          acked_bytes;
ULONG          tcp_payload_length;
UINT           wrapped_flag = NX_FALSE;
 800eca6:	2300      	movs	r3, #0
 800eca8:	623b      	str	r3, [r7, #32]


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f000 82dc 	beq.w	800f270 <_nx_tcp_socket_state_ack_check+0x5d8>
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d004      	beq.n	800eccc <_nx_tcp_socket_state_ack_check+0x34>
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecca:	e002      	b.n	800ecd2 <_nx_tcp_socket_state_ack_check+0x3a>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecd0:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	61fb      	str	r3, [r7, #28]

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d028      	beq.n	800ed3a <_nx_tcp_socket_state_ack_check+0xa2>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ecee:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800ecf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ecf6:	2b04      	cmp	r3, #4
 800ecf8:	d11d      	bne.n	800ed36 <_nx_tcp_socket_state_ack_check+0x9e>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800ecfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecfe:	3314      	adds	r3, #20
 800ed00:	63fb      	str	r3, [r7, #60]	; 0x3c
            {
                return(NX_FALSE);
            }

            /* Determine the size of the TCP header.  */
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 800ed02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	633b      	str	r3, [r7, #48]	; 0x30
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ed08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0a:	0f1b      	lsrs	r3, r3, #28
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	61bb      	str	r3, [r7, #24]

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800ed10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	617b      	str	r3, [r7, #20]

            /* Calculate the payload length of TCP. */
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800ed16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	4619      	mov	r1, r3
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
 800ed20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed22:	1ac9      	subs	r1, r1, r3
                                  (header_length +
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	1acb      	subs	r3, r1, r3
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800ed28:	4413      	add	r3, r2
 800ed2a:	613b      	str	r3, [r7, #16]

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 800ed2c:	697a      	ldr	r2, [r7, #20]
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	4413      	add	r3, r2
 800ed32:	627b      	str	r3, [r7, #36]	; 0x24
 800ed34:	e004      	b.n	800ed40 <_nx_tcp_socket_state_ack_check+0xa8>
                return(NX_FALSE);
 800ed36:	2300      	movs	r3, #0
 800ed38:	e29b      	b.n	800f272 <_nx_tcp_socket_state_ack_check+0x5da>
        }
        else
        {
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d111      	bne.n	800ed6e <_nx_tcp_socket_state_ack_check+0xd6>
        {

            /* In this case, everything on the transmit list is acknowledged.  Simply set the packet
               release count to the number of packets in the transmit queue.  */
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ed50:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Set the previous pointer to the socket transmit tail pointer.  */
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ed58:	637b      	str	r3, [r7, #52]	; 0x34

            /* Is this ACK to FIN? */
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5e:	2b06      	cmp	r3, #6
 800ed60:	f240 80d6 	bls.w	800ef10 <_nx_tcp_socket_state_ack_check+0x278>
            {

                /* Yes it is. */
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ed6c:	e0d0      	b.n	800ef10 <_nx_tcp_socket_state_ack_check+0x278>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ed74:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 800ed76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d059      	beq.n	800ee30 <_nx_tcp_socket_state_ack_check+0x198>
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	69db      	ldr	r3, [r3, #28]
 800ed80:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800ed84:	d154      	bne.n	800ee30 <_nx_tcp_socket_state_ack_check+0x198>
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800ed86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Determine if the incoming ACK matches the front of our transmit queue. */
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	69fa      	ldr	r2, [r7, #28]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d143      	bne.n	800ee1e <_nx_tcp_socket_state_ack_check+0x186>
                {

                    /* Handle duplicated ACK packet.  */
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed9a:	1c5a      	adds	r2, r3, #1
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	66da      	str	r2, [r3, #108]	; 0x6c

                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	d12a      	bne.n	800edfe <_nx_tcp_socket_state_ack_check+0x166>
                    {
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	689a      	ldr	r2, [r3, #8]
                                  socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	3b01      	subs	r3, #1
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	dd08      	ble.n	800edca <_nx_tcp_socket_state_ack_check+0x132>
                        {

                            /* Cumulative acknowledge covers more than recover. */
                            /* Section 3.2, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800edbe:	2201      	movs	r2, #1
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff f928 	bl	800e018 <_nx_tcp_socket_retransmit>
 800edc8:	e029      	b.n	800ee1e <_nx_tcp_socket_state_ack_check+0x186>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d923      	bls.n	800ee1e <_nx_tcp_socket_state_ack_check+0x186>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	689a      	ldr	r2, [r3, #8]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6e59      	ldr	r1, [r3, #100]	; 0x64
                                                                                          (socket_ptr -> nx_tcp_socket_connect_mss << 2))) < 0))
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a1b      	ldr	r3, [r3, #32]
 800ede2:	009b      	lsls	r3, r3, #2
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800ede4:	440b      	add	r3, r1
 800ede6:	1ad3      	subs	r3, r2, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800ede8:	2b00      	cmp	r3, #0
 800edea:	da18      	bge.n	800ee1e <_nx_tcp_socket_state_ack_check+0x186>

                            /* Congestion window is greater than SMSS bytes and
                               the difference between highest_ack and prev_highest_ack is at most 4*SMSS bytes.*/
                            /* Section 4.1, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800edf2:	2201      	movs	r2, #1
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff f90e 	bl	800e018 <_nx_tcp_socket_retransmit>
 800edfc:	e00f      	b.n	800ee1e <_nx_tcp_socket_state_ack_check+0x186>
                        }
                    }
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee02:	2b03      	cmp	r3, #3
 800ee04:	d90b      	bls.n	800ee1e <_nx_tcp_socket_state_ack_check+0x186>
                             (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d106      	bne.n	800ee1e <_nx_tcp_socket_state_ack_check+0x186>
                    {

                        /* CWND += MSS  */
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6a1b      	ldr	r3, [r3, #32]
 800ee18:	441a      	add	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	659a      	str	r2, [r3, #88]	; 0x58
                    }
                }

                /* Determine if the transmit queue has wrapped.  */
                if (ending_tx_sequence > starting_tx_sequence)
 800ee1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d902      	bls.n	800ee2c <_nx_tcp_socket_state_ack_check+0x194>
                {

                    /* Clear the wrapped flag.  */
                    wrapped_flag =  NX_FALSE;
 800ee26:	2300      	movs	r3, #0
 800ee28:	623b      	str	r3, [r7, #32]
 800ee2a:	e001      	b.n	800ee30 <_nx_tcp_socket_state_ack_check+0x198>
                }
                else
                {

                    /* Set the wrapped flag.  */
                    wrapped_flag =  NX_TRUE;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	623b      	str	r3, [r7, #32]
                }
            }

            /* Initialize the packet release count.  */
            packet_release_count =  0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if we can find the sequence number in the sent queue for this
               socket.  */
            previous_ptr =  NX_NULL;
 800ee34:	2300      	movs	r3, #0
 800ee36:	637b      	str	r3, [r7, #52]	; 0x34
            while (search_ptr)
 800ee38:	e063      	b.n	800ef02 <_nx_tcp_socket_state_ack_check+0x26a>
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3c:	69db      	ldr	r3, [r3, #28]
 800ee3e:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800ee42:	d007      	beq.n	800ee54 <_nx_tcp_socket_state_ack_check+0x1bc>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800ee44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                           search_ptr -> nx_packet_ip_header_length);
 800ee48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee4a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800ee4e:	4413      	add	r3, r2
 800ee50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee52:	e002      	b.n	800ee5a <_nx_tcp_socket_state_ack_check+0x1c2>
                else
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Determine the size of the TCP header.  */
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 800ee5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800ee60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee62:	ba1b      	rev	r3, r3
 800ee64:	633b      	str	r3, [r7, #48]	; 0x30
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	0f1b      	lsrs	r3, r3, #28
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	61bb      	str	r3, [r7, #24]

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800ee6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	617b      	str	r3, [r7, #20]
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	ba1b      	rev	r3, r3
 800ee78:	617b      	str	r3, [r7, #20]

                /* Calculate the payload length of TCP. */
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800ee7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800ee84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee86:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800ee8c:	4413      	add	r3, r2
 800ee8e:	613b      	str	r3, [r7, #16]

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 800ee90:	697a      	ldr	r2, [r7, #20]
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	4413      	add	r3, r2
 800ee96:	60fb      	str	r3, [r7, #12]

                /* Determine if the transmit window is wrapped.  */
                if (wrapped_flag == NX_FALSE)
 800ee98:	6a3b      	ldr	r3, [r7, #32]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10a      	bne.n	800eeb4 <_nx_tcp_socket_state_ack_check+0x21c>

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d833      	bhi.n	800ef10 <_nx_tcp_socket_state_ack_check+0x278>
                        (tcp_header_ptr -> nx_tcp_acknowledgment_number > ending_tx_sequence))
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	689b      	ldr	r3, [r3, #8]
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800eeac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d32e      	bcc.n	800ef10 <_nx_tcp_socket_state_ack_check+0x278>
 800eeb2:	e018      	b.n	800eee6 <_nx_tcp_socket_state_ack_check+0x24e>

                    /* Yes, the transmit window has wrapped.  We need to now check for all the wrap conditions to
                       determine if ACK covers the current search packet.  */

                    /* Is the search packet's ending sequence number in the wrapped part of the window.  */
                    if (ending_packet_sequence < starting_tx_sequence)
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d20a      	bcs.n	800eed2 <_nx_tcp_socket_state_ack_check+0x23a>
                    {

                        /* The search packet ends in the wrapped portion of the window.  Determine if the ACK
                           sequence in the wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number < starting_tx_sequence)
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	69fa      	ldr	r2, [r7, #28]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d921      	bls.n	800ef0a <_nx_tcp_socket_state_ack_check+0x272>
                        {

                            /* Yes, the ACK sequence is in the wrapped portion as well. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d90a      	bls.n	800eee6 <_nx_tcp_socket_state_ack_check+0x24e>
                            {

                                /* ACK does not cover the search packet. Break out of the loop.  */
                                break;
 800eed0:	e01e      	b.n	800ef10 <_nx_tcp_socket_state_ack_check+0x278>
                    else
                    {

                        /* The search packet is in the non-wrapped portion of the window.  Determine if the ACK
                           sequence is in the non-wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number >= starting_tx_sequence)
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	69fa      	ldr	r2, [r7, #28]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d804      	bhi.n	800eee6 <_nx_tcp_socket_state_ack_check+0x24e>
                        {

                            /* Yes, the ACK sequence is in the non-wrapped portion of the window. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	689b      	ldr	r3, [r3, #8]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d813      	bhi.n	800ef0e <_nx_tcp_socket_state_ack_check+0x276>
                }

                /* At this point we know that the ACK received covers the search packet.  */

                /* Increase the packet release count.  */
                packet_release_count++;
 800eee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee8:	3301      	adds	r3, #1
 800eeea:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	637b      	str	r3, [r7, #52]	; 0x34
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	6a1b      	ldr	r3, [r3, #32]
 800eef4:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800eefc:	d101      	bne.n	800ef02 <_nx_tcp_socket_state_ack_check+0x26a>
                {

                    /* Yes, set the search pointer to NULL.  */
                    search_ptr =  NX_NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	63bb      	str	r3, [r7, #56]	; 0x38
            while (search_ptr)
 800ef02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d198      	bne.n	800ee3a <_nx_tcp_socket_state_ack_check+0x1a2>
 800ef08:	e002      	b.n	800ef10 <_nx_tcp_socket_state_ack_check+0x278>
                            break;
 800ef0a:	bf00      	nop
 800ef0c:	e000      	b.n	800ef10 <_nx_tcp_socket_state_ack_check+0x278>
                                break;
 800ef0e:	bf00      	nop
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d123      	bne.n	800ef5e <_nx_tcp_socket_state_ack_check+0x2c6>
        {

            /* No, check and see if the ACK is valid.  */
            /* If the ACK acks something not yet sent (SEG.ACK > SND.NXT) then send an ACK, drop the segment */
            /* Page 72, section 3.9, RFC 793.*/
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d00d      	beq.n	800ef3c <_nx_tcp_socket_state_ack_check+0x2a4>
            {

                /* If the ACK is a duplicate, it can be ignored. */
                if ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence > 0)
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	461a      	mov	r2, r3
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f340 809f 	ble.w	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>
                {

                    /* The ACK sequence is invalid. Respond with an ACK to let the other
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800ef30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7fd ff96 	bl	800ce64 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e19a      	b.n	800f272 <_nx_tcp_socket_state_ack_check+0x5da>
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f040 8094 	bne.w	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>
                     (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	685a      	ldr	r2, [r3, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	f040 808d 	bne.w	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>
            {

                /* Response to zero window probe.  */
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800ef54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7fd ff84 	bl	800ce64 <_nx_tcp_packet_send_ack>
 800ef5c:	e087      	b.n	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>

            /* Congestion window adjustment during slow start and congestion avoidance is executed
               on every incoming ACK that acknowledges new data. RFC5681, Section3.1, Page4-8.  */

            /* Check whether the socket is in fast recovery procedure. */
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d10e      	bne.n	800ef86 <_nx_tcp_socket_state_ack_check+0x2ee>
            {

                /* Yes. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	689a      	ldr	r2, [r3, #8]
                          socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	dd07      	ble.n	800ef86 <_nx_tcp_socket_state_ack_check+0x2ee>
                {

                    /* All packets sent before entering fast recovery are ACKed. */
                    /* Exit fast recovery procedure. */
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
                      (tcp_header_ptr -> nx_tcp_acknowledgment_number - 2)) < 0)
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	689b      	ldr	r3, [r3, #8]
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	3302      	adds	r3, #2
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	da04      	bge.n	800efa0 <_nx_tcp_socket_state_ack_check+0x308>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	1e9a      	subs	r2, r3, #2
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	661a      	str	r2, [r3, #96]	; 0x60
            }

            /* Reset the duplicated ACK counter. */
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Determine if the packet has been transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800efac:	69db      	ldr	r3, [r3, #28]
 800efae:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800efb2:	d00b      	beq.n	800efcc <_nx_tcp_socket_state_ack_check+0x334>
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                search_header_ptr =  (NX_TCP_HEADER *)(socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header +
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800efba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                       socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header_length);
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 800efc2:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_ip_header +
 800efc6:	4413      	add	r3, r2
 800efc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efca:	e004      	b.n	800efd6 <_nx_tcp_socket_state_ack_check+0x33e>
            else
            {

                /* Setup a pointer to header of this packet in the sent list.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)socket_ptr -> nx_tcp_socket_transmit_sent_head -> nx_packet_prepend_ptr;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	63fb      	str	r3, [r7, #60]	; 0x3c
            }

            /* Set previous cumulative acknowlesgement. */
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	69fa      	ldr	r2, [r7, #28]
 800efda:	665a      	str	r2, [r3, #100]	; 0x64

            /* Calculate ACKed length. */
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	689a      	ldr	r2, [r3, #8]
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	60bb      	str	r3, [r7, #8]

            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800efec:	2b01      	cmp	r3, #1
 800efee:	d112      	bne.n	800f016 <_nx_tcp_socket_state_ack_check+0x37e>
            {

                /* Process cwnd in fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	1ad2      	subs	r2, r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	659a      	str	r2, [r3, #88]	; 0x58
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6a1b      	ldr	r3, [r3, #32]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	429a      	cmp	r2, r3
 800f004:	d933      	bls.n	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	441a      	add	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	659a      	str	r2, [r3, #88]	; 0x58
 800f014:	e02b      	b.n	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>
            else
            {

                /* Adjust the transmit window.  In slow start phase, the transmit window is incremented for every ACK.
                   In Congestion Avoidance phase, the window is incremented for every RTT. Section 3.1, Page 4-7, RFC5681.  */
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f01e:	429a      	cmp	r2, r3
 800f020:	d312      	bcc.n	800f048 <_nx_tcp_socket_state_ack_check+0x3b0>
                {

                    /* In Congestion avoidance phase, for every ACK it receives, increase the window size using the
                       following approximation:
                       cwnd = cwnd + MSS * MSS / cwnd;  */
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f02e:	633b      	str	r3, [r7, #48]	; 0x30

                    /* If the above formula yields 0, the result SHOULD be rounded up to 1 byte.  */
                    if (temp == 0)
 800f030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <_nx_tcp_socket_state_ack_check+0x3a2>
                    {
                        temp = 1;
 800f036:	2301      	movs	r3, #1
 800f038:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f040:	441a      	add	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	659a      	str	r2, [r3, #88]	; 0x58
 800f046:	e012      	b.n	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>
                {

                    /* In Slow start phase:
                       cwnd += min (N, SMSS),
                       where N is the number of ACKed bytes. */
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a1b      	ldr	r3, [r3, #32]
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d206      	bcs.n	800f060 <_nx_tcp_socket_state_ack_check+0x3c8>
                    {

                        /* In Slow start phase. Increase the cwnd by acked bytes.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	441a      	add	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	659a      	str	r2, [r3, #88]	; 0x58
 800f05e:	e006      	b.n	800f06e <_nx_tcp_socket_state_ack_check+0x3d6>
                    }
                    else
                    {

                        /* In Slow start phase. Increase the cwnd by full MSS for every ack.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6a1b      	ldr	r3, [r3, #32]
 800f068:	441a      	add	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	659a      	str	r2, [r3, #88]	; 0x58
        /* Update the window only when
         * 1. SND.UNA < SEG.ACK =< SND.NXT or
         * 2. SND.WL1 < SEG.SEQ or
         * 3. SND.WL1 = SEG.SEQ and SND.WL2 =< SEG.ACK
         * RFC793, Section 3.9, Page72. */
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	461a      	mov	r2, r3
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	dd06      	ble.n	800f08a <_nx_tcp_socket_state_ack_check+0x3f2>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	461a      	mov	r2, r3
 800f082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f084:	1ad3      	subs	r3, r2, r3
        if ((((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence > 0) &&
 800f086:	2b00      	cmp	r3, #0
 800f088:	dd12      	ble.n	800f0b0 <_nx_tcp_socket_state_ack_check+0x418>
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	461a      	mov	r2, r3
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	1ad3      	subs	r3, r2, r3
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)ending_tx_sequence <= 0)) ||
 800f094:	2b00      	cmp	r3, #0
 800f096:	dc0b      	bgt.n	800f0b0 <_nx_tcp_socket_state_ack_check+0x418>
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	685b      	ldr	r3, [r3, #4]
            ((INT)tcp_header_ptr -> nx_tcp_sequence_number - (INT)ending_rx_sequence > 0) ||
 800f09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d10b      	bne.n	800f0ba <_nx_tcp_socket_state_ack_check+0x422>
             ((INT)tcp_header_ptr -> nx_tcp_acknowledgment_number - (INT)starting_tx_sequence >= 0)))
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	1ad3      	subs	r3, r2, r3
            (((INT)tcp_header_ptr -> nx_tcp_sequence_number == (INT)ending_rx_sequence) &&
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	db04      	blt.n	800f0ba <_nx_tcp_socket_state_ack_check+0x422>
        {

            /* Update this socket's transmit window with the advertised window size in the ACK message.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
        }

        /* Check advertised window. */
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d80a      	bhi.n	800f0dc <_nx_tcp_socket_state_ack_check+0x444>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number >= socket_ptr -> nx_tcp_socket_zero_window_probe_sequence))
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	689a      	ldr	r2, [r3, #8]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d303      	bcc.n	800f0dc <_nx_tcp_socket_state_ack_check+0x444>
        {

            /* It is an ACK to Zero Window Probe. Reset the zero window probe failure. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }

        if (!packet_release_count)
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d101      	bne.n	800f0e6 <_nx_tcp_socket_state_ack_check+0x44e>
        {
            /* Done, return to caller. */
            return(NX_TRUE);
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e0c5      	b.n	800f272 <_nx_tcp_socket_state_ack_check+0x5da>
            }
        }
#endif

        /* Save the front of the of the transmit queue.  */
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f0ec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Okay so now the packet after the previous pointer needs to be the front of the
           queue.  */
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f0f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d017      	beq.n	800f12a <_nx_tcp_socket_state_ack_check+0x492>
        {

            /* Just update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0fc:	6a1a      	ldr	r2, [r3, #32]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

            /* And decrease the transmit queue count accordingly.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800f10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10c:	1ad2      	subs	r2, r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Setup a new transmit timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800f128:	e08e      	b.n	800f248 <_nx_tcp_socket_state_ack_check+0x5b0>
        else
        {

            /* The transmit list is now cleared, just set the head and tail pointers to
               NULL.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

            /* Clear the transmit queue count.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Determine if a disconnect FIN has been sent from this side of the connection.  */
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f146:	2b07      	cmp	r3, #7
 800f148:	d007      	beq.n	800f15a <_nx_tcp_socket_state_ack_check+0x4c2>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800f14e:	2b09      	cmp	r3, #9
 800f150:	d003      	beq.n	800f15a <_nx_tcp_socket_state_ack_check+0x4c2>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800f156:	2b0b      	cmp	r3, #11
 800f158:	d10a      	bne.n	800f170 <_nx_tcp_socket_state_ack_check+0x4d8>
            {

                /* Yes, setup timeout such that the FIN can be retried if it is lost.  */
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800f16e:	e007      	b.n	800f180 <_nx_tcp_socket_state_ack_check+0x4e8>
            }
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f174:	2b00      	cmp	r3, #0
 800f176:	d067      	beq.n	800f248 <_nx_tcp_socket_state_ack_check+0x5b0>
            {

                /* Otherwise, a FIN has not been sent, simply clear the transmit timeout.  */
                socket_ptr -> nx_tcp_socket_timeout =  0;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        }

        /* Now walk through the packets to release and set them
           free.  */
        while (packet_release_count--)
 800f180:	e062      	b.n	800f248 <_nx_tcp_socket_state_ack_check+0x5b0>
        {

            /* Use the previous pointer as the release pointer.  */
            previous_ptr =  search_ptr;
 800f182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f184:	637b      	str	r3, [r7, #52]	; 0x34

            /* Move to the next packet in the queue before we clip the
               next pointer.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f188:	6a1b      	ldr	r3, [r3, #32]
 800f18a:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Set the packet to allocated to indicate it is no longer part of the TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 800f18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f18e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f192:	621a      	str	r2, [r3, #32]
               the packet occurred prior to receiving the ACK. If so, the packet could be
               in an ARP queue or in a driver queue waiting for transmission so we can't
               release it directly at this point.  The driver or the ARP processing will
               release it when finished.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800f194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f196:	69db      	ldr	r3, [r3, #28]
 800f198:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800f19c:	d125      	bne.n	800f1ea <_nx_tcp_socket_state_ack_check+0x552>

                /* Yes, the driver has already released the packet.  */

                /* Open up the transmit window. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr = (NX_TCP_HEADER *)previous_ptr -> nx_packet_prepend_ptr;
 800f19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	63fb      	str	r3, [r7, #60]	; 0x3c

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800f1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	ba1b      	rev	r3, r3
 800f1ae:	633b      	str	r3, [r7, #48]	; 0x30
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	0f1b      	lsrs	r3, r3, #28
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	61bb      	str	r3, [r7, #24]
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	1acb      	subs	r3, r1, r3
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d909      	bls.n	800f1dc <_nx_tcp_socket_state_ack_check+0x544>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d0:	69b9      	ldr	r1, [r7, #24]
 800f1d2:	1acb      	subs	r3, r1, r3
 800f1d4:	441a      	add	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800f1da:	e002      	b.n	800f1e2 <_nx_tcp_socket_state_ack_check+0x54a>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	65da      	str	r2, [r3, #92]	; 0x5c
                }
                /* Release the packet.  */
                _nx_packet_release(previous_ptr);
 800f1e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1e4:	f7fc f9e8 	bl	800b5b8 <_nx_packet_release>
 800f1e8:	e02e      	b.n	800f248 <_nx_tcp_socket_state_ack_check+0x5b0>
            else
            {

                /* No, the driver has not released the packet.  */
                /* Open up the transmit window. */
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800f1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                       previous_ptr -> nx_packet_ip_header_length);
 800f1ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1f0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800f1f4:	4413      	add	r3, r2
 800f1f6:	63fb      	str	r3, [r7, #60]	; 0x3c

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800f1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	633b      	str	r3, [r7, #48]	; 0x30
                NX_CHANGE_ULONG_ENDIAN(temp);
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	ba1b      	rev	r3, r3
 800f202:	633b      	str	r3, [r7, #48]	; 0x30
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800f204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f206:	0f1b      	lsrs	r3, r3, #28
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	61bb      	str	r3, [r7, #24]
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800f20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f20e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)(previous_ptr -> nx_packet_prepend_ptr))));
 800f210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800f216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f218:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800f21e:	4413      	add	r3, r2
 800f220:	613b      	str	r3, [r7, #16]
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f226:	693a      	ldr	r2, [r7, #16]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d206      	bcs.n	800f23a <_nx_tcp_socket_state_ack_check+0x5a2>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	1ad2      	subs	r2, r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	65da      	str	r2, [r3, #92]	; 0x5c
 800f238:	e002      	b.n	800f240 <_nx_tcp_socket_state_ack_check+0x5a8>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	65da      	str	r2, [r3, #92]	; 0x5c
                }

                /* Let driver release the packet.  */
                previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = ((NX_PACKET *)NX_PACKET_ALLOCATED);
 800f240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f242:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f246:	621a      	str	r2, [r3, #32]
        while (packet_release_count--)
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24a:	1e5a      	subs	r2, r3, #1
 800f24c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d197      	bne.n	800f182 <_nx_tcp_socket_state_ack_check+0x4ea>
            }
        }

        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d107      	bne.n	800f26c <_nx_tcp_socket_state_ack_check+0x5d4>
        {

            /* Only partial data are ACKed. Retransmit packet immediately. */
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f262:	2200      	movs	r2, #0
 800f264:	6879      	ldr	r1, [r7, #4]
 800f266:	4618      	mov	r0, r3
 800f268:	f7fe fed6 	bl	800e018 <_nx_tcp_socket_retransmit>
        }

        return(NX_TRUE);
 800f26c:	2301      	movs	r3, #1
 800f26e:	e000      	b.n	800f272 <_nx_tcp_socket_state_ack_check+0x5da>
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 800f270:	2300      	movs	r3, #0
    }
}
 800f272:	4618      	mov	r0, r3
 800f274:	3740      	adds	r7, #64	; 0x40
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <_nx_tcp_socket_state_closing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d029      	beq.n	800f2e6 <_nx_tcp_socket_state_closing+0x6a>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	689a      	ldr	r2, [r3, #8]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d123      	bne.n	800f2e6 <_nx_tcp_socket_state_closing+0x6a>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	685a      	ldr	r2, [r3, #4]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d11d      	bne.n	800f2e6 <_nx_tcp_socket_state_closing+0x6a>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	220a      	movs	r2, #10
 800f2ae:	639a      	str	r2, [r3, #56]	; 0x38

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800f2b0:	4b0f      	ldr	r3, [pc, #60]	; (800f2f0 <_nx_tcp_socket_state_closing+0x74>)
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d006      	beq.n	800f2d2 <_nx_tcp_socket_state_closing+0x56>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f000 feed 	bl	80100ac <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d004      	beq.n	800f2e6 <_nx_tcp_socket_state_closing+0x6a>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	4798      	blx	r3
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 800f2e6:	bf00      	nop
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	2000aa20 	.word	0x2000aa20

0800f2f4 <_nx_tcp_socket_state_data_trim>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim(NX_PACKET *packet_ptr, ULONG amount)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
ULONG      bytes_to_keep;
NX_PACKET *work_ptr;

    if (amount >= packet_ptr -> nx_packet_length)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	429a      	cmp	r2, r3
 800f306:	d23c      	bcs.n	800f382 <_nx_tcp_socket_state_data_trim+0x8e>
    {
        /* Invalid input. */
        return;
    }

    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	617b      	str	r3, [r7, #20]

    packet_ptr -> nx_packet_length = bytes_to_keep;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	625a      	str	r2, [r3, #36]	; 0x24

    work_ptr = packet_ptr;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the "bytes_to_keep" amount. */
    while (work_ptr)
 800f31c:	e02d      	b.n	800f37a <_nx_tcp_socket_state_data_trim+0x86>
    {

    NX_PACKET *tmp_ptr;

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	68da      	ldr	r2, [r3, #12]
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	1ad2      	subs	r2, r2, r3
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	da0c      	bge.n	800f348 <_nx_tcp_socket_state_data_trim+0x54>
        {

            /*lint -e{923} suppress cast of pointer to ULONG.  */
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	461a      	mov	r2, r3
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	4413      	add	r3, r2
 800f33e:	617b      	str	r3, [r7, #20]

            work_ptr = work_ptr -> nx_packet_next;
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	613b      	str	r3, [r7, #16]

            continue;
 800f346:	e018      	b.n	800f37a <_nx_tcp_socket_state_data_trim+0x86>
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* This is the last packet. */
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	689a      	ldr	r2, [r3, #8]
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	441a      	add	r2, r3
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Free the rest of the packet chain. */
        tmp_ptr = work_ptr -> nx_packet_next;
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	60fb      	str	r3, [r7, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	2200      	movs	r2, #0
 800f35e:	605a      	str	r2, [r3, #4]
        work_ptr = tmp_ptr;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	613b      	str	r3, [r7, #16]

        if (work_ptr)
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d007      	beq.n	800f37a <_nx_tcp_socket_state_data_trim+0x86>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f370:	621a      	str	r2, [r3, #32]

            _nx_packet_release(work_ptr);
 800f372:	6938      	ldr	r0, [r7, #16]
 800f374:	f7fc f920 	bl	800b5b8 <_nx_packet_release>

            /* All done. Break out of the while loop and return. */
            break;
 800f378:	e004      	b.n	800f384 <_nx_tcp_socket_state_data_trim+0x90>
    while (work_ptr)
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d1ce      	bne.n	800f31e <_nx_tcp_socket_state_data_trim+0x2a>
 800f380:	e000      	b.n	800f384 <_nx_tcp_socket_state_data_trim+0x90>
        return;
 800f382:	bf00      	nop
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */
}
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <_nx_tcp_socket_state_data_trim_front>:
/*                                            verified memmove use cases, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim_front(NX_PACKET *packet_ptr, ULONG amount)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b084      	sub	sp, #16
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
NX_PACKET *work_ptr = packet_ptr;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	60fb      	str	r3, [r7, #12]
ULONG      work_length;

    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d263      	bcs.n	800f46a <_nx_tcp_socket_state_data_trim_front+0xe0>
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d060      	beq.n	800f46a <_nx_tcp_socket_state_data_trim_front+0xe0>
        /* Invalid input. */
        return;
    }

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= amount;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	1ad2      	subs	r2, r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Move prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	f103 0214 	add.w	r2, r3, #20
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	609a      	str	r2, [r3, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the amount. */
    while (amount)
 800f3c0:	e049      	b.n	800f456 <_nx_tcp_socket_state_data_trim_front+0xcc>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Compute the size of the data portion work_ptr.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	60bb      	str	r3, [r7, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
        if (amount > work_length)
 800f3d0:	683a      	ldr	r2, [r7, #0]
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d91e      	bls.n	800f416 <_nx_tcp_socket_state_data_trim_front+0x8c>
        {

            /* All data in work_ptr need to be trimmed.  */
            if (work_ptr == packet_ptr)
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d104      	bne.n	800f3ea <_nx_tcp_socket_state_data_trim_front+0x60>
            {

                /* This packet is the header of packet chain.  */
                /* Clear TCP data in this packet.  */
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	689a      	ldr	r2, [r3, #8]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	60da      	str	r2, [r3, #12]
 800f3e8:	e00d      	b.n	800f406 <_nx_tcp_socket_state_data_trim_front+0x7c>
            else
            {

                /* This packet is not the first packet.  */
                /* Remove work_ptr from packet chain.  */
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	605a      	str	r2, [r3, #4]

                /* Disconnect work_ptr from the rest of the packet chain. */
                work_ptr -> nx_packet_next = NX_NULL;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	605a      	str	r2, [r3, #4]

                /* Mark the packet as ALLOCATED. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f3fe:	621a      	str	r2, [r3, #32]

                _nx_packet_release(work_ptr);
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f7fc f8d9 	bl	800b5b8 <_nx_packet_release>
            }
            /* Reduce the amount being trimmed.  */
            amount -= work_length;
 800f406:	683a      	ldr	r2, [r7, #0]
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	1ad3      	subs	r3, r2, r3
 800f40c:	603b      	str	r3, [r7, #0]

            /* Move to the next packet. */
            work_ptr = packet_ptr -> nx_packet_next;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	60fb      	str	r3, [r7, #12]
 800f414:	e01f      	b.n	800f456 <_nx_tcp_socket_state_data_trim_front+0xcc>
        else
        {

            /* This is the last packet to trim.  */

            if (work_ptr == packet_ptr)
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d113      	bne.n	800f446 <_nx_tcp_socket_state_data_trim_front+0xbc>
            {
#endif /* NX_DISABLE_PACKET_CHAIN */

                /* For the first packet, move data towards the beginning
                   of the packet, right after TCP header.  */
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6898      	ldr	r0, [r3, #8]
                        packet_ptr -> nx_packet_prepend_ptr + amount,
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	689a      	ldr	r2, [r3, #8]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	18d1      	adds	r1, r2, r3
                        work_length - amount);
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	1ad3      	subs	r3, r2, r3
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800f430:	461a      	mov	r2, r3
 800f432:	f007 fb3d 	bl	8016ab0 <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	68da      	ldr	r2, [r3, #12]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	425b      	negs	r3, r3
 800f43e:	441a      	add	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	60da      	str	r2, [r3, #12]
 800f444:	e005      	b.n	800f452 <_nx_tcp_socket_state_data_trim_front+0xc8>
            }
            else
            {

                /* Advance nx_packet_prepend_ptr to where the usable data starts. */
                work_ptr -> nx_packet_prepend_ptr += amount;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	689a      	ldr	r2, [r3, #8]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	441a      	add	r2, r3
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	609a      	str	r2, [r3, #8]
            }

            /* Cut down amount*/
            amount = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	603b      	str	r3, [r7, #0]
    while (amount)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1b2      	bne.n	800f3c2 <_nx_tcp_socket_state_data_trim_front+0x38>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Restore prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	f1a3 0214 	sub.w	r2, r3, #20
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	609a      	str	r2, [r3, #8]
 800f468:	e000      	b.n	800f46c <_nx_tcp_socket_state_data_trim_front+0xe2>
        return;
 800f46a:	bf00      	nop
}
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
	...

0800f474 <_nx_tcp_socket_state_data_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b096      	sub	sp, #88	; 0x58
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
ULONG          search_begin_sequence;
ULONG          search_end_sequence;
ULONG          original_rx_sequence;
ULONG          trim_data_length;
TX_THREAD     *thread_ptr;
ULONG          acked_packets = 0;
 800f47e:	2300      	movs	r3, #0
 800f480:	63bb      	str	r3, [r7, #56]	; 0x38
UINT           need_ack = NX_FALSE;
 800f482:	2300      	movs	r3, #0
 800f484:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* NX_ENABLE_LOW_WATERMARK */
#if ((!defined(NX_DISABLE_TCP_INFO)) || defined(TX_ENABLE_EVENT_TRACE))
NX_IP         *ip_ptr;

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f48c:	633b      	str	r3, [r7, #48]	; 0x30
#endif


    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine the size of the TCP header.  */
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800f494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	0f1b      	lsrs	r3, r3, #28
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Record the original rx_sequence. */
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b0:	1ad3      	subs	r3, r2, r3
 800f4b2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800f4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4ba:	4413      	add	r3, r2
 800f4bc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length)
 800f4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d03a      	beq.n	800f53a <_nx_tcp_socket_state_data_check+0xc6>
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)socket_ptr -> nx_tcp_socket_rx_sequence - (INT)packet_begin_sequence) > 0)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4cc:	1ad3      	subs	r3, r2, r3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	dd16      	ble.n	800f500 <_nx_tcp_socket_state_data_check+0x8c>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim_front(packet_ptr, trim_data_length);
 800f4dc:	6a39      	ldr	r1, [r7, #32]
 800f4de:	6838      	ldr	r0, [r7, #0]
 800f4e0:	f7ff ff53 	bl	800f38a <_nx_tcp_socket_state_data_trim_front>

            /* Fix the sequence of this packet. */
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 800f4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e6:	685a      	ldr	r2, [r3, #4]
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	441a      	add	r2, r3
 800f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ee:	605a      	str	r2, [r3, #4]

            /* Update the data length and begin sequence.  */
            packet_data_length -= trim_data_length;
 800f4f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4f2:	6a3b      	ldr	r3, [r7, #32]
 800f4f4:	1ad3      	subs	r3, r2, r3
 800f4f6:	643b      	str	r3, [r7, #64]	; 0x40
            packet_begin_sequence += trim_data_length;
 800f4f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 800f500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f506:	1a9b      	subs	r3, r3, r2
             (INT)socket_ptr -> nx_tcp_socket_rx_window_current) > 0)
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	6f52      	ldr	r2, [r2, #116]	; 0x74
        if ((((INT)packet_end_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) -
 800f50c:	1a9b      	subs	r3, r3, r2
 800f50e:	2b00      	cmp	r3, #0
 800f510:	dd13      	ble.n	800f53a <_nx_tcp_socket_state_data_check+0xc6>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f51a:	4413      	add	r3, r2
 800f51c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim(packet_ptr, trim_data_length);
 800f522:	6a39      	ldr	r1, [r7, #32]
 800f524:	6838      	ldr	r0, [r7, #0]
 800f526:	f7ff fee5 	bl	800f2f4 <_nx_tcp_socket_state_data_trim>

            /* Update the data length and end sequence.  */
            packet_data_length -= trim_data_length;
 800f52a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f52c:	6a3b      	ldr	r3, [r7, #32]
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	643b      	str	r3, [r7, #64]	; 0x40
            packet_end_sequence -= trim_data_length;
 800f532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f534:	6a3b      	ldr	r3, [r7, #32]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 800f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f542:	2b00      	cmp	r3, #0
 800f544:	d009      	beq.n	800f55a <_nx_tcp_socket_state_data_check+0xe6>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f548:	685a      	ldr	r2, [r3, #4]
 800f54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f54c:	441a      	add	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2201      	movs	r2, #1
 800f556:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 800f55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d11d      	bne.n	800f59c <_nx_tcp_socket_state_data_check+0x128>
    {
        /* This packet does not contain TCP data payload.  */

        /* Check for invalid sequence number.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f564:	2b05      	cmp	r3, #5
 800f566:	d117      	bne.n	800f598 <_nx_tcp_socket_state_data_check+0x124>
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d112      	bne.n	800f598 <_nx_tcp_socket_state_data_check+0x124>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f578:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d00c      	beq.n	800f598 <_nx_tcp_socket_state_data_check+0x124>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f582:	1e5a      	subs	r2, r3, #1
 800f584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f586:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800f588:	429a      	cmp	r2, r3
 800f58a:	d005      	beq.n	800f598 <_nx_tcp_socket_state_data_check+0x124>
        {

            /* Send an immediate ACK.  */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f590:	4619      	mov	r1, r3
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7fd fc66 	bl	800ce64 <_nx_tcp_packet_send_ack>
        }

        /* This packet does not have data, so return false. */
        return(NX_FALSE);
 800f598:	2300      	movs	r3, #0
 800f59a:	e29e      	b.n	800fada <_nx_tcp_socket_state_data_check+0x666>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	61da      	str	r2, [r3, #28]

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f5a8:	657b      	str	r3, [r7, #84]	; 0x54

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 800f5aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d010      	beq.n	800f5d2 <_nx_tcp_socket_state_data_check+0x15e>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800f5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	61fb      	str	r3, [r7, #28]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	0f1b      	lsrs	r3, r3, #28
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	61bb      	str	r3, [r7, #24]

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c8:	441a      	add	r2, r3
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5d0:	e002      	b.n	800f5d8 <_nx_tcp_socket_state_data_check+0x164>
    else
    {

        /* Set the sequence number to the socket's receive sequence if there isn't a receive
           packet on the queue.  */
        search_end_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800f5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d132      	bne.n	800f64a <_nx_tcp_socket_state_data_check+0x1d6>
        (search_end_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800f5e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d12d      	bne.n	800f64a <_nx_tcp_socket_state_data_check+0x1d6>
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Mark the packet as ready. This is done to simplify the logic in socket receive.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800f5f4:	61da      	str	r2, [r3, #28]
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* Place the packet on the receive queue.  Search pointer still points to the tail packet on
               the queue.  */
            if (search_ptr)
 800f5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d007      	beq.n	800f60c <_nx_tcp_socket_state_data_check+0x198>
            {

                /* Nonempty receive queue, add packet to the end of the receive queue.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 800f5fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5fe:	683a      	ldr	r2, [r7, #0]
 800f600:	621a      	str	r2, [r3, #32]

                /* Update the tail of the receive queue.  */
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	683a      	ldr	r2, [r7, #0]
 800f606:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800f60a:	e00b      	b.n	800f624 <_nx_tcp_socket_state_data_check+0x1b0>
            }
            else
            {

                /* Empty receive queue.  Set both the head and the tail pointers this packet.  */
                socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Setup a new delayed ACK timeout.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800f61c:	4b8a      	ldr	r3, [pc, #552]	; (800f848 <_nx_tcp_socket_state_data_check+0x3d4>)
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Increment the receive TCP packet count.  */
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f62a:	1c5a      	adds	r2, r3, #1
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800f638:	621a      	str	r2, [r3, #32]

            /* Calculate the next sequence number.  */
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f63e:	641a      	str	r2, [r3, #64]	; 0x40

            /* All packets can be acked. */
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f646:	63bb      	str	r3, [r7, #56]	; 0x38
 800f648:	e147      	b.n	800f8da <_nx_tcp_socket_state_data_check+0x466>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f650:	2b00      	cmp	r3, #0
 800f652:	d11a      	bne.n	800f68a <_nx_tcp_socket_state_data_check+0x216>
        if (drop_packet == NX_FALSE)
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7fd fc02 	bl	800ce64 <_nx_tcp_packet_send_ack>
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* There are no packets chained on the receive queue.  Simply add the
               new packet to the receive queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	683a      	ldr	r2, [r7, #0]
 800f66c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increase the receive queue count. */
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800f678:	4b73      	ldr	r3, [pc, #460]	; (800f848 <_nx_tcp_socket_state_data_check+0x3d4>)
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	649a      	str	r2, [r3, #72]	; 0x48

            /* Mark the packet as being part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800f686:	621a      	str	r2, [r3, #32]
 800f688:	e127      	b.n	800f8da <_nx_tcp_socket_state_data_check+0x466>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)packet_begin_sequence - (INT)socket_ptr -> nx_tcp_socket_rx_sequence) > 0)
 800f68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f690:	1a9b      	subs	r3, r3, r2
 800f692:	2b00      	cmp	r3, #0
 800f694:	dd05      	ble.n	800f6a2 <_nx_tcp_socket_state_data_check+0x22e>
        {
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f69a:	4619      	mov	r1, r3
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7fd fbe1 	bl	800ce64 <_nx_tcp_packet_send_ack>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f6a8:	657b      	str	r3, [r7, #84]	; 0x54

        previous_ptr = NX_NULL;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	653b      	str	r3, [r7, #80]	; 0x50

        while (search_ptr)
 800f6ae:	e0ae      	b.n	800f80e <_nx_tcp_socket_state_data_check+0x39a>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 800f6b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6b2:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800f6b6:	d102      	bne.n	800f6be <_nx_tcp_socket_state_data_check+0x24a>
            {
                /* We hit the end of the receive queue. */
                search_ptr = NX_NULL;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	657b      	str	r3, [r7, #84]	; 0x54

                /* Terminate the out-of-order search.  */
                break;
 800f6bc:	e0ad      	b.n	800f81a <_nx_tcp_socket_state_data_check+0x3a6>
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800f6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	61fb      	str	r3, [r7, #28]

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	617b      	str	r3, [r7, #20]

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	0f1b      	lsrs	r3, r3, #28
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	62bb      	str	r3, [r7, #40]	; 0x28

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800f6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	441a      	add	r2, r3
 800f6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 800f6e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	db05      	blt.n	800f6f8 <_nx_tcp_socket_state_data_check+0x284>
            {
                /* Move on to the next packet. */
                previous_ptr = search_ptr;
 800f6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6ee:	653b      	str	r3, [r7, #80]	; 0x50

                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f6f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6f2:	6a1b      	ldr	r3, [r3, #32]
 800f6f4:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search */
                continue;
 800f6f6:	e08a      	b.n	800f80e <_nx_tcp_socket_state_data_check+0x39a>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 800f6f8:	697a      	ldr	r2, [r7, #20]
 800f6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6fc:	1ad3      	subs	r3, r2, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f280 808a 	bge.w	800f818 <_nx_tcp_socket_state_data_check+0x3a4>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800f704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	db0c      	blt.n	800f728 <_nx_tcp_socket_state_data_check+0x2b4>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 800f70e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f712:	1ad3      	subs	r3, r2, r3
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800f714:	2b00      	cmp	r3, #0
 800f716:	db07      	blt.n	800f728 <_nx_tcp_socket_state_data_check+0x2b4>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f71c:	4619      	mov	r1, r3
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7fd fba0 	bl	800ce64 <_nx_tcp_packet_send_ack>

                /* Since packet is not queued, return NX_FALSE so the caller releases the packet. */
                return(NX_FALSE);
 800f724:	2300      	movs	r3, #0
 800f726:	e1d8      	b.n	800fada <_nx_tcp_socket_state_data_check+0x666>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800f728:	697a      	ldr	r2, [r7, #20]
 800f72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	db3a      	blt.n	800f7a8 <_nx_tcp_socket_state_data_check+0x334>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 800f732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f736:	1ad3      	subs	r3, r2, r3
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800f738:	2b00      	cmp	r3, #0
 800f73a:	db35      	blt.n	800f7a8 <_nx_tcp_socket_state_data_check+0x334>
            {
            NX_PACKET *tmp_ptr;
                /* Release the search_ptr, and move to the next packet on the chain. */
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f73c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f73e:	6a1b      	ldr	r3, [r3, #32]
 800f740:	613b      	str	r3, [r7, #16]

                /* Mark the packet as no longer being part of the TCP queue. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800f742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f744:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f748:	621a      	str	r2, [r3, #32]

                /* Decrease the packet queue count */
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f750:	1e5a      	subs	r2, r3, #1
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Adjust the receive window. */

                /* Release the search packet. */
                _nx_packet_release(search_ptr);
 800f758:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f75a:	f7fb ff2d 	bl	800b5b8 <_nx_packet_release>

#ifndef NX_DISABLE_TCP_INFO
                /* The new packet has been admitted to the receive queue. */

                /* Increment the TCP packet receive count and bytes received count.  */
                ip_ptr -> nx_ip_tcp_packets_received--;
 800f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f760:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f764:	1e5a      	subs	r2, r3, #1
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - search_begin_sequence);
 800f76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f772:	6979      	ldr	r1, [r7, #20]
 800f774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f776:	1acb      	subs	r3, r1, r3
 800f778:	441a      	add	r2, r3
 800f77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

                /* Increment the TCP packet receive count and bytes received count for the socket.  */
                socket_ptr -> nx_tcp_socket_packets_received--;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f786:	1e5a      	subs	r2, r3, #1
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - search_begin_sequence);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f794:	6979      	ldr	r1, [r7, #20]
 800f796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f798:	1acb      	subs	r3, r1, r3
 800f79a:	441a      	add	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

                /* Move to the next packet.  (note: no need to update previous_ptr. */
                search_ptr = tmp_ptr;
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search. */
                continue;
 800f7a6:	e032      	b.n	800f80e <_nx_tcp_socket_state_data_check+0x39a>
             *                   SSSSSSSSSSSS                                                       *
             *        In this configuration, remove data from the back of the new packet,  insert   *
             *        packet into the chain, and terminate the search.  Need to search for          *
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
 800f7a8:	697a      	ldr	r2, [r7, #20]
 800f7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7ac:	1ad3      	subs	r3, r2, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	db0d      	blt.n	800f7ce <_nx_tcp_socket_state_data_check+0x35a>
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 800f7b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6838      	ldr	r0, [r7, #0]
 800f7bc:	f7ff fd9a 	bl	800f2f4 <_nx_tcp_socket_state_data_trim>

                /* Update packet_data_length. */
                packet_data_length -= (packet_end_sequence - search_begin_sequence);
 800f7c0:	697a      	ldr	r2, [r7, #20]
 800f7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7c4:	1ad3      	subs	r3, r2, r3
 800f7c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7c8:	4413      	add	r3, r2
 800f7ca:	643b      	str	r3, [r7, #64]	; 0x40

                /* Now the packet should be chained before search_ptr. */

                break;
 800f7cc:	e025      	b.n	800f81a <_nx_tcp_socket_state_data_check+0x3a6>
             *        insert the packet after the search packet and continue the search.  This may  *
             *        lead to case (2) and (3).                                                     *
             *                                                                                      *
             *                                                                                      *
             ***************************************************************************************/
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 800f7ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7d2:	1ad3      	subs	r3, r2, r3
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f7d8:	f7ff fd8c 	bl	800f2f4 <_nx_tcp_socket_state_data_trim>

#ifndef NX_DISABLE_TCP_INFO
            /* The new packet has been admitted to the receive queue. */

            /* Reduce the TCP bytes received count.  */
            ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f7e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e6:	1acb      	subs	r3, r1, r3
 800f7e8:	441a      	add	r2, r3
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

            /* Reduce the TCP bytes received count for the socket.  */
            socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f7f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fa:	1acb      	subs	r3, r1, r3
 800f7fc:	441a      	add	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

            /* Move to the next packet and continue; */
            previous_ptr = search_ptr;
 800f804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f806:	653b      	str	r3, [r7, #80]	; 0x50
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f80a:	6a1b      	ldr	r3, [r3, #32]
 800f80c:	657b      	str	r3, [r7, #84]	; 0x54
        while (search_ptr)
 800f80e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f810:	2b00      	cmp	r3, #0
 800f812:	f47f af4d 	bne.w	800f6b0 <_nx_tcp_socket_state_data_check+0x23c>
 800f816:	e000      	b.n	800f81a <_nx_tcp_socket_state_data_check+0x3a6>
                break;
 800f818:	bf00      	nop
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 800f81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d104      	bne.n	800f82a <_nx_tcp_socket_state_data_check+0x3b6>
        {

            /* The packet needs to be inserted at the beginning of the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	683a      	ldr	r2, [r7, #0]
 800f824:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800f828:	e002      	b.n	800f830 <_nx_tcp_socket_state_data_check+0x3bc>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 800f82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f82c:	683a      	ldr	r2, [r7, #0]
 800f82e:	621a      	str	r2, [r3, #32]
        }

        if (search_ptr == NX_NULL)
 800f830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f832:	2b00      	cmp	r3, #0
 800f834:	d10a      	bne.n	800f84c <_nx_tcp_socket_state_data_check+0x3d8>
        {

            /* This packet is on the last one on the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	683a      	ldr	r2, [r7, #0]
 800f83a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800f844:	621a      	str	r2, [r3, #32]
 800f846:	e004      	b.n	800f852 <_nx_tcp_socket_state_data_check+0x3de>
 800f848:	2000aa24 	.word	0x2000aa24
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f850:	621a      	str	r2, [r3, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f866:	657b      	str	r3, [r7, #84]	; 0x54

        /* Get the sequence number expected by the TCP receive socket. */
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f86c:	64fb      	str	r3, [r7, #76]	; 0x4c
        do
        {

            /* Setup a pointer to header of this packet in the sent list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800f86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	61fb      	str	r3, [r7, #28]


            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	0f1b      	lsrs	r3, r3, #28
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	62bb      	str	r3, [r7, #40]	; 0x28

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	617b      	str	r3, [r7, #20]

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800f884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	441a      	add	r2, r3
 800f88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	63fb      	str	r3, [r7, #60]	; 0x3c

            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 800f892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	2b00      	cmp	r3, #0
 800f89a:	db1d      	blt.n	800f8d8 <_nx_tcp_socket_state_data_check+0x464>
            {

                if ((INT)(search_end_sequence - expected_sequence) > 0)
 800f89c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	dd0b      	ble.n	800f8be <_nx_tcp_socket_state_data_check+0x44a>
                {
                    /* Sequence number is within this packet.  Advance sequence number. */
                    expected_sequence = search_end_sequence;
 800f8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a8:	64fb      	str	r3, [r7, #76]	; 0x4c

                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8ae:	641a      	str	r2, [r3, #64]	; 0x40

                    acked_packets++;
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	63bb      	str	r3, [r7, #56]	; 0x38

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800f8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8b8:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800f8bc:	61da      	str	r2, [r3, #28]
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f8be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8c0:	6a1b      	ldr	r3, [r3, #32]
 800f8c2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if we are at the end of the queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800f8c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8c6:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800f8ca:	d101      	bne.n	800f8d0 <_nx_tcp_socket_state_data_check+0x45c>
            {

                /* At the end, set the search pointer to NULL.  */
                search_ptr =  NX_NULL;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	657b      	str	r3, [r7, #84]	; 0x54

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 800f8d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1cb      	bne.n	800f86e <_nx_tcp_socket_state_data_check+0x3fa>
 800f8d6:	e000      	b.n	800f8da <_nx_tcp_socket_state_data_check+0x466>
                break;
 800f8d8:	bf00      	nop

#ifndef NX_DISABLE_TCP_INFO
    /* The new packet has been admitted to the receive queue. */

    /* Increment the TCP packet receive count and bytes received count.  */
    ip_ptr -> nx_ip_tcp_packets_received++;
 800f8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f8e0:	1c5a      	adds	r2, r3, #1
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    ip_ptr -> nx_ip_tcp_bytes_received += packet_data_length;
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8f0:	441a      	add	r2, r3
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* Increment the TCP packet receive count and bytes received count for the socket.  */
    socket_ptr -> nx_tcp_socket_packets_received++;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8fe:	1c5a      	adds	r2, r3, #1
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f90e:	441a      	add	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d011      	beq.n	800f944 <_nx_tcp_socket_state_data_check+0x4d0>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f92a:	1acb      	subs	r3, r1, r3
 800f92c:	441a      	add	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	675a      	str	r2, [r3, #116]	; 0x74

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f93c:	1acb      	subs	r3, r1, r3
 800f93e:	441a      	add	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifdef NX_TCP_MAX_OUT_OF_ORDER_PACKETS
    /* Does the count of out of order packets exceed the defined value? */
    if ((socket_ptr -> nx_tcp_socket_receive_queue_count - acked_packets) >
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	2b08      	cmp	r3, #8
 800f950:	f240 8089 	bls.w	800fa66 <_nx_tcp_socket_state_data_check+0x5f2>
        NX_TCP_MAX_OUT_OF_ORDER_PACKETS)
    {

        /* Yes it is. Remove the last packet in queue. */
        socket_ptr -> nx_tcp_socket_receive_queue_tail -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f95a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f95e:	621a      	str	r2, [r3, #32]
        if (socket_ptr -> nx_tcp_socket_receive_queue_count > 1)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f966:	2b01      	cmp	r3, #1
 800f968:	d91d      	bls.n	800f9a6 <_nx_tcp_socket_state_data_check+0x532>
        {

            /* Find the previous packet of tail. */
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f970:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800f972:	e002      	b.n	800f97a <_nx_tcp_socket_state_data_check+0x506>
            {
                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f976:	6a1b      	ldr	r3, [r3, #32]
 800f978:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800f97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f97c:	6a1a      	ldr	r2, [r3, #32]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f984:	429a      	cmp	r2, r3
 800f986:	d1f5      	bne.n	800f974 <_nx_tcp_socket_state_data_check+0x500>
            }

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fb fe12 	bl	800b5b8 <_nx_packet_release>

            /* Setup the tail packet. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = search_ptr;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f998:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800f99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f99e:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800f9a2:	621a      	str	r2, [r3, #32]
 800f9a4:	e00d      	b.n	800f9c2 <_nx_tcp_socket_state_data_check+0x54e>
        }
        else
        {

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fb fe03 	bl	800b5b8 <_nx_packet_release>

            /* Clear the head and tail packets. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = NX_NULL;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = NX_NULL;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        }

        /* Decrease receive queue count. */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f9c8:	1e5a      	subs	r2, r3, #1
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800f9d0:	e049      	b.n	800fa66 <_nx_tcp_socket_state_data_check+0x5f2>
    {

        /* Setup a pointer to the first queued packet.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f9d8:	603b      	str	r3, [r7, #0]
        /* Remove it from the queue.  */

        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	6a1a      	ldr	r2, [r3, #32]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800f9ea:	621a      	str	r2, [r3, #32]

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	61da      	str	r2, [r3, #28]

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f9f8:	1e5a      	subs	r2, r3, #1
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Adjust the packet for delivery to the suspended thread.  */

        /* Setup a pointer to the TCP header of this packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Calculate the header size for this packet.  */
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800fa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	0f1b      	lsrs	r3, r3, #28
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Adjust the packet prepend pointer and length to position past the TCP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	689a      	ldr	r2, [r3, #8]
 800fa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa16:	441a      	add	r2, r3
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa22:	1ad2      	subs	r2, r2, r3
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fa2e:	60fb      	str	r3, [r7, #12]

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa34:	683a      	ldr	r2, [r7, #0]
 800fa36:	601a      	str	r2, [r3, #0]

        /* Increase the receive window size.  */
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa40:	441a      	add	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	675a      	str	r2, [r3, #116]	; 0x74

        /* Remove the suspended thread from the list.  */

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fa4c:	1e5a      	subs	r2, r3, #1
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Decrement the acked_packets count. */
        acked_packets--;
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	3b01      	subs	r3, #1
 800fa58:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	33ec      	adds	r3, #236	; 0xec
 800fa5e:	2100      	movs	r1, #0
 800fa60:	4618      	mov	r0, r3
 800fa62:	f000 fb23 	bl	80100ac <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800fa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d004      	beq.n	800fa76 <_nx_tcp_socket_state_data_check+0x602>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d1ad      	bne.n	800f9d2 <_nx_tcp_socket_state_data_check+0x55e>
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d107      	bne.n	800fa90 <_nx_tcp_socket_state_data_check+0x61c>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa98:	1ad2      	subs	r2, r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa9e:	085b      	lsrs	r3, r3, #1
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d301      	bcc.n	800faa8 <_nx_tcp_socket_state_data_check+0x634>
    {

        /* Need to send ACK for window update.  */
        need_ack = NX_TRUE;
 800faa4:	2301      	movs	r3, #1
 800faa6:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faae:	429a      	cmp	r2, r3
 800fab0:	d009      	beq.n	800fac6 <_nx_tcp_socket_state_data_check+0x652>
    {
        /* Determine if there is a socket receive notification function specified.  */
        if (socket_ptr -> nx_tcp_receive_callback)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d004      	beq.n	800fac6 <_nx_tcp_socket_state_data_check+0x652>
        {

            /* Yes, notification is requested.  Call the application's receive notification
               function for this socket.  */
            (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	4798      	blx	r3
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 800fac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d105      	bne.n	800fad8 <_nx_tcp_socket_state_data_check+0x664>
    {

        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad0:	4619      	mov	r1, r3
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f7fd f9c6 	bl	800ce64 <_nx_tcp_packet_send_ack>
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 800fad8:	2301      	movs	r3, #1
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3758      	adds	r7, #88	; 0x58
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop

0800fae4 <_nx_tcp_socket_state_established>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_established(NX_TCP_SOCKET *socket_ptr)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
#if !defined(NX_DISABLE_TCP_INFO) || defined(TX_ENABLE_EVENT_TRACE)
NX_IP *ip_ptr;


    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800faf2:	60fb      	str	r3, [r7, #12]
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d031      	beq.n	800fb62 <_nx_tcp_socket_state_established+0x7e>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d12b      	bne.n	800fb62 <_nx_tcp_socket_state_established+0x7e>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP disconnections count.  */
        ip_ptr -> nx_ip_tcp_disconnections++;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800fb10:	1c5a      	adds	r2, r3, #1
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSE_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2206      	movs	r2, #6
 800fb1c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb22:	1c5a      	adds	r2, r3, #1
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800fb28:	e006      	b.n	800fb38 <_nx_tcp_socket_state_established+0x54>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fb30:	2100      	movs	r1, #0
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fd fbec 	bl	800d310 <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d1f3      	bne.n	800fb2a <_nx_tcp_socket_state_established+0x46>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb46:	4619      	mov	r1, r3
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7fd f98b 	bl	800ce64 <_nx_tcp_packet_send_ack>

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d004      	beq.n	800fb62 <_nx_tcp_socket_state_established+0x7e>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	4798      	blx	r3
        }
    }
}
 800fb62:	bf00      	nop
 800fb64:	3710      	adds	r7, #16
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
	...

0800fb6c <_nx_tcp_socket_state_fin_wait1>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait1(NX_TCP_SOCKET *socket_ptr)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00c      	beq.n	800fb98 <_nx_tcp_socket_state_fin_wait1+0x2c>
        (socket_ptr -> nx_tcp_socket_fin_received == NX_FALSE))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d107      	bne.n	800fb98 <_nx_tcp_socket_state_fin_wait1+0x2c>
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_2, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* We have a legitimate ACK message.  Simply move into the WAIT FIN 2 state
           for the other side to finish its processing and disconnect.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2208      	movs	r2, #8
 800fb8c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Otherwise, simply clear the FIN timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800fb96:	e04e      	b.n	800fc36 <_nx_tcp_socket_state_fin_wait1+0xca>
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d02f      	beq.n	800fc02 <_nx_tcp_socket_state_fin_wait1+0x96>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d129      	bne.n	800fc02 <_nx_tcp_socket_state_fin_wait1+0x96>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	220a      	movs	r2, #10
 800fbb2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800fbb4:	4b22      	ldr	r3, [pc, #136]	; (800fc40 <_nx_tcp_socket_state_fin_wait1+0xd4>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbcc:	4619      	mov	r1, r3
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7fd f948 	bl	800ce64 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d006      	beq.n	800fbec <_nx_tcp_socket_state_fin_wait1+0x80>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f000 fa60 	bl	80100ac <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d01f      	beq.n	800fc36 <_nx_tcp_socket_state_fin_wait1+0xca>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	4798      	blx	r3
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800fc00:	e019      	b.n	800fc36 <_nx_tcp_socket_state_fin_wait1+0xca>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d014      	beq.n	800fc36 <_nx_tcp_socket_state_fin_wait1+0xca>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d10e      	bne.n	800fc36 <_nx_tcp_socket_state_fin_wait1+0xca>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSING, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the CLOSING state for simultaneous close situation.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2209      	movs	r2, #9
 800fc1c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc22:	1c5a      	adds	r2, r3, #1
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f7fd f918 	bl	800ce64 <_nx_tcp_packet_send_ack>
    }
}
 800fc34:	e7ff      	b.n	800fc36 <_nx_tcp_socket_state_fin_wait1+0xca>
 800fc36:	bf00      	nop
 800fc38:	3708      	adds	r7, #8
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	2000aa20 	.word	0x2000aa20

0800fc44 <_nx_tcp_socket_state_fin_wait2>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait2(NX_TCP_SOCKET *socket_ptr)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d02e      	beq.n	800fcb4 <_nx_tcp_socket_state_fin_wait2+0x70>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d128      	bne.n	800fcb4 <_nx_tcp_socket_state_fin_wait2+0x70>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	220a      	movs	r2, #10
 800fc66:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime).  */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800fc68:	4b14      	ldr	r3, [pc, #80]	; (800fcbc <_nx_tcp_socket_state_fin_wait2+0x78>)
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc76:	1c5a      	adds	r2, r3, #1
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc80:	4619      	mov	r1, r3
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7fd f8ee 	bl	800ce64 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d006      	beq.n	800fca0 <_nx_tcp_socket_state_fin_wait2+0x5c>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fc98:	2100      	movs	r1, #0
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 fa06 	bl	80100ac <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d004      	beq.n	800fcb4 <_nx_tcp_socket_state_fin_wait2+0x70>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	4798      	blx	r3
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 800fcb4:	bf00      	nop
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	2000aa20 	.word	0x2000aa20

0800fcc0 <_nx_tcp_socket_state_last_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d01a      	beq.n	800fd0c <_nx_tcp_socket_state_last_ack+0x4c>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	689a      	ldr	r2, [r3, #8]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d114      	bne.n	800fd0c <_nx_tcp_socket_state_last_ack+0x4c>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d10e      	bne.n	800fd0c <_nx_tcp_socket_state_last_ack+0x4c>
        {

            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7fd fbb6 	bl	800d460 <_nx_tcp_socket_block_cleanup>

            /* Determine if we need to wake a thread suspended on the disconnection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d006      	beq.n	800fd0c <_nx_tcp_socket_state_last_ack+0x4c>
            {

                /* Resume suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fd04:	2100      	movs	r1, #0
 800fd06:	4618      	mov	r0, r3
 800fd08:	f000 f9d0 	bl	80100ac <_nx_tcp_socket_thread_resume>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 800fd0c:	bf00      	nop
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <_nx_tcp_socket_state_syn_received>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_received(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d04d      	beq.n	800fdc6 <_nx_tcp_socket_state_syn_received+0xb2>
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	689a      	ldr	r2, [r3, #8]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d143      	bne.n	800fdbe <_nx_tcp_socket_state_syn_received+0xaa>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	b29a      	uxth	r2, r3
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;

#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	635a      	str	r2, [r3, #52]	; 0x34

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d004      	beq.n	800fd5c <_nx_tcp_socket_state_syn_received+0x48>
            {

                /* Set the initial congestion control window size to be the mss. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6a1a      	ldr	r2, [r3, #32]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	659a      	str	r2, [r3, #88]	; 0x58
 800fd5a:	e01d      	b.n	800fd98 <_nx_tcp_socket_state_syn_received+0x84>
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a1b      	ldr	r3, [r3, #32]
 800fd60:	009a      	lsls	r2, r3, #2
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	659a      	str	r2, [r3, #88]	; 0x58
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800fd6e:	d306      	bcc.n	800fd7e <_nx_tcp_socket_state_syn_received+0x6a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6a1b      	ldr	r3, [r3, #32]
 800fd78:	1ad2      	subs	r2, r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	659a      	str	r2, [r3, #88]	; 0x58
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	f640 028e 	movw	r2, #2190	; 0x88e
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d906      	bls.n	800fd98 <_nx_tcp_socket_state_syn_received+0x84>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a1b      	ldr	r3, [r3, #32]
 800fd92:	1ad2      	subs	r2, r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2205      	movs	r2, #5
 800fd9c:	639a      	str	r2, [r3, #56]	; 0x38
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d00a      	beq.n	800fdc6 <_nx_tcp_socket_state_syn_received+0xb2>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	33fc      	adds	r3, #252	; 0xfc
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 f978 	bl	80100ac <_nx_tcp_socket_thread_resume>

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 800fdbc:	e003      	b.n	800fdc6 <_nx_tcp_socket_state_syn_received+0xb2>
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800fdbe:	6839      	ldr	r1, [r7, #0]
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f7fd f9bf 	bl	800d144 <_nx_tcp_packet_send_rst>
}
 800fdc6:	bf00      	nop
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <_nx_tcp_socket_state_syn_sent>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	60f8      	str	r0, [r7, #12]
 800fdd6:	60b9      	str	r1, [r7, #8]
 800fdd8:	607a      	str	r2, [r7, #4]
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d019      	beq.n	800fe1a <_nx_tcp_socket_state_syn_sent+0x4c>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 80d2 	beq.w	800ff98 <_nx_tcp_socket_state_syn_sent+0x1ca>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	689a      	ldr	r2, [r3, #8]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	f040 80cb 	bne.w	800ff98 <_nx_tcp_socket_state_syn_sent+0x1ca>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fe08:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800fe0c:	3201      	adds	r2, #1
 800fe0e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f7fd fb51 	bl	800d4ba <_nx_tcp_socket_connection_reset>
        }

        /* Finished processing, simply return!  */
        return;
 800fe18:	e0be      	b.n	800ff98 <_nx_tcp_socket_state_syn_sent+0x1ca>
    }
    /* Determine if a valid SYN/ACK is present.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d05d      	beq.n	800fee2 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d057      	beq.n	800fee2 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	689a      	ldr	r2, [r3, #8]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d151      	bne.n	800fee2 <_nx_tcp_socket_state_syn_sent+0x114>
        /* Yes, this is a proper SYN/ACK message.  We need to send an ACK
           back the other direction before we go into the ESTABLISHED
           state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	1c5a      	adds	r2, r3, #1
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	655a      	str	r2, [r3, #84]	; 0x54
        }

#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d004      	beq.n	800fe74 <_nx_tcp_socket_state_syn_sent+0xa6>
        {

            /* Set the initial congestion control window size to be the mss. */
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6a1a      	ldr	r2, [r3, #32]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	659a      	str	r2, [r3, #88]	; 0x58
 800fe72:	e01d      	b.n	800feb0 <_nx_tcp_socket_state_syn_sent+0xe2>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6a1b      	ldr	r3, [r3, #32]
 800fe78:	009a      	lsls	r2, r3, #2
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	659a      	str	r2, [r3, #88]	; 0x58
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6a1b      	ldr	r3, [r3, #32]
 800fe82:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800fe86:	d306      	bcc.n	800fe96 <_nx_tcp_socket_state_syn_sent+0xc8>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6a1b      	ldr	r3, [r3, #32]
 800fe90:	1ad2      	subs	r2, r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	659a      	str	r2, [r3, #88]	; 0x58
            }
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6a1b      	ldr	r3, [r3, #32]
 800fe9a:	f640 028e 	movw	r2, #2190	; 0x88e
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d906      	bls.n	800feb0 <_nx_tcp_socket_state_syn_sent+0xe2>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6a1b      	ldr	r3, [r3, #32]
 800feaa:	1ad2      	subs	r2, r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	659a      	str	r2, [r3, #88]	; 0x58
            }
        }

        /* Send the ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feb4:	4619      	mov	r1, r3
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f7fc ffd4 	bl	800ce64 <_nx_tcp_packet_send_ack>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the ESTABLISHED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2205      	movs	r2, #5
 800fec0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the socket timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
        }
#endif

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d062      	beq.n	800ff9a <_nx_tcp_socket_state_syn_sent+0x1cc>
        {

            /* Resume the suspended thread.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	33fc      	adds	r3, #252	; 0xfc
 800fed8:	2100      	movs	r1, #0
 800feda:	4618      	mov	r0, r3
 800fedc:	f000 f8e6 	bl	80100ac <_nx_tcp_socket_thread_resume>
        if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800fee0:	e05b      	b.n	800ff9a <_nx_tcp_socket_state_syn_sent+0x1cc>
        }
    }
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800feea:	2b00      	cmp	r3, #0
 800feec:	d043      	beq.n	800ff76 <_nx_tcp_socket_state_syn_sent+0x1a8>
             (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)))
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d13d      	bne.n	800ff76 <_nx_tcp_socket_state_syn_sent+0x1a8>

        /* Simultaneous Connection Synchronization,
           A SYN message was received.  We need to send both a SYN and ACK and move to the SYN RECEIVED state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_rcv_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	6a1b      	ldr	r3, [r3, #32]
 800ff1a:	009a      	lsls	r2, r3, #2
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	659a      	str	r2, [r3, #88]	; 0x58
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6a1b      	ldr	r3, [r3, #32]
 800ff24:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800ff28:	d306      	bcc.n	800ff38 <_nx_tcp_socket_state_syn_sent+0x16a>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	1ad2      	subs	r2, r2, r3
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	659a      	str	r2, [r3, #88]	; 0x58
        }
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6a1b      	ldr	r3, [r3, #32]
 800ff3c:	f640 028e 	movw	r2, #2190	; 0x88e
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d906      	bls.n	800ff52 <_nx_tcp_socket_state_syn_sent+0x184>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6a1b      	ldr	r3, [r3, #32]
 800ff4c:	1ad2      	subs	r2, r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2200      	movs	r2, #0
 800ff56:	65da      	str	r2, [r3, #92]	; 0x5c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_SYN_RECEIVED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the SYN RECEIVED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2204      	movs	r2, #4
 800ff5c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the SYN packet.  */
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	68f8      	ldr	r0, [r7, #12]
 800ff70:	f7fd f91c 	bl	800d1ac <_nx_tcp_packet_send_syn>
 800ff74:	e011      	b.n	800ff9a <_nx_tcp_socket_state_syn_sent+0x1cc>
    }
    /* Check for an invalid response to an attempted connection.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00b      	beq.n	800ff9a <_nx_tcp_socket_state_syn_sent+0x1cc>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number != socket_ptr -> nx_tcp_socket_tx_sequence))
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	689a      	ldr	r2, [r3, #8]
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d005      	beq.n	800ff9a <_nx_tcp_socket_state_syn_sent+0x1cc>
        /* Invalid response was received, it is likely that the other side still
           thinks a previous connection is active.  Send a reset (RST) message to
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800ff8e:	68b9      	ldr	r1, [r7, #8]
 800ff90:	68f8      	ldr	r0, [r7, #12]
 800ff92:	f7fd f8d7 	bl	800d144 <_nx_tcp_packet_send_rst>
 800ff96:	e000      	b.n	800ff9a <_nx_tcp_socket_state_syn_sent+0x1cc>
        return;
 800ff98:	bf00      	nop
    }
}
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <_nx_tcp_socket_state_transmit_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_transmit_check(NX_TCP_SOCKET *socket_ptr)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d051      	beq.n	8010056 <_nx_tcp_socket_state_transmit_check+0xb6>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d919      	bls.n	800fff2 <_nx_tcp_socket_state_transmit_check+0x52>
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffc2:	60fb      	str	r3, [r7, #12]

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d003      	beq.n	800ffd4 <_nx_tcp_socket_state_transmit_check+0x34>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d105      	bne.n	800ffe0 <_nx_tcp_socket_state_transmit_check+0x40>
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6a1b      	ldr	r3, [r3, #32]
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	68fa      	ldr	r2, [r7, #12]
 800ffdc:	4413      	add	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]
            }

            /* Make sure the tx_window_current is less or equal to swnd. */
            if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_window_advertised)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d906      	bls.n	800fff8 <_nx_tcp_socket_state_transmit_check+0x58>
            {
                tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffee:	60fb      	str	r3, [r7, #12]
 800fff0:	e002      	b.n	800fff8 <_nx_tcp_socket_state_transmit_check+0x58>
            }
        }
        else
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fff6:	60fb      	str	r3, [r7, #12]
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d905      	bls.n	801000e <_nx_tcp_socket_state_transmit_check+0x6e>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010006:	68fa      	ldr	r2, [r7, #12]
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	60fb      	str	r3, [r7, #12]
 801000c:	e001      	b.n	8010012 <_nx_tcp_socket_state_transmit_check+0x72>
        }
        else    /* Set tx_window_current to zero. */
        {
            tx_window_current = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	60fb      	str	r3, [r7, #12]
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d01e      	beq.n	8010056 <_nx_tcp_socket_state_transmit_check+0xb6>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        if ((tx_window_current) &&
 8010024:	429a      	cmp	r2, r3
 8010026:	d216      	bcs.n	8010056 <_nx_tcp_socket_state_transmit_check+0xb6>
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801002e:	2b00      	cmp	r3, #0
 8010030:	d004      	beq.n	801003c <_nx_tcp_socket_state_transmit_check+0x9c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8010042:	1e5a      	subs	r2, r3, #1
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	33f4      	adds	r3, #244	; 0xf4
 801004e:	2100      	movs	r1, #0
 8010050:	4618      	mov	r0, r3
 8010052:	f000 f82b 	bl	80100ac <_nx_tcp_socket_thread_resume>
        }
    }
}
 8010056:	bf00      	nop
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
	...

08010060 <_nx_tcp_socket_state_wait>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_wait(NX_TCP_SOCKET *socket_ptr, UINT desired_state, ULONG wait_option)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
    /* Loop to wait for the desired socket state.   */
    for (;;)
    {

        /* Determine if the socket pointer is still valid.  */
        if (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a0d      	ldr	r2, [pc, #52]	; (80100a8 <_nx_tcp_socket_state_wait+0x48>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d001      	beq.n	801007a <_nx_tcp_socket_state_wait+0x1a>
        {

            /* Not still valid, return an error.  */
            return(NX_PTR_ERROR);
 8010076:	2307      	movs	r3, #7
 8010078:	e011      	b.n	801009e <_nx_tcp_socket_state_wait+0x3e>
        }

        /* Determine if the desired state is present.  */
        if (socket_ptr -> nx_tcp_socket_state == desired_state)
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	429a      	cmp	r2, r3
 8010082:	d101      	bne.n	8010088 <_nx_tcp_socket_state_wait+0x28>
        {

            /* The desired state is present, return success!  */
            return(NX_SUCCESS);
 8010084:	2300      	movs	r3, #0
 8010086:	e00a      	b.n	801009e <_nx_tcp_socket_state_wait+0x3e>
        }

        /* Check to see if there is more time to wait.  */
        if (wait_option)
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d006      	beq.n	801009c <_nx_tcp_socket_state_wait+0x3c>
        {

            /* Yes, there is more time... sleep for a tick.  */
            tx_thread_sleep(1);
 801008e:	2001      	movs	r0, #1
 8010090:	f004 ff78 	bl	8014f84 <_tx_thread_sleep>

            /* Decrease the wait time.  */
            wait_option--;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	3b01      	subs	r3, #1
 8010098:	607b      	str	r3, [r7, #4]
 801009a:	e7e7      	b.n	801006c <_nx_tcp_socket_state_wait+0xc>
        }
        else
        {

            /* Timeout, just return an error.  */
            return(NX_NOT_SUCCESSFUL);
 801009c:	2343      	movs	r3, #67	; 0x43
        }
    }
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	54435020 	.word	0x54435020

080100ac <_nx_tcp_socket_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b088      	sub	sp, #32
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80100b6:	f3ef 8310 	mrs	r3, PRIMASK
 80100ba:	617b      	str	r3, [r7, #20]
    return(posture);
 80100bc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80100be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80100c0:	b672      	cpsid	i
    return(int_posture);
 80100c2:	693b      	ldr	r3, [r7, #16]

TX_THREAD *thread_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 80100c4:	61fb      	str	r3, [r7, #28]

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	61bb      	str	r3, [r7, #24]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d02c      	beq.n	801012c <_nx_tcp_socket_thread_resume+0x80>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100d6:	69ba      	ldr	r2, [r7, #24]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d103      	bne.n	80100e4 <_nx_tcp_socket_thread_resume+0x38>
        {

            /* Only this thread is on the suspension list.  Simply set the
               list head to NULL to reflect an empty suspension list.  */
            *suspension_list_head =  TX_NULL;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	e00d      	b.n	8010100 <_nx_tcp_socket_thread_resume+0x54>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	601a      	str	r2, [r3, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80100ec:	69bb      	ldr	r3, [r7, #24]
 80100ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80100f0:	69ba      	ldr	r2, [r7, #24]
 80100f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80100f4:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80100fa:	69ba      	ldr	r2, [r7, #24]
 80100fc:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80100fe:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Prepare for resumption of the thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	2200      	movs	r2, #0
 8010104:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8010106:	4b0e      	ldr	r3, [pc, #56]	; (8010140 <_nx_tcp_socket_thread_resume+0x94>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	3301      	adds	r3, #1
 801010c:	4a0c      	ldr	r2, [pc, #48]	; (8010140 <_nx_tcp_socket_thread_resume+0x94>)
 801010e:	6013      	str	r3, [r2, #0]
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f383 8810 	msr	PRIMASK, r3
}
 801011a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	683a      	ldr	r2, [r7, #0]
 8010120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010124:	69b8      	ldr	r0, [r7, #24]
 8010126:	f004 ffe7 	bl	80150f8 <_tx_thread_system_resume>
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 801012a:	e005      	b.n	8010138 <_nx_tcp_socket_thread_resume+0x8c>
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	f383 8810 	msr	PRIMASK, r3
}
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	3720      	adds	r7, #32
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	2000aaf4 	.word	0x2000aaf4

08010144 <_nx_tcp_socket_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_suspend(TX_THREAD **suspension_list_head, VOID (*suspend_cleanup)(TX_THREAD * NX_CLEANUP_PARAMETER), NX_TCP_SOCKET *socket_ptr, TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b08a      	sub	sp, #40	; 0x28
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
 8010150:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010152:	f3ef 8310 	mrs	r3, PRIMASK
 8010156:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010158:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801015a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801015c:	b672      	cpsid	i
    return(int_posture);
 801015e:	69bb      	ldr	r3, [r7, #24]

TX_THREAD *thread_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8010160:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup thread pointer.  */
    thread_ptr =  _tx_thread_current_ptr;
 8010162:	4b23      	ldr	r3, [pc, #140]	; (80101f0 <_nx_tcp_socket_thread_suspend+0xac>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	623b      	str	r3, [r7, #32]

    /* Setup suspension list.  */
    if (*suspension_list_head)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d012      	beq.n	8010196 <_nx_tcp_socket_thread_suspend+0x52>
    {

        /* This list is not NULL, add current thread to the end. */
        thread_ptr -> tx_thread_suspended_next =      *suspension_list_head;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	6a3b      	ldr	r3, [r7, #32]
 8010176:	671a      	str	r2, [r3, #112]	; 0x70
        thread_ptr -> tx_thread_suspended_previous =  (*suspension_list_head) -> tx_thread_suspended_previous;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801017e:	6a3b      	ldr	r3, [r7, #32]
 8010180:	675a      	str	r2, [r3, #116]	; 0x74
        ((*suspension_list_head) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010188:	6a3a      	ldr	r2, [r7, #32]
 801018a:	671a      	str	r2, [r3, #112]	; 0x70
        (*suspension_list_head) -> tx_thread_suspended_previous =   thread_ptr;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	6a3a      	ldr	r2, [r7, #32]
 8010192:	675a      	str	r2, [r3, #116]	; 0x74
 8010194:	e008      	b.n	80101a8 <_nx_tcp_socket_thread_suspend+0x64>
    else
    {

        /* No other threads are suspended.  Setup the head pointer and
           just setup this threads pointers to itself.  */
        *suspension_list_head =  thread_ptr;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	6a3a      	ldr	r2, [r7, #32]
 801019a:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801019c:	6a3b      	ldr	r3, [r7, #32]
 801019e:	6a3a      	ldr	r2, [r7, #32]
 80101a0:	671a      	str	r2, [r3, #112]	; 0x70
        thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	6a3a      	ldr	r2, [r7, #32]
 80101a6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Setup cleanup routine pointer.  */
    thread_ptr -> tx_thread_suspend_cleanup =  suspend_cleanup;
 80101a8:	6a3b      	ldr	r3, [r7, #32]
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	669a      	str	r2, [r3, #104]	; 0x68

    /* Setup cleanup information, i.e. this pool control
       block.  */
    thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set the state to suspended.  */
    thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	220c      	movs	r2, #12
 80101b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the suspending flag.  */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80101ba:	6a3b      	ldr	r3, [r7, #32]
 80101bc:	2201      	movs	r2, #1
 80101be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80101c0:	4b0c      	ldr	r3, [pc, #48]	; (80101f4 <_nx_tcp_socket_thread_suspend+0xb0>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	3301      	adds	r3, #1
 80101c6:	4a0b      	ldr	r2, [pc, #44]	; (80101f4 <_nx_tcp_socket_thread_suspend+0xb0>)
 80101c8:	6013      	str	r3, [r2, #0]

    /* Save the timeout value.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80101ca:	6a3b      	ldr	r3, [r7, #32]
 80101cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80101d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	f383 8810 	msr	PRIMASK, r3
}
 80101da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release protection.  */
    tx_mutex_put(mutex_ptr);
 80101dc:	6838      	ldr	r0, [r7, #0]
 80101de:	f003 ff31 	bl	8014044 <_tx_mutex_put>

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80101e2:	6a38      	ldr	r0, [r7, #32]
 80101e4:	f005 f888 	bl	80152f8 <_tx_thread_system_suspend>
}
 80101e8:	bf00      	nop
 80101ea:	3728      	adds	r7, #40	; 0x28
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	2000aaf8 	.word	0x2000aaf8
 80101f4:	2000aaf4 	.word	0x2000aaf4

080101f8 <_nx_tcp_socket_transmit_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_transmit_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	; 0x28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010206:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 8010218:	e02c      	b.n	8010274 <_nx_tcp_socket_transmit_queue_flush+0x7c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801021a:	f3ef 8310 	mrs	r3, PRIMASK
 801021e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010220:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010222:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010224:	b672      	cpsid	i
    return(int_posture);
 8010226:	697b      	ldr	r3, [r7, #20]
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8010228:	623b      	str	r3, [r7, #32]

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 801022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022c:	6a1b      	ldr	r3, [r3, #32]
 801022e:	61fb      	str	r3, [r7, #28]

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8010230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010232:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8010236:	621a      	str	r2, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8010238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 8010240:	d109      	bne.n	8010256 <_nx_tcp_socket_transmit_queue_flush+0x5e>
 8010242:	6a3b      	ldr	r3, [r7, #32]
 8010244:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	f383 8810 	msr	PRIMASK, r3
}
 801024c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 801024e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010250:	f7fb f9b2 	bl	800b5b8 <_nx_packet_release>
 8010254:	e005      	b.n	8010262 <_nx_tcp_socket_transmit_queue_flush+0x6a>
 8010256:	6a3b      	ldr	r3, [r7, #32]
 8010258:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f383 8810 	msr	PRIMASK, r3
}
 8010260:	bf00      	nop
            /* Just restore interrupts.  */
            TX_RESTORE
        }

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	627b      	str	r3, [r7, #36]	; 0x24

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801026c:	1e5a      	subs	r2, r3, #1
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1cd      	bne.n	801021a <_nx_tcp_socket_transmit_queue_flush+0x22>
    }
}
 801027e:	bf00      	nop
 8010280:	bf00      	nop
 8010282:	3728      	adds	r7, #40	; 0x28
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <_nx_tcp_transmit_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_transmit_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b08e      	sub	sp, #56	; 0x38
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010292:	f3ef 8310 	mrs	r3, PRIMASK
 8010296:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8010298:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801029a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801029c:	b672      	cpsid	i
    return(int_posture);
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_IP         *ip_ptr;

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 80102a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 80102a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d004      	beq.n	80102b8 <_nx_tcp_transmit_cleanup+0x30>
 80102ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	4a49      	ldr	r2, [pc, #292]	; (80103d8 <_nx_tcp_transmit_cleanup+0x150>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d006      	beq.n	80102c6 <_nx_tcp_transmit_cleanup+0x3e>
 80102b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102bc:	6a3b      	ldr	r3, [r7, #32]
 80102be:	f383 8810 	msr	PRIMASK, r3
}
 80102c2:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 80102c4:	e085      	b.n	80103d2 <_nx_tcp_transmit_cleanup+0x14a>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <_nx_tcp_transmit_cleanup+0x54>
 80102ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	f383 8810 	msr	PRIMASK, r3
}
 80102d8:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 80102da:	e07a      	b.n	80103d2 <_nx_tcp_transmit_cleanup+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80102dc:	f3ef 8305 	mrs	r3, IPSR
 80102e0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80102e2:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 80102e4:	4b3d      	ldr	r3, [pc, #244]	; (80103dc <_nx_tcp_transmit_cleanup+0x154>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d104      	bne.n	80102f8 <_nx_tcp_transmit_cleanup+0x70>
 80102ee:	4b3c      	ldr	r3, [pc, #240]	; (80103e0 <_nx_tcp_transmit_cleanup+0x158>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4a3c      	ldr	r2, [pc, #240]	; (80103e4 <_nx_tcp_transmit_cleanup+0x15c>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d116      	bne.n	8010326 <_nx_tcp_transmit_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	4a3b      	ldr	r2, [pc, #236]	; (80103e8 <_nx_tcp_transmit_cleanup+0x160>)
 80102fc:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010308:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	f383 8810 	msr	PRIMASK, r3
}
 8010310:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8010312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010314:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010318:	2200      	movs	r2, #0
 801031a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801031e:	4618      	mov	r0, r3
 8010320:	f002 ffb6 	bl	8013290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8010324:	e055      	b.n	80103d2 <_nx_tcp_transmit_cleanup+0x14a>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	429a      	cmp	r2, r3
 8010334:	d104      	bne.n	8010340 <_nx_tcp_transmit_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 8010336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010338:	2200      	movs	r2, #0
 801033a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 801033e:	e00e      	b.n	801035e <_nx_tcp_transmit_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010352:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 801035c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 801035e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010360:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8010364:	1e5a      	subs	r2, r3, #1
 8010366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010368:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010370:	2b0c      	cmp	r3, #12
 8010372:	d128      	bne.n	80103c6 <_nx_tcp_transmit_cleanup+0x13e>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which transmit error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 8010374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010378:	2b05      	cmp	r3, #5
 801037a:	d004      	beq.n	8010386 <_nx_tcp_transmit_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2238      	movs	r2, #56	; 0x38
 8010380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8010384:	e010      	b.n	80103a8 <_nx_tcp_transmit_cleanup+0x120>
            }
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 8010386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010388:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801038c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010392:	429a      	cmp	r2, r3
 8010394:	d204      	bcs.n	80103a0 <_nx_tcp_transmit_cleanup+0x118>
            {

                /* Not a queue depth problem, return a window overflow error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2239      	movs	r2, #57	; 0x39
 801039a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801039e:	e003      	b.n	80103a8 <_nx_tcp_transmit_cleanup+0x120>
            }
            else
            {

                /* Return a transmit queue exceeded error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2249      	movs	r2, #73	; 0x49
 80103a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80103a8:	4b10      	ldr	r3, [pc, #64]	; (80103ec <_nx_tcp_transmit_cleanup+0x164>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	3301      	adds	r3, #1
 80103ae:	4a0f      	ldr	r2, [pc, #60]	; (80103ec <_nx_tcp_transmit_cleanup+0x164>)
 80103b0:	6013      	str	r3, [r2, #0]
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	f383 8810 	msr	PRIMASK, r3
}
 80103bc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread!  */
            _tx_thread_system_resume(thread_ptr);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f004 fe9a 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 80103c4:	e005      	b.n	80103d2 <_nx_tcp_transmit_cleanup+0x14a>
 80103c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f383 8810 	msr	PRIMASK, r3
}
 80103d0:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80103d2:	3738      	adds	r7, #56	; 0x38
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	54435020 	.word	0x54435020
 80103dc:	20000094 	.word	0x20000094
 80103e0:	2000aaf8 	.word	0x2000aaf8
 80103e4:	2000ab98 	.word	0x2000ab98
 80103e8:	0800b861 	.word	0x0800b861
 80103ec:	2000aaf4 	.word	0x2000aaf4

080103f0 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b08a      	sub	sp, #40	; 0x28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103fe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010400:	f3ef 8310 	mrs	r3, PRIMASK
 8010404:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010406:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010408:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801040a:	b672      	cpsid	i
    return(int_posture);
 801040c:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 801040e:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010414:	2b00      	cmp	r3, #0
 8010416:	d043      	beq.n	80104a0 <_nx_udp_bind_cleanup+0xb0>
 8010418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041a:	2b00      	cmp	r3, #0
 801041c:	d040      	beq.n	80104a0 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010420:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8010422:	4a24      	ldr	r2, [pc, #144]	; (80104b4 <_nx_udp_bind_cleanup+0xc4>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d13b      	bne.n	80104a0 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	2200      	movs	r2, #0
 801042c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 8010434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010438:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	429a      	cmp	r2, r3
 8010442:	d103      	bne.n	801044c <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	2200      	movs	r2, #0
 8010448:	661a      	str	r2, [r3, #96]	; 0x60
 801044a:	e00d      	b.n	8010468 <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 801045c:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010466:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801046c:	1e5a      	subs	r2, r3, #1
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010476:	2b0c      	cmp	r3, #12
 8010478:	d112      	bne.n	80104a0 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2223      	movs	r2, #35	; 0x23
 801047e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010482:	4b0d      	ldr	r3, [pc, #52]	; (80104b8 <_nx_udp_bind_cleanup+0xc8>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	3301      	adds	r3, #1
 8010488:	4a0b      	ldr	r2, [pc, #44]	; (80104b8 <_nx_udp_bind_cleanup+0xc8>)
 801048a:	6013      	str	r3, [r2, #0]
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	f383 8810 	msr	PRIMASK, r3
}
 8010496:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f004 fe2d 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 801049e:	e005      	b.n	80104ac <_nx_udp_bind_cleanup+0xbc>
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f383 8810 	msr	PRIMASK, r3
}
 80104aa:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80104ac:	3728      	adds	r7, #40	; 0x28
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	55445020 	.word	0x55445020
 80104b8:	2000aaf4 	.word	0x2000aaf4

080104bc <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4a05      	ldr	r2, [pc, #20]	; (80104dc <_nx_udp_enable+0x20>)
 80104c8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	370c      	adds	r7, #12
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop
 80104dc:	080105d5 	.word	0x080105d5

080104e0 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b08a      	sub	sp, #40	; 0x28
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	0a1a      	lsrs	r2, r3, #8
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	4413      	add	r3, r2
 80104f8:	f003 031f 	and.w	r3, r3, #31
 80104fc:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010504:	f04f 31ff 	mov.w	r1, #4294967295
 8010508:	4618      	mov	r0, r3
 801050a:	f003 fb23 	bl	8013b54 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	33e0      	adds	r3, #224	; 0xe0
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	4413      	add	r3, r2
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 801051c:	2300      	movs	r3, #0
 801051e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 8010520:	6a3b      	ldr	r3, [r7, #32]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d010      	beq.n	8010548 <_nx_udp_free_port_find+0x68>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 8010526:	6a3b      	ldr	r3, [r7, #32]
 8010528:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 801052a:	6a3b      	ldr	r3, [r7, #32]
 801052c:	689b      	ldr	r3, [r3, #8]
 801052e:	68ba      	ldr	r2, [r7, #8]
 8010530:	429a      	cmp	r2, r3
 8010532:	d102      	bne.n	801053a <_nx_udp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 8010534:	2301      	movs	r3, #1
 8010536:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 8010538:	e006      	b.n	8010548 <_nx_udp_free_port_find+0x68>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 801053a:	6a3b      	ldr	r3, [r7, #32]
 801053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801053e:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 8010540:	6a3a      	ldr	r2, [r7, #32]
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	429a      	cmp	r2, r3
 8010546:	d1f0      	bne.n	801052a <_nx_udp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801054e:	4618      	mov	r0, r3
 8010550:	f003 fd78 	bl	8014044 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	2b00      	cmp	r3, #0
 8010558:	d104      	bne.n	8010564 <_nx_udp_free_port_find+0x84>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	68ba      	ldr	r2, [r7, #8]
 801055e:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 8010560:	2300      	movs	r3, #0
 8010562:	e00e      	b.n	8010582 <_nx_udp_free_port_find+0xa2>
        }

        /* Move to the next port.  */
        port++;
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	3301      	adds	r3, #1
 8010568:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010570:	d302      	bcc.n	8010578 <_nx_udp_free_port_find+0x98>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 8010572:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010576:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 8010578:	69fa      	ldr	r2, [r7, #28]
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	429a      	cmp	r2, r3
 801057e:	d1b7      	bne.n	80104f0 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 8010580:	2345      	movs	r3, #69	; 0x45
}
 8010582:	4618      	mov	r0, r3
 8010584:	3728      	adds	r7, #40	; 0x28
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <_nx_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b08a      	sub	sp, #40	; 0x28
 801058e:	af02      	add	r7, sp, #8
 8010590:	60f8      	str	r0, [r7, #12]
 8010592:	60b9      	str	r1, [r7, #8]
 8010594:	607a      	str	r2, [r7, #4]
 8010596:	603b      	str	r3, [r7, #0]
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 8010598:	f107 0114 	add.w	r1, r7, #20
 801059c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f001 f94d 	bl	8011844 <_nxd_udp_packet_info_extract>
 80105aa:	61f8      	str	r0, [r7, #28]

    if (status == NX_SUCCESS)
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10b      	bne.n	80105ca <_nx_udp_packet_info_extract+0x40>
    {
        if (ip_address)
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d008      	beq.n	80105ca <_nx_udp_packet_info_extract+0x40>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	2b04      	cmp	r3, #4
 80105bc:	d103      	bne.n	80105c6 <_nx_udp_packet_info_extract+0x3c>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 80105be:	69ba      	ldr	r2, [r7, #24]
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	601a      	str	r2, [r3, #0]
 80105c4:	e001      	b.n	80105ca <_nx_udp_packet_info_extract+0x40>
            }
            else
            {
                return(NX_INVALID_PACKET);
 80105c6:	2312      	movs	r3, #18
 80105c8:	e000      	b.n	80105cc <_nx_udp_packet_info_extract+0x42>
            }
        }
    }

    return(status);
 80105ca:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3720      	adds	r7, #32
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b094      	sub	sp, #80	; 0x50
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f0:	2b07      	cmp	r3, #7
 80105f2:	d80a      	bhi.n	801060a <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8010602:	6838      	ldr	r0, [r7, #0]
 8010604:	f7fa ffd8 	bl	800b5b8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8010608:	e1d8      	b.n	80109bc <_nx_udp_packet_receive+0x3e8>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	689b      	ldr	r3, [r3, #8]
 801060e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8010610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	ba1a      	rev	r2, r3
 8010616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010618:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 801061a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	ba1a      	rev	r2, r3
 8010620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010622:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	0c1b      	lsrs	r3, r3, #16
 801062e:	429a      	cmp	r2, r3
 8010630:	d20a      	bcs.n	8010648 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8010640:	6838      	ldr	r0, [r7, #0]
 8010642:	f7fa ffb9 	bl	800b5b8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8010646:	e1b9      	b.n	80109bc <_nx_udp_packet_receive+0x3e8>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8010648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	b29b      	uxth	r3, r3
 801064e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8010650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010652:	0a1a      	lsrs	r2, r3, #8
 8010654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010656:	4413      	add	r3, r2
 8010658:	f003 031f 	and.w	r3, r3, #31
 801065c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 801065e:	4b8f      	ldr	r3, [pc, #572]	; (801089c <_nx_udp_packet_receive+0x2c8>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d010      	beq.n	8010688 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010666:	f3ef 8305 	mrs	r3, IPSR
 801066a:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 801066c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801066e:	4b8c      	ldr	r3, [pc, #560]	; (80108a0 <_nx_udp_packet_receive+0x2cc>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4313      	orrs	r3, r2
 8010674:	2b00      	cmp	r3, #0
 8010676:	d107      	bne.n	8010688 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801067e:	f04f 31ff 	mov.w	r1, #4294967295
 8010682:	4618      	mov	r0, r3
 8010684:	f003 fa66 	bl	8013b54 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801068c:	33e0      	adds	r3, #224	; 0xe0
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 8010696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010698:	2b00      	cmp	r3, #0
 801069a:	d13e      	bne.n	801071a <_nx_udp_packet_receive+0x146>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106a2:	2b04      	cmp	r3, #4
 80106a4:	d114      	bne.n	80106d0 <_nx_udp_packet_receive+0xfc>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d00f      	beq.n	80106d0 <_nx_udp_packet_receive+0xfc>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80106b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	ba1a      	rev	r2, r3
 80106b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106b8:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80106ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	ba1a      	rev	r2, r3
 80106c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106c2:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 80106c4:	2300      	movs	r3, #0
 80106c6:	4a77      	ldr	r2, [pc, #476]	; (80108a4 <_nx_udp_packet_receive+0x2d0>)
 80106c8:	6839      	ldr	r1, [r7, #0]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7f7 ffb4 	bl	8008638 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80106ec:	4b6b      	ldr	r3, [pc, #428]	; (801089c <_nx_udp_packet_receive+0x2c8>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d00e      	beq.n	8010712 <_nx_udp_packet_receive+0x13e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80106f4:	f3ef 8305 	mrs	r3, IPSR
 80106f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80106fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106fc:	4b68      	ldr	r3, [pc, #416]	; (80108a0 <_nx_udp_packet_receive+0x2cc>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4313      	orrs	r3, r2
 8010702:	2b00      	cmp	r3, #0
 8010704:	d105      	bne.n	8010712 <_nx_udp_packet_receive+0x13e>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801070c:	4618      	mov	r0, r3
 801070e:	f003 fc99 	bl	8014044 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8010712:	6838      	ldr	r0, [r7, #0]
 8010714:	f7fa ff50 	bl	800b5b8 <_nx_packet_release>

        /* Just return.  */
        return;
 8010718:	e150      	b.n	80109bc <_nx_udp_packet_receive+0x3e8>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 801071a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010720:	429a      	cmp	r2, r3
 8010722:	d119      	bne.n	8010758 <_nx_udp_packet_receive+0x184>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 8010724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010726:	699b      	ldr	r3, [r3, #24]
 8010728:	1c5a      	adds	r2, r3, #1
 801072a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801072c:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010738:	4413      	add	r3, r2
 801073a:	f1a3 0208 	sub.w	r2, r3, #8
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8010744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010746:	69da      	ldr	r2, [r3, #28]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074c:	4413      	add	r3, r2
 801074e:	f1a3 0208 	sub.w	r2, r3, #8
 8010752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010754:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 8010756:	e00b      	b.n	8010770 <_nx_udp_packet_receive+0x19c>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 8010758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801075a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801075c:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010762:	33e0      	adds	r3, #224	; 0xe0
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801076c:	429a      	cmp	r2, r3
 801076e:	d1d4      	bne.n	801071a <_nx_udp_packet_receive+0x146>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8010770:	4b4a      	ldr	r3, [pc, #296]	; (801089c <_nx_udp_packet_receive+0x2c8>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d00e      	beq.n	8010796 <_nx_udp_packet_receive+0x1c2>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010778:	f3ef 8305 	mrs	r3, IPSR
 801077c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010780:	4b47      	ldr	r3, [pc, #284]	; (80108a0 <_nx_udp_packet_receive+0x2cc>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4313      	orrs	r3, r2
 8010786:	2b00      	cmp	r3, #0
 8010788:	d105      	bne.n	8010796 <_nx_udp_packet_receive+0x1c2>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010790:	4618      	mov	r0, r3
 8010792:	f003 fc57 	bl	8014044 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 8010796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010798:	689b      	ldr	r3, [r3, #8]
 801079a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801079c:	429a      	cmp	r2, r3
 801079e:	d02b      	beq.n	80107f8 <_nx_udp_packet_receive+0x224>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80107b4:	1c5a      	adds	r2, r3, #1
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107c2:	2b04      	cmp	r3, #4
 80107c4:	d114      	bne.n	80107f0 <_nx_udp_packet_receive+0x21c>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00f      	beq.n	80107f0 <_nx_udp_packet_receive+0x21c>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80107d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	ba1a      	rev	r2, r3
 80107d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107d8:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80107da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	ba1a      	rev	r2, r3
 80107e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107e2:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 80107e4:	2300      	movs	r3, #0
 80107e6:	4a2f      	ldr	r2, [pc, #188]	; (80108a4 <_nx_udp_packet_receive+0x2d0>)
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7f7 ff24 	bl	8008638 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80107f0:	6838      	ldr	r0, [r7, #0]
 80107f2:	f7fa fee1 	bl	800b5b8 <_nx_packet_release>
        return;
 80107f6:	e0e1      	b.n	80109bc <_nx_udp_packet_receive+0x3e8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80107f8:	f3ef 8310 	mrs	r3, PRIMASK
 80107fc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010800:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010802:	b672      	cpsid	i
    return(int_posture);
 8010804:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8010806:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 8010808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4a26      	ldr	r2, [pc, #152]	; (80108a8 <_nx_udp_packet_receive+0x2d4>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d01c      	beq.n	801084c <_nx_udp_packet_receive+0x278>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010818:	1c5a      	adds	r2, r3, #1
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 801082e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010832:	1c5a      	adds	r2, r3, #1
 8010834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010836:	625a      	str	r2, [r3, #36]	; 0x24
 8010838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801083a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	f383 8810 	msr	PRIMASK, r3
}
 8010842:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8010844:	6838      	ldr	r0, [r7, #0]
 8010846:	f7fa feb7 	bl	800b5b8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 801084a:	e0b7      	b.n	80109bc <_nx_udp_packet_receive+0x3e8>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 801084c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801084e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010850:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010856:	33e0      	adds	r3, #224	; 0xe0
 8010858:	009b      	lsls	r3, r3, #2
 801085a:	4413      	add	r3, r2
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010860:	429a      	cmp	r2, r3
 8010862:	d00b      	beq.n	801087c <_nx_udp_packet_receive+0x2a8>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <_nx_udp_packet_receive+0x2a8>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010872:	33e0      	adds	r3, #224	; 0xe0
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801087a:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 801087c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010880:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	2b00      	cmp	r3, #0
 8010886:	d03e      	beq.n	8010906 <_nx_udp_packet_receive+0x332>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801088c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801088e:	429a      	cmp	r2, r3
 8010890:	d10c      	bne.n	80108ac <_nx_udp_packet_receive+0x2d8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8010892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010894:	2200      	movs	r2, #0
 8010896:	659a      	str	r2, [r3, #88]	; 0x58
 8010898:	e016      	b.n	80108c8 <_nx_udp_packet_receive+0x2f4>
 801089a:	bf00      	nop
 801089c:	2000aaf8 	.word	0x2000aaf8
 80108a0:	20000094 	.word	0x20000094
 80108a4:	03030000 	.word	0x03030000
 80108a8:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80108ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80108b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108b2:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80108b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80108b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80108bc:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80108be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80108c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108c4:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80108c6:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80108c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108cc:	1e5a      	subs	r2, r3, #1
 80108ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80108d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d4:	2200      	movs	r2, #0
 80108d6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80108d8:	4b3a      	ldr	r3, [pc, #232]	; (80109c4 <_nx_udp_packet_receive+0x3f0>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	3301      	adds	r3, #1
 80108de:	4a39      	ldr	r2, [pc, #228]	; (80109c4 <_nx_udp_packet_receive+0x3f0>)
 80108e0:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 80108e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	f383 8810 	msr	PRIMASK, r3
}
 80108f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 80108f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f8:	2200      	movs	r2, #0
 80108fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80108fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010900:	f004 fbfa 	bl	80150f8 <_tx_thread_system_resume>
 8010904:	e054      	b.n	80109b0 <_nx_udp_packet_receive+0x3dc>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8010906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801090a:	2b00      	cmp	r3, #0
 801090c:	d03c      	beq.n	8010988 <_nx_udp_packet_receive+0x3b4>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 801090e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010912:	683a      	ldr	r2, [r7, #0]
 8010914:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8010916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	2200      	movs	r2, #0
 8010920:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8010922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010926:	1c5a      	adds	r2, r3, #1
 8010928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801092a:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 801092c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801092e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 8010930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 8010934:	429a      	cmp	r2, r3
 8010936:	d921      	bls.n	801097c <_nx_udp_packet_receive+0x3a8>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8010938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801093c:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	69da      	ldr	r2, [r3, #28]
 8010942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010944:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 8010946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801094a:	1e5a      	subs	r2, r3, #1
 801094c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801094e:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010956:	1c5a      	adds	r2, r3, #1
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 801095e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010962:	1c5a      	adds	r2, r3, #1
 8010964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010966:	625a      	str	r2, [r3, #36]	; 0x24
 8010968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	f383 8810 	msr	PRIMASK, r3
}
 8010972:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8010974:	6838      	ldr	r0, [r7, #0]
 8010976:	f7fa fe1f 	bl	800b5b8 <_nx_packet_release>
 801097a:	e019      	b.n	80109b0 <_nx_udp_packet_receive+0x3dc>
 801097c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801097e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	f383 8810 	msr	PRIMASK, r3
}
 8010986:	e013      	b.n	80109b0 <_nx_udp_packet_receive+0x3dc>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 8010988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 801098e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2200      	movs	r2, #0
 8010998:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 801099a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801099c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801099e:	1c5a      	adds	r2, r3, #1
 80109a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80109a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f383 8810 	msr	PRIMASK, r3
}
 80109ae:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 80109b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d002      	beq.n	80109bc <_nx_udp_packet_receive+0x3e8>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 80109b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80109ba:	4798      	blx	r3
    }
}
 80109bc:	3750      	adds	r7, #80	; 0x50
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	2000aaf4 	.word	0x2000aaf4

080109c8 <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b088      	sub	sp, #32
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80109d8:	f3ef 8310 	mrs	r3, PRIMASK
 80109dc:	617b      	str	r3, [r7, #20]
    return(posture);
 80109de:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80109e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80109e2:	b672      	cpsid	i
    return(int_posture);
 80109e4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 80109e6:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d03d      	beq.n	8010a6c <_nx_udp_receive_cleanup+0xa4>
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d03a      	beq.n	8010a6c <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 80109f6:	69fb      	ldr	r3, [r7, #28]
 80109f8:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80109fa:	4a21      	ldr	r2, [pc, #132]	; (8010a80 <_nx_udp_receive_cleanup+0xb8>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d135      	bne.n	8010a6c <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d103      	bne.n	8010a18 <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	2200      	movs	r2, #0
 8010a14:	659a      	str	r2, [r3, #88]	; 0x58
 8010a16:	e00d      	b.n	8010a34 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8010a28:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010a32:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a38:	1e5a      	subs	r2, r3, #1
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a42:	2b0c      	cmp	r3, #12
 8010a44:	d112      	bne.n	8010a6c <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	; (8010a84 <_nx_udp_receive_cleanup+0xbc>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	3301      	adds	r3, #1
 8010a54:	4a0b      	ldr	r2, [pc, #44]	; (8010a84 <_nx_udp_receive_cleanup+0xbc>)
 8010a56:	6013      	str	r3, [r2, #0]
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f383 8810 	msr	PRIMASK, r3
}
 8010a62:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f004 fb47 	bl	80150f8 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8010a6a:	e005      	b.n	8010a78 <_nx_udp_receive_cleanup+0xb0>
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	f383 8810 	msr	PRIMASK, r3
}
 8010a76:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010a78:	3720      	adds	r7, #32
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	55445020 	.word	0x55445020
 8010a84:	2000aaf4 	.word	0x2000aaf4

08010a88 <_nx_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b090      	sub	sp, #64	; 0x40
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f003 f855 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d103      	bne.n	8010aba <_nx_udp_socket_bind+0x32>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d007      	beq.n	8010aca <_nx_udp_socket_bind+0x42>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f003 fabf 	bl	8014044 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8010ac6:	2322      	movs	r3, #34	; 0x22
 8010ac8:	e0fd      	b.n	8010cc6 <_nx_udp_socket_bind+0x23e>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d11e      	bne.n	8010b0e <_nx_udp_socket_bind+0x86>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8010ad0:	f006 f89e 	bl	8016c10 <rand>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	425a      	negs	r2, r3
 8010ad8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010adc:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8010ae0:	bf58      	it	pl
 8010ae2:	4253      	negpl	r3, r2
 8010ae4:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8010ae8:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	f107 0208 	add.w	r2, r7, #8
 8010af0:	4619      	mov	r1, r3
 8010af2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010af4:	f7ff fcf4 	bl	80104e0 <_nx_udp_free_port_find>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d007      	beq.n	8010b0e <_nx_udp_socket_bind+0x86>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b00:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010b04:	4618      	mov	r0, r3
 8010b06:	f003 fa9d 	bl	8014044 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 8010b0a:	2345      	movs	r3, #69	; 0x45
 8010b0c:	e0db      	b.n	8010cc6 <_nx_udp_socket_bind+0x23e>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 8010b0e:	68ba      	ldr	r2, [r7, #8]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	0a1a      	lsrs	r2, r3, #8
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	f003 031f 	and.w	r3, r3, #31
 8010b20:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8010b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b26:	33e0      	adds	r3, #224	; 0xe0
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 8010b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d00f      	beq.n	8010b56 <_nx_udp_socket_bind+0xce>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 8010b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b38:	633b      	str	r3, [r7, #48]	; 0x30
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 8010b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b3c:	689a      	ldr	r2, [r3, #8]
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d007      	beq.n	8010b54 <_nx_udp_socket_bind+0xcc>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8010b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        } while (search_ptr != end_ptr);
 8010b4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d1f3      	bne.n	8010b3a <_nx_udp_socket_bind+0xb2>
 8010b52:	e000      	b.n	8010b56 <_nx_udp_socket_bind+0xce>
                break;
 8010b54:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 8010b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d004      	beq.n	8010b66 <_nx_udp_socket_bind+0xde>
 8010b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b5e:	689a      	ldr	r2, [r3, #8]
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d048      	beq.n	8010bf8 <_nx_udp_socket_bind+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b66:	f3ef 8310 	mrs	r3, PRIMASK
 8010b6a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010b6e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b70:	b672      	cpsid	i
    return(int_posture);
 8010b72:	6a3b      	ldr	r3, [r7, #32]
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8010b74:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the list is NULL.  */
        if (search_ptr)
 8010b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d022      	beq.n	8010bc2 <_nx_udp_socket_bind+0x13a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 8010b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b80:	33e0      	adds	r3, #224	; 0xe0
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	4413      	add	r3, r2
 8010b86:	685a      	ldr	r2, [r3, #4]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8010b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b90:	33e0      	adds	r3, #224	; 0xe0
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	4413      	add	r3, r2
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 8010b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ba2:	33e0      	adds	r3, #224	; 0xe0
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	4413      	add	r3, r2
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 8010bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bb4:	33e0      	adds	r3, #224	; 0xe0
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	4413      	add	r3, r2
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	651a      	str	r2, [r3, #80]	; 0x50
 8010bc0:	e00c      	b.n	8010bdc <_nx_udp_socket_bind+0x154>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8010bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd2:	33e0      	adds	r3, #224	; 0xe0
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	4413      	add	r3, r2
 8010bd8:	68fa      	ldr	r2, [r7, #12]
 8010bda:	605a      	str	r2, [r3, #4]
 8010bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bde:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	f383 8810 	msr	PRIMASK, r3
}
 8010be6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f003 fa28 	bl	8014044 <_tx_mutex_put>

        /* Return success to the caller.  */
        return(NX_SUCCESS);
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	e066      	b.n	8010cc6 <_nx_udp_socket_bind+0x23e>
    }
    else if (wait_option)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d05c      	beq.n	8010cb8 <_nx_udp_socket_bind+0x230>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8010c02:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010c04:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010c06:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c08:	b672      	cpsid	i
    return(int_posture);
 8010c0a:	697b      	ldr	r3, [r7, #20]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8010c0c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 8010c0e:	4b30      	ldr	r3, [pc, #192]	; (8010cd0 <_nx_udp_socket_bind+0x248>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8010c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c16:	4a2f      	ldr	r2, [pc, #188]	; (8010cd4 <_nx_udp_socket_bind+0x24c>)
 8010c18:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8010c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 8010c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d012      	beq.n	8010c5a <_nx_udp_socket_bind+0x1d2>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 8010c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3a:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 8010c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8010c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c44:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8010c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c4e:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8010c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c56:	675a      	str	r2, [r3, #116]	; 0x74
 8010c58:	e008      	b.n	8010c6c <_nx_udp_socket_bind+0x1e4>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 8010c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c5e:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 8010c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c64:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 8010c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c6a:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8010c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c74:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	220c      	movs	r2, #12
 8010c7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7e:	2201      	movs	r2, #1
 8010c80:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8010c82:	4b15      	ldr	r3, [pc, #84]	; (8010cd8 <_nx_udp_socket_bind+0x250>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	3301      	adds	r3, #1
 8010c88:	4a13      	ldr	r2, [pc, #76]	; (8010cd8 <_nx_udp_socket_bind+0x250>)
 8010c8a:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	64da      	str	r2, [r3, #76]	; 0x4c
 8010c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c94:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	f383 8810 	msr	PRIMASK, r3
}
 8010c9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f003 f9cd 	bl	8014044 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 8010caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cac:	f004 fb24 	bl	80152f8 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        return(thread_ptr -> tx_thread_suspend_status);
 8010cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cb6:	e006      	b.n	8010cc6 <_nx_udp_socket_bind+0x23e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f003 f9c0 	bl	8014044 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        return(NX_PORT_UNAVAILABLE);
 8010cc4:	2323      	movs	r3, #35	; 0x23
    }
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3740      	adds	r7, #64	; 0x40
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	2000aaf8 	.word	0x2000aaf8
 8010cd4:	080103f1 	.word	0x080103f1
 8010cd8:	2000aaf4 	.word	0x2000aaf4

08010cdc <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08a      	sub	sp, #40	; 0x28
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
 8010ce8:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 8010cea:	2278      	movs	r2, #120	; 0x78
 8010cec:	2100      	movs	r1, #0
 8010cee:	68b8      	ldr	r0, [r7, #8]
 8010cf0:	f005 fef8 	bl	8016ae4 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	68fa      	ldr	r2, [r7, #12]
 8010cf8:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	687a      	ldr	r2, [r7, #4]
 8010cfe:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	683a      	ldr	r2, [r7, #0]
 8010d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8010d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d08:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	2200      	movs	r2, #0
 8010d26:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	2200      	movs	r2, #0
 8010d32:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	2200      	movs	r2, #0
 8010d38:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d44:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2200      	movs	r2, #0
 8010d56:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8010d62:	4618      	mov	r0, r3
 8010d64:	f002 fef6 	bl	8013b54 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d68:	f3ef 8310 	mrs	r3, PRIMASK
 8010d6c:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010d6e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010d70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d72:	b672      	cpsid	i
    return(int_posture);
 8010d74:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 8010d76:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	4a1f      	ldr	r2, [pc, #124]	; (8010df8 <_nx_udp_socket_create+0x11c>)
 8010d7c:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d015      	beq.n	8010db4 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d90:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 8010d9c:	6a3b      	ldr	r3, [r7, #32]
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	6a3a      	ldr	r2, [r7, #32]
 8010da6:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	669a      	str	r2, [r3, #104]	; 0x68
 8010db2:	e009      	b.n	8010dc8 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8010dce:	1c5a      	adds	r2, r3, #1
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8010dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	f383 8810 	msr	PRIMASK, r3
}
 8010de0:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010de8:	4618      	mov	r0, r3
 8010dea:	f003 f92b 	bl	8014044 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3728      	adds	r7, #40	; 0x28
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	55445020 	.word	0x55445020

08010dfc <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b088      	sub	sp, #32
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010e10:	f04f 31ff 	mov.w	r1, #4294967295
 8010e14:	4618      	mov	r0, r3
 8010e16:	f002 fe9d 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d007      	beq.n	8010e32 <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f003 f90b 	bl	8014044 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 8010e2e:	2342      	movs	r3, #66	; 0x42
 8010e30:	e03f      	b.n	8010eb2 <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e32:	f3ef 8310 	mrs	r3, PRIMASK
 8010e36:	617b      	str	r3, [r7, #20]
    return(posture);
 8010e38:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010e3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e3c:	b672      	cpsid	i
    return(int_posture);
 8010e3e:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8010e40:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d104      	bne.n	8010e5c <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	2200      	movs	r2, #0
 8010e56:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8010e5a:	e014      	b.n	8010e86 <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8010e64:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8010e6e:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8010e70:	69fb      	ldr	r3, [r7, #28]
 8010e72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d104      	bne.n	8010e86 <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8010e8c:	1e5a      	subs	r2, r3, #1
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f383 8810 	msr	PRIMASK, r3
}
 8010e9e:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f003 f8cc 	bl	8014044 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010eac:	f004 f8ea 	bl	8015084 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8010eb0:	2300      	movs	r3, #0
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3720      	adds	r7, #32
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
	...

08010ebc <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b09a      	sub	sp, #104	; 0x68
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 8010ecc:	2301      	movs	r3, #1
 8010ece:	65bb      	str	r3, [r7, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8010eda:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8010edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8010ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8010ee0:	b672      	cpsid	i
    return(int_posture);
 8010ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 8010ee4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d107      	bne.n	8010efe <_nx_udp_socket_receive+0x42>
 8010eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef4:	f383 8810 	msr	PRIMASK, r3
}
 8010ef8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 8010efa:	2324      	movs	r3, #36	; 0x24
 8010efc:	e142      	b.n	8011184 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d01a      	beq.n	8010f3c <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	69da      	ldr	r2, [r3, #28]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2200      	movs	r2, #0
 8010f24:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f2a:	1e5a      	subs	r2, r3, #1
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8010f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f36:	f383 8810 	msr	PRIMASK, r3
}
 8010f3a:	e05e      	b.n	8010ffa <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d050      	beq.n	8010fe4 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 8010f42:	4b92      	ldr	r3, [pc, #584]	; (801118c <_nx_udp_socket_receive+0x2d0>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 8010f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f4a:	4a91      	ldr	r2, [pc, #580]	; (8011190 <_nx_udp_socket_receive+0x2d4>)
 8010f4c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8010f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8010f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d012      	beq.n	8010f88 <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 8010f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f68:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f6e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 8010f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f72:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f7c:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f84:	675a      	str	r2, [r3, #116]	; 0x74
 8010f86:	e008      	b.n	8010f9a <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f8c:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 8010f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f92:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 8010f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f98:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f9e:	1c5a      	adds	r2, r3, #1
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8010fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fa6:	220c      	movs	r2, #12
 8010fa8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fac:	2201      	movs	r2, #1
 8010fae:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010fb0:	4b78      	ldr	r3, [pc, #480]	; (8011194 <_nx_udp_socket_receive+0x2d8>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	4a77      	ldr	r2, [pc, #476]	; (8011194 <_nx_udp_socket_receive+0x2d8>)
 8010fb8:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8010fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fc2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fc4:	6a3b      	ldr	r3, [r7, #32]
 8010fc6:	f383 8810 	msr	PRIMASK, r3
}
 8010fca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010fcc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010fce:	f004 f993 	bl	80152f8 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 8010fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d00e      	beq.n	8010ffa <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 8010fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fe2:	e0cf      	b.n	8011184 <_nx_udp_socket_receive+0x2c8>
 8010fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fe6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	f383 8810 	msr	PRIMASK, r3
}
 8010fee:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e0c4      	b.n	8011184 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011002:	2b04      	cmp	r3, #4
 8011004:	d103      	bne.n	801100e <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801100c:	65fb      	str	r3, [r7, #92]	; 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 801100e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011012:	f003 0320 	and.w	r3, r3, #32
 8011016:	2b00      	cmp	r3, #0
 8011018:	d001      	beq.n	801101e <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	65bb      	str	r3, [r7, #88]	; 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 801101e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011020:	2b00      	cmp	r3, #0
 8011022:	f000 809d 	beq.w	8011160 <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011032:	2b00      	cmp	r3, #0
 8011034:	d105      	bne.n	8011042 <_nx_udp_socket_receive+0x186>
 8011036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011038:	3304      	adds	r3, #4
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	b29b      	uxth	r3, r3
 801103e:	2b00      	cmp	r3, #0
 8011040:	d106      	bne.n	8011050 <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 801104a:	2b06      	cmp	r3, #6
 801104c:	f040 808b 	bne.w	8011166 <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 8011050:	2300      	movs	r3, #0
 8011052:	657b      	str	r3, [r7, #84]	; 0x54
 8011054:	2300      	movs	r3, #0
 8011056:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 801105e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011066:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801106a:	2b04      	cmp	r3, #4
 801106c:	d108      	bne.n	8011080 <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 801106e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011072:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	330c      	adds	r3, #12
 8011078:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 801107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107c:	3310      	adds	r3, #16
 801107e:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8011080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	ba1a      	rev	r2, r3
 8011086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011088:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 801108a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	ba1a      	rev	r2, r3
 8011090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011092:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 8011094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 8011098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801109e:	2111      	movs	r1, #17
 80110a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80110a2:	f7f7 fc95 	bl	80089d0 <_nx_ip_checksum_compute>
 80110a6:	4603      	mov	r3, r0
 80110a8:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80110aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	ba1a      	rev	r2, r3
 80110b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b2:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80110b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	ba1a      	rev	r2, r3
 80110ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110bc:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 80110be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c0:	43db      	mvns	r3, r3
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 80110c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d04b      	beq.n	8011164 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110cc:	f3ef 8310 	mrs	r3, PRIMASK
 80110d0:	617b      	str	r3, [r7, #20]
    return(posture);
 80110d2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80110d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80110d6:	b672      	cpsid	i
    return(int_posture);
 80110d8:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 80110da:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80110e4:	3201      	adds	r2, #1
 80110e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80110f2:	3201      	adds	r2, #1
 80110f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801110a:	3a01      	subs	r2, #1
 801110c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111e:	1ad2      	subs	r2, r2, r3
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	3208      	adds	r2, #8
 8011126:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	699b      	ldr	r3, [r3, #24]
 801112e:	1e5a      	subs	r2, r3, #1
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	69da      	ldr	r2, [r3, #28]
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	f103 0208 	add.w	r2, r3, #8
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	61da      	str	r2, [r3, #28]
 8011148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801114a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	f383 8810 	msr	PRIMASK, r3
}
 8011152:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4618      	mov	r0, r3
 801115a:	f7fa fa2d 	bl	800b5b8 <_nx_packet_release>
        TX_DISABLE
 801115e:	e6ba      	b.n	8010ed6 <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 8011160:	bf00      	nop
 8011162:	e000      	b.n	8011166 <_nx_udp_socket_receive+0x2aa>
                    break;
 8011164:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	3a08      	subs	r2, #8
 8011172:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	689a      	ldr	r2, [r3, #8]
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	3208      	adds	r2, #8
 8011180:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3760      	adds	r7, #96	; 0x60
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	2000aaf8 	.word	0x2000aaf8
 8011190:	080109c9 	.word	0x080109c9
 8011194:	2000aaf4 	.word	0x2000aaf4

08011198 <_nx_udp_socket_receive_notify>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive_notify(NX_UDP_SOCKET *socket_ptr,
                                    VOID (*udp_receive_notify)(NX_UDP_SOCKET *socket_ptr))
{
 8011198:	b480      	push	{r7}
 801119a:	b087      	sub	sp, #28
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111a2:	f3ef 8310 	mrs	r3, PRIMASK
 80111a6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80111a8:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80111aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80111ac:	b672      	cpsid	i
    return(int_posture);
 80111ae:	68bb      	ldr	r3, [r7, #8]
TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80111b0:	617b      	str	r3, [r7, #20]

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	683a      	ldr	r2, [r7, #0]
 80111b6:	671a      	str	r2, [r3, #112]	; 0x70
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	f383 8810 	msr	PRIMASK, r3
}
 80111c2:	bf00      	nop

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	371c      	adds	r7, #28
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr

080111d2 <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b088      	sub	sp, #32
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	60f8      	str	r0, [r7, #12]
 80111da:	60b9      	str	r1, [r7, #8]
 80111dc:	607a      	str	r2, [r7, #4]
 80111de:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 80111e0:	2304      	movs	r3, #4
 80111e2:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 80111e8:	f107 0214 	add.w	r2, r7, #20
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	68b9      	ldr	r1, [r7, #8]
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f000 fb7c 	bl	80118ee <_nxd_udp_socket_send>
 80111f6:	61f8      	str	r0, [r7, #28]

    return(status);
 80111f8:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3720      	adds	r7, #32
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <_nx_udp_socket_source_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b086      	sub	sp, #24
 8011206:	af00      	add	r7, sp, #0
 8011208:	60f8      	str	r0, [r7, #12]
 801120a:	60b9      	str	r1, [r7, #8]
 801120c:	607a      	str	r2, [r7, #4]
 801120e:	603b      	str	r3, [r7, #0]
UINT   status;
NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	617b      	str	r3, [r7, #20]

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 8011216:	6a3a      	ldr	r2, [r7, #32]
 8011218:	4613      	mov	r3, r2
 801121a:	009b      	lsls	r3, r3, #2
 801121c:	4413      	add	r3, r2
 801121e:	011b      	lsls	r3, r3, #4
 8011220:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8011224:	697a      	ldr	r2, [r7, #20]
 8011226:	4413      	add	r3, r2
 8011228:	1d1a      	adds	r2, r3, #4
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	68b9      	ldr	r1, [r7, #8]
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f7ff ffcc 	bl	80111d2 <_nx_udp_socket_send>
 801123a:	6138      	str	r0, [r7, #16]

    return(status);
 801123c:	693b      	ldr	r3, [r7, #16]
}
 801123e:	4618      	mov	r0, r3
 8011240:	3718      	adds	r7, #24
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
	...

08011248 <_nx_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b094      	sub	sp, #80	; 0x50
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8011256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011258:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801125c:	f04f 31ff 	mov.w	r1, #4294967295
 8011260:	4618      	mov	r0, r3
 8011262:	f002 fc77 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801126a:	2b00      	cmp	r3, #0
 801126c:	d119      	bne.n	80112a2 <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00d      	beq.n	8011292 <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801127a:	2100      	movs	r1, #0
 801127c:	4618      	mov	r0, r3
 801127e:	f7ff f8b7 	bl	80103f0 <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011284:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8011288:	4618      	mov	r0, r3
 801128a:	f002 fedb 	bl	8014044 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 801128e:	2300      	movs	r3, #0
 8011290:	e13e      	b.n	8011510 <_nx_udp_socket_unbind+0x2c8>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011294:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8011298:	4618      	mov	r0, r3
 801129a:	f002 fed3 	bl	8014044 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 801129e:	2324      	movs	r3, #36	; 0x24
 80112a0:	e136      	b.n	8011510 <_nx_udp_socket_unbind+0x2c8>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 80112a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112aa:	0a1a      	lsrs	r2, r3, #8
 80112ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ae:	4413      	add	r3, r2
 80112b0:	f003 031f 	and.w	r3, r3, #31
 80112b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80112b6:	f3ef 8310 	mrs	r3, PRIMASK
 80112ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80112bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80112be:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80112c0:	b672      	cpsid	i
    return(int_posture);
 80112c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 80112c4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112ca:	687a      	ldr	r2, [r7, #4]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d10a      	bne.n	80112e6 <_nx_udp_socket_unbind+0x9e>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 80112d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d4:	33e0      	adds	r3, #224	; 0xe0
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	4413      	add	r3, r2
 80112da:	2200      	movs	r2, #0
 80112dc:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80112e4:	e01d      	b.n	8011322 <_nx_udp_socket_unbind+0xda>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 80112ee:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 80112f8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 80112fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112fe:	33e0      	adds	r3, #224	; 0xe0
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	4413      	add	r3, r2
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	429a      	cmp	r2, r3
 801130a:	d107      	bne.n	801131c <_nx_udp_socket_unbind+0xd4>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011310:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011314:	33e0      	adds	r3, #224	; 0xe0
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	440b      	add	r3, r1
 801131a:	605a      	str	r2, [r3, #4]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	64da      	str	r2, [r3, #76]	; 0x4c
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011328:	f383 8810 	msr	PRIMASK, r3
}
 801132c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011332:	2b00      	cmp	r3, #0
 8011334:	d01b      	beq.n	801136e <_nx_udp_socket_unbind+0x126>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801133a:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 8011348:	e00c      	b.n	8011364 <_nx_udp_socket_unbind+0x11c>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 801134a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801134c:	69db      	ldr	r3, [r3, #28]
 801134e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 8011350:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011352:	f7fa f931 	bl	800b5b8 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 8011356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011358:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801135e:	1e5a      	subs	r2, r3, #1
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1ee      	bne.n	801134a <_nx_udp_socket_unbind+0x102>
 801136c:	e035      	b.n	80113da <_nx_udp_socket_unbind+0x192>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011372:	2b00      	cmp	r3, #0
 8011374:	d031      	beq.n	80113da <_nx_udp_socket_unbind+0x192>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801137a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2200      	movs	r2, #0
 8011380:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 8011382:	e026      	b.n	80113d2 <_nx_udp_socket_unbind+0x18a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011384:	f3ef 8310 	mrs	r3, PRIMASK
 8011388:	61fb      	str	r3, [r7, #28]
    return(posture);
 801138a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801138c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801138e:	b672      	cpsid	i
    return(int_posture);
 8011390:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 8011392:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011396:	2200      	movs	r2, #0
 8011398:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 801139a:	4b5f      	ldr	r3, [pc, #380]	; (8011518 <_nx_udp_socket_unbind+0x2d0>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	4a5d      	ldr	r2, [pc, #372]	; (8011518 <_nx_udp_socket_unbind+0x2d0>)
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	f383 8810 	msr	PRIMASK, r3
}
 80113ae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 80113b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b2:	2226      	movs	r2, #38	; 0x26
 80113b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80113b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113bc:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 80113be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113c2:	4618      	mov	r0, r3
 80113c4:	f003 fe98 	bl	80150f8 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113cc:	1e5a      	subs	r2, r3, #1
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1d4      	bne.n	8011384 <_nx_udp_socket_unbind+0x13c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80113da:	f3ef 8310 	mrs	r3, PRIMASK
 80113de:	617b      	str	r3, [r7, #20]
    return(posture);
 80113e0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80113e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80113e4:	b672      	cpsid	i
    return(int_posture);
 80113e6:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 80113e8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 80113f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d07f      	beq.n	80114f6 <_nx_udp_socket_unbind+0x2ae>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80113f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d103      	bne.n	8011408 <_nx_udp_socket_unbind+0x1c0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	661a      	str	r2, [r3, #96]	; 0x60
 8011406:	e00d      	b.n	8011424 <_nx_udp_socket_unbind+0x1dc>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8011408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801140a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8011410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8011414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011416:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8011418:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 801141a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 801141e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011420:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8011422:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011428:	1e5a      	subs	r2, r3, #1
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 801142e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011432:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8011434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011436:	2200      	movs	r2, #0
 8011438:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 801143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011440:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 8011448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801144a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801144c:	33e0      	adds	r3, #224	; 0xe0
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	4413      	add	r3, r2
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d022      	beq.n	801149e <_nx_udp_socket_unbind+0x256>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 8011458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801145a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801145c:	33e0      	adds	r3, #224	; 0xe0
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	4413      	add	r3, r2
 8011462:	685a      	ldr	r2, [r3, #4]
            new_socket_ptr -> nx_udp_socket_bound_next =
 8011464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011466:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8011468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801146a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801146c:	33e0      	adds	r3, #224	; 0xe0
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	4413      	add	r3, r2
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 8011476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011478:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 801147a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801147c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147e:	33e0      	adds	r3, #224	; 0xe0
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	4413      	add	r3, r2
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801148a:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 801148c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011490:	33e0      	adds	r3, #224	; 0xe0
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4413      	add	r3, r2
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801149a:	651a      	str	r2, [r3, #80]	; 0x50
 801149c:	e00c      	b.n	80114b8 <_nx_udp_socket_unbind+0x270>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 801149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114a2:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 80114a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114a8:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 80114aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ae:	33e0      	adds	r3, #224	; 0xe0
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	4413      	add	r3, r2
 80114b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114b6:	605a      	str	r2, [r3, #4]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80114b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ba:	2200      	movs	r2, #0
 80114bc:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80114be:	4b16      	ldr	r3, [pc, #88]	; (8011518 <_nx_udp_socket_unbind+0x2d0>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	3301      	adds	r3, #1
 80114c4:	4a14      	ldr	r2, [pc, #80]	; (8011518 <_nx_udp_socket_unbind+0x2d0>)
 80114c6:	6013      	str	r3, [r2, #0]
 80114c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f383 8810 	msr	PRIMASK, r3
}
 80114d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 80114d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114d6:	2200      	movs	r2, #0
 80114d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80114dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80114e2:	4618      	mov	r0, r3
 80114e4:	f002 fdae 	bl	8014044 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80114e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80114ea:	f003 fe05 	bl	80150f8 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80114ee:	f003 fdc9 	bl	8015084 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 80114f2:	2300      	movs	r3, #0
 80114f4:	e00c      	b.n	8011510 <_nx_udp_socket_unbind+0x2c8>
 80114f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	f383 8810 	msr	PRIMASK, r3
}
 8011500:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011504:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8011508:	4618      	mov	r0, r3
 801150a:	f002 fd9b 	bl	8014044 <_tx_mutex_put>
        return(NX_SUCCESS);
 801150e:	2300      	movs	r3, #0
}
 8011510:	4618      	mov	r0, r3
 8011512:	3750      	adds	r7, #80	; 0x50
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	2000aaf4 	.word	0x2000aaf4

0801151c <_nx_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 801151c:	b480      	push	{r7}
 801151e:	b087      	sub	sp, #28
 8011520:	af00      	add	r7, sp, #0
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	607a      	str	r2, [r7, #4]
ULONG          *temp_ptr;
NX_IPV4_HEADER *ipv4_header;

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	689b      	ldr	r3, [r3, #8]
 801152c:	617b      	str	r3, [r7, #20]

    /* Pickup the source port.  */
    *port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	3b08      	subs	r3, #8
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	0c1a      	lsrs	r2, r3, #16
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	601a      	str	r2, [r3, #0]

    /* Obtain the IPv4 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801153e:	613b      	str	r3, [r7, #16]

    /* Pickup the source IP address.  */
    *ip_address =  ipv4_header -> nx_ip_header_source_ip;
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	68da      	ldr	r2, [r3, #12]
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	601a      	str	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, *ip_address, *port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    return(NX_SUCCESS);
 8011548:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 801154a:	4618      	mov	r0, r3
 801154c:	371c      	adds	r7, #28
 801154e:	46bd      	mov	sp, r7
 8011550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011554:	4770      	bx	lr

08011556 <_nx_utility_string_length_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_utility_string_length_check(CHAR *input_string, UINT *string_length, UINT max_string_length)
{
 8011556:	b480      	push	{r7}
 8011558:	b087      	sub	sp, #28
 801155a:	af00      	add	r7, sp, #0
 801155c:	60f8      	str	r0, [r7, #12]
 801155e:	60b9      	str	r1, [r7, #8]
 8011560:	607a      	str	r2, [r7, #4]

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d101      	bne.n	801156c <_nx_utility_string_length_check+0x16>
    {
        return(NX_PTR_ERROR);
 8011568:	2307      	movs	r3, #7
 801156a:	e018      	b.n	801159e <_nx_utility_string_length_check+0x48>
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 801156c:	2300      	movs	r3, #0
 801156e:	617b      	str	r3, [r7, #20]
 8011570:	e008      	b.n	8011584 <_nx_utility_string_length_check+0x2e>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 8011572:	697a      	ldr	r2, [r7, #20]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	429a      	cmp	r2, r3
 8011578:	d301      	bcc.n	801157e <_nx_utility_string_length_check+0x28>
        {
            return(NX_SIZE_ERROR);
 801157a:	2309      	movs	r3, #9
 801157c:	e00f      	b.n	801159e <_nx_utility_string_length_check+0x48>
    for (i = 0; input_string[i]; i++)
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	3301      	adds	r3, #1
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	68fa      	ldr	r2, [r7, #12]
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	4413      	add	r3, r2
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1f0      	bne.n	8011572 <_nx_utility_string_length_check+0x1c>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d002      	beq.n	801159c <_nx_utility_string_length_check+0x46>
    {
        *string_length = i;
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	697a      	ldr	r2, [r7, #20]
 801159a:	601a      	str	r2, [r3, #0]
    }

    /* Return success.  */
    return(NX_SUCCESS);
 801159c:	2300      	movs	r3, #0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	371c      	adds	r7, #28
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
	...

080115ac <_nxd_tcp_client_socket_connect>:
/**************************************************************************/
UINT  _nxd_tcp_client_socket_connect(NX_TCP_SOCKET *socket_ptr,
                                     NXD_ADDRESS *server_ip,
                                     UINT server_port,
                                     ULONG wait_option)
{
 80115ac:	b590      	push	{r4, r7, lr}
 80115ae:	b08b      	sub	sp, #44	; 0x2c
 80115b0:	af02      	add	r7, sp, #8
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
 80115b8:	603b      	str	r3, [r7, #0]

UINT          ip_header_size = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	61fb      	str	r3, [r7, #28]
NX_IP        *ip_ptr;
NX_INTERFACE *outgoing_interface = NX_NULL;
 80115be:	2300      	movs	r3, #0
 80115c0:	617b      	str	r3, [r7, #20]
#ifdef TX_ENABLE_EVENT_TRACE
ULONG         ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Setup IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80115c8:	61bb      	str	r3, [r7, #24]

    /* Make sure the server IP address is accesible. */
#ifndef NX_DISABLE_IPV4
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V4)
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b04      	cmp	r3, #4
 80115d0:	d10d      	bne.n	80115ee <_nxd_tcp_client_socket_connect+0x42>
    {
        if (_nx_ip_route_find(ip_ptr, server_ip -> nxd_ip_address.v4, &outgoing_interface, &socket_ptr -> nx_tcp_socket_next_hop_address) != NX_SUCCESS)
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	6859      	ldr	r1, [r3, #4]
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	332c      	adds	r3, #44	; 0x2c
 80115da:	f107 0214 	add.w	r2, r7, #20
 80115de:	69b8      	ldr	r0, [r7, #24]
 80115e0:	f7f8 fc8e 	bl	8009f00 <_nx_ip_route_find>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <_nxd_tcp_client_socket_connect+0x42>
        {
            /* Return an IP address error code.  */
            return(NX_IP_ADDRESS_ERROR);
 80115ea:	2321      	movs	r3, #33	; 0x21
 80115ec:	e121      	b.n	8011832 <_nxd_tcp_client_socket_connect+0x286>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_CLIENT_SOCKET_CONNECT, ip_ptr, socket_ptr, ip_address_log, server_port, NX_TRACE_TCP_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Obtain the IP mutex so we initiate the connect.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80115f4:	f04f 31ff 	mov.w	r1, #4294967295
 80115f8:	4618      	mov	r0, r3
 80115fa:	f002 faab 	bl	8013b54 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if (!socket_ptr -> nx_tcp_socket_bound_next)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d107      	bne.n	8011618 <_nxd_tcp_client_socket_connect+0x6c>
    {

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011608:	69bb      	ldr	r3, [r7, #24]
 801160a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801160e:	4618      	mov	r0, r3
 8011610:	f002 fd18 	bl	8014044 <_tx_mutex_put>

        /* Return a not bound error code.  */
        return(NX_NOT_BOUND);
 8011614:	2324      	movs	r3, #36	; 0x24
 8011616:	e10c      	b.n	8011832 <_nxd_tcp_client_socket_connect+0x286>
    }

    /* Determine if the socket is in a pre-connection state.  */
    if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_CLOSED) && (socket_ptr -> nx_tcp_socket_state != NX_TCP_TIMED_WAIT))
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801161c:	2b01      	cmp	r3, #1
 801161e:	d00b      	beq.n	8011638 <_nxd_tcp_client_socket_connect+0x8c>
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011624:	2b0a      	cmp	r3, #10
 8011626:	d007      	beq.n	8011638 <_nxd_tcp_client_socket_connect+0x8c>
    {

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801162e:	4618      	mov	r0, r3
 8011630:	f002 fd08 	bl	8014044 <_tx_mutex_put>

        /* Return a not closed error code.  */
        return(NX_NOT_CLOSED);
 8011634:	2335      	movs	r3, #53	; 0x35
 8011636:	e0fc      	b.n	8011832 <_nxd_tcp_client_socket_connect+0x286>
    }

#ifndef NX_DISABLE_TCP_INFO

    /* Increment the active connections count.  */
    ip_ptr -> nx_ip_tcp_active_connections++;
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Increment the TCP connections count.  */
    ip_ptr -> nx_ip_tcp_connections++;
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801164c:	1c5a      	adds	r2, r3, #1
 801164e:	69bb      	ldr	r3, [r7, #24]
 8011650:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_SYN_SENT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Move the TCP state to Sequence Sent, the next state of an active open.  */
    socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_SENT;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2203      	movs	r2, #3
 8011658:	639a      	str	r2, [r3, #56]	; 0x38

    /* Save the server port and server IP address.  */
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version       = server_ip -> nxd_ip_version;
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	615a      	str	r2, [r3, #20]

#ifndef NX_DISABLE_IPV4
    if (server_ip -> nxd_ip_version == NX_IP_VERSION_V4)
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	2b04      	cmp	r3, #4
 8011668:	d105      	bne.n	8011676 <_nxd_tcp_client_socket_connect+0xca>
    {

        /* copy the IPv4 address */
        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = server_ip -> nxd_ip_address.v4;
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	685a      	ldr	r2, [r3, #4]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	619a      	str	r2, [r3, #24]

        ip_header_size = (UINT)sizeof(NX_IPV4_HEADER);
 8011672:	2314      	movs	r3, #20
 8011674:	61fb      	str	r3, [r7, #28]

        ip_header_size = (UINT)sizeof(NX_IPV6_HEADER);
    }
#endif /* FEATURE_NX_IPV6 */

    socket_ptr -> nx_tcp_socket_connect_port = server_port;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	61da      	str	r2, [r3, #28]

    /* Outgoing interface must not be null. */
    NX_ASSERT(outgoing_interface != NX_NULL);
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d104      	bne.n	801168c <_nxd_tcp_client_socket_connect+0xe0>
 8011682:	f04f 30ff 	mov.w	r0, #4294967295
 8011686:	f003 fc7d 	bl	8014f84 <_tx_thread_sleep>
 801168a:	e7fa      	b.n	8011682 <_nxd_tcp_client_socket_connect+0xd6>

    /* Initialize the maximum segment size based on the interface MTU. */
    /*lint -e{644} suppress variable might not be initialized, since "outgoing_interface" was initialized by _nx_ip_route_find or _nxd_ipv6_interface_find. */
    if (outgoing_interface -> nx_interface_ip_mtu_size < (ip_header_size + NX_TCP_SYN_SIZE))
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	331c      	adds	r3, #28
 8011694:	429a      	cmp	r2, r3
 8011696:	d225      	bcs.n	80116e4 <_nxd_tcp_client_socket_connect+0x138>
        /* Interface MTU size is smaller than IP and TCP header size.  Invalid interface! */

#ifndef NX_DISABLE_TCP_INFO

        /* Reduce the active connections count.  */
        ip_ptr -> nx_ip_tcp_active_connections--;
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801169e:	1e5a      	subs	r2, r3, #1
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Reduce the TCP connections count.  */
        ip_ptr -> nx_ip_tcp_connections--;
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80116ac:	1e5a      	subs	r2, r3, #1
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif

        /* Restore the socket state. */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_CLOSED;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2201      	movs	r2, #1
 80116b8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Reset server port and server IP address. */
        memset(&socket_ptr -> nx_tcp_socket_connect_ip, 0, sizeof(NXD_ADDRESS));
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	3314      	adds	r3, #20
 80116be:	2208      	movs	r2, #8
 80116c0:	2100      	movs	r1, #0
 80116c2:	4618      	mov	r0, r3
 80116c4:	f005 fa0e 	bl	8016ae4 <memset>
        socket_ptr -> nx_tcp_socket_connect_port = 0;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2200      	movs	r2, #0
 80116cc:	61da      	str	r2, [r3, #28]

        /* Reset the next_hop_address information. */
        socket_ptr -> nx_tcp_socket_next_hop_address = 0;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2200      	movs	r2, #0
 80116d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80116da:	4618      	mov	r0, r3
 80116dc:	f002 fcb2 	bl	8014044 <_tx_mutex_put>


        /* Return an IP address error code.  */
        return(NX_INVALID_INTERFACE);
 80116e0:	234c      	movs	r3, #76	; 0x4c
 80116e2:	e0a6      	b.n	8011832 <_nxd_tcp_client_socket_connect+0x286>
    }

    socket_ptr -> nx_tcp_socket_connect_interface = outgoing_interface;
 80116e4:	697a      	ldr	r2, [r7, #20]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Setup the initial sequence number.  */
    if (socket_ptr -> nx_tcp_socket_tx_sequence == 0)
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d10f      	bne.n	8011712 <_nxd_tcp_client_socket_connect+0x166>
    {
        socket_ptr -> nx_tcp_socket_tx_sequence =  (((ULONG)NX_RAND()) << NX_SHIFT_BY_16) & 0xFFFFFFFF;
 80116f2:	f005 fa8d 	bl	8016c10 <rand>
 80116f6:	4603      	mov	r3, r0
 80116f8:	041a      	lsls	r2, r3, #16
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	63da      	str	r2, [r3, #60]	; 0x3c
        socket_ptr -> nx_tcp_socket_tx_sequence |= (ULONG)NX_RAND();
 80116fe:	f005 fa87 	bl	8016c10 <rand>
 8011702:	4603      	mov	r3, r0
 8011704:	461a      	mov	r2, r3
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801170a:	431a      	orrs	r2, r3
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	63da      	str	r2, [r3, #60]	; 0x3c
 8011710:	e009      	b.n	8011726 <_nxd_tcp_client_socket_connect+0x17a>
    }
    else
    {
        socket_ptr -> nx_tcp_socket_tx_sequence =  socket_ptr -> nx_tcp_socket_tx_sequence + ((ULONG)(((ULONG)0x10000))) + ((ULONG)NX_RAND());
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8011716:	f005 fa7b 	bl	8016c10 <rand>
 801171a:	4603      	mov	r3, r0
 801171c:	4423      	add	r3, r4
 801171e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Ensure the rx window size logic is reset.  */
    socket_ptr -> nx_tcp_socket_rx_window_current =    socket_ptr -> nx_tcp_socket_rx_window_default;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	675a      	str	r2, [r3, #116]	; 0x74
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_default;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	679a      	str	r2, [r3, #120]	; 0x78

    /* Clear the FIN received flag.  */
    socket_ptr -> nx_tcp_socket_fin_received =  NX_FALSE;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2200      	movs	r2, #0
 801173a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_tcp_socket_fin_acked =  NX_FALSE;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2200      	movs	r2, #0
 8011742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Increment the sequence number.  */
    socket_ptr -> nx_tcp_socket_tx_sequence++;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801174a:	1c5a      	adds	r2, r3, #1
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Setup a timeout so the connection attempt can be sent again.  */
    socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2200      	movs	r2, #0
 8011760:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    /* CLEANUP: In case any existing packets on socket's receive queue.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d002      	beq.n	8011774 <_nxd_tcp_client_socket_connect+0x1c8>
    {

        /* Remove all packets on the socket's receive queue.  */
        _nx_tcp_socket_receive_queue_flush(socket_ptr);
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7fc fc24 	bl	800dfbc <_nx_tcp_socket_receive_queue_flush>
    }

    /* CLEANUP: Clean up any existing socket data before making a new connection. */
    socket_ptr -> nx_tcp_socket_tx_window_congestion = 0;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2200      	movs	r2, #0
 8011778:	659a      	str	r2, [r3, #88]	; 0x58
    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2200      	movs	r2, #0
 801177e:	65da      	str	r2, [r3, #92]	; 0x5c
    socket_ptr -> nx_tcp_socket_packets_sent         = 0;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2200      	movs	r2, #0
 8011784:	67da      	str	r2, [r3, #124]	; 0x7c
    socket_ptr -> nx_tcp_socket_bytes_sent           = 0;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2200      	movs	r2, #0
 801178a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    socket_ptr -> nx_tcp_socket_packets_received     = 0;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2200      	movs	r2, #0
 8011792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    socket_ptr -> nx_tcp_socket_bytes_received       = 0;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    socket_ptr -> nx_tcp_socket_retransmit_packets   = 0;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    socket_ptr -> nx_tcp_socket_checksum_errors      = 0;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2200      	movs	r2, #0
 80117aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    socket_ptr -> nx_tcp_socket_transmit_sent_head   = NX_NULL;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    socket_ptr -> nx_tcp_socket_transmit_sent_tail   = NX_NULL;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2200      	movs	r2, #0
 80117ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    socket_ptr -> nx_tcp_socket_transmit_sent_count  = 0;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    socket_ptr -> nx_tcp_socket_receive_queue_count  = 0;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2200      	movs	r2, #0
 80117ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    socket_ptr -> nx_tcp_socket_receive_queue_head   = NX_NULL;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2200      	movs	r2, #0
 80117d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    socket_ptr -> nx_tcp_socket_receive_queue_tail   = NX_NULL;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2200      	movs	r2, #0
 80117da:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* Send the SYN message.  */
    _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117e2:	3b01      	subs	r3, #1
 80117e4:	4619      	mov	r1, r3
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f7fb fce0 	bl	800d1ac <_nx_tcp_packet_send_syn>

    /* Optionally suspend the thread.  If timeout occurs, return a connection timeout status.  If
       immediate response is selected, return a connection in progress status.  Only on a real
       connection should success be returned.  */
    if ((wait_option) && (_tx_thread_current_ptr != &(ip_ptr -> nx_ip_thread)))
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d018      	beq.n	8011824 <_nxd_tcp_client_socket_connect+0x278>
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80117f8:	4b10      	ldr	r3, [pc, #64]	; (801183c <_nxd_tcp_client_socket_connect+0x290>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d011      	beq.n	8011824 <_nxd_tcp_client_socket_connect+0x278>
    {

        /* Suspend the thread on this socket's connection attempt.  */
        /* Note: the IP protection mutex is released inside _nx_tcp_socket_thread_suspend().  */

        _nx_tcp_socket_thread_suspend(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), _nx_tcp_connect_cleanup, socket_ptr, &(ip_ptr -> nx_ip_protection), wait_option);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	4613      	mov	r3, r2
 8011812:	68fa      	ldr	r2, [r7, #12]
 8011814:	490a      	ldr	r1, [pc, #40]	; (8011840 <_nxd_tcp_client_socket_connect+0x294>)
 8011816:	f7fe fc95 	bl	8010144 <_nx_tcp_socket_thread_suspend>

        /* Just return the completion code.  */
        return(_tx_thread_current_ptr -> tx_thread_suspend_status);
 801181a:	4b08      	ldr	r3, [pc, #32]	; (801183c <_nxd_tcp_client_socket_connect+0x290>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011822:	e006      	b.n	8011832 <_nxd_tcp_client_socket_connect+0x286>
    {

        /* No suspension is request, just release protection and return to the caller.  */

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011824:	69bb      	ldr	r3, [r7, #24]
 8011826:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801182a:	4618      	mov	r0, r3
 801182c:	f002 fc0a 	bl	8014044 <_tx_mutex_put>

        /* Return in-progress completion status.  */
        return(NX_IN_PROGRESS);
 8011830:	2337      	movs	r3, #55	; 0x37
    }
}
 8011832:	4618      	mov	r0, r3
 8011834:	3724      	adds	r7, #36	; 0x24
 8011836:	46bd      	mov	sp, r7
 8011838:	bd90      	pop	{r4, r7, pc}
 801183a:	bf00      	nop
 801183c:	2000aaf8 	.word	0x2000aaf8
 8011840:	0800be21 	.word	0x0800be21

08011844 <_nxd_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 8011844:	b480      	push	{r7}
 8011846:	b089      	sub	sp, #36	; 0x24
 8011848:	af00      	add	r7, sp, #0
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	607a      	str	r2, [r7, #4]
 8011850:	603b      	str	r3, [r7, #0]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d011      	beq.n	801187c <_nxd_udp_packet_info_extract+0x38>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801185e:	2b04      	cmp	r3, #4
 8011860:	d10a      	bne.n	8011878 <_nxd_udp_packet_info_extract+0x34>
        {

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011866:	61fb      	str	r3, [r7, #28]

            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2204      	movs	r2, #4
 801186c:	601a      	str	r2, [r3, #0]

            /* At this point, the IP address in the IPv4 header is in host byte order. */
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	68da      	ldr	r2, [r3, #12]
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	605a      	str	r2, [r3, #4]
 8011876:	e001      	b.n	801187c <_nxd_udp_packet_info_extract+0x38>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 8011878:	2312      	movs	r3, #18
 801187a:	e032      	b.n	80118e2 <_nxd_udp_packet_info_extract+0x9e>
        }
    }

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	689b      	ldr	r3, [r3, #8]
 8011880:	61bb      	str	r3, [r7, #24]

    /* Pickup the source port.  */
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	3b08      	subs	r3, #8
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	0c1b      	lsrs	r3, r3, #16
 801188a:	617b      	str	r3, [r7, #20]
    if (port != NX_NULL)
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d002      	beq.n	8011898 <_nxd_udp_packet_info_extract+0x54>
    {
        *port = source_port;
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	697a      	ldr	r2, [r7, #20]
 8011896:	601a      	str	r2, [r3, #0]
    }

    if (protocol != NX_NULL)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d002      	beq.n	80118a4 <_nxd_udp_packet_info_extract+0x60>
    {
        *protocol = 0x11;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2211      	movs	r2, #17
 80118a2:	601a      	str	r2, [r3, #0]
    }

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, address, source_port, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    if (interface_index == NX_NULL)
 80118a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d101      	bne.n	80118ae <_nxd_udp_packet_info_extract+0x6a>
    {
        return(NX_SUCCESS);
 80118aa:	2300      	movs	r3, #0
 80118ac:	e019      	b.n	80118e2 <_nxd_udp_packet_info_extract+0x9e>
    }

    /* Search for interface index number.  Initialize interface value as
       invalid (0xFFFFFFFF).  Once we find valid interface, we will update
       the returned value. */
    *interface_index = 0xFFFFFFFF;
 80118ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b0:	f04f 32ff 	mov.w	r2, #4294967295
 80118b4:	601a      	str	r2, [r3, #0]

    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80118bc:	2b04      	cmp	r3, #4
 80118be:	d106      	bne.n	80118ce <_nxd_udp_packet_info_extract+0x8a>
    {
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c4:	613b      	str	r3, [r7, #16]
    else
    {
        return(NX_SUCCESS);
    }

    if (nx_interface == NX_NULL)
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d104      	bne.n	80118d6 <_nxd_udp_packet_info_extract+0x92>
 80118cc:	e001      	b.n	80118d2 <_nxd_udp_packet_info_extract+0x8e>
        return(NX_SUCCESS);
 80118ce:	2300      	movs	r3, #0
 80118d0:	e007      	b.n	80118e2 <_nxd_udp_packet_info_extract+0x9e>
    {

        /* No interface attached.  Done here, and return success. */
        return(NX_SUCCESS);
 80118d2:	2300      	movs	r3, #0
 80118d4:	e005      	b.n	80118e2 <_nxd_udp_packet_info_extract+0x9e>
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	79db      	ldrb	r3, [r3, #7]
 80118da:	461a      	mov	r2, r3
 80118dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118de:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 80118e0:	2300      	movs	r3, #0
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3724      	adds	r7, #36	; 0x24
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr

080118ee <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 80118ee:	b590      	push	{r4, r7, lr}
 80118f0:	b097      	sub	sp, #92	; 0x5c
 80118f2:	af04      	add	r7, sp, #16
 80118f4:	60f8      	str	r0, [r7, #12]
 80118f6:	60b9      	str	r1, [r7, #8]
 80118f8:	607a      	str	r2, [r7, #4]
 80118fa:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 80118fc:	2300      	movs	r3, #0
 80118fe:	647b      	str	r3, [r7, #68]	; 0x44
 8011900:	2300      	movs	r3, #0
 8011902:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 8011904:	2300      	movs	r3, #0
 8011906:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 8011908:	2300      	movs	r3, #0
 801190a:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 801190c:	2301      	movs	r3, #1
 801190e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011910:	f3ef 8310 	mrs	r3, PRIMASK
 8011914:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011918:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801191a:	b672      	cpsid	i
    return(int_posture);
 801191c:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 801191e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011924:	2b00      	cmp	r3, #0
 8011926:	d107      	bne.n	8011938 <_nxd_udp_socket_send+0x4a>
 8011928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801192a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	f383 8810 	msr	PRIMASK, r3
}
 8011932:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 8011934:	2324      	movs	r3, #36	; 0x24
 8011936:	e0d3      	b.n	8011ae0 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011940:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	f383 8810 	msr	PRIMASK, r3
}
 8011948:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2b04      	cmp	r3, #4
 8011950:	d118      	bne.n	8011984 <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6859      	ldr	r1, [r3, #4]
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801195c:	f107 0314 	add.w	r3, r7, #20
 8011960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011962:	f7f8 facd 	bl	8009f00 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801196a:	2b00      	cmp	r3, #0
 801196c:	d101      	bne.n	8011972 <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 801196e:	2321      	movs	r3, #33	; 0x21
 8011970:	e0b6      	b.n	8011ae0 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011976:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	3304      	adds	r3, #4
 801197c:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 801197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011980:	3314      	adds	r3, #20
 8011982:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	689b      	ldr	r3, [r3, #8]
 8011988:	f1a3 0208 	sub.w	r2, r3, #8
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	b2da      	uxtb	r2, r3
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 801199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119a2:	1c5a      	adds	r2, r3, #1
 80119a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 80119aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b4:	441a      	add	r2, r3
 80119b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	1c5a      	adds	r2, r3, #1
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	695a      	ldr	r2, [r3, #20]
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ce:	441a      	add	r2, r3
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d8:	f103 0208 	add.w	r2, r3, #8
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	689b      	ldr	r3, [r3, #8]
 80119ea:	041a      	lsls	r2, r3, #16
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 80119f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f2:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f8:	041a      	lsls	r2, r3, #16
 80119fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fc:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80119fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	ba1a      	rev	r2, r3
 8011a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a06:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8011a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	ba1a      	rev	r2, r3
 8011a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a10:	605a      	str	r2, [r3, #4]
       Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
       driver is able to compute UDP checksum in hardware, let the driver handle the checksum
       computation.
     */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d003      	beq.n	8011a22 <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 8011a1e:	2b06      	cmp	r3, #6
 8011a20:	d136      	bne.n	8011a90 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8011a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a26:	f003 0310 	and.w	r3, r3, #16
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d001      	beq.n	8011a32 <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 8011a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d025      	beq.n	8011a84 <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 8011a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a3e:	9300      	str	r3, [sp, #0]
 8011a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a42:	2111      	movs	r1, #17
 8011a44:	68b8      	ldr	r0, [r7, #8]
 8011a46:	f7f6 ffc3 	bl	80089d0 <_nx_ip_checksum_compute>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 8011a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a50:	43db      	mvns	r3, r3
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 8011a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d102      	bne.n	8011a62 <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 8011a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a60:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8011a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	ba1a      	rev	r2, r3
 8011a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6a:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8011a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6e:	685a      	ldr	r2, [r3, #4]
 8011a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a72:	431a      	orrs	r2, r3
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8011a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	ba1a      	rev	r2, r3
 8011a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a80:	605a      	str	r2, [r3, #4]
 8011a82:	e005      	b.n	8011a90 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a88:	f043 0210 	orr.w	r2, r3, #16
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8011a96:	f04f 31ff 	mov.w	r1, #4294967295
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f002 f85a 	bl	8013b54 <_tx_mutex_get>

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2b04      	cmp	r3, #4
 8011aa6:	d114      	bne.n	8011ad2 <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6858      	ldr	r0, [r3, #4]
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 8011ab4:	68fa      	ldr	r2, [r7, #12]
 8011ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011ab8:	6979      	ldr	r1, [r7, #20]
 8011aba:	9103      	str	r1, [sp, #12]
 8011abc:	9202      	str	r2, [sp, #8]
 8011abe:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8011ac2:	9201      	str	r2, [sp, #4]
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	4623      	mov	r3, r4
 8011ac8:	4602      	mov	r2, r0
 8011aca:	68b9      	ldr	r1, [r7, #8]
 8011acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ace:	f7f8 f9a5 	bl	8009e1c <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8011ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f002 fab3 	bl	8014044 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8011ade:	2300      	movs	r3, #0
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	374c      	adds	r7, #76	; 0x4c
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd90      	pop	{r4, r7, pc}

08011ae8 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d007      	beq.n	8011b0a <_nxe_arp_enable+0x22>
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	4a1c      	ldr	r2, [pc, #112]	; (8011b70 <_nxe_arp_enable+0x88>)
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d102      	bne.n	8011b0a <_nxe_arp_enable+0x22>
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d101      	bne.n	8011b0e <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 8011b0a:	2307      	movs	r3, #7
 8011b0c:	e02c      	b.n	8011b68 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d001      	beq.n	8011b1c <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 8011b18:	2315      	movs	r3, #21
 8011b1a:	e025      	b.n	8011b68 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2b33      	cmp	r3, #51	; 0x33
 8011b20:	d801      	bhi.n	8011b26 <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 8011b22:	2309      	movs	r3, #9
 8011b24:	e020      	b.n	8011b68 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b26:	f3ef 8305 	mrs	r3, IPSR
 8011b2a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011b2c:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8011b2e:	4b11      	ldr	r3, [pc, #68]	; (8011b74 <_nxe_arp_enable+0x8c>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4313      	orrs	r3, r2
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d009      	beq.n	8011b4c <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b38:	f3ef 8305 	mrs	r3, IPSR
 8011b3c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011b3e:	697a      	ldr	r2, [r7, #20]
 8011b40:	4b0c      	ldr	r3, [pc, #48]	; (8011b74 <_nxe_arp_enable+0x8c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4313      	orrs	r3, r2
 8011b46:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011b4a:	d304      	bcc.n	8011b56 <_nxe_arp_enable+0x6e>
 8011b4c:	4b0a      	ldr	r3, [pc, #40]	; (8011b78 <_nxe_arp_enable+0x90>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4a0a      	ldr	r2, [pc, #40]	; (8011b7c <_nxe_arp_enable+0x94>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d101      	bne.n	8011b5a <_nxe_arp_enable+0x72>
 8011b56:	2311      	movs	r3, #17
 8011b58:	e006      	b.n	8011b68 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	68b9      	ldr	r1, [r7, #8]
 8011b5e:	68f8      	ldr	r0, [r7, #12]
 8011b60:	f7f5 fd00 	bl	8007564 <_nx_arp_enable>
 8011b64:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8011b66:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3720      	adds	r7, #32
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	49502020 	.word	0x49502020
 8011b74:	20000094 	.word	0x20000094
 8011b78:	2000aaf8 	.word	0x2000aaf8
 8011b7c:	2000ab98 	.word	0x2000ab98

08011b80 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d004      	beq.n	8011b98 <_nxe_icmp_enable+0x18>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a17      	ldr	r2, [pc, #92]	; (8011bf0 <_nxe_icmp_enable+0x70>)
 8011b94:	4293      	cmp	r3, r2
 8011b96:	d001      	beq.n	8011b9c <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8011b98:	2307      	movs	r3, #7
 8011b9a:	e025      	b.n	8011be8 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8011ba6:	2315      	movs	r3, #21
 8011ba8:	e01e      	b.n	8011be8 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011baa:	f3ef 8305 	mrs	r3, IPSR
 8011bae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011bb0:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8011bb2:	4b10      	ldr	r3, [pc, #64]	; (8011bf4 <_nxe_icmp_enable+0x74>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d009      	beq.n	8011bd0 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011bbc:	f3ef 8305 	mrs	r3, IPSR
 8011bc0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	4b0b      	ldr	r3, [pc, #44]	; (8011bf4 <_nxe_icmp_enable+0x74>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4313      	orrs	r3, r2
 8011bca:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011bce:	d304      	bcc.n	8011bda <_nxe_icmp_enable+0x5a>
 8011bd0:	4b09      	ldr	r3, [pc, #36]	; (8011bf8 <_nxe_icmp_enable+0x78>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a09      	ldr	r2, [pc, #36]	; (8011bfc <_nxe_icmp_enable+0x7c>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d101      	bne.n	8011bde <_nxe_icmp_enable+0x5e>
 8011bda:	2311      	movs	r3, #17
 8011bdc:	e004      	b.n	8011be8 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7f6 fac8 	bl	8008174 <_nx_icmp_enable>
 8011be4:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8011be6:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3718      	adds	r7, #24
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	49502020 	.word	0x49502020
 8011bf4:	20000094 	.word	0x20000094
 8011bf8:	2000aaf8 	.word	0x2000aaf8
 8011bfc:	2000ab98 	.word	0x2000ab98

08011c00 <_nxe_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b088      	sub	sp, #32
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	60f8      	str	r0, [r7, #12]
 8011c08:	60b9      	str	r1, [r7, #8]
 8011c0a:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d004      	beq.n	8011c1c <_nxe_ip_address_change_notify+0x1c>
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	4a15      	ldr	r2, [pc, #84]	; (8011c6c <_nxe_ip_address_change_notify+0x6c>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d001      	beq.n	8011c20 <_nxe_ip_address_change_notify+0x20>
    {
        return(NX_PTR_ERROR);
 8011c1c:	2307      	movs	r3, #7
 8011c1e:	e020      	b.n	8011c62 <_nxe_ip_address_change_notify+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c20:	f3ef 8305 	mrs	r3, IPSR
 8011c24:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011c26:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8011c28:	4b11      	ldr	r3, [pc, #68]	; (8011c70 <_nxe_ip_address_change_notify+0x70>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d009      	beq.n	8011c46 <_nxe_ip_address_change_notify+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c32:	f3ef 8305 	mrs	r3, IPSR
 8011c36:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011c38:	697a      	ldr	r2, [r7, #20]
 8011c3a:	4b0d      	ldr	r3, [pc, #52]	; (8011c70 <_nxe_ip_address_change_notify+0x70>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	4313      	orrs	r3, r2
 8011c40:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011c44:	d304      	bcc.n	8011c50 <_nxe_ip_address_change_notify+0x50>
 8011c46:	4b0b      	ldr	r3, [pc, #44]	; (8011c74 <_nxe_ip_address_change_notify+0x74>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4a0b      	ldr	r2, [pc, #44]	; (8011c78 <_nxe_ip_address_change_notify+0x78>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d101      	bne.n	8011c54 <_nxe_ip_address_change_notify+0x54>
 8011c50:	2311      	movs	r3, #17
 8011c52:	e006      	b.n	8011c62 <_nxe_ip_address_change_notify+0x62>

    /* Call actual IP address change notify function.  */
    status =  _nx_ip_address_change_notify(ip_ptr, ip_address_change_notify, additional_info);
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	68b9      	ldr	r1, [r7, #8]
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f7f6 fe59 	bl	8008910 <_nx_ip_address_change_notify>
 8011c5e:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8011c60:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3720      	adds	r7, #32
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	49502020 	.word	0x49502020
 8011c70:	20000094 	.word	0x20000094
 8011c74:	2000aaf8 	.word	0x2000aaf8
 8011c78:	2000ab98 	.word	0x2000ab98

08011c7c <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b088      	sub	sp, #32
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d00a      	beq.n	8011ca4 <_nxe_ip_address_get+0x28>
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4a18      	ldr	r2, [pc, #96]	; (8011cf4 <_nxe_ip_address_get+0x78>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d105      	bne.n	8011ca4 <_nxe_ip_address_get+0x28>
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d002      	beq.n	8011ca4 <_nxe_ip_address_get+0x28>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d101      	bne.n	8011ca8 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 8011ca4:	2307      	movs	r3, #7
 8011ca6:	e020      	b.n	8011cea <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ca8:	f3ef 8305 	mrs	r3, IPSR
 8011cac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011cae:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8011cb0:	4b11      	ldr	r3, [pc, #68]	; (8011cf8 <_nxe_ip_address_get+0x7c>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4313      	orrs	r3, r2
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d009      	beq.n	8011cce <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011cba:	f3ef 8305 	mrs	r3, IPSR
 8011cbe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011cc0:	697a      	ldr	r2, [r7, #20]
 8011cc2:	4b0d      	ldr	r3, [pc, #52]	; (8011cf8 <_nxe_ip_address_get+0x7c>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4313      	orrs	r3, r2
 8011cc8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011ccc:	d304      	bcc.n	8011cd8 <_nxe_ip_address_get+0x5c>
 8011cce:	4b0b      	ldr	r3, [pc, #44]	; (8011cfc <_nxe_ip_address_get+0x80>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4a0b      	ldr	r2, [pc, #44]	; (8011d00 <_nxe_ip_address_get+0x84>)
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d101      	bne.n	8011cdc <_nxe_ip_address_get+0x60>
 8011cd8:	2311      	movs	r3, #17
 8011cda:	e006      	b.n	8011cea <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	68b9      	ldr	r1, [r7, #8]
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f7f6 fe44 	bl	800896e <_nx_ip_address_get>
 8011ce6:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 8011ce8:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3720      	adds	r7, #32
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	49502020 	.word	0x49502020
 8011cf8:	20000094 	.word	0x20000094
 8011cfc:	2000aaf8 	.word	0x2000aaf8
 8011d00:	2000ab98 	.word	0x2000ab98

08011d04 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b092      	sub	sp, #72	; 0x48
 8011d08:	af06      	add	r7, sp, #24
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
 8011d10:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d012      	beq.n	8011d42 <_nxe_ip_create+0x3e>
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d00f      	beq.n	8011d42 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8011d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d24:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8011d26:	4a59      	ldr	r2, [pc, #356]	; (8011e8c <_nxe_ip_create+0x188>)
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d10a      	bne.n	8011d42 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8011d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d007      	beq.n	8011d42 <_nxe_ip_create+0x3e>
 8011d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d004      	beq.n	8011d42 <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 8011d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d3a:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8011d3e:	4293      	cmp	r3, r2
 8011d40:	d001      	beq.n	8011d46 <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 8011d42:	2307      	movs	r3, #7
 8011d44:	e09d      	b.n	8011e82 <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 8011d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d48:	2bc7      	cmp	r3, #199	; 0xc7
 8011d4a:	d801      	bhi.n	8011d50 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 8011d4c:	2309      	movs	r3, #9
 8011d4e:	e098      	b.n	8011e82 <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 8011d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d52:	2b1f      	cmp	r3, #31
 8011d54:	d901      	bls.n	8011d5a <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 8011d56:	230a      	movs	r3, #10
 8011d58:	e093      	b.n	8011e82 <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 8011d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d5c:	3b01      	subs	r3, #1
 8011d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d60:	4413      	add	r3, r2
 8011d62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8011d64:	f002 feb0 	bl	8014ac8 <_tx_thread_identify>
 8011d68:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d006      	beq.n	8011d7e <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8011d70:	f107 0310 	add.w	r3, r7, #16
 8011d74:	461a      	mov	r2, r3
 8011d76:	2100      	movs	r1, #0
 8011d78:	6a38      	ldr	r0, [r7, #32]
 8011d7a:	f002 ff59 	bl	8014c30 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 8011d7e:	4b44      	ldr	r3, [pc, #272]	; (8011e90 <_nxe_ip_create+0x18c>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 8011d84:	4b43      	ldr	r3, [pc, #268]	; (8011e94 <_nxe_ip_create+0x190>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 8011d8a:	e02b      	b.n	8011de4 <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 8011d8c:	68fa      	ldr	r2, [r7, #12]
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d017      	beq.n	8011dc4 <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8011d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d96:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 8011d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d305      	bcc.n	8011dac <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8011da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d30b      	bcc.n	8011dc4 <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 8011dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 8011db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d311      	bcc.n	8011ddc <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8011dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d20b      	bcs.n	8011ddc <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 8011dc4:	6a3b      	ldr	r3, [r7, #32]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d006      	beq.n	8011dd8 <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	f107 0210 	add.w	r2, r7, #16
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	6a38      	ldr	r0, [r7, #32]
 8011dd4:	f002 ff2c 	bl	8014c30 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 8011dd8:	2307      	movs	r3, #7
 8011dda:	e052      	b.n	8011e82 <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8011de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 8011de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de6:	1e5a      	subs	r2, r3, #1
 8011de8:	62ba      	str	r2, [r7, #40]	; 0x28
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1ce      	bne.n	8011d8c <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 8011dee:	6a3b      	ldr	r3, [r7, #32]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d006      	beq.n	8011e02 <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	f107 0210 	add.w	r2, r7, #16
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6a38      	ldr	r0, [r7, #32]
 8011dfe:	f002 ff17 	bl	8014c30 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d010      	beq.n	8011e2a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8011e08:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	da0d      	bge.n	8011e2a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8011e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e18:	d007      	beq.n	8011e2a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8011e20:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8011e24:	d001      	beq.n	8011e2a <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 8011e26:	2321      	movs	r3, #33	; 0x21
 8011e28:	e02b      	b.n	8011e82 <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e2a:	f3ef 8305 	mrs	r3, IPSR
 8011e2e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011e30:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8011e32:	4b19      	ldr	r3, [pc, #100]	; (8011e98 <_nxe_ip_create+0x194>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	4313      	orrs	r3, r2
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d009      	beq.n	8011e50 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e3c:	f3ef 8305 	mrs	r3, IPSR
 8011e40:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011e42:	697a      	ldr	r2, [r7, #20]
 8011e44:	4b14      	ldr	r3, [pc, #80]	; (8011e98 <_nxe_ip_create+0x194>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011e4e:	d304      	bcc.n	8011e5a <_nxe_ip_create+0x156>
 8011e50:	4b12      	ldr	r3, [pc, #72]	; (8011e9c <_nxe_ip_create+0x198>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4a12      	ldr	r2, [pc, #72]	; (8011ea0 <_nxe_ip_create+0x19c>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d101      	bne.n	8011e5e <_nxe_ip_create+0x15a>
 8011e5a:	2311      	movs	r3, #17
 8011e5c:	e011      	b.n	8011e82 <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 8011e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e60:	9304      	str	r3, [sp, #16]
 8011e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e64:	9303      	str	r3, [sp, #12]
 8011e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e68:	9302      	str	r3, [sp, #8]
 8011e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e6c:	9301      	str	r3, [sp, #4]
 8011e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	68b9      	ldr	r1, [r7, #8]
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f7f6 fe95 	bl	8008ba8 <_nx_ip_create>
 8011e7e:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 8011e80:	69fb      	ldr	r3, [r7, #28]
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3730      	adds	r7, #48	; 0x30
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	5041434b 	.word	0x5041434b
 8011e90:	2000a9f8 	.word	0x2000a9f8
 8011e94:	2000a9f4 	.word	0x2000a9f4
 8011e98:	20000094 	.word	0x20000094
 8011e9c:	2000aaf8 	.word	0x2000aaf8
 8011ea0:	2000ab98 	.word	0x2000ab98

08011ea4 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b086      	sub	sp, #24
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	60b9      	str	r1, [r7, #8]
 8011eae:	607a      	str	r2, [r7, #4]
 8011eb0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d007      	beq.n	8011ec8 <_nxe_packet_allocate+0x24>
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	4a18      	ldr	r2, [pc, #96]	; (8011f20 <_nxe_packet_allocate+0x7c>)
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d102      	bne.n	8011ec8 <_nxe_packet_allocate+0x24>
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d101      	bne.n	8011ecc <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 8011ec8:	2307      	movs	r3, #7
 8011eca:	e025      	b.n	8011f18 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f003 0303 	and.w	r3, r3, #3
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 8011ed6:	230a      	movs	r3, #10
 8011ed8:	e01e      	b.n	8011f18 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d013      	beq.n	8011f08 <_nxe_packet_allocate+0x64>
 8011ee0:	4b10      	ldr	r3, [pc, #64]	; (8011f24 <_nxe_packet_allocate+0x80>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00d      	beq.n	8011f04 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ee8:	f3ef 8305 	mrs	r3, IPSR
 8011eec:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011eee:	693a      	ldr	r2, [r7, #16]
 8011ef0:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <_nxe_packet_allocate+0x84>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d104      	bne.n	8011f04 <_nxe_packet_allocate+0x60>
 8011efa:	4b0a      	ldr	r3, [pc, #40]	; (8011f24 <_nxe_packet_allocate+0x80>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	4a0b      	ldr	r2, [pc, #44]	; (8011f2c <_nxe_packet_allocate+0x88>)
 8011f00:	4293      	cmp	r3, r2
 8011f02:	d101      	bne.n	8011f08 <_nxe_packet_allocate+0x64>
 8011f04:	2311      	movs	r3, #17
 8011f06:	e007      	b.n	8011f18 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	68b9      	ldr	r1, [r7, #8]
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f7f8 febe 	bl	800ac90 <_nx_packet_allocate>
 8011f14:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8011f16:	697b      	ldr	r3, [r7, #20]
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3718      	adds	r7, #24
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	5041434b 	.word	0x5041434b
 8011f24:	2000aaf8 	.word	0x2000aaf8
 8011f28:	20000094 	.word	0x20000094
 8011f2c:	2000ab98 	.word	0x2000ab98

08011f30 <_nxe_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                              NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b088      	sub	sp, #32
 8011f34:	af02      	add	r7, sp, #8
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
 8011f3c:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) ||
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00a      	beq.n	8011f5a <_nxe_packet_data_append+0x2a>
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4a22      	ldr	r2, [pc, #136]	; (8011fd4 <_nxe_packet_data_append+0xa4>)
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d105      	bne.n	8011f5a <_nxe_packet_data_append+0x2a>
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d002      	beq.n	8011f5a <_nxe_packet_data_append+0x2a>
        (packet_ptr == NX_NULL) || (data_start == NX_NULL))
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d101      	bne.n	8011f5e <_nxe_packet_data_append+0x2e>
    {
        return(NX_PTR_ERROR);
 8011f5a:	2307      	movs	r3, #7
 8011f5c:	e035      	b.n	8011fca <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid size of data to append.  */
    if (!data_size)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d101      	bne.n	8011f68 <_nxe_packet_data_append+0x38>
    {
        return(NX_SIZE_ERROR);
 8011f64:	2309      	movs	r3, #9
 8011f66:	e030      	b.n	8011fca <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	689a      	ldr	r2, [r3, #8]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	691b      	ldr	r3, [r3, #16]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d201      	bcs.n	8011f78 <_nxe_packet_data_append+0x48>
    {
        return(NX_UNDERFLOW);
 8011f74:	2302      	movs	r3, #2
 8011f76:	e028      	b.n	8011fca <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	68da      	ldr	r2, [r3, #12]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	695b      	ldr	r3, [r3, #20]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d901      	bls.n	8011f88 <_nxe_packet_data_append+0x58>
    {
        return(NX_OVERFLOW);
 8011f84:	2303      	movs	r3, #3
 8011f86:	e020      	b.n	8011fca <_nxe_packet_data_append+0x9a>
    }

    /* Check for appropriate caller.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 8011f88:	6a3b      	ldr	r3, [r7, #32]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d013      	beq.n	8011fb6 <_nxe_packet_data_append+0x86>
 8011f8e:	4b12      	ldr	r3, [pc, #72]	; (8011fd8 <_nxe_packet_data_append+0xa8>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00d      	beq.n	8011fb2 <_nxe_packet_data_append+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f96:	f3ef 8305 	mrs	r3, IPSR
 8011f9a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011f9c:	693a      	ldr	r2, [r7, #16]
 8011f9e:	4b0f      	ldr	r3, [pc, #60]	; (8011fdc <_nxe_packet_data_append+0xac>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d104      	bne.n	8011fb2 <_nxe_packet_data_append+0x82>
 8011fa8:	4b0b      	ldr	r3, [pc, #44]	; (8011fd8 <_nxe_packet_data_append+0xa8>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	4a0c      	ldr	r2, [pc, #48]	; (8011fe0 <_nxe_packet_data_append+0xb0>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d101      	bne.n	8011fb6 <_nxe_packet_data_append+0x86>
 8011fb2:	2311      	movs	r3, #17
 8011fb4:	e009      	b.n	8011fca <_nxe_packet_data_append+0x9a>

    /* Call actual packet data append function.  */
    status =  _nx_packet_data_append(packet_ptr, data_start, data_size, pool_ptr, wait_option);
 8011fb6:	6a3b      	ldr	r3, [r7, #32]
 8011fb8:	9300      	str	r3, [sp, #0]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	68b9      	ldr	r1, [r7, #8]
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f7f8 ffbf 	bl	800af44 <_nx_packet_data_append>
 8011fc6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8011fc8:	697b      	ldr	r3, [r7, #20]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3718      	adds	r7, #24
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	5041434b 	.word	0x5041434b
 8011fd8:	2000aaf8 	.word	0x2000aaf8
 8011fdc:	20000094 	.word	0x20000094
 8011fe0:	2000ab98 	.word	0x2000ab98

08011fe4 <_nxe_packet_data_retrieve>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (buffer_start == NX_NULL) || (bytes_copied == NX_NULL))
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d005      	beq.n	8012002 <_nxe_packet_data_retrieve+0x1e>
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d002      	beq.n	8012002 <_nxe_packet_data_retrieve+0x1e>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d101      	bne.n	8012006 <_nxe_packet_data_retrieve+0x22>
    {
        return(NX_PTR_ERROR);
 8012002:	2307      	movs	r3, #7
 8012004:	e006      	b.n	8012014 <_nxe_packet_data_retrieve+0x30>
    }

    /* Call actual packet data retrieve function.  */
    status =  _nx_packet_data_retrieve(packet_ptr, buffer_start, bytes_copied);
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	68b9      	ldr	r1, [r7, #8]
 801200a:	68f8      	ldr	r0, [r7, #12]
 801200c:	f7f9 f8da 	bl	800b1c4 <_nx_packet_data_retrieve>
 8012010:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8012012:	697b      	ldr	r3, [r7, #20]
}
 8012014:	4618      	mov	r0, r3
 8012016:	3718      	adds	r7, #24
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b094      	sub	sp, #80	; 0x50
 8012020:	af02      	add	r7, sp, #8
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	607a      	str	r2, [r7, #4]
 8012028:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 801202a:	2300      	movs	r3, #0
 801202c:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d005      	beq.n	8012040 <_nxe_packet_pool_create+0x24>
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d002      	beq.n	8012040 <_nxe_packet_pool_create+0x24>
 801203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801203c:	2b3c      	cmp	r3, #60	; 0x3c
 801203e:	d001      	beq.n	8012044 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 8012040:	2307      	movs	r3, #7
 8012042:	e0a7      	b.n	8012194 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	3303      	adds	r3, #3
 8012048:	f023 0303 	bic.w	r3, r3, #3
 801204c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 801204e:	683a      	ldr	r2, [r7, #0]
 8012050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012052:	1ad2      	subs	r2, r2, r3
 8012054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012056:	4413      	add	r3, r2
 8012058:	f023 0303 	bic.w	r3, r3, #3
 801205c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 801205e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012060:	333c      	adds	r3, #60	; 0x3c
 8012062:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8012064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012066:	3303      	adds	r3, #3
 8012068:	f023 0303 	bic.w	r3, r3, #3
 801206c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 801206e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8012076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	4413      	add	r3, r2
 801207c:	3303      	adds	r3, #3
 801207e:	f023 0203 	bic.w	r2, r3, #3
 8012082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 8012088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801208a:	2b04      	cmp	r3, #4
 801208c:	d908      	bls.n	80120a0 <_nxe_packet_pool_create+0x84>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d005      	beq.n	80120a0 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 8012094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012098:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 801209a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801209c:	429a      	cmp	r2, r3
 801209e:	d201      	bcs.n	80120a4 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 80120a0:	2309      	movs	r3, #9
 80120a2:	e077      	b.n	8012194 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 80120a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120a6:	3b01      	subs	r3, #1
 80120a8:	683a      	ldr	r2, [r7, #0]
 80120aa:	4413      	add	r3, r2
 80120ac:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 80120ae:	f002 fd0b 	bl	8014ac8 <_tx_thread_identify>
 80120b2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d006      	beq.n	80120c8 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 80120ba:	f107 0310 	add.w	r3, r7, #16
 80120be:	461a      	mov	r2, r3
 80120c0:	2100      	movs	r1, #0
 80120c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120c4:	f002 fdb4 	bl	8014c30 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 80120c8:	4b34      	ldr	r3, [pc, #208]	; (801219c <_nxe_packet_pool_create+0x180>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 80120ce:	4b34      	ldr	r3, [pc, #208]	; (80121a0 <_nxe_packet_pool_create+0x184>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 80120d4:	e02b      	b.n	801212e <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 80120d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120d8:	6a1a      	ldr	r2, [r3, #32]
 80120da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120de:	3b01      	subs	r3, #1
 80120e0:	4413      	add	r3, r2
 80120e2:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d011      	beq.n	8012110 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 80120ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ee:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 80120f0:	683a      	ldr	r2, [r7, #0]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d303      	bcc.n	80120fe <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d308      	bcc.n	8012110 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 80120fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012100:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8012102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012104:	429a      	cmp	r2, r3
 8012106:	d30f      	bcc.n	8012128 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 8012108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	429a      	cmp	r2, r3
 801210e:	d20b      	bcs.n	8012128 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 8012110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012112:	2b00      	cmp	r3, #0
 8012114:	d006      	beq.n	8012124 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	f107 0210 	add.w	r2, r7, #16
 801211c:	4619      	mov	r1, r3
 801211e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012120:	f002 fd86 	bl	8014c30 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 8012124:	2307      	movs	r3, #7
 8012126:	e035      	b.n	8012194 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 8012128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801212a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801212c:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 801212e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012130:	1e5a      	subs	r2, r3, #1
 8012132:	643a      	str	r2, [r7, #64]	; 0x40
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1ce      	bne.n	80120d6 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 8012138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213a:	2b00      	cmp	r3, #0
 801213c:	d006      	beq.n	801214c <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	f107 0210 	add.w	r2, r7, #16
 8012144:	4619      	mov	r1, r3
 8012146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012148:	f002 fd72 	bl	8014c30 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801214c:	f3ef 8305 	mrs	r3, IPSR
 8012150:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012152:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8012154:	4b13      	ldr	r3, [pc, #76]	; (80121a4 <_nxe_packet_pool_create+0x188>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4313      	orrs	r3, r2
 801215a:	2b00      	cmp	r3, #0
 801215c:	d009      	beq.n	8012172 <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801215e:	f3ef 8305 	mrs	r3, IPSR
 8012162:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012164:	697a      	ldr	r2, [r7, #20]
 8012166:	4b0f      	ldr	r3, [pc, #60]	; (80121a4 <_nxe_packet_pool_create+0x188>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	4313      	orrs	r3, r2
 801216c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012170:	d304      	bcc.n	801217c <_nxe_packet_pool_create+0x160>
 8012172:	4b0d      	ldr	r3, [pc, #52]	; (80121a8 <_nxe_packet_pool_create+0x18c>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	4a0d      	ldr	r2, [pc, #52]	; (80121ac <_nxe_packet_pool_create+0x190>)
 8012178:	4293      	cmp	r3, r2
 801217a:	d101      	bne.n	8012180 <_nxe_packet_pool_create+0x164>
 801217c:	2311      	movs	r3, #17
 801217e:	e009      	b.n	8012194 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 8012180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012182:	9300      	str	r3, [sp, #0]
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	68b9      	ldr	r1, [r7, #8]
 801218a:	68f8      	ldr	r0, [r7, #12]
 801218c:	f7f9 f8ba 	bl	800b304 <_nx_packet_pool_create>
 8012190:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 8012192:	6a3b      	ldr	r3, [r7, #32]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3748      	adds	r7, #72	; 0x48
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	2000aa00 	.word	0x2000aa00
 80121a0:	2000a9fc 	.word	0x2000a9fc
 80121a4:	20000094 	.word	0x20000094
 80121a8:	2000aaf8 	.word	0x2000aaf8
 80121ac:	2000ab98 	.word	0x2000ab98

080121b0 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d009      	beq.n	80121d8 <_nxe_packet_release+0x28>
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d005      	beq.n	80121d8 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 80121d2:	4a12      	ldr	r2, [pc, #72]	; (801221c <_nxe_packet_release+0x6c>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d001      	beq.n	80121dc <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 80121d8:	2307      	movs	r3, #7
 80121da:	e01a      	b.n	8012212 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	689a      	ldr	r2, [r3, #8]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	691b      	ldr	r3, [r3, #16]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d201      	bcs.n	80121ec <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 80121e8:	2302      	movs	r3, #2
 80121ea:	e012      	b.n	8012212 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	68da      	ldr	r2, [r3, #12]
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	695b      	ldr	r3, [r3, #20]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d901      	bls.n	80121fc <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 80121f8:	2303      	movs	r3, #3
 80121fa:	e00a      	b.n	8012212 <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 80121fc:	68f8      	ldr	r0, [r7, #12]
 80121fe:	f7f9 f9db 	bl	800b5b8 <_nx_packet_release>
 8012202:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d102      	bne.n	8012210 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2200      	movs	r2, #0
 801220e:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 8012210:	68bb      	ldr	r3, [r7, #8]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	5041434b 	.word	0x5041434b

08012220 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d009      	beq.n	8012248 <_nxe_packet_transmit_release+0x28>
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d005      	beq.n	8012248 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 8012242:	4a12      	ldr	r2, [pc, #72]	; (801228c <_nxe_packet_transmit_release+0x6c>)
 8012244:	4293      	cmp	r3, r2
 8012246:	d001      	beq.n	801224c <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 8012248:	2307      	movs	r3, #7
 801224a:	e01a      	b.n	8012282 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	689a      	ldr	r2, [r3, #8]
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	691b      	ldr	r3, [r3, #16]
 8012254:	429a      	cmp	r2, r3
 8012256:	d201      	bcs.n	801225c <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 8012258:	2302      	movs	r3, #2
 801225a:	e012      	b.n	8012282 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	68da      	ldr	r2, [r3, #12]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	695b      	ldr	r3, [r3, #20]
 8012264:	429a      	cmp	r2, r3
 8012266:	d901      	bls.n	801226c <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 8012268:	2303      	movs	r3, #3
 801226a:	e00a      	b.n	8012282 <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f7f9 fa5b 	bl	800b728 <_nx_packet_transmit_release>
 8012272:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d102      	bne.n	8012280 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2200      	movs	r2, #0
 801227e:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 8012280:	68bb      	ldr	r3, [r7, #8]
}
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	5041434b 	.word	0x5041434b

08012290 <_nxe_tcp_client_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_client_socket_bind(NX_TCP_SOCKET *socket_ptr, UINT port, ULONG wait_option)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b086      	sub	sp, #24
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d004      	beq.n	80122ac <_nxe_tcp_client_socket_bind+0x1c>
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	4a19      	ldr	r2, [pc, #100]	; (801230c <_nxe_tcp_client_socket_bind+0x7c>)
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d001      	beq.n	80122b0 <_nxe_tcp_client_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 80122ac:	2307      	movs	r3, #7
 80122ae:	e029      	b.n	8012304 <_nxe_tcp_client_socket_bind+0x74>
    }

    /* Check to see if TCP is enabled.  */
    if (!(socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_packet_receive)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80122b6:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d101      	bne.n	80122c2 <_nxe_tcp_client_socket_bind+0x32>
    {
        return(NX_NOT_ENABLED);
 80122be:	2314      	movs	r3, #20
 80122c0:	e020      	b.n	8012304 <_nxe_tcp_client_socket_bind+0x74>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122c8:	d301      	bcc.n	80122ce <_nxe_tcp_client_socket_bind+0x3e>
    {
        return(NX_INVALID_PORT);
 80122ca:	2346      	movs	r3, #70	; 0x46
 80122cc:	e01a      	b.n	8012304 <_nxe_tcp_client_socket_bind+0x74>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122ce:	f3ef 8305 	mrs	r3, IPSR
 80122d2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80122d4:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 80122d6:	4b0e      	ldr	r3, [pc, #56]	; (8012310 <_nxe_tcp_client_socket_bind+0x80>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4313      	orrs	r3, r2
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d108      	bne.n	80122f2 <_nxe_tcp_client_socket_bind+0x62>
 80122e0:	4b0c      	ldr	r3, [pc, #48]	; (8012314 <_nxe_tcp_client_socket_bind+0x84>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d004      	beq.n	80122f2 <_nxe_tcp_client_socket_bind+0x62>
 80122e8:	4b0a      	ldr	r3, [pc, #40]	; (8012314 <_nxe_tcp_client_socket_bind+0x84>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	4a0a      	ldr	r2, [pc, #40]	; (8012318 <_nxe_tcp_client_socket_bind+0x88>)
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d101      	bne.n	80122f6 <_nxe_tcp_client_socket_bind+0x66>
 80122f2:	2311      	movs	r3, #17
 80122f4:	e006      	b.n	8012304 <_nxe_tcp_client_socket_bind+0x74>

    /* Call actual TCP client socket bind function.  */
    status =  _nx_tcp_client_socket_bind(socket_ptr, port, wait_option);
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	68b9      	ldr	r1, [r7, #8]
 80122fa:	68f8      	ldr	r0, [r7, #12]
 80122fc:	f7f9 fb62 	bl	800b9c4 <_nx_tcp_client_socket_bind>
 8012300:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8012302:	697b      	ldr	r3, [r7, #20]
}
 8012304:	4618      	mov	r0, r3
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	54435020 	.word	0x54435020
 8012310:	20000094 	.word	0x20000094
 8012314:	2000aaf8 	.word	0x2000aaf8
 8012318:	2000ab98 	.word	0x2000ab98

0801231c <_nxe_tcp_client_socket_connect>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_client_socket_connect(NX_TCP_SOCKET *socket_ptr, ULONG server_ip, UINT server_port, ULONG wait_option)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b086      	sub	sp, #24
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d004      	beq.n	801233a <_nxe_tcp_client_socket_connect+0x1e>
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	4a24      	ldr	r2, [pc, #144]	; (80123c8 <_nxe_tcp_client_socket_connect+0xac>)
 8012336:	4293      	cmp	r3, r2
 8012338:	d001      	beq.n	801233e <_nxe_tcp_client_socket_connect+0x22>
    {
        return(NX_PTR_ERROR);
 801233a:	2307      	movs	r3, #7
 801233c:	e040      	b.n	80123c0 <_nxe_tcp_client_socket_connect+0xa4>
    }

    /* Check to see if TCP is enabled.  */
    if (!(socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_packet_receive)
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012344:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8012348:	2b00      	cmp	r3, #0
 801234a:	d101      	bne.n	8012350 <_nxe_tcp_client_socket_connect+0x34>
    {
        return(NX_NOT_ENABLED);
 801234c:	2314      	movs	r3, #20
 801234e:	e037      	b.n	80123c0 <_nxe_tcp_client_socket_connect+0xa4>
    }

    /* Check for invalid IP address.  */
    if (!server_ip)
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d101      	bne.n	801235a <_nxe_tcp_client_socket_connect+0x3e>
    {
        return(NX_IP_ADDRESS_ERROR);
 8012356:	2321      	movs	r3, #33	; 0x21
 8012358:	e032      	b.n	80123c0 <_nxe_tcp_client_socket_connect+0xa4>
    }

    /* Check for invalid IP address.  */
    if (((server_ip & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	2b00      	cmp	r3, #0
 801235e:	da0d      	bge.n	801237c <_nxe_tcp_client_socket_connect+0x60>
        ((server_ip & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    if (((server_ip & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8012366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801236a:	d007      	beq.n	801237c <_nxe_tcp_client_socket_connect+0x60>
        ((server_ip & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((server_ip & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8012372:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8012376:	d001      	beq.n	801237c <_nxe_tcp_client_socket_connect+0x60>
    {
        return(NX_IP_ADDRESS_ERROR);
 8012378:	2321      	movs	r3, #33	; 0x21
 801237a:	e021      	b.n	80123c0 <_nxe_tcp_client_socket_connect+0xa4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)server_port) > (ULONG)NX_MAX_PORT)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012382:	d301      	bcc.n	8012388 <_nxe_tcp_client_socket_connect+0x6c>
    {
        return(NX_INVALID_PORT);
 8012384:	2346      	movs	r3, #70	; 0x46
 8012386:	e01b      	b.n	80123c0 <_nxe_tcp_client_socket_connect+0xa4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012388:	f3ef 8305 	mrs	r3, IPSR
 801238c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801238e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8012390:	4b0e      	ldr	r3, [pc, #56]	; (80123cc <_nxe_tcp_client_socket_connect+0xb0>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4313      	orrs	r3, r2
 8012396:	2b00      	cmp	r3, #0
 8012398:	d108      	bne.n	80123ac <_nxe_tcp_client_socket_connect+0x90>
 801239a:	4b0d      	ldr	r3, [pc, #52]	; (80123d0 <_nxe_tcp_client_socket_connect+0xb4>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d004      	beq.n	80123ac <_nxe_tcp_client_socket_connect+0x90>
 80123a2:	4b0b      	ldr	r3, [pc, #44]	; (80123d0 <_nxe_tcp_client_socket_connect+0xb4>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	4a0b      	ldr	r2, [pc, #44]	; (80123d4 <_nxe_tcp_client_socket_connect+0xb8>)
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d101      	bne.n	80123b0 <_nxe_tcp_client_socket_connect+0x94>
 80123ac:	2311      	movs	r3, #17
 80123ae:	e007      	b.n	80123c0 <_nxe_tcp_client_socket_connect+0xa4>

    /* Call actual TCP client socket connect function.  */
    status =  _nx_tcp_client_socket_connect(socket_ptr, server_ip, server_port, wait_option);
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	68b9      	ldr	r1, [r7, #8]
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f7f9 fbfc 	bl	800bbb4 <_nx_tcp_client_socket_connect>
 80123bc:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 80123be:	697b      	ldr	r3, [r7, #20]
    NX_PARAMETER_NOT_USED(server_port);
    NX_PARAMETER_NOT_USED(wait_option);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	54435020 	.word	0x54435020
 80123cc:	20000094 	.word	0x20000094
 80123d0:	2000aaf8 	.word	0x2000aaf8
 80123d4:	2000ab98 	.word	0x2000ab98

080123d8 <_nxe_tcp_client_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_client_socket_unbind(NX_TCP_SOCKET *socket_ptr)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d004      	beq.n	80123f0 <_nxe_tcp_client_socket_unbind+0x18>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	4a15      	ldr	r2, [pc, #84]	; (8012440 <_nxe_tcp_client_socket_unbind+0x68>)
 80123ec:	4293      	cmp	r3, r2
 80123ee:	d001      	beq.n	80123f4 <_nxe_tcp_client_socket_unbind+0x1c>
    {
        return(NX_PTR_ERROR);
 80123f0:	2307      	movs	r3, #7
 80123f2:	e021      	b.n	8012438 <_nxe_tcp_client_socket_unbind+0x60>
    }

    /* Check to see if TCP is enabled.  */
    if (!(socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_packet_receive)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80123fa:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d101      	bne.n	8012406 <_nxe_tcp_client_socket_unbind+0x2e>
    {
        return(NX_NOT_ENABLED);
 8012402:	2314      	movs	r3, #20
 8012404:	e018      	b.n	8012438 <_nxe_tcp_client_socket_unbind+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012406:	f3ef 8305 	mrs	r3, IPSR
 801240a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801240c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 801240e:	4b0d      	ldr	r3, [pc, #52]	; (8012444 <_nxe_tcp_client_socket_unbind+0x6c>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	4313      	orrs	r3, r2
 8012414:	2b00      	cmp	r3, #0
 8012416:	d108      	bne.n	801242a <_nxe_tcp_client_socket_unbind+0x52>
 8012418:	4b0b      	ldr	r3, [pc, #44]	; (8012448 <_nxe_tcp_client_socket_unbind+0x70>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d004      	beq.n	801242a <_nxe_tcp_client_socket_unbind+0x52>
 8012420:	4b09      	ldr	r3, [pc, #36]	; (8012448 <_nxe_tcp_client_socket_unbind+0x70>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	4a09      	ldr	r2, [pc, #36]	; (801244c <_nxe_tcp_client_socket_unbind+0x74>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d101      	bne.n	801242e <_nxe_tcp_client_socket_unbind+0x56>
 801242a:	2311      	movs	r3, #17
 801242c:	e004      	b.n	8012438 <_nxe_tcp_client_socket_unbind+0x60>

    /* Call actual TCP client socket unbind function.  */
    status =  _nx_tcp_client_socket_unbind(socket_ptr);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7f9 fbd7 	bl	800bbe2 <_nx_tcp_client_socket_unbind>
 8012434:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 8012436:	68fb      	ldr	r3, [r7, #12]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	54435020 	.word	0x54435020
 8012444:	20000094 	.word	0x20000094
 8012448:	2000aaf8 	.word	0x2000aaf8
 801244c:	2000ab98 	.word	0x2000ab98

08012450 <_nxe_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_enable(NX_IP *ip_ptr)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b086      	sub	sp, #24
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d004      	beq.n	8012468 <_nxe_tcp_enable+0x18>
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	4a15      	ldr	r2, [pc, #84]	; (80124b8 <_nxe_tcp_enable+0x68>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d001      	beq.n	801246c <_nxe_tcp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8012468:	2307      	movs	r3, #7
 801246a:	e020      	b.n	80124ae <_nxe_tcp_enable+0x5e>
    }

    /* Check to see if TCP is already enabled.  */
    if (ip_ptr -> nx_ip_tcp_packet_receive)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <_nxe_tcp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8012476:	2315      	movs	r3, #21
 8012478:	e019      	b.n	80124ae <_nxe_tcp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801247a:	f3ef 8305 	mrs	r3, IPSR
 801247e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012480:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 8012482:	4b0e      	ldr	r3, [pc, #56]	; (80124bc <_nxe_tcp_enable+0x6c>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4313      	orrs	r3, r2
 8012488:	2b00      	cmp	r3, #0
 801248a:	d00b      	beq.n	80124a4 <_nxe_tcp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801248c:	f3ef 8305 	mrs	r3, IPSR
 8012490:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012492:	68fa      	ldr	r2, [r7, #12]
 8012494:	4b09      	ldr	r3, [pc, #36]	; (80124bc <_nxe_tcp_enable+0x6c>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	4313      	orrs	r3, r2
 801249a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801249e:	d201      	bcs.n	80124a4 <_nxe_tcp_enable+0x54>
 80124a0:	2311      	movs	r3, #17
 80124a2:	e004      	b.n	80124ae <_nxe_tcp_enable+0x5e>

    /* Call actual TCP enable function.  */
    status =  _nx_tcp_enable(ip_ptr);
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7f9 fe69 	bl	800c17c <_nx_tcp_enable>
 80124aa:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 80124ac:	697b      	ldr	r3, [r7, #20]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3718      	adds	r7, #24
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	49502020 	.word	0x49502020
 80124bc:	20000094 	.word	0x20000094

080124c0 <_nxe_tcp_socket_create>:
UINT  _nxe_tcp_socket_create(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG window_size,
                             VOID (*tcp_urgent_data_callback)(NX_TCP_SOCKET *socket_ptr),
                             VOID (*tcp_disconnect_callback)(NX_TCP_SOCKET *socket_ptr),
                             UINT tcp_socket_size)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b090      	sub	sp, #64	; 0x40
 80124c4:	af06      	add	r7, sp, #24
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
 80124cc:	603b      	str	r3, [r7, #0]
NX_TCP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (socket_ptr == NX_NULL) ||
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00b      	beq.n	80124ec <_nxe_tcp_socket_create+0x2c>
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4a47      	ldr	r2, [pc, #284]	; (80125f8 <_nxe_tcp_socket_create+0x138>)
 80124da:	4293      	cmp	r3, r2
 80124dc:	d106      	bne.n	80124ec <_nxe_tcp_socket_create+0x2c>
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d003      	beq.n	80124ec <_nxe_tcp_socket_create+0x2c>
 80124e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80124ea:	d001      	beq.n	80124f0 <_nxe_tcp_socket_create+0x30>
        (tcp_socket_size != (UINT)sizeof(NX_TCP_SOCKET)))
    {
        return(NX_PTR_ERROR);
 80124ec:	2307      	movs	r3, #7
 80124ee:	e07f      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124f0:	f3ef 8305 	mrs	r3, IPSR
 80124f4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80124f6:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 80124f8:	4b40      	ldr	r3, [pc, #256]	; (80125fc <_nxe_tcp_socket_create+0x13c>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	4313      	orrs	r3, r2
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d009      	beq.n	8012516 <_nxe_tcp_socket_create+0x56>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012502:	f3ef 8305 	mrs	r3, IPSR
 8012506:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012508:	697a      	ldr	r2, [r7, #20]
 801250a:	4b3c      	ldr	r3, [pc, #240]	; (80125fc <_nxe_tcp_socket_create+0x13c>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	4313      	orrs	r3, r2
 8012510:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012514:	d304      	bcc.n	8012520 <_nxe_tcp_socket_create+0x60>
 8012516:	4b3a      	ldr	r3, [pc, #232]	; (8012600 <_nxe_tcp_socket_create+0x140>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4a3a      	ldr	r2, [pc, #232]	; (8012604 <_nxe_tcp_socket_create+0x144>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d101      	bne.n	8012524 <_nxe_tcp_socket_create+0x64>
 8012520:	2311      	movs	r3, #17
 8012522:	e065      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801252a:	f04f 31ff 	mov.w	r1, #4294967295
 801252e:	4618      	mov	r0, r3
 8012530:	f001 fb10 	bl	8013b54 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_tcp_created_sockets_count;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801253a:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8012542:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 8012544:	e00f      	b.n	8012566 <_nxe_tcp_socket_create+0xa6>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	429a      	cmp	r2, r3
 801254c:	d107      	bne.n	801255e <_nxe_tcp_socket_create+0x9e>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8012554:	4618      	mov	r0, r3
 8012556:	f001 fd75 	bl	8014044 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 801255a:	2307      	movs	r3, #7
 801255c:	e048      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_tcp_socket_created_next;
 801255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012560:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8012564:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 8012566:	6a3b      	ldr	r3, [r7, #32]
 8012568:	1e5a      	subs	r2, r3, #1
 801256a:	623a      	str	r2, [r7, #32]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d1ea      	bne.n	8012546 <_nxe_tcp_socket_create+0x86>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8012576:	4618      	mov	r0, r3
 8012578:	f001 fd64 	bl	8014044 <_tx_mutex_put>

    /* Check to see if TCP is enabled.  */
    if (!ip_ptr -> nx_ip_tcp_packet_receive)
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8012582:	2b00      	cmp	r3, #0
 8012584:	d101      	bne.n	801258a <_nxe_tcp_socket_create+0xca>
    {
        return(NX_NOT_ENABLED);
 8012586:	2314      	movs	r3, #20
 8012588:	e032      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8012590:	2b00      	cmp	r3, #0
 8012592:	d001      	beq.n	8012598 <_nxe_tcp_socket_create+0xd8>
    {
        return(NX_OPTION_ERROR);
 8012594:	230a      	movs	r3, #10
 8012596:	e02b      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 8012598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259a:	2b00      	cmp	r3, #0
 801259c:	d005      	beq.n	80125aa <_nxe_tcp_socket_create+0xea>
 801259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80125a4:	d001      	beq.n	80125aa <_nxe_tcp_socket_create+0xea>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 80125a6:	230a      	movs	r3, #10
 80125a8:	e022      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 80125aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ac:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80125b0:	d901      	bls.n	80125b6 <_nxe_tcp_socket_create+0xf6>
    {
        return(NX_OPTION_ERROR);
 80125b2:	230a      	movs	r3, #10
 80125b4:	e01c      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
    }

    /* Check for valid window size.  */
    if (!window_size)
 80125b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d101      	bne.n	80125c0 <_nxe_tcp_socket_create+0x100>
    {
        return(NX_OPTION_ERROR);
 80125bc:	230a      	movs	r3, #10
 80125be:	e017      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
    }

#ifndef  NX_ENABLE_TCP_WINDOW_SCALING
    if (window_size > NX_LOWER_16_MASK)
 80125c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125c6:	d301      	bcc.n	80125cc <_nxe_tcp_socket_create+0x10c>
    {
        return(NX_OPTION_ERROR);
 80125c8:	230a      	movs	r3, #10
 80125ca:	e011      	b.n	80125f0 <_nxe_tcp_socket_create+0x130>
        return(NX_OPTION_ERROR);
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

    /* Call actual TCP socket create function.  */
    status =  _nx_tcp_socket_create(ip_ptr, socket_ptr, name, type_of_service, fragment, time_to_live,
 80125cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ce:	9304      	str	r3, [sp, #16]
 80125d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d2:	9303      	str	r3, [sp, #12]
 80125d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d6:	9302      	str	r3, [sp, #8]
 80125d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125da:	9301      	str	r3, [sp, #4]
 80125dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125de:	9300      	str	r3, [sp, #0]
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	68b9      	ldr	r1, [r7, #8]
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f7fa ffc4 	bl	800d574 <_nx_tcp_socket_create>
 80125ec:	61f8      	str	r0, [r7, #28]
                                    window_size, tcp_urgent_data_callback, tcp_disconnect_callback);

    /* Return completion status.  */
    return(status);
 80125ee:	69fb      	ldr	r3, [r7, #28]
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3728      	adds	r7, #40	; 0x28
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	49502020 	.word	0x49502020
 80125fc:	20000094 	.word	0x20000094
 8012600:	2000aaf8 	.word	0x2000aaf8
 8012604:	2000ab98 	.word	0x2000ab98

08012608 <_nxe_tcp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_socket_delete(NX_TCP_SOCKET *socket_ptr)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d004      	beq.n	8012620 <_nxe_tcp_socket_delete+0x18>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	4a15      	ldr	r2, [pc, #84]	; (8012670 <_nxe_tcp_socket_delete+0x68>)
 801261c:	4293      	cmp	r3, r2
 801261e:	d001      	beq.n	8012624 <_nxe_tcp_socket_delete+0x1c>
    {
        return(NX_PTR_ERROR);
 8012620:	2307      	movs	r3, #7
 8012622:	e021      	b.n	8012668 <_nxe_tcp_socket_delete+0x60>
    }

    /* Check to see if TCP is enabled.  */
    if (!(socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_packet_receive)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801262a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801262e:	2b00      	cmp	r3, #0
 8012630:	d101      	bne.n	8012636 <_nxe_tcp_socket_delete+0x2e>
    {
        return(NX_NOT_ENABLED);
 8012632:	2314      	movs	r3, #20
 8012634:	e018      	b.n	8012668 <_nxe_tcp_socket_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012636:	f3ef 8305 	mrs	r3, IPSR
 801263a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801263c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 801263e:	4b0d      	ldr	r3, [pc, #52]	; (8012674 <_nxe_tcp_socket_delete+0x6c>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	4313      	orrs	r3, r2
 8012644:	2b00      	cmp	r3, #0
 8012646:	d108      	bne.n	801265a <_nxe_tcp_socket_delete+0x52>
 8012648:	4b0b      	ldr	r3, [pc, #44]	; (8012678 <_nxe_tcp_socket_delete+0x70>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d004      	beq.n	801265a <_nxe_tcp_socket_delete+0x52>
 8012650:	4b09      	ldr	r3, [pc, #36]	; (8012678 <_nxe_tcp_socket_delete+0x70>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4a09      	ldr	r2, [pc, #36]	; (801267c <_nxe_tcp_socket_delete+0x74>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d101      	bne.n	801265e <_nxe_tcp_socket_delete+0x56>
 801265a:	2311      	movs	r3, #17
 801265c:	e004      	b.n	8012668 <_nxe_tcp_socket_delete+0x60>

    /* Call actual TCP socket delete function.  */
    status =  _nx_tcp_socket_delete(socket_ptr);
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7fb f852 	bl	800d708 <_nx_tcp_socket_delete>
 8012664:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 8012666:	68fb      	ldr	r3, [r7, #12]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	54435020 	.word	0x54435020
 8012674:	20000094 	.word	0x20000094
 8012678:	2000aaf8 	.word	0x2000aaf8
 801267c:	2000ab98 	.word	0x2000ab98

08012680 <_nxe_tcp_socket_disconnect>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_socket_disconnect(NX_TCP_SOCKET *socket_ptr, ULONG wait_option)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d004      	beq.n	801269a <_nxe_tcp_socket_disconnect+0x1a>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	4a15      	ldr	r2, [pc, #84]	; (80126ec <_nxe_tcp_socket_disconnect+0x6c>)
 8012696:	4293      	cmp	r3, r2
 8012698:	d001      	beq.n	801269e <_nxe_tcp_socket_disconnect+0x1e>
    {
        return(NX_PTR_ERROR);
 801269a:	2307      	movs	r3, #7
 801269c:	e022      	b.n	80126e4 <_nxe_tcp_socket_disconnect+0x64>
    }

    /* Check to see if TCP is enabled.  */
    if (!(socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_packet_receive)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80126a4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d101      	bne.n	80126b0 <_nxe_tcp_socket_disconnect+0x30>
    {
        return(NX_NOT_ENABLED);
 80126ac:	2314      	movs	r3, #20
 80126ae:	e019      	b.n	80126e4 <_nxe_tcp_socket_disconnect+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80126b0:	f3ef 8305 	mrs	r3, IPSR
 80126b4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80126b6:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 80126b8:	4b0d      	ldr	r3, [pc, #52]	; (80126f0 <_nxe_tcp_socket_disconnect+0x70>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4313      	orrs	r3, r2
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d108      	bne.n	80126d4 <_nxe_tcp_socket_disconnect+0x54>
 80126c2:	4b0c      	ldr	r3, [pc, #48]	; (80126f4 <_nxe_tcp_socket_disconnect+0x74>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d004      	beq.n	80126d4 <_nxe_tcp_socket_disconnect+0x54>
 80126ca:	4b0a      	ldr	r3, [pc, #40]	; (80126f4 <_nxe_tcp_socket_disconnect+0x74>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4a0a      	ldr	r2, [pc, #40]	; (80126f8 <_nxe_tcp_socket_disconnect+0x78>)
 80126d0:	4293      	cmp	r3, r2
 80126d2:	d101      	bne.n	80126d8 <_nxe_tcp_socket_disconnect+0x58>
 80126d4:	2311      	movs	r3, #17
 80126d6:	e005      	b.n	80126e4 <_nxe_tcp_socket_disconnect+0x64>

    /* Call actual TCP socket disconnect function.  */
    status =  _nx_tcp_socket_disconnect(socket_ptr, wait_option);
 80126d8:	6839      	ldr	r1, [r7, #0]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7fb f894 	bl	800d808 <_nx_tcp_socket_disconnect>
 80126e0:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 80126e2:	68fb      	ldr	r3, [r7, #12]
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3710      	adds	r7, #16
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	54435020 	.word	0x54435020
 80126f0:	20000094 	.word	0x20000094
 80126f4:	2000aaf8 	.word	0x2000aaf8
 80126f8:	2000ab98 	.word	0x2000ab98

080126fc <_nxe_tcp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_socket_receive(NX_TCP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b086      	sub	sp, #24
 8012700:	af00      	add	r7, sp, #0
 8012702:	60f8      	str	r0, [r7, #12]
 8012704:	60b9      	str	r1, [r7, #8]
 8012706:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID) || (packet_ptr == NX_NULL))
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d007      	beq.n	801271e <_nxe_tcp_socket_receive+0x22>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a18      	ldr	r2, [pc, #96]	; (8012774 <_nxe_tcp_socket_receive+0x78>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d102      	bne.n	801271e <_nxe_tcp_socket_receive+0x22>
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d101      	bne.n	8012722 <_nxe_tcp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 801271e:	2307      	movs	r3, #7
 8012720:	e023      	b.n	801276a <_nxe_tcp_socket_receive+0x6e>
    }

    /* Check to see if TCP is enabled.  */
    if (!(socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_packet_receive)
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012728:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801272c:	2b00      	cmp	r3, #0
 801272e:	d101      	bne.n	8012734 <_nxe_tcp_socket_receive+0x38>
    {
        return(NX_NOT_ENABLED);
 8012730:	2314      	movs	r3, #20
 8012732:	e01a      	b.n	801276a <_nxe_tcp_socket_receive+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012734:	f3ef 8305 	mrs	r3, IPSR
 8012738:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801273a:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 801273c:	4b0e      	ldr	r3, [pc, #56]	; (8012778 <_nxe_tcp_socket_receive+0x7c>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	4313      	orrs	r3, r2
 8012742:	2b00      	cmp	r3, #0
 8012744:	d108      	bne.n	8012758 <_nxe_tcp_socket_receive+0x5c>
 8012746:	4b0d      	ldr	r3, [pc, #52]	; (801277c <_nxe_tcp_socket_receive+0x80>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d004      	beq.n	8012758 <_nxe_tcp_socket_receive+0x5c>
 801274e:	4b0b      	ldr	r3, [pc, #44]	; (801277c <_nxe_tcp_socket_receive+0x80>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	4a0b      	ldr	r2, [pc, #44]	; (8012780 <_nxe_tcp_socket_receive+0x84>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d101      	bne.n	801275c <_nxe_tcp_socket_receive+0x60>
 8012758:	2311      	movs	r3, #17
 801275a:	e006      	b.n	801276a <_nxe_tcp_socket_receive+0x6e>

    /* Call actual TCP socket receive function.  */
    status =  _nx_tcp_socket_receive(socket_ptr, packet_ptr, wait_option);
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	68b9      	ldr	r1, [r7, #8]
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f7fb fb37 	bl	800ddd4 <_nx_tcp_socket_receive>
 8012766:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8012768:	697b      	ldr	r3, [r7, #20]
}
 801276a:	4618      	mov	r0, r3
 801276c:	3718      	adds	r7, #24
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	54435020 	.word	0x54435020
 8012778:	20000094 	.word	0x20000094
 801277c:	2000aaf8 	.word	0x2000aaf8
 8012780:	2000ab98 	.word	0x2000ab98

08012784 <_nxe_tcp_socket_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_socket_send(NX_TCP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr, ULONG wait_option)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b088      	sub	sp, #32
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
NX_PACKET *packet_ptr;
UINT       status;
UINT       ip_header_size;

    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d004      	beq.n	80127a6 <_nxe_tcp_socket_send+0x22>
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a34      	ldr	r2, [pc, #208]	; (8012874 <_nxe_tcp_socket_send+0xf0>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d001      	beq.n	80127aa <_nxe_tcp_socket_send+0x26>
    {
        return(NX_PTR_ERROR);
 80127a6:	2307      	movs	r3, #7
 80127a8:	e05f      	b.n	801286a <_nxe_tcp_socket_send+0xe6>
    }

    /* Check for an invalid packet pointer.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d004      	beq.n	80127ba <_nxe_tcp_socket_send+0x36>
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	6a1b      	ldr	r3, [r3, #32]
 80127b4:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80127b8:	d001      	beq.n	80127be <_nxe_tcp_socket_send+0x3a>
    {
        return(NX_INVALID_PACKET);
 80127ba:	2312      	movs	r3, #18
 80127bc:	e055      	b.n	801286a <_nxe_tcp_socket_send+0xe6>
    }

    /* Check to see if TCP is enabled.  */
    if (!(socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_packet_receive)
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80127c4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d101      	bne.n	80127d0 <_nxe_tcp_socket_send+0x4c>
    {
        return(NX_NOT_ENABLED);
 80127cc:	2314      	movs	r3, #20
 80127ce:	e04c      	b.n	801286a <_nxe_tcp_socket_send+0xe6>
    }

    /* Check for an invalid packet prepend pointer.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	695b      	ldr	r3, [r3, #20]
 80127d4:	2b04      	cmp	r3, #4
 80127d6:	d10b      	bne.n	80127f0 <_nxe_tcp_socket_send+0x6c>
    {
        ip_header_size = (UINT)sizeof(NX_IPV4_HEADER);
 80127d8:	2314      	movs	r3, #20
 80127da:	61bb      	str	r3, [r7, #24]
    {
        return(NX_NOT_CONNECTED);
    }

    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(ip_header_size + sizeof(NX_TCP_HEADER)))
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	689a      	ldr	r2, [r3, #8]
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	691b      	ldr	r3, [r3, #16]
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	69ba      	ldr	r2, [r7, #24]
 80127e8:	3214      	adds	r2, #20
 80127ea:	4293      	cmp	r3, r2
 80127ec:	da0c      	bge.n	8012808 <_nxe_tcp_socket_send+0x84>
 80127ee:	e001      	b.n	80127f4 <_nxe_tcp_socket_send+0x70>
        return(NX_NOT_CONNECTED);
 80127f0:	2338      	movs	r3, #56	; 0x38
 80127f2:	e03a      	b.n	801286a <_nxe_tcp_socket_send+0xe6>
    {

#ifndef NX_DISABLE_TCP_INFO

        /* Increment the TCP invalid packet count.  */
        (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_invalid_packets++;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80127fa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80127fe:	3201      	adds	r2, #1
 8012800:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 8012804:	2302      	movs	r3, #2
 8012806:	e030      	b.n	801286a <_nxe_tcp_socket_send+0xe6>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	68da      	ldr	r2, [r3, #12]
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	695b      	ldr	r3, [r3, #20]
 8012810:	429a      	cmp	r2, r3
 8012812:	d909      	bls.n	8012828 <_nxe_tcp_socket_send+0xa4>
    {

#ifndef NX_DISABLE_TCP_INFO

        /* Increment the TCP invalid packet count.  */
        (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_invalid_packets++;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801281a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801281e:	3201      	adds	r2, #1
 8012820:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 8012824:	2303      	movs	r3, #3
 8012826:	e020      	b.n	801286a <_nxe_tcp_socket_send+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012828:	f3ef 8305 	mrs	r3, IPSR
 801282c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801282e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8012830:	4b11      	ldr	r3, [pc, #68]	; (8012878 <_nxe_tcp_socket_send+0xf4>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	4313      	orrs	r3, r2
 8012836:	2b00      	cmp	r3, #0
 8012838:	d108      	bne.n	801284c <_nxe_tcp_socket_send+0xc8>
 801283a:	4b10      	ldr	r3, [pc, #64]	; (801287c <_nxe_tcp_socket_send+0xf8>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d004      	beq.n	801284c <_nxe_tcp_socket_send+0xc8>
 8012842:	4b0e      	ldr	r3, [pc, #56]	; (801287c <_nxe_tcp_socket_send+0xf8>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	4a0e      	ldr	r2, [pc, #56]	; (8012880 <_nxe_tcp_socket_send+0xfc>)
 8012848:	4293      	cmp	r3, r2
 801284a:	d101      	bne.n	8012850 <_nxe_tcp_socket_send+0xcc>
 801284c:	2311      	movs	r3, #17
 801284e:	e00c      	b.n	801286a <_nxe_tcp_socket_send+0xe6>

    /* Call actual TCP socket send function.  */
    status =  _nx_tcp_socket_send(socket_ptr, packet_ptr, wait_option);
 8012850:	687a      	ldr	r2, [r7, #4]
 8012852:	69f9      	ldr	r1, [r7, #28]
 8012854:	68f8      	ldr	r0, [r7, #12]
 8012856:	f7fb fd97 	bl	800e388 <_nx_tcp_socket_send>
 801285a:	6178      	str	r0, [r7, #20]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d102      	bne.n	8012868 <_nxe_tcp_socket_send+0xe4>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	2200      	movs	r2, #0
 8012866:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 8012868:	697b      	ldr	r3, [r7, #20]
}
 801286a:	4618      	mov	r0, r3
 801286c:	3720      	adds	r7, #32
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	54435020 	.word	0x54435020
 8012878:	20000094 	.word	0x20000094
 801287c:	2000aaf8 	.word	0x2000aaf8
 8012880:	2000ab98 	.word	0x2000ab98

08012884 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b086      	sub	sp, #24
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d004      	beq.n	801289c <_nxe_udp_enable+0x18>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	4a15      	ldr	r2, [pc, #84]	; (80128ec <_nxe_udp_enable+0x68>)
 8012898:	4293      	cmp	r3, r2
 801289a:	d001      	beq.n	80128a0 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 801289c:	2307      	movs	r3, #7
 801289e:	e020      	b.n	80128e2 <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 80128aa:	2315      	movs	r3, #21
 80128ac:	e019      	b.n	80128e2 <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80128ae:	f3ef 8305 	mrs	r3, IPSR
 80128b2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80128b4:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 80128b6:	4b0e      	ldr	r3, [pc, #56]	; (80128f0 <_nxe_udp_enable+0x6c>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	4313      	orrs	r3, r2
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00b      	beq.n	80128d8 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80128c0:	f3ef 8305 	mrs	r3, IPSR
 80128c4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	4b09      	ldr	r3, [pc, #36]	; (80128f0 <_nxe_udp_enable+0x6c>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	4313      	orrs	r3, r2
 80128ce:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80128d2:	d201      	bcs.n	80128d8 <_nxe_udp_enable+0x54>
 80128d4:	2311      	movs	r3, #17
 80128d6:	e004      	b.n	80128e2 <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f7fd fdef 	bl	80104bc <_nx_udp_enable>
 80128de:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 80128e0:	697b      	ldr	r3, [r7, #20]
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3718      	adds	r7, #24
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	49502020 	.word	0x49502020
 80128f0:	20000094 	.word	0x20000094

080128f4 <_nxe_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b086      	sub	sp, #24
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (ip_address == NX_NULL) || (port == NX_NULL))
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d005      	beq.n	8012912 <_nxe_udp_source_extract+0x1e>
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d002      	beq.n	8012912 <_nxe_udp_source_extract+0x1e>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d101      	bne.n	8012916 <_nxe_udp_source_extract+0x22>
    {

        return(NX_PTR_ERROR);
 8012912:	2307      	movs	r3, #7
 8012914:	e01c      	b.n	8012950 <_nxe_udp_source_extract+0x5c>
    }

    /* Check for invalid packet pointer.  */
    if (packet_ptr -> nx_packet_ip_header == NX_NULL)
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801291a:	2b00      	cmp	r3, #0
 801291c:	d101      	bne.n	8012922 <_nxe_udp_source_extract+0x2e>
    {

        return(NX_INVALID_PACKET);
 801291e:	2312      	movs	r3, #18
 8012920:	e016      	b.n	8012950 <_nxe_udp_source_extract+0x5c>
    }


    if (packet_ptr -> nx_packet_ip_version != NX_IP_VERSION_V4)
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012928:	2b04      	cmp	r3, #4
 801292a:	d001      	beq.n	8012930 <_nxe_udp_source_extract+0x3c>
    {

        return(NX_INVALID_PACKET);
 801292c:	2312      	movs	r3, #18
 801292e:	e00f      	b.n	8012950 <_nxe_udp_source_extract+0x5c>
    }

    /* Check to see if the packet has enough room in front for backing up.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) <
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	689a      	ldr	r2, [r3, #8]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	691b      	ldr	r3, [r3, #16]
 8012938:	1ad3      	subs	r3, r2, r3
 801293a:	2b1b      	cmp	r3, #27
 801293c:	d801      	bhi.n	8012942 <_nxe_udp_source_extract+0x4e>
        (sizeof(NX_UDP_HEADER) + sizeof(NX_IPV4_HEADER)))
    {

        return(NX_INVALID_PACKET);
 801293e:	2312      	movs	r3, #18
 8012940:	e006      	b.n	8012950 <_nxe_udp_source_extract+0x5c>
    }

    /* Call actual UDP source extract function.  */
    status =  _nx_udp_source_extract(packet_ptr, ip_address, port);
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	68b9      	ldr	r1, [r7, #8]
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f7fe fde8 	bl	801151c <_nx_udp_source_extract>
 801294c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 801294e:	697b      	ldr	r3, [r7, #20]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8012950:	4618      	mov	r0, r3
 8012952:	3718      	adds	r7, #24
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b096      	sub	sp, #88	; 0x58
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	3303      	adds	r3, #3
 801296a:	f023 0303 	bic.w	r3, r3, #3
 801296e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012970:	f3ef 8310 	mrs	r3, PRIMASK
 8012974:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8012976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012978:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801297a:	b672      	cpsid	i
    return(int_posture);
 801297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 801297e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012980:	4b55      	ldr	r3, [pc, #340]	; (8012ad8 <_tx_byte_allocate+0x180>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8012986:	2300      	movs	r3, #0
 8012988:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801298e:	621a      	str	r2, [r3, #32]
 8012990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012992:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012996:	f383 8810 	msr	PRIMASK, r3
}
 801299a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 801299c:	6879      	ldr	r1, [r7, #4]
 801299e:	68f8      	ldr	r0, [r7, #12]
 80129a0:	f000 f9b2 	bl	8012d08 <_tx_byte_pool_search>
 80129a4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80129a6:	f3ef 8310 	mrs	r3, PRIMASK
 80129aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80129ae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80129b0:	b672      	cpsid	i
    return(int_posture);
 80129b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80129b4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80129b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d002      	beq.n	80129c2 <_tx_byte_allocate+0x6a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80129bc:	2301      	movs	r3, #1
 80129be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129c0:	e006      	b.n	80129d0 <_tx_byte_allocate+0x78>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	6a1b      	ldr	r3, [r3, #32]
 80129c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d101      	bne.n	80129d0 <_tx_byte_allocate+0x78>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80129cc:	2301      	movs	r3, #1
 80129ce:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80129d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d0d9      	beq.n	801298a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129da:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80129dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d008      	beq.n	80129f4 <_tx_byte_allocate+0x9c>
 80129e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129e4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129e6:	6a3b      	ldr	r3, [r7, #32]
 80129e8:	f383 8810 	msr	PRIMASK, r3
}
 80129ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80129ee:	2300      	movs	r3, #0
 80129f0:	653b      	str	r3, [r7, #80]	; 0x50
 80129f2:	e06c      	b.n	8012ace <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d061      	beq.n	8012abe <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80129fa:	4b38      	ldr	r3, [pc, #224]	; (8012adc <_tx_byte_allocate+0x184>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d007      	beq.n	8012a12 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8012a02:	2310      	movs	r3, #16
 8012a04:	653b      	str	r3, [r7, #80]	; 0x50
 8012a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a08:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	f383 8810 	msr	PRIMASK, r3
}
 8012a10:	e05d      	b.n	8012ace <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8012a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a14:	4a32      	ldr	r2, [pc, #200]	; (8012ae0 <_tx_byte_allocate+0x188>)
 8012a16:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8012a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a1a:	68fa      	ldr	r2, [r7, #12]
 8012a1c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8012a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a20:	68ba      	ldr	r2, [r7, #8]
 8012a22:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8012a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a26:	687a      	ldr	r2, [r7, #4]
 8012a28:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012a30:	1c5a      	adds	r2, r3, #1
 8012a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a3c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a42:	1c5a      	adds	r2, r3, #1
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d109      	bne.n	8012a62 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a52:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a58:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a5e:	675a      	str	r2, [r3, #116]	; 0x74
 8012a60:	e011      	b.n	8012a86 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a66:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a6c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a72:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a78:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a7e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a84:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8012a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a88:	2209      	movs	r2, #9
 8012a8a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a8e:	2201      	movs	r2, #1
 8012a90:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a94:	683a      	ldr	r2, [r7, #0]
 8012a96:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012a98:	4b10      	ldr	r3, [pc, #64]	; (8012adc <_tx_byte_allocate+0x184>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	4a0f      	ldr	r2, [pc, #60]	; (8012adc <_tx_byte_allocate+0x184>)
 8012aa0:	6013      	str	r3, [r2, #0]
 8012aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012aa4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	f383 8810 	msr	PRIMASK, r3
}
 8012aac:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012aae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012ab0:	f002 fc22 	bl	80152f8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aba:	653b      	str	r3, [r7, #80]	; 0x50
 8012abc:	e007      	b.n	8012ace <_tx_byte_allocate+0x176>
 8012abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ac0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f383 8810 	msr	PRIMASK, r3
}
 8012ac8:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012aca:	2310      	movs	r3, #16
 8012acc:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3758      	adds	r7, #88	; 0x58
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	2000aaf8 	.word	0x2000aaf8
 8012adc:	2000aaf4 	.word	0x2000aaf4
 8012ae0:	08012ae5 	.word	0x08012ae5

08012ae4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b08e      	sub	sp, #56	; 0x38
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012aee:	f3ef 8310 	mrs	r3, PRIMASK
 8012af2:	623b      	str	r3, [r7, #32]
    return(posture);
 8012af4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012af6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012af8:	b672      	cpsid	i
    return(int_posture);
 8012afa:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012afc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b02:	4a33      	ldr	r2, [pc, #204]	; (8012bd0 <_tx_byte_pool_cleanup+0xec>)
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d158      	bne.n	8012bba <_tx_byte_pool_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d152      	bne.n	8012bba <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b18:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d04c      	beq.n	8012bba <_tx_byte_pool_cleanup+0xd6>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	4a2b      	ldr	r2, [pc, #172]	; (8012bd4 <_tx_byte_pool_cleanup+0xf0>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d147      	bne.n	8012bba <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d043      	beq.n	8012bba <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2200      	movs	r2, #0
 8012b36:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b3c:	1e5a      	subs	r2, r3, #1
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b40:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b46:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d103      	bne.n	8012b56 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b50:	2200      	movs	r2, #0
 8012b52:	625a      	str	r2, [r3, #36]	; 0x24
 8012b54:	e013      	b.n	8012b7e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b5a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b60:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b66:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b6c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d102      	bne.n	8012b7e <_tx_byte_pool_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8012b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b7c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b82:	2b09      	cmp	r3, #9
 8012b84:	d119      	bne.n	8012bba <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2210      	movs	r2, #16
 8012b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012b8e:	4b12      	ldr	r3, [pc, #72]	; (8012bd8 <_tx_byte_pool_cleanup+0xf4>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	3301      	adds	r3, #1
 8012b94:	4a10      	ldr	r2, [pc, #64]	; (8012bd8 <_tx_byte_pool_cleanup+0xf4>)
 8012b96:	6013      	str	r3, [r2, #0]
 8012b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	f383 8810 	msr	PRIMASK, r3
}
 8012ba2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f002 faa7 	bl	80150f8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012baa:	f3ef 8310 	mrs	r3, PRIMASK
 8012bae:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012bb0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012bb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012bb4:	b672      	cpsid	i
    return(int_posture);
 8012bb6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8012bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bbc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	f383 8810 	msr	PRIMASK, r3
}
 8012bc4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012bc6:	bf00      	nop
 8012bc8:	3738      	adds	r7, #56	; 0x38
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	08012ae5 	.word	0x08012ae5
 8012bd4:	42595445 	.word	0x42595445
 8012bd8:	2000aaf4 	.word	0x2000aaf4

08012bdc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b08e      	sub	sp, #56	; 0x38
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	607a      	str	r2, [r7, #4]
 8012be8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8012bea:	2234      	movs	r2, #52	; 0x34
 8012bec:	2100      	movs	r1, #0
 8012bee:	68f8      	ldr	r0, [r7, #12]
 8012bf0:	f003 ff78 	bl	8016ae4 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	f023 0303 	bic.w	r3, r3, #3
 8012bfa:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	68ba      	ldr	r2, [r7, #8]
 8012c00:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	687a      	ldr	r2, [r7, #4]
 8012c06:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	683a      	ldr	r2, [r7, #0]
 8012c0c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	f1a3 0208 	sub.w	r2, r3, #8
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2202      	movs	r2, #2
 8012c28:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8012c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	4413      	add	r3, r2
 8012c34:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8012c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c38:	3b04      	subs	r3, #4
 8012c3a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8012c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c48:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8012c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c4c:	3b04      	subs	r3, #4
 8012c4e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c56:	687a      	ldr	r2, [r7, #4]
 8012c58:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8012c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8012c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c66:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8012c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c6e:	3304      	adds	r3, #4
 8012c70:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8012c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c74:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8012c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c78:	4a1f      	ldr	r2, [pc, #124]	; (8012cf8 <_tx_byte_pool_create+0x11c>)
 8012c7a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c82:	f3ef 8310 	mrs	r3, PRIMASK
 8012c86:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012c88:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012c8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c8c:	b672      	cpsid	i
    return(int_posture);
 8012c8e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8012c90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	4a19      	ldr	r2, [pc, #100]	; (8012cfc <_tx_byte_pool_create+0x120>)
 8012c96:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8012c98:	4b19      	ldr	r3, [pc, #100]	; (8012d00 <_tx_byte_pool_create+0x124>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d109      	bne.n	8012cb4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8012ca0:	4a18      	ldr	r2, [pc, #96]	; (8012d04 <_tx_byte_pool_create+0x128>)
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	68fa      	ldr	r2, [r7, #12]
 8012caa:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	68fa      	ldr	r2, [r7, #12]
 8012cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8012cb2:	e011      	b.n	8012cd8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8012cb4:	4b13      	ldr	r3, [pc, #76]	; (8012d04 <_tx_byte_pool_create+0x128>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8012cba:	6a3b      	ldr	r3, [r7, #32]
 8012cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cbe:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8012cc0:	6a3b      	ldr	r3, [r7, #32]
 8012cc2:	68fa      	ldr	r2, [r7, #12]
 8012cc4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	69fa      	ldr	r2, [r7, #28]
 8012cd0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	6a3a      	ldr	r2, [r7, #32]
 8012cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8012cd8:	4b09      	ldr	r3, [pc, #36]	; (8012d00 <_tx_byte_pool_create+0x124>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	4a08      	ldr	r2, [pc, #32]	; (8012d00 <_tx_byte_pool_create+0x124>)
 8012ce0:	6013      	str	r3, [r2, #0]
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	f383 8810 	msr	PRIMASK, r3
}
 8012cec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012cee:	2300      	movs	r3, #0
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3738      	adds	r7, #56	; 0x38
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	ffffeeee 	.word	0xffffeeee
 8012cfc:	42595445 	.word	0x42595445
 8012d00:	2000aa58 	.word	0x2000aa58
 8012d04:	2000aa3c 	.word	0x2000aa3c

08012d08 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b097      	sub	sp, #92	; 0x5c
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8012d12:	2300      	movs	r3, #0
 8012d14:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d16:	f3ef 8310 	mrs	r3, PRIMASK
 8012d1a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012d1e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d20:	b672      	cpsid	i
    return(int_posture);
 8012d22:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8012d24:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	689a      	ldr	r2, [r3, #8]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	3b02      	subs	r3, #2
 8012d30:	00db      	lsls	r3, r3, #3
 8012d32:	4413      	add	r3, r2
 8012d34:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8012d36:	683a      	ldr	r2, [r7, #0]
 8012d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d308      	bcc.n	8012d50 <_tx_byte_pool_search+0x48>
 8012d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d40:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	f383 8810 	msr	PRIMASK, r3
}
 8012d48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8012d4e:	e0dd      	b.n	8012f0c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012d50:	4b72      	ldr	r3, [pc, #456]	; (8012f1c <_tx_byte_pool_search+0x214>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d5a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	3301      	adds	r3, #1
 8012d68:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8012d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d70:	3304      	adds	r3, #4
 8012d72:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8012d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d76:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8012d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a68      	ldr	r2, [pc, #416]	; (8012f20 <_tx_byte_pool_search+0x218>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d143      	bne.n	8012e0a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8012d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d104      	bne.n	8012d92 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d8c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d94:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8012d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8012d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8012da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012da6:	3b08      	subs	r3, #8
 8012da8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8012daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d257      	bcs.n	8012e62 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8012db2:	2300      	movs	r3, #0
 8012db4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8012db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db8:	3304      	adds	r3, #4
 8012dba:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8012dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dbe:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8012dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a56      	ldr	r2, [pc, #344]	; (8012f20 <_tx_byte_pool_search+0x218>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d113      	bne.n	8012df2 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dcc:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8012dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd0:	681a      	ldr	r2, [r3, #0]
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	1e5a      	subs	r2, r3, #1
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	695b      	ldr	r3, [r3, #20]
 8012de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d114      	bne.n	8012e14 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012dee:	615a      	str	r2, [r3, #20]
 8012df0:	e010      	b.n	8012e14 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df4:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8012df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8012dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d008      	beq.n	8012e14 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8012e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e04:	3b01      	subs	r3, #1
 8012e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e08:	e004      	b.n	8012e14 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e0c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8012e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8012e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d002      	beq.n	8012e20 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8012e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e1c:	3b01      	subs	r3, #1
 8012e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e22:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	f383 8810 	msr	PRIMASK, r3
}
 8012e2a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8012e30:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012e32:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012e34:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e36:	b672      	cpsid	i
    return(int_posture);
 8012e38:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8012e3a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a1b      	ldr	r3, [r3, #32]
 8012e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d009      	beq.n	8012e5a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	695b      	ldr	r3, [r3, #20]
 8012e4a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	3301      	adds	r3, #1
 8012e52:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e58:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8012e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d186      	bne.n	8012d6e <_tx_byte_pool_search+0x66>
 8012e60:	e000      	b.n	8012e64 <_tx_byte_pool_search+0x15c>
                    break;
 8012e62:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8012e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d048      	beq.n	8012efc <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8012e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	1ad3      	subs	r3, r2, r3
 8012e70:	2b13      	cmp	r3, #19
 8012e72:	d91e      	bls.n	8012eb2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	3308      	adds	r3, #8
 8012e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e7a:	4413      	add	r3, r2
 8012e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e80:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e84:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8012e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8012e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e90:	3304      	adds	r3, #4
 8012e92:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8012e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e9a:	4a21      	ldr	r2, [pc, #132]	; (8012f20 <_tx_byte_pool_search+0x218>)
 8012e9c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	1c5a      	adds	r2, r3, #1
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8012ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012eac:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8012eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb4:	3304      	adds	r3, #4
 8012eb6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8012eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eba:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	689a      	ldr	r2, [r3, #8]
 8012ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	f1a3 0208 	sub.w	r2, r3, #8
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	695b      	ldr	r3, [r3, #20]
 8012ed6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d105      	bne.n	8012ee8 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ede:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8012ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	615a      	str	r2, [r3, #20]
 8012ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012eea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	f383 8810 	msr	PRIMASK, r3
}
 8012ef2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8012ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ef6:	3308      	adds	r3, #8
 8012ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8012efa:	e007      	b.n	8012f0c <_tx_byte_pool_search+0x204>
 8012efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012efe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	f383 8810 	msr	PRIMASK, r3
}
 8012f06:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8012f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	375c      	adds	r7, #92	; 0x5c
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop
 8012f1c:	2000aaf8 	.word	0x2000aaf8
 8012f20:	ffffeeee 	.word	0xffffeeee

08012f24 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b08e      	sub	sp, #56	; 0x38
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f32:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012f34:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012f36:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f38:	b672      	cpsid	i
    return(int_posture);
 8012f3a:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8012f3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f42:	4a38      	ldr	r2, [pc, #224]	; (8013024 <_tx_event_flags_cleanup+0x100>)
 8012f44:	4293      	cmp	r3, r2
 8012f46:	d162      	bne.n	801300e <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012f4e:	683a      	ldr	r2, [r7, #0]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d15c      	bne.n	801300e <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f58:	633b      	str	r3, [r7, #48]	; 0x30
    
            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8012f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d056      	beq.n	801300e <_tx_event_flags_cleanup+0xea>
            {
                
                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8012f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a30      	ldr	r2, [pc, #192]	; (8013028 <_tx_event_flags_cleanup+0x104>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d151      	bne.n	801300e <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6c:	695b      	ldr	r3, [r3, #20]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d04d      	beq.n	801300e <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2200      	movs	r2, #0
 8012f76:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8012f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7a:	695b      	ldr	r3, [r3, #20]
 8012f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8012f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the 
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place 
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8012f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d020      	beq.n	8012fcc <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8012f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
              
                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8012f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f94:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8012f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d103      	bne.n	8012fa4 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */
        
                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8012f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	611a      	str	r2, [r3, #16]
 8012fa2:	e016      	b.n	8012fd2 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */
    
                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fa8:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fae:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb2:	6a3a      	ldr	r2, [r7, #32]
 8012fb4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8012fb6:	6a3b      	ldr	r3, [r7, #32]
 8012fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fba:	671a      	str	r2, [r3, #112]	; 0x70
                
                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8012fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d106      	bne.n	8012fd2 <_tx_event_flags_cleanup+0xae>
                                {
                
                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8012fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fc8:	611a      	str	r2, [r3, #16]
 8012fca:	e002      	b.n	8012fd2 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {
                        
                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8012fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fce:	2201      	movs	r2, #1
 8012fd0:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fd6:	2b07      	cmp	r3, #7
 8012fd8:	d119      	bne.n	801300e <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2207      	movs	r2, #7
 8012fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012fe2:	4b12      	ldr	r3, [pc, #72]	; (801302c <_tx_event_flags_cleanup+0x108>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	4a10      	ldr	r2, [pc, #64]	; (801302c <_tx_event_flags_cleanup+0x108>)
 8012fea:	6013      	str	r3, [r2, #0]
 8012fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	f383 8810 	msr	PRIMASK, r3
}
 8012ff6:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing 
                               from the system timer thread right now which normally executes at the 
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f002 f87d 	bl	80150f8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8013002:	617b      	str	r3, [r7, #20]
    return(posture);
 8013004:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013006:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013008:	b672      	cpsid	i
    return(int_posture);
 801300a:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801300c:	637b      	str	r3, [r7, #52]	; 0x34
 801300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013010:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	f383 8810 	msr	PRIMASK, r3
}
 8013018:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801301a:	bf00      	nop
 801301c:	3738      	adds	r7, #56	; 0x38
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	08012f25 	.word	0x08012f25
 8013028:	4456444e 	.word	0x4456444e
 801302c:	2000aaf4 	.word	0x2000aaf4

08013030 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b088      	sub	sp, #32
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 801303a:	2228      	movs	r2, #40	; 0x28
 801303c:	2100      	movs	r1, #0
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f003 fd50 	bl	8016ae4 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	683a      	ldr	r2, [r7, #0]
 8013048:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801304a:	f3ef 8310 	mrs	r3, PRIMASK
 801304e:	613b      	str	r3, [r7, #16]
    return(posture);
 8013050:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013052:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013054:	b672      	cpsid	i
    return(int_posture);
 8013056:	68fb      	ldr	r3, [r7, #12]
    
    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8013058:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	4a18      	ldr	r2, [pc, #96]	; (80130c0 <_tx_event_flags_create+0x90>)
 801305e:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8013060:	4b18      	ldr	r3, [pc, #96]	; (80130c4 <_tx_event_flags_create+0x94>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d109      	bne.n	801307c <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8013068:	4a17      	ldr	r2, [pc, #92]	; (80130c8 <_tx_event_flags_create+0x98>)
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	61da      	str	r2, [r3, #28]
 801307a:	e011      	b.n	80130a0 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 801307c:	4b12      	ldr	r3, [pc, #72]	; (80130c8 <_tx_event_flags_create+0x98>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	69db      	ldr	r3, [r3, #28]
 8013086:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	687a      	ldr	r2, [r7, #4]
 8013092:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	697a      	ldr	r2, [r7, #20]
 8013098:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	69ba      	ldr	r2, [r7, #24]
 801309e:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 80130a0:	4b08      	ldr	r3, [pc, #32]	; (80130c4 <_tx_event_flags_create+0x94>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	3301      	adds	r3, #1
 80130a6:	4a07      	ldr	r2, [pc, #28]	; (80130c4 <_tx_event_flags_create+0x94>)
 80130a8:	6013      	str	r3, [r2, #0]
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	f383 8810 	msr	PRIMASK, r3
}
 80130b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80130b6:	2300      	movs	r3, #0
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3720      	adds	r7, #32
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	4456444e 	.word	0x4456444e
 80130c4:	2000aa4c 	.word	0x2000aa4c
 80130c8:	2000aa28 	.word	0x2000aa28

080130cc <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b096      	sub	sp, #88	; 0x58
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
 80130d8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130da:	f3ef 8310 	mrs	r3, PRIMASK
 80130de:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80130e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80130e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80130e4:	b672      	cpsid	i
    return(int_posture);
 80130e6:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 80130e8:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	689b      	ldr	r3, [r3, #8]
 80130ee:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f003 0302 	and.w	r3, r3, #2
 80130f6:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	6a1b      	ldr	r3, [r3, #32]
 80130fc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 80130fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013100:	2b00      	cmp	r3, #0
 8013102:	d004      	beq.n	801310e <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8013104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013106:	43db      	mvns	r3, r3
 8013108:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801310a:	4013      	ands	r3, r2
 801310c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 801310e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013110:	2b02      	cmp	r3, #2
 8013112:	d10a      	bne.n	801312a <_tx_event_flags_get+0x5e>
    {
    
        /* AND request is present.  */
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8013114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	4013      	ands	r3, r2
 801311a:	64bb      	str	r3, [r7, #72]	; 0x48
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 801311c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	429a      	cmp	r2, r3
 8013122:	d006      	beq.n	8013132 <_tx_event_flags_get+0x66>
        {
        
            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8013124:	2300      	movs	r3, #0
 8013126:	64bb      	str	r3, [r7, #72]	; 0x48
 8013128:	e003      	b.n	8013132 <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 801312a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	4013      	ands	r3, r2
 8013130:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    
    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 8013132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013134:	2b00      	cmp	r3, #0
 8013136:	d029      	beq.n	801318c <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801313c:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f003 0301 	and.w	r3, r3, #1
 8013144:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 8013146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013148:	2b01      	cmp	r3, #1
 801314a:	d11c      	bne.n	8013186 <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 801314c:	2300      	movs	r3, #0
 801314e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	695b      	ldr	r3, [r3, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d005      	beq.n	8013164 <_tx_event_flags_get+0x98>
            {
            
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d101      	bne.n	8013164 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8013160:	2301      	movs	r3, #1
 8013162:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8013164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013166:	2b01      	cmp	r3, #1
 8013168:	d106      	bne.n	8013178 <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6a1a      	ldr	r2, [r3, #32]
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	621a      	str	r2, [r3, #32]
 8013176:	e006      	b.n	8013186 <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	689a      	ldr	r2, [r3, #8]
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	43db      	mvns	r3, r3
 8013180:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8013186:	2300      	movs	r3, #0
 8013188:	653b      	str	r3, [r7, #80]	; 0x50
 801318a:	e070      	b.n	801326e <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801318c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801318e:	2b00      	cmp	r3, #0
 8013190:	d06b      	beq.n	801326a <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013192:	4b3c      	ldr	r3, [pc, #240]	; (8013284 <_tx_event_flags_get+0x1b8>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d002      	beq.n	80131a0 <_tx_event_flags_get+0xd4>
            {
            
                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 801319a:	2307      	movs	r3, #7
 801319c:	653b      	str	r3, [r7, #80]	; 0x50
 801319e:	e066      	b.n	801326e <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80131a0:	4b39      	ldr	r3, [pc, #228]	; (8013288 <_tx_event_flags_get+0x1bc>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 80131a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a8:	4a38      	ldr	r2, [pc, #224]	; (801328c <_tx_event_flags_get+0x1c0>)
 80131aa:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80131ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ae:	68ba      	ldr	r2, [r7, #8]
 80131b0:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80131b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 80131ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131bc:	683a      	ldr	r2, [r7, #0]
 80131be:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 80131c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c2:	68fa      	ldr	r2, [r7, #12]
 80131c4:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80131c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80131cc:	1c5a      	adds	r2, r3, #1
 80131ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	695b      	ldr	r3, [r3, #20]
 80131d8:	637b      	str	r3, [r7, #52]	; 0x34
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80131da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d109      	bne.n	80131f4 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131e4:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 80131e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131ea:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 80131ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131f0:	675a      	str	r2, [r3, #116]	; 0x74
 80131f2:	e011      	b.n	8013218 <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	691b      	ldr	r3, [r3, #16]
 80131f8:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80131fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131fe:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013204:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801320a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013210:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013216:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	695b      	ldr	r3, [r3, #20]
 801321c:	1c5a      	adds	r2, r3, #1
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	615a      	str	r2, [r3, #20]
            
                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8013222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013224:	2207      	movs	r2, #7
 8013226:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	2201      	movs	r2, #1
 801322c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013232:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8013234:	4b13      	ldr	r3, [pc, #76]	; (8013284 <_tx_event_flags_get+0x1b8>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	3301      	adds	r3, #1
 801323a:	4a12      	ldr	r2, [pc, #72]	; (8013284 <_tx_event_flags_get+0x1b8>)
 801323c:	6013      	str	r3, [r2, #0]
 801323e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013240:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	f383 8810 	msr	PRIMASK, r3
}
 8013248:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801324a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801324c:	f002 f854 	bl	80152f8 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013250:	f3ef 8310 	mrs	r3, PRIMASK
 8013254:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013256:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013258:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801325a:	b672      	cpsid	i
    return(int_posture);
 801325c:	69bb      	ldr	r3, [r7, #24]
    
                /* Disable interrupts.  */
                TX_DISABLE
 801325e:	657b      	str	r3, [r7, #84]	; 0x54
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8013260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013266:	653b      	str	r3, [r7, #80]	; 0x50
 8013268:	e001      	b.n	801326e <_tx_event_flags_get+0x1a2>
        }
        else
        {
            
            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 801326a:	2307      	movs	r3, #7
 801326c:	653b      	str	r3, [r7, #80]	; 0x50
 801326e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013270:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	f383 8810 	msr	PRIMASK, r3
}
 8013278:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 801327a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801327c:	4618      	mov	r0, r3
 801327e:	3758      	adds	r7, #88	; 0x58
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}
 8013284:	2000aaf4 	.word	0x2000aaf4
 8013288:	2000aaf8 	.word	0x2000aaf8
 801328c:	08012f25 	.word	0x08012f25

08013290 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b0a8      	sub	sp, #160	; 0xa0
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801329c:	f3ef 8310 	mrs	r3, PRIMASK
 80132a0:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 80132a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 80132a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 80132a6:	b672      	cpsid	i
    return(int_posture);
 80132a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80132aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f003 0302 	and.w	r3, r3, #2
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d023      	beq.n	8013300 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 80132b8:	2300      	movs	r3, #0
 80132ba:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	695b      	ldr	r3, [r3, #20]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d005      	beq.n	80132d0 <_tx_event_flags_set+0x40>
        {
            
            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	691b      	ldr	r3, [r3, #16]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d101      	bne.n	80132d0 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 80132cc:	2301      	movs	r3, #1
 80132ce:	67bb      	str	r3, [r7, #120]	; 0x78
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 80132d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d107      	bne.n	80132e6 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	6a1a      	ldr	r2, [r3, #32]
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	43db      	mvns	r3, r3
 80132de:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	621a      	str	r2, [r3, #32]
 80132e4:	e005      	b.n	80132f2 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the 
               specified flags by "ANDing" the flags into the current events 
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	689a      	ldr	r2, [r3, #8]
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	609a      	str	r2, [r3, #8]
 80132f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80132f6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132fa:	f383 8810 	msr	PRIMASK, r3
}
 80132fe:	e1f2      	b.n	80136e6 <_tx_event_flags_set+0x456>
    {

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the notify callback routine for this event flag group.  */
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013304:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	689a      	ldr	r2, [r3, #8]
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	6a1b      	ldr	r3, [r3, #32]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d006      	beq.n	8013328 <_tx_event_flags_set+0x98>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	6a1a      	ldr	r2, [r3, #32]
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	43db      	mvns	r3, r3
 8013322:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8013328:	2300      	movs	r3, #0
 801332a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	695b      	ldr	r3, [r3, #20]
 8013330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	691b      	ldr	r3, [r3, #16]
 8013338:	2b00      	cmp	r3, #0
 801333a:	f000 81bb 	beq.w	80136b4 <_tx_event_flags_set+0x424>
        {

            /* Determine if there is just a single thread waiting on the event 
               flag group.  */
            if (suspended_count == ((UINT) 1))
 801333e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013342:	2b01      	cmp	r3, #1
 8013344:	d172      	bne.n	801342c <_tx_event_flags_set+0x19c>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	691b      	ldr	r3, [r3, #16]
 801334a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	689b      	ldr	r3, [r3, #8]
 8013352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            
                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8013356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801335a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801335c:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 801335e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013366:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8013368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801336a:	f003 0302 	and.w	r3, r3, #2
 801336e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8013370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013372:	2b02      	cmp	r3, #2
 8013374:	d10e      	bne.n	8013394 <_tx_event_flags_set+0x104>
                {
    
                    /* AND request is present.  */
        
                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8013376:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801337a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801337c:	4013      	ands	r3, r2
 801337e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        
                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 8013382:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013388:	429a      	cmp	r2, r3
 801338a:	d009      	beq.n	80133a0 <_tx_event_flags_set+0x110>
                    {
        
                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 801338c:	2300      	movs	r3, #0
 801338e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013392:	e005      	b.n	80133a0 <_tx_event_flags_set+0x110>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8013394:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801339a:	4013      	ands	r3, r2
 801339c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
    
                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 80133a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f000 818c 	beq.w	80136c2 <_tx_event_flags_set+0x432>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 80133aa:	2301      	movs	r3, #1
 80133ac:	67fb      	str	r3, [r7, #124]	; 0x7c

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80133ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80133b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133b4:	663b      	str	r3, [r7, #96]	; 0x60
                    *suspend_info_ptr =  current_event_flags;
 80133b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80133b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80133bc:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80133be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133c0:	f003 0301 	and.w	r3, r3, #1
 80133c4:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 80133c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d106      	bne.n	80133da <_tx_event_flags_set+0x14a>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	689a      	ldr	r2, [r3, #8]
 80133d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133d2:	43db      	mvns	r3, r3
 80133d4:	401a      	ands	r2, r3
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2200      	movs	r2, #0
 80133de:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2200      	movs	r2, #0
 80133e4:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80133e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80133ea:	2200      	movs	r2, #0
 80133ec:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80133ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80133f2:	2200      	movs	r2, #0
 80133f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 80133f8:	4bad      	ldr	r3, [pc, #692]	; (80136b0 <_tx_event_flags_set+0x420>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	3301      	adds	r3, #1
 80133fe:	4aac      	ldr	r2, [pc, #688]	; (80136b0 <_tx_event_flags_set+0x420>)
 8013400:	6013      	str	r3, [r2, #0]
 8013402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013406:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801340a:	f383 8810 	msr	PRIMASK, r3
}
 801340e:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8013410:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8013414:	f001 fe70 	bl	80150f8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013418:	f3ef 8310 	mrs	r3, PRIMASK
 801341c:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 801341e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 8013420:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8013422:	b672      	cpsid	i
    return(int_posture);
 8013424:	6c3b      	ldr	r3, [r7, #64]	; 0x40

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8013426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801342a:	e14a      	b.n	80136c2 <_tx_event_flags_set+0x432>

                /* Otherwise, the event flag requests of multiple threads must be 
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	691b      	ldr	r3, [r3, #16]
 8013430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                thread_ptr =      suspended_list;
 8013434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2200      	movs	r2, #0
 8013440:	611a      	str	r2, [r3, #16]
        
                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8013442:	2300      	movs	r3, #0
 8013444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                last_satisfied =  TX_NULL;
 8013448:	2300      	movs	r3, #0
 801344a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	689b      	ldr	r3, [r3, #8]
 8013452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8013456:	4b96      	ldr	r3, [pc, #600]	; (80136b0 <_tx_event_flags_set+0x420>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	3301      	adds	r3, #1
 801345c:	4a94      	ldr	r2, [pc, #592]	; (80136b0 <_tx_event_flags_set+0x420>)
 801345e:	6013      	str	r3, [r2, #0]
 8013460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013464:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013468:	f383 8810 	msr	PRIMASK, r3
}
 801346c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801346e:	f3ef 8310 	mrs	r3, PRIMASK
 8013472:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8013474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013476:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013478:	b672      	cpsid	i
    return(int_posture);
 801347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 801347c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d011      	beq.n	80134ac <_tx_event_flags_set+0x21c>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2200      	movs	r2, #0
 801348c:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 801348e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	695b      	ldr	r3, [r3, #20]
 801349a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80134a6:	4313      	orrs	r3, r2
 80134a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80134ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80134b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134b2:	673b      	str	r3, [r7, #112]	; 0x70

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80134b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80134b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134ba:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 80134bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80134c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134c4:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 80134c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80134c8:	f003 0302 	and.w	r3, r3, #2
 80134cc:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 80134ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134d0:	2b02      	cmp	r3, #2
 80134d2:	d10e      	bne.n	80134f2 <_tx_event_flags_set+0x262>
                    {
    
                        /* AND request is present.  */
        
                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80134d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80134d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134da:	4013      	ands	r3, r2
 80134dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        
                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 80134e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80134e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d009      	beq.n	80134fe <_tx_event_flags_set+0x26e>
                        {
        
                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 80134ea:	2300      	movs	r3, #0
 80134ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80134f0:	e005      	b.n	80134fe <_tx_event_flags_set+0x26e>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80134f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80134f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134f8:	4013      	ands	r3, r2
 80134fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    }
    
                    /* Check to see if the thread had a timeout or wait abort during the event search processing.  
                       If so, just set the flags satisfied to ensure the processing here removes the thread from 
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 80134fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013504:	2b07      	cmp	r3, #7
 8013506:	d002      	beq.n	801350e <_tx_event_flags_set+0x27e>
                    {
            
                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8013508:	2301      	movs	r3, #1
 801350a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 801350e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013512:	2b00      	cmp	r3, #0
 8013514:	d06c      	beq.n	80135f0 <_tx_event_flags_set+0x360>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 8013516:	2301      	movs	r3, #1
 8013518:	67fb      	str	r3, [r7, #124]	; 0x7c
    
                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801351a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013520:	2b07      	cmp	r3, #7
 8013522:	d11e      	bne.n	8013562 <_tx_event_flags_set+0x2d2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801352a:	663b      	str	r3, [r7, #96]	; 0x60
                            *suspend_info_ptr =  current_event_flags;
 801352c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801352e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013532:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8013534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013536:	f003 0301 	and.w	r3, r3, #1
 801353a:	65fb      	str	r3, [r7, #92]	; 0x5c

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 801353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801353e:	2b01      	cmp	r3, #1
 8013540:	d106      	bne.n	8013550 <_tx_event_flags_set+0x2c0>
                            {
                
                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	689a      	ldr	r2, [r3, #8]
 8013546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013548:	43db      	mvns	r3, r3
 801354a:	401a      	ands	r2, r3
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	609a      	str	r2, [r3, #8]
                            }
            
                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013554:	2200      	movs	r2, #0
 8013556:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801355c:	2200      	movs	r2, #0
 801355e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8013562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013568:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801356c:	429a      	cmp	r2, r3
 801356e:	d103      	bne.n	8013578 <_tx_event_flags_set+0x2e8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8013570:	2300      	movs	r3, #0
 8013572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013576:	e018      	b.n	80135aa <_tx_event_flags_set+0x31a>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8013578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801357e:	65bb      	str	r3, [r7, #88]	; 0x58
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8013580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013586:	657b      	str	r3, [r7, #84]	; 0x54
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801358a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801358c:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 801358e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013592:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8013594:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801359c:	429a      	cmp	r2, r3
 801359e:	d104      	bne.n	80135aa <_tx_event_flags_set+0x31a>
                            {
                                
                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 80135a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80135a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	695b      	ldr	r3, [r3, #20]
 80135ae:	1e5a      	subs	r2, r3, #1
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 80135b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d10c      	bne.n	80135d6 <_tx_event_flags_set+0x346>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 80135bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80135c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            last_satisfied =  thread_ptr;
 80135c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80135c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    
                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 80135cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80135d0:	2200      	movs	r2, #0
 80135d2:	671a      	str	r2, [r3, #112]	; 0x70
 80135d4:	e00c      	b.n	80135f0 <_tx_event_flags_set+0x360>
                        {

                            /* Not the first thread on the satisfied list.  */
                
                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 80135d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80135da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80135de:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 80135e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80135e4:	2200      	movs	r2, #0
 80135e6:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 80135e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80135ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 80135f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80135f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                    /* Decrement the suspension count.  */
                    suspended_count--;
 80135f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80135fa:	3b01      	subs	r3, #1
 80135fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            
                } while (suspended_count != TX_NO_SUSPENSIONS);
 8013600:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013604:	2b00      	cmp	r3, #0
 8013606:	f47f af2b 	bne.w	8013460 <_tx_event_flags_set+0x1d0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013610:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	6a1b      	ldr	r3, [r3, #32]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d00a      	beq.n	8013630 <_tx_event_flags_set+0x3a0>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	689a      	ldr	r2, [r3, #8]
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6a1b      	ldr	r3, [r3, #32]
 8013622:	43db      	mvns	r3, r3
 8013624:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2200      	movs	r2, #0
 801362e:	621a      	str	r2, [r3, #32]
 8013630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013634:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013638:	f383 8810 	msr	PRIMASK, r3
}
 801363c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 801363e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                while(thread_ptr != TX_NULL)
 8013646:	e01f      	b.n	8013688 <_tx_event_flags_set+0x3f8>
                {
    
                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8013648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801364e:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013650:	f3ef 8310 	mrs	r3, PRIMASK
 8013654:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013658:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801365a:	b672      	cpsid	i
    return(int_posture);
 801365c:	6a3b      	ldr	r3, [r7, #32]

                    /* Disable interrupts.  */
                    TX_DISABLE
 801365e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8013662:	4b13      	ldr	r3, [pc, #76]	; (80136b0 <_tx_event_flags_set+0x420>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	3301      	adds	r3, #1
 8013668:	4a11      	ldr	r2, [pc, #68]	; (80136b0 <_tx_event_flags_set+0x420>)
 801366a:	6013      	str	r3, [r2, #0]
 801366c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013670:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013674:	f383 8810 	msr	PRIMASK, r3
}
 8013678:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 801367a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801367e:	f001 fd3b 	bl	80150f8 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8013682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                while(thread_ptr != TX_NULL)
 8013688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801368c:	2b00      	cmp	r3, #0
 801368e:	d1db      	bne.n	8013648 <_tx_event_flags_set+0x3b8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013690:	f3ef 8310 	mrs	r3, PRIMASK
 8013694:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013696:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013698:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801369a:	b672      	cpsid	i
    return(int_posture);
 801369c:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 801369e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 80136a2:	4b03      	ldr	r3, [pc, #12]	; (80136b0 <_tx_event_flags_set+0x420>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	3b01      	subs	r3, #1
 80136a8:	4a01      	ldr	r2, [pc, #4]	; (80136b0 <_tx_event_flags_set+0x420>)
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	e009      	b.n	80136c2 <_tx_event_flags_set+0x432>
 80136ae:	bf00      	nop
 80136b0:	2000aaf4 	.word	0x2000aaf4
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	695b      	ldr	r3, [r3, #20]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d002      	beq.n	80136c2 <_tx_event_flags_set+0x432>
            {
                    
                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	2201      	movs	r2, #1
 80136c0:	60da      	str	r2, [r3, #12]
 80136c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80136c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	f383 8810 	msr	PRIMASK, r3
}
 80136ce:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if a notify callback is required.  */
        if (events_set_notify != TX_NULL)
 80136d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d002      	beq.n	80136dc <_tx_event_flags_set+0x44c>
        {

            /* Call application event flags set notification.  */
            (events_set_notify)(group_ptr);
 80136d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136d8:	68f8      	ldr	r0, [r7, #12]
 80136da:	4798      	blx	r3
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 80136dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d101      	bne.n	80136e6 <_tx_event_flags_set+0x456>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 80136e2:	f001 fccf 	bl	8015084 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80136e6:	2300      	movs	r3, #0
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	37a0      	adds	r7, #160	; 0xa0
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80136f4:	f001 fa5e 	bl	8014bb4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80136f8:	f002 f89e 	bl	8015838 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80136fc:	4b12      	ldr	r3, [pc, #72]	; (8013748 <_tx_initialize_high_level+0x58>)
 80136fe:	2200      	movs	r2, #0
 8013700:	601a      	str	r2, [r3, #0]
 8013702:	4b12      	ldr	r3, [pc, #72]	; (801374c <_tx_initialize_high_level+0x5c>)
 8013704:	2200      	movs	r2, #0
 8013706:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8013708:	4b11      	ldr	r3, [pc, #68]	; (8013750 <_tx_initialize_high_level+0x60>)
 801370a:	2200      	movs	r2, #0
 801370c:	601a      	str	r2, [r3, #0]
 801370e:	4b11      	ldr	r3, [pc, #68]	; (8013754 <_tx_initialize_high_level+0x64>)
 8013710:	2200      	movs	r2, #0
 8013712:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8013714:	4b10      	ldr	r3, [pc, #64]	; (8013758 <_tx_initialize_high_level+0x68>)
 8013716:	2200      	movs	r2, #0
 8013718:	601a      	str	r2, [r3, #0]
 801371a:	4b10      	ldr	r3, [pc, #64]	; (801375c <_tx_initialize_high_level+0x6c>)
 801371c:	2200      	movs	r2, #0
 801371e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8013720:	4b0f      	ldr	r3, [pc, #60]	; (8013760 <_tx_initialize_high_level+0x70>)
 8013722:	2200      	movs	r2, #0
 8013724:	601a      	str	r2, [r3, #0]
 8013726:	4b0f      	ldr	r3, [pc, #60]	; (8013764 <_tx_initialize_high_level+0x74>)
 8013728:	2200      	movs	r2, #0
 801372a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801372c:	4b0e      	ldr	r3, [pc, #56]	; (8013768 <_tx_initialize_high_level+0x78>)
 801372e:	2200      	movs	r2, #0
 8013730:	601a      	str	r2, [r3, #0]
 8013732:	4b0e      	ldr	r3, [pc, #56]	; (801376c <_tx_initialize_high_level+0x7c>)
 8013734:	2200      	movs	r2, #0
 8013736:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8013738:	4b0d      	ldr	r3, [pc, #52]	; (8013770 <_tx_initialize_high_level+0x80>)
 801373a:	2200      	movs	r2, #0
 801373c:	601a      	str	r2, [r3, #0]
 801373e:	4b0d      	ldr	r3, [pc, #52]	; (8013774 <_tx_initialize_high_level+0x84>)
 8013740:	2200      	movs	r2, #0
 8013742:	601a      	str	r2, [r3, #0]
#endif
}
 8013744:	bf00      	nop
 8013746:	bd80      	pop	{r7, pc}
 8013748:	2000aa38 	.word	0x2000aa38
 801374c:	2000aa48 	.word	0x2000aa48
 8013750:	2000aa54 	.word	0x2000aa54
 8013754:	2000aa34 	.word	0x2000aa34
 8013758:	2000aa28 	.word	0x2000aa28
 801375c:	2000aa4c 	.word	0x2000aa4c
 8013760:	2000aa50 	.word	0x2000aa50
 8013764:	2000aa44 	.word	0x2000aa44
 8013768:	2000aa3c 	.word	0x2000aa3c
 801376c:	2000aa58 	.word	0x2000aa58
 8013770:	2000aa30 	.word	0x2000aa30
 8013774:	2000aa2c 	.word	0x2000aa2c

08013778 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801377c:	4b10      	ldr	r3, [pc, #64]	; (80137c0 <_tx_initialize_kernel_enter+0x48>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8013784:	d00c      	beq.n	80137a0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013786:	4b0e      	ldr	r3, [pc, #56]	; (80137c0 <_tx_initialize_kernel_enter+0x48>)
 8013788:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801378c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801378e:	f7ec fd2f 	bl	80001f0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 8013792:	f7ff ffad 	bl	80136f0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8013796:	4b0b      	ldr	r3, [pc, #44]	; (80137c4 <_tx_initialize_kernel_enter+0x4c>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	3301      	adds	r3, #1
 801379c:	4a09      	ldr	r2, [pc, #36]	; (80137c4 <_tx_initialize_kernel_enter+0x4c>)
 801379e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80137a0:	4b07      	ldr	r3, [pc, #28]	; (80137c0 <_tx_initialize_kernel_enter+0x48>)
 80137a2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80137a6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80137a8:	4b07      	ldr	r3, [pc, #28]	; (80137c8 <_tx_initialize_kernel_enter+0x50>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7ed f80b 	bl	80007c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80137b2:	4b03      	ldr	r3, [pc, #12]	; (80137c0 <_tx_initialize_kernel_enter+0x48>)
 80137b4:	2200      	movs	r2, #0
 80137b6:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80137b8:	f7ec fd5a 	bl	8000270 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80137bc:	bf00      	nop
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	20000094 	.word	0x20000094
 80137c4:	2000aaf4 	.word	0x2000aaf4
 80137c8:	2000aa40 	.word	0x2000aa40

080137cc <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b08e      	sub	sp, #56	; 0x38
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137d6:	f3ef 8310 	mrs	r3, PRIMASK
 80137da:	623b      	str	r3, [r7, #32]
    return(posture);
 80137dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80137de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80137e0:	b672      	cpsid	i
    return(int_posture);
 80137e2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80137e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137ea:	4a33      	ldr	r2, [pc, #204]	; (80138b8 <_tx_mutex_cleanup+0xec>)
 80137ec:	4293      	cmp	r3, r2
 80137ee:	d158      	bne.n	80138a2 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80137f6:	683a      	ldr	r2, [r7, #0]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d152      	bne.n	80138a2 <_tx_mutex_cleanup+0xd6>
        {
   
            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013800:	633b      	str	r3, [r7, #48]	; 0x30
    
            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8013802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013804:	2b00      	cmp	r3, #0
 8013806:	d04c      	beq.n	80138a2 <_tx_mutex_cleanup+0xd6>
            {
    
                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	4a2b      	ldr	r2, [pc, #172]	; (80138bc <_tx_mutex_cleanup+0xf0>)
 801380e:	4293      	cmp	r3, r2
 8013810:	d147      	bne.n	80138a2 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	69db      	ldr	r3, [r3, #28]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d043      	beq.n	80138a2 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2200      	movs	r2, #0
 801381e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8013820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013822:	69db      	ldr	r3, [r3, #28]
 8013824:	1e5a      	subs	r2, r3, #1
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382c:	69db      	ldr	r3, [r3, #28]
 801382e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013832:	2b00      	cmp	r3, #0
 8013834:	d103      	bne.n	801383e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013838:	2200      	movs	r2, #0
 801383a:	619a      	str	r2, [r3, #24]
 801383c:	e013      	b.n	8013866 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */
    
                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013842:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013848:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801384e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013854:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8013856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013858:	699b      	ldr	r3, [r3, #24]
 801385a:	687a      	ldr	r2, [r7, #4]
 801385c:	429a      	cmp	r2, r3
 801385e:	d102      	bne.n	8013866 <_tx_mutex_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8013860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013864:	619a      	str	r2, [r3, #24]
                            }
                        }
 
                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386a:	2b0d      	cmp	r3, #13
 801386c:	d119      	bne.n	80138a2 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	221d      	movs	r2, #29
 8013872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013876:	4b12      	ldr	r3, [pc, #72]	; (80138c0 <_tx_mutex_cleanup+0xf4>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	3301      	adds	r3, #1
 801387c:	4a10      	ldr	r2, [pc, #64]	; (80138c0 <_tx_mutex_cleanup+0xf4>)
 801387e:	6013      	str	r3, [r2, #0]
 8013880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013882:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	f383 8810 	msr	PRIMASK, r3
}
 801388a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE
    
                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f001 fc33 	bl	80150f8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013892:	f3ef 8310 	mrs	r3, PRIMASK
 8013896:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013898:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801389a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801389c:	b672      	cpsid	i
    return(int_posture);
 801389e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80138a0:	637b      	str	r3, [r7, #52]	; 0x34
 80138a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	f383 8810 	msr	PRIMASK, r3
}
 80138ac:	bf00      	nop
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80138ae:	bf00      	nop
 80138b0:	3738      	adds	r7, #56	; 0x38
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
 80138b6:	bf00      	nop
 80138b8:	080137cd 	.word	0x080137cd
 80138bc:	4d555445 	.word	0x4d555445
 80138c0:	2000aaf4 	.word	0x2000aaf4

080138c4 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b08a      	sub	sp, #40	; 0x28
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80138cc:	f3ef 8310 	mrs	r3, PRIMASK
 80138d0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80138d2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80138d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80138d6:	b672      	cpsid	i
    return(int_posture);
 80138d8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80138da:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80138dc:	4b1a      	ldr	r3, [pc, #104]	; (8013948 <_tx_mutex_thread_release+0x84>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	3301      	adds	r3, #1
 80138e2:	4a19      	ldr	r2, [pc, #100]	; (8013948 <_tx_mutex_thread_release+0x84>)
 80138e4:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {
    
        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80138ec:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80138ee:	6a3b      	ldr	r3, [r7, #32]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d017      	beq.n	8013924 <_tx_mutex_thread_release+0x60>
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80138f4:	6a3b      	ldr	r3, [r7, #32]
 80138f6:	2201      	movs	r2, #1
 80138f8:	609a      	str	r2, [r3, #8]
 80138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f383 8810 	msr	PRIMASK, r3
}
 8013904:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8013906:	6a38      	ldr	r0, [r7, #32]
 8013908:	f000 fb9c 	bl	8014044 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801390c:	f3ef 8310 	mrs	r3, PRIMASK
 8013910:	617b      	str	r3, [r7, #20]
    return(posture);
 8013912:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013914:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013916:	b672      	cpsid	i
    return(int_posture);
 8013918:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 801391a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013922:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8013924:	6a3b      	ldr	r3, [r7, #32]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d1dd      	bne.n	80138e6 <_tx_mutex_thread_release+0x22>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801392a:	4b07      	ldr	r3, [pc, #28]	; (8013948 <_tx_mutex_thread_release+0x84>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	3b01      	subs	r3, #1
 8013930:	4a05      	ldr	r2, [pc, #20]	; (8013948 <_tx_mutex_thread_release+0x84>)
 8013932:	6013      	str	r3, [r2, #0]
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	f383 8810 	msr	PRIMASK, r3
}
 801393e:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 8013940:	bf00      	nop
 8013942:	3728      	adds	r7, #40	; 0x28
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	2000aaf4 	.word	0x2000aaf4

0801394c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b08a      	sub	sp, #40	; 0x28
 8013950:	af00      	add	r7, sp, #0
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8013958:	2234      	movs	r2, #52	; 0x34
 801395a:	2100      	movs	r1, #0
 801395c:	68f8      	ldr	r0, [r7, #12]
 801395e:	f003 f8c1 	bl	8016ae4 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801396e:	f3ef 8310 	mrs	r3, PRIMASK
 8013972:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013974:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013976:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013978:	b672      	cpsid	i
    return(int_posture);
 801397a:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 801397c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	4a1a      	ldr	r2, [pc, #104]	; (80139ec <_tx_mutex_create+0xa0>)
 8013982:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8013984:	4b1a      	ldr	r3, [pc, #104]	; (80139f0 <_tx_mutex_create+0xa4>)
 8013986:	4a1b      	ldr	r2, [pc, #108]	; (80139f4 <_tx_mutex_create+0xa8>)
 8013988:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801398a:	4b1b      	ldr	r3, [pc, #108]	; (80139f8 <_tx_mutex_create+0xac>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d109      	bne.n	80139a6 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8013992:	4a1a      	ldr	r2, [pc, #104]	; (80139fc <_tx_mutex_create+0xb0>)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	68fa      	ldr	r2, [r7, #12]
 801399c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	625a      	str	r2, [r3, #36]	; 0x24
 80139a4:	e011      	b.n	80139ca <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80139a6:	4b15      	ldr	r3, [pc, #84]	; (80139fc <_tx_mutex_create+0xb0>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80139ac:	6a3b      	ldr	r3, [r7, #32]
 80139ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b0:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80139b2:	6a3b      	ldr	r3, [r7, #32]
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	68fa      	ldr	r2, [r7, #12]
 80139bc:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	69fa      	ldr	r2, [r7, #28]
 80139c2:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	6a3a      	ldr	r2, [r7, #32]
 80139c8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80139ca:	4b0b      	ldr	r3, [pc, #44]	; (80139f8 <_tx_mutex_create+0xac>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	3301      	adds	r3, #1
 80139d0:	4a09      	ldr	r2, [pc, #36]	; (80139f8 <_tx_mutex_create+0xac>)
 80139d2:	6013      	str	r3, [r2, #0]
 80139d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	f383 8810 	msr	PRIMASK, r3
}
 80139de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80139e0:	2300      	movs	r3, #0
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3728      	adds	r7, #40	; 0x28
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	4d555445 	.word	0x4d555445
 80139f0:	2000aadc 	.word	0x2000aadc
 80139f4:	080138c5 	.word	0x080138c5
 80139f8:	2000aa2c 	.word	0x2000aa2c
 80139fc:	2000aa30 	.word	0x2000aa30

08013a00 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b096      	sub	sp, #88	; 0x58
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a08:	f3ef 8310 	mrs	r3, PRIMASK
 8013a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8013a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013a10:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a12:	b672      	cpsid	i
    return(int_posture);
 8013a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8013a16:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8013a1e:	4b4a      	ldr	r3, [pc, #296]	; (8013b48 <_tx_mutex_delete+0x148>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	3b01      	subs	r3, #1
 8013a24:	4a48      	ldr	r2, [pc, #288]	; (8013b48 <_tx_mutex_delete+0x148>)
 8013a26:	6013      	str	r3, [r2, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8013a28:	4b47      	ldr	r3, [pc, #284]	; (8013b48 <_tx_mutex_delete+0x148>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d103      	bne.n	8013a38 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8013a30:	4b46      	ldr	r3, [pc, #280]	; (8013b4c <_tx_mutex_delete+0x14c>)
 8013a32:	2200      	movs	r2, #0
 8013a34:	601a      	str	r2, [r3, #0]
 8013a36:	e013      	b.n	8013a60 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6a1b      	ldr	r3, [r3, #32]
 8013a3c:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a42:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8013a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a48:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8013a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a4e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8013a50:	4b3e      	ldr	r3, [pc, #248]	; (8013b4c <_tx_mutex_delete+0x14c>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d102      	bne.n	8013a60 <_tx_mutex_delete+0x60>
        {
        
            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8013a5a:	4a3c      	ldr	r2, [pc, #240]	; (8013b4c <_tx_mutex_delete+0x14c>)
 8013a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a5e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013a60:	4b3b      	ldr	r3, [pc, #236]	; (8013b50 <_tx_mutex_delete+0x150>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	3301      	adds	r3, #1
 8013a66:	4a3a      	ldr	r2, [pc, #232]	; (8013b50 <_tx_mutex_delete+0x150>)
 8013a68:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	2200      	movs	r2, #0
 8013a74:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	69db      	ldr	r3, [r3, #28]
 8013a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	68db      	ldr	r3, [r3, #12]
 8013a86:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8013a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d013      	beq.n	8013ab6 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2201      	movs	r2, #1
 8013a92:	609a      	str	r2, [r3, #8]
 8013a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a96:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9a:	f383 8810 	msr	PRIMASK, r3
}
 8013a9e:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f000 facf 	bl	8014044 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8013aaa:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8013aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8013aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ab0:	b672      	cpsid	i
    return(int_posture);
 8013ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8013ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8013ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ab8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013abc:	f383 8810 	msr	PRIMASK, r3
}
 8013ac0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8013ac2:	e024      	b.n	8013b0e <_tx_mutex_delete+0x10e>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 8013ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ac6:	3b01      	subs	r3, #1
 8013ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013aca:	f3ef 8310 	mrs	r3, PRIMASK
 8013ace:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013ad0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013ad2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ad4:	b672      	cpsid	i
    return(int_posture);
 8013ad6:	69bb      	ldr	r3, [r7, #24]
      
        /* Lockout interrupts.  */
        TX_DISABLE
 8013ad8:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013adc:	2200      	movs	r2, #0
 8013ade:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8013ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8013ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8013aee:	4b18      	ldr	r3, [pc, #96]	; (8013b50 <_tx_mutex_delete+0x150>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	3301      	adds	r3, #1
 8013af4:	4a16      	ldr	r2, [pc, #88]	; (8013b50 <_tx_mutex_delete+0x150>)
 8013af6:	6013      	str	r3, [r2, #0]
 8013af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013afa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013afc:	6a3b      	ldr	r3, [r7, #32]
 8013afe:	f383 8810 	msr	PRIMASK, r3
}
 8013b02:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013b04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013b06:	f001 faf7 	bl	80150f8 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8013b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b0c:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8013b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d1d7      	bne.n	8013ac4 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b14:	f3ef 8310 	mrs	r3, PRIMASK
 8013b18:	613b      	str	r3, [r7, #16]
    return(posture);
 8013b1a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013b1c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b1e:	b672      	cpsid	i
    return(int_posture);
 8013b20:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8013b22:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013b24:	4b0a      	ldr	r3, [pc, #40]	; (8013b50 <_tx_mutex_delete+0x150>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	4a09      	ldr	r2, [pc, #36]	; (8013b50 <_tx_mutex_delete+0x150>)
 8013b2c:	6013      	str	r3, [r2, #0]
 8013b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f383 8810 	msr	PRIMASK, r3
}
 8013b38:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8013b3a:	f001 faa3 	bl	8015084 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013b3e:	2300      	movs	r3, #0
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3758      	adds	r7, #88	; 0x58
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	2000aa2c 	.word	0x2000aa2c
 8013b4c:	2000aa30 	.word	0x2000aa30
 8013b50:	2000aaf4 	.word	0x2000aaf4

08013b54 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b092      	sub	sp, #72	; 0x48
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8013b62:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013b66:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b68:	b672      	cpsid	i
    return(int_posture);
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8013b6c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013b6e:	4b7a      	ldr	r3, [pc, #488]	; (8013d58 <_tx_mutex_get+0x204>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	689b      	ldr	r3, [r3, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d144      	bne.n	8013c06 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2201      	movs	r2, #1
 8013b80:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b86:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8013b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d032      	beq.n	8013bf4 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	691b      	ldr	r3, [r3, #16]
 8013b92:	2b01      	cmp	r3, #1
 8013b94:	d106      	bne.n	8013ba4 <_tx_mutex_get+0x50>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8013b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2220      	movs	r2, #32
 8013ba2:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8013ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013baa:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8013bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d00f      	beq.n	8013bd2 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bb6:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8013bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8013bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bc8:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bce:	62da      	str	r2, [r3, #44]	; 0x2c
 8013bd0:	e009      	b.n	8013be6 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8013bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bd4:	687a      	ldr	r2, [r7, #4]
 8013bd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	687a      	ldr	r2, [r7, #4]
 8013be4:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8013be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013be8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013bec:	1c5a      	adds	r2, r3, #1
 8013bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8013bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bf8:	69fb      	ldr	r3, [r7, #28]
 8013bfa:	f383 8810 	msr	PRIMASK, r3
}
 8013bfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8013c00:	2300      	movs	r3, #0
 8013c02:	647b      	str	r3, [r7, #68]	; 0x44
 8013c04:	e0a2      	b.n	8013d4c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d10d      	bne.n	8013c2c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just 
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	689b      	ldr	r3, [r3, #8]
 8013c14:	1c5a      	adds	r2, r3, #1
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	609a      	str	r2, [r3, #8]
 8013c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c1c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c1e:	69bb      	ldr	r3, [r7, #24]
 8013c20:	f383 8810 	msr	PRIMASK, r3
}
 8013c24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8013c26:	2300      	movs	r3, #0
 8013c28:	647b      	str	r3, [r7, #68]	; 0x44
 8013c2a:	e08f      	b.n	8013d4c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	f000 8084 	beq.w	8013d3c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013c34:	4b49      	ldr	r3, [pc, #292]	; (8013d5c <_tx_mutex_get+0x208>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d008      	beq.n	8013c4e <_tx_mutex_get+0xfa>
 8013c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c3e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	f383 8810 	msr	PRIMASK, r3
}
 8013c46:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8013c48:	231d      	movs	r3, #29
 8013c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8013c4c:	e07e      	b.n	8013d4c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8013c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c56:	4a42      	ldr	r2, [pc, #264]	; (8013d60 <_tx_mutex_get+0x20c>)
 8013c58:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8013c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c5c:	687a      	ldr	r2, [r7, #4]
 8013c5e:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8013c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013c66:	1c5a      	adds	r2, r3, #1
 8013c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	69db      	ldr	r3, [r3, #28]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d109      	bne.n	8013c8a <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c7a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c80:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c86:	675a      	str	r2, [r3, #116]	; 0x74
 8013c88:	e011      	b.n	8013cae <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	699b      	ldr	r3, [r3, #24]
 8013c8e:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c94:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c9a:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ca0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ca6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013cac:	675a      	str	r2, [r3, #116]	; 0x74
                }
            
                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	69db      	ldr	r3, [r3, #28]
 8013cb2:	1c5a      	adds	r2, r3, #1
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8013cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cba:	220d      	movs	r2, #13
 8013cbc:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cc6:	683a      	ldr	r2, [r7, #0]
 8013cc8:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8013cca:	4b24      	ldr	r3, [pc, #144]	; (8013d5c <_tx_mutex_get+0x208>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	4a22      	ldr	r2, [pc, #136]	; (8013d5c <_tx_mutex_get+0x208>)
 8013cd2:	6013      	str	r3, [r2, #0]
 8013cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	f383 8810 	msr	PRIMASK, r3
}
 8013cde:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread 
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	691b      	ldr	r3, [r3, #16]
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d121      	bne.n	8013d2c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d903      	bls.n	8013cfc <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8013cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8013cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d204      	bcs.n	8013d14 <_tx_mutex_get+0x1c0>
                    {
                    
                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8013d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8013d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d905      	bls.n	8013d2c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8013d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d24:	4619      	mov	r1, r3
 8013d26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013d28:	f000 f8ce 	bl	8013ec8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8013d2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d2e:	f001 fae3 	bl	80152f8 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8013d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d38:	647b      	str	r3, [r7, #68]	; 0x44
 8013d3a:	e007      	b.n	8013d4c <_tx_mutex_get+0x1f8>
 8013d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d3e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	f383 8810 	msr	PRIMASK, r3
}
 8013d46:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8013d48:	231d      	movs	r3, #29
 8013d4a:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8013d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3748      	adds	r7, #72	; 0x48
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
 8013d56:	bf00      	nop
 8013d58:	2000aaf8 	.word	0x2000aaf8
 8013d5c:	2000aaf4 	.word	0x2000aaf4
 8013d60:	080137cd 	.word	0x080137cd

08013d64 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b092      	sub	sp, #72	; 0x48
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d70:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013d74:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d76:	b672      	cpsid	i
    return(int_posture);
 8013d78:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8013d7a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	69db      	ldr	r3, [r3, #28]
 8013d80:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8013d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d805      	bhi.n	8013d94 <_tx_mutex_prioritize+0x30>
 8013d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	f383 8810 	msr	PRIMASK, r3
}
 8013d92:	e092      	b.n	8013eba <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8013d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d96:	2b02      	cmp	r3, #2
 8013d98:	d114      	bne.n	8013dc4 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	699b      	ldr	r3, [r3, #24]
 8013d9e:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8013da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013da4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8013da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d202      	bcs.n	8013db8 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013db6:	619a      	str	r2, [r3, #24]
 8013db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013dbc:	69bb      	ldr	r3, [r7, #24]
 8013dbe:	f383 8810 	msr	PRIMASK, r3
}
 8013dc2:	e07a      	b.n	8013eba <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8013dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dcc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8013dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8013dd4:	4b3b      	ldr	r3, [pc, #236]	; (8013ec4 <_tx_mutex_prioritize+0x160>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	4a3a      	ldr	r2, [pc, #232]	; (8013ec4 <_tx_mutex_prioritize+0x160>)
 8013ddc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8013dde:	2300      	movs	r3, #0
 8013de0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8013de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d201      	bcs.n	8013df2 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8013dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013df4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f383 8810 	msr	PRIMASK, r3
}
 8013dfc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8013e02:	617b      	str	r3, [r7, #20]
    return(posture);
 8013e04:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013e06:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e08:	b672      	cpsid	i
    return(int_posture);
 8013e0a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8013e0c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	699b      	ldr	r3, [r3, #24]
 8013e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d002      	beq.n	8013e1e <_tx_mutex_prioritize+0xba>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8013e18:	2301      	movs	r3, #1
 8013e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8013e1c:	e006      	b.n	8013e2c <_tx_mutex_prioritize+0xc8>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	69db      	ldr	r3, [r3, #28]
 8013e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d001      	beq.n	8013e2c <_tx_mutex_prioritize+0xc8>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8013e28:	2301      	movs	r3, #1
 8013e2a:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8013e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d103      	bne.n	8013e3a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8013e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e36:	643b      	str	r3, [r7, #64]	; 0x40
 8013e38:	e00c      	b.n	8013e54 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	699b      	ldr	r3, [r3, #24]
 8013e3e:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	69db      	ldr	r3, [r3, #28]
 8013e44:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8013e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e48:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8013e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e4e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8013e50:	2300      	movs	r3, #0
 8013e52:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8013e54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d1c2      	bne.n	8013de2 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8013e5c:	4b19      	ldr	r3, [pc, #100]	; (8013ec4 <_tx_mutex_prioritize+0x160>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	3b01      	subs	r3, #1
 8013e62:	4a18      	ldr	r2, [pc, #96]	; (8013ec4 <_tx_mutex_prioritize+0x160>)
 8013e64:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8013e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d01d      	beq.n	8013eaa <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8013e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e72:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8013e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e78:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e7e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8013e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e84:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8013e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e8a:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8013e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e90:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8013e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e96:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8013e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e9c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8013e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ea2:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ea8:	619a      	str	r2, [r3, #24]
 8013eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013eac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	f383 8810 	msr	PRIMASK, r3
}
 8013eb4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013eb6:	f001 f8e5 	bl	8015084 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8013eba:	2300      	movs	r3, #0
#endif
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3748      	adds	r7, #72	; 0x48
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	2000aaf4 	.word	0x2000aaf4

08013ec8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b090      	sub	sp, #64	; 0x40
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8013ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013eda:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013edc:	b672      	cpsid	i
    return(int_posture);
 8013ede:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d017      	beq.n	8013f1a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	683a      	ldr	r2, [r7, #0]
 8013eee:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013ef6:	683a      	ldr	r2, [r7, #0]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d905      	bls.n	8013f08 <_tx_mutex_priority_change+0x40>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	63da      	str	r2, [r3, #60]	; 0x3c
 8013f06:	e002      	b.n	8013f0e <_tx_mutex_priority_change+0x46>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	683a      	ldr	r2, [r7, #0]
 8013f0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8013f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f10:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f14:	f383 8810 	msr	PRIMASK, r3
}
 8013f18:	e089      	b.n	801402e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8013f1a:	4b47      	ldr	r3, [pc, #284]	; (8014038 <_tx_mutex_priority_change+0x170>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f24:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8013f26:	4b45      	ldr	r3, [pc, #276]	; (801403c <_tx_mutex_priority_change+0x174>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	3302      	adds	r3, #2
 8013f2c:	4a43      	ldr	r2, [pc, #268]	; (801403c <_tx_mutex_priority_change+0x174>)
 8013f2e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	220e      	movs	r2, #14
 8013f34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	64da      	str	r2, [r3, #76]	; 0x4c
 8013f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	f383 8810 	msr	PRIMASK, r3
}
 8013f4c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the 
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f001 f9d2 	bl	80152f8 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f54:	f3ef 8310 	mrs	r3, PRIMASK
 8013f58:	623b      	str	r3, [r7, #32]
    return(posture);
 8013f5a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013f5c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f5e:	b672      	cpsid	i
    return(int_posture);
 8013f60:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8013f62:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have 
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	683a      	ldr	r2, [r7, #0]
 8013f68:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013f70:	683a      	ldr	r2, [r7, #0]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d905      	bls.n	8013f82 <_tx_mutex_priority_change+0xba>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8013f80:	e002      	b.n	8013f88 <_tx_mutex_priority_change+0xc0>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	683a      	ldr	r2, [r7, #0]
 8013f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8013f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f8a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f383 8810 	msr	PRIMASK, r3
}
 8013f92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f001 f8af 	bl	80150f8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f9e:	617b      	str	r3, [r7, #20]
    return(posture);
 8013fa0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013fa2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013fa4:	b672      	cpsid	i
    return(int_posture);
 8013fa6:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8013fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
        
        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8013faa:	4b23      	ldr	r3, [pc, #140]	; (8014038 <_tx_mutex_priority_change+0x170>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d034      	beq.n	8014022 <_tx_mutex_priority_change+0x15a>
        {
        
            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d130      	bne.n	8014022 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d811      	bhi.n	8013ff0 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d126      	bne.n	8014022 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8013fd4:	4a18      	ldr	r2, [pc, #96]	; (8014038 <_tx_mutex_priority_change+0x170>)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8013fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	d21f      	bcs.n	8014022 <_tx_mutex_priority_change+0x15a>
                        {
                        
                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe6:	4916      	ldr	r1, [pc, #88]	; (8014040 <_tx_mutex_priority_change+0x178>)
 8013fe8:	687a      	ldr	r2, [r7, #4]
 8013fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013fee:	e018      	b.n	8014022 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d212      	bcs.n	8014022 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014004:	429a      	cmp	r2, r3
 8014006:	d80c      	bhi.n	8014022 <_tx_mutex_priority_change+0x15a>
                        {
                
                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8014008:	4a0b      	ldr	r2, [pc, #44]	; (8014038 <_tx_mutex_priority_change+0x170>)
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 801400e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	429a      	cmp	r2, r3
 8014014:	d205      	bcs.n	8014022 <_tx_mutex_priority_change+0x15a>
                            {
                        
                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801401a:	4909      	ldr	r1, [pc, #36]	; (8014040 <_tx_mutex_priority_change+0x178>)
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014024:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	f383 8810 	msr	PRIMASK, r3
}
 801402c:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801402e:	bf00      	nop
 8014030:	3740      	adds	r7, #64	; 0x40
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	2000aafc 	.word	0x2000aafc
 801403c:	2000aaf4 	.word	0x2000aaf4
 8014040:	2000aa5c 	.word	0x2000aa5c

08014044 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b0a6      	sub	sp, #152	; 0x98
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 801404c:	2320      	movs	r3, #32
 801404e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014052:	f3ef 8310 	mrs	r3, PRIMASK
 8014056:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8014058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 801405a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 801405c:	b672      	cpsid	i
    return(int_posture);
 801405e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8014060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	689b      	ldr	r3, [r3, #8]
 8014068:	2b00      	cmp	r3, #0
 801406a:	f000 81ff 	beq.w	801446c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8014074:	4ba3      	ldr	r3, [pc, #652]	; (8014304 <_tx_mutex_put+0x2c0>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014080:	429a      	cmp	r2, r3
 8014082:	d00d      	beq.n	80140a0 <_tx_mutex_put+0x5c>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8014084:	4ba0      	ldr	r3, [pc, #640]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d109      	bne.n	80140a0 <_tx_mutex_put+0x5c>
 801408c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014090:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014094:	f383 8810 	msr	PRIMASK, r3
}
 8014098:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 801409a:	231e      	movs	r3, #30
 801409c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }
        
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 80140a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80140a4:	2b20      	cmp	r3, #32
 80140a6:	f040 81eb 	bne.w	8014480 <_tx_mutex_put+0x43c>
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	689b      	ldr	r3, [r3, #8]
 80140ae:	1e5a      	subs	r2, r3, #1
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	689b      	ldr	r3, [r3, #8]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00a      	beq.n	80140d2 <_tx_mutex_put+0x8e>
 80140bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80140c0:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140c4:	f383 8810 	msr	PRIMASK, r3
}
 80140c8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80140ca:	2300      	movs	r3, #0
 80140cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80140d0:	e1d6      	b.n	8014480 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80140d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d10a      	bne.n	80140ee <_tx_mutex_put+0xaa>
 80140d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80140dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140e0:	f383 8810 	msr	PRIMASK, r3
}
 80140e4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 80140e6:	2300      	movs	r3, #0
 80140e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80140ec:	e1c8      	b.n	8014480 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 80140ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80140f4:	1e5a      	subs	r2, r3, #1
 80140f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80140fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014102:	2b00      	cmp	r3, #0
 8014104:	d104      	bne.n	8014110 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8014106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014108:	2200      	movs	r2, #0
 801410a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 801410e:	e019      	b.n	8014144 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801411c:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801411e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014122:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014124:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8014126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014128:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801412c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801412e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	429a      	cmp	r2, r3
 8014138:	d104      	bne.n	8014144 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 801413a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801413c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014140:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	699b      	ldr	r3, [r3, #24]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d110      	bne.n	801416e <_tx_mutex_put+0x12a>
                    {
                    
                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	691b      	ldr	r3, [r3, #16]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d10c      	bne.n	801416e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2200      	movs	r2, #0
 8014158:	60da      	str	r2, [r3, #12]
 801415a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801415e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014162:	f383 8810 	msr	PRIMASK, r3
}
 8014166:	bf00      	nop
                            
                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8014168:	2300      	movs	r3, #0
 801416a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }
                     
                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 801416e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014172:	2b20      	cmp	r3, #32
 8014174:	f040 8184 	bne.w	8014480 <_tx_mutex_put+0x43c>
                    {
   
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8014178:	2300      	movs	r3, #0
 801417a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 801417e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	691b      	ldr	r3, [r3, #16]
 801418c:	2b01      	cmp	r3, #1
 801418e:	d155      	bne.n	801423c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014190:	4b5d      	ldr	r3, [pc, #372]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	3301      	adds	r3, #1
 8014196:	4a5c      	ldr	r2, [pc, #368]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014198:	6013      	str	r3, [r2, #0]
 801419a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801419e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141a2:	f383 8810 	msr	PRIMASK, r3
}
 80141a6:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 80141a8:	2320      	movs	r3, #32
 80141aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            
                            /* Search the owned mutexes for this thread to determine the highest priority for this 
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80141ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80141b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80141b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80141b8:	e01f      	b.n	80141fa <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 80141ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80141be:	691b      	ldr	r3, [r3, #16]
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d10b      	bne.n	80141dc <_tx_mutex_put+0x198>
                                {
                            
                                    /* Determine if highest priority field of the mutex is higher than the priority to 
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 80141c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80141c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d904      	bls.n	80141dc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 80141d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80141d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 80141dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80141e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 80141e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80141e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80141ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d102      	bne.n	80141fa <_tx_mutex_put+0x1b6>
                                {
                            
                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 80141f4:	2300      	movs	r3, #0
 80141f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80141fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d1db      	bne.n	80141ba <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014202:	f3ef 8310 	mrs	r3, PRIMASK
 8014206:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801420a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801420c:	b672      	cpsid	i
    return(int_posture);
 801420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8014214:	4b3c      	ldr	r3, [pc, #240]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	3b01      	subs	r3, #1
 801421a:	4a3b      	ldr	r2, [pc, #236]	; (8014308 <_tx_mutex_put+0x2c4>)
 801421c:	6013      	str	r3, [r2, #0]
#endif
                       
                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801421e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014220:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                                
                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8014228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801422c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014230:	429a      	cmp	r2, r3
 8014232:	d203      	bcs.n	801423c <_tx_mutex_put+0x1f8>
                            {
                            
                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8014234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	69db      	ldr	r3, [r3, #28]
 8014240:	2b01      	cmp	r3, #1
 8014242:	d920      	bls.n	8014286 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	691b      	ldr	r3, [r3, #16]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d11c      	bne.n	8014286 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 801424c:	4b2e      	ldr	r3, [pc, #184]	; (8014308 <_tx_mutex_put+0x2c4>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	3301      	adds	r3, #1
 8014252:	4a2d      	ldr	r2, [pc, #180]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014254:	6013      	str	r3, [r2, #0]
 8014256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801425a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425e:	f383 8810 	msr	PRIMASK, r3
}
 8014262:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7ff fd7d 	bl	8013d64 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801426a:	f3ef 8310 	mrs	r3, PRIMASK
 801426e:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8014270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8014272:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8014274:	b672      	cpsid	i
    return(int_posture);
 8014276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8014278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 801427c:	4b22      	ldr	r3, [pc, #136]	; (8014308 <_tx_mutex_put+0x2c4>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	3b01      	subs	r3, #1
 8014282:	4a21      	ldr	r2, [pc, #132]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014284:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	699b      	ldr	r3, [r3, #24]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d13e      	bne.n	801430c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801428e:	4b1e      	ldr	r3, [pc, #120]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	3301      	adds	r3, #1
 8014294:	4a1c      	ldr	r2, [pc, #112]	; (8014308 <_tx_mutex_put+0x2c4>)
 8014296:	6013      	str	r3, [r2, #0]
 8014298:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801429c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a0:	f383 8810 	msr	PRIMASK, r3
}
 80142a4:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that 
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	2220      	movs	r2, #32
 80142aa:	629a      	str	r2, [r3, #40]	; 0x28
  
                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d006      	beq.n	80142c8 <_tx_mutex_put+0x284>
                            {
                      
                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7ff fe00 	bl	8013ec8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142c8:	f3ef 8310 	mrs	r3, PRIMASK
 80142cc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80142ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80142d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80142d2:	b672      	cpsid	i
    return(int_posture);
 80142d4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 80142d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 80142da:	4b0b      	ldr	r3, [pc, #44]	; (8014308 <_tx_mutex_put+0x2c4>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	3b01      	subs	r3, #1
 80142e0:	4a09      	ldr	r2, [pc, #36]	; (8014308 <_tx_mutex_put+0x2c4>)
 80142e2:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2200      	movs	r2, #0
 80142e8:	60da      	str	r2, [r3, #12]
 80142ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80142ee:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f2:	f383 8810 	msr	PRIMASK, r3
}
 80142f6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 80142f8:	f000 fec4 	bl	8015084 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 80142fc:	2300      	movs	r3, #0
 80142fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014302:	e0bd      	b.n	8014480 <_tx_mutex_put+0x43c>
 8014304:	2000aaf8 	.word	0x2000aaf8
 8014308:	2000aaf4 	.word	0x2000aaf4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	699b      	ldr	r3, [r3, #24]
 8014310:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	691b      	ldr	r3, [r3, #16]
 8014316:	2b01      	cmp	r3, #1
 8014318:	d10a      	bne.n	8014330 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        
                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8014322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2220      	movs	r2, #32
 801432e:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8014330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014336:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8014338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801433a:	2b00      	cmp	r3, #0
 801433c:	d10a      	bne.n	8014354 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801433e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014340:	687a      	ldr	r2, [r7, #4]
 8014342:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	687a      	ldr	r2, [r7, #4]
 801434a:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	687a      	ldr	r2, [r7, #4]
 8014350:	631a      	str	r2, [r3, #48]	; 0x30
 8014352:	e016      	b.n	8014382 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8014354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801435a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 801435e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014364:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8014366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801436a:	687a      	ldr	r2, [r7, #4]
 801436c:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801436e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014378:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014380:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8014382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014384:	1c5a      	adds	r2, r3, #1
 8014386:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014388:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2201      	movs	r2, #1
 8014390:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014396:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	69db      	ldr	r3, [r3, #28]
 801439c:	1e5a      	subs	r2, r3, #1
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	61da      	str	r2, [r3, #28]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	69db      	ldr	r3, [r3, #28]
 80143a6:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80143a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d103      	bne.n	80143b6 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2200      	movs	r2, #0
 80143b2:	619a      	str	r2, [r3, #24]
 80143b4:	e00e      	b.n	80143d4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80143b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143ba:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80143c0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80143c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143c6:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80143c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80143cc:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80143ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80143d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80143d2:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80143d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143d6:	2200      	movs	r2, #0
 80143d8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80143da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143dc:	2200      	movs	r2, #0
 80143de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80143e2:	4b2a      	ldr	r3, [pc, #168]	; (801448c <_tx_mutex_put+0x448>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	3301      	adds	r3, #1
 80143e8:	4a28      	ldr	r2, [pc, #160]	; (801448c <_tx_mutex_put+0x448>)
 80143ea:	6013      	str	r3, [r2, #0]
 80143ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80143f0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143f2:	69fb      	ldr	r3, [r7, #28]
 80143f4:	f383 8810 	msr	PRIMASK, r3
}
 80143f8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	691b      	ldr	r3, [r3, #16]
 80143fe:	2b01      	cmp	r3, #1
 8014400:	d12d      	bne.n	801445e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */
        
                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	69db      	ldr	r3, [r3, #28]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d01c      	beq.n	8014444 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f7ff fcaa 	bl	8013d64 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014410:	f3ef 8310 	mrs	r3, PRIMASK
 8014414:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014416:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014418:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801441a:	b672      	cpsid	i
    return(int_posture);
 801441c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801441e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	699b      	ldr	r3, [r3, #24]
 8014426:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8014428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801442a:	2b00      	cmp	r3, #0
 801442c:	d003      	beq.n	8014436 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801442e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	629a      	str	r2, [r3, #40]	; 0x28
 8014436:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801443a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	f383 8810 	msr	PRIMASK, r3
}
 8014442:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */
                    
                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8014444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801444a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801444e:	429a      	cmp	r2, r3
 8014450:	d005      	beq.n	801445e <_tx_mutex_put+0x41a>
                                {
        
                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8014452:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8014456:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801445a:	f7ff fd35 	bl	8013ec8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 801445e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8014460:	f000 fe4a 	bl	80150f8 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8014464:	2300      	movs	r3, #0
 8014466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801446a:	e009      	b.n	8014480 <_tx_mutex_put+0x43c>
 801446c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014470:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	f383 8810 	msr	PRIMASK, r3
}
 8014478:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 801447a:	231e      	movs	r3, #30
 801447c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8014480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8014484:	4618      	mov	r0, r3
 8014486:	3798      	adds	r7, #152	; 0x98
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	2000aaf4 	.word	0x2000aaf4

08014490 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b08e      	sub	sp, #56	; 0x38
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801449a:	f3ef 8310 	mrs	r3, PRIMASK
 801449e:	623b      	str	r3, [r7, #32]
    return(posture);
 80144a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80144a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80144a4:	b672      	cpsid	i
    return(int_posture);
 80144a6:	69fb      	ldr	r3, [r7, #28]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80144a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144ae:	4a33      	ldr	r2, [pc, #204]	; (801457c <_tx_semaphore_cleanup+0xec>)
 80144b0:	4293      	cmp	r3, r2
 80144b2:	d158      	bne.n	8014566 <_tx_semaphore_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80144ba:	683a      	ldr	r2, [r7, #0]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d152      	bne.n	8014566 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144c4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80144c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d04c      	beq.n	8014566 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80144cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	4a2b      	ldr	r2, [pc, #172]	; (8014580 <_tx_semaphore_cleanup+0xf0>)
 80144d2:	4293      	cmp	r3, r2
 80144d4:	d147      	bne.n	8014566 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80144d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d8:	691b      	ldr	r3, [r3, #16]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d043      	beq.n	8014566 <_tx_semaphore_cleanup+0xd6>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2200      	movs	r2, #0
 80144e2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80144e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e6:	691b      	ldr	r3, [r3, #16]
 80144e8:	1e5a      	subs	r2, r3, #1
 80144ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ec:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80144ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f0:	691b      	ldr	r3, [r3, #16]
 80144f2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80144f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d103      	bne.n	8014502 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80144fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fc:	2200      	movs	r2, #0
 80144fe:	60da      	str	r2, [r3, #12]
 8014500:	e013      	b.n	801452a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014506:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801450c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014512:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014518:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451c:	68db      	ldr	r3, [r3, #12]
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	429a      	cmp	r2, r3
 8014522:	d102      	bne.n	801452a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8014524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014528:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801452e:	2b06      	cmp	r3, #6
 8014530:	d119      	bne.n	8014566 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	220d      	movs	r2, #13
 8014536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801453a:	4b12      	ldr	r3, [pc, #72]	; (8014584 <_tx_semaphore_cleanup+0xf4>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	3301      	adds	r3, #1
 8014540:	4a10      	ldr	r2, [pc, #64]	; (8014584 <_tx_semaphore_cleanup+0xf4>)
 8014542:	6013      	str	r3, [r2, #0]
 8014544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014546:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	f383 8810 	msr	PRIMASK, r3
}
 801454e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f000 fdd1 	bl	80150f8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014556:	f3ef 8310 	mrs	r3, PRIMASK
 801455a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801455c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801455e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014560:	b672      	cpsid	i
    return(int_posture);
 8014562:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014564:	637b      	str	r3, [r7, #52]	; 0x34
 8014566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014568:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f383 8810 	msr	PRIMASK, r3
}
 8014570:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014572:	bf00      	nop
 8014574:	3738      	adds	r7, #56	; 0x38
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop
 801457c:	08014491 	.word	0x08014491
 8014580:	53454d41 	.word	0x53454d41
 8014584:	2000aaf4 	.word	0x2000aaf4

08014588 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b08a      	sub	sp, #40	; 0x28
 801458c:	af00      	add	r7, sp, #0
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	60b9      	str	r1, [r7, #8]
 8014592:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8014594:	2220      	movs	r2, #32
 8014596:	2100      	movs	r1, #0
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f002 faa3 	bl	8016ae4 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	68ba      	ldr	r2, [r7, #8]
 80145a2:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145aa:	f3ef 8310 	mrs	r3, PRIMASK
 80145ae:	61bb      	str	r3, [r7, #24]
    return(posture);
 80145b0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80145b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80145b4:	b672      	cpsid	i
    return(int_posture);
 80145b6:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80145b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	4a18      	ldr	r2, [pc, #96]	; (8014620 <_tx_semaphore_create+0x98>)
 80145be:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80145c0:	4b18      	ldr	r3, [pc, #96]	; (8014624 <_tx_semaphore_create+0x9c>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d109      	bne.n	80145dc <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80145c8:	4a17      	ldr	r2, [pc, #92]	; (8014628 <_tx_semaphore_create+0xa0>)
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	68fa      	ldr	r2, [r7, #12]
 80145d2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	68fa      	ldr	r2, [r7, #12]
 80145d8:	619a      	str	r2, [r3, #24]
 80145da:	e011      	b.n	8014600 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80145dc:	4b12      	ldr	r3, [pc, #72]	; (8014628 <_tx_semaphore_create+0xa0>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80145e2:	6a3b      	ldr	r3, [r7, #32]
 80145e4:	699b      	ldr	r3, [r3, #24]
 80145e6:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80145e8:	6a3b      	ldr	r3, [r7, #32]
 80145ea:	68fa      	ldr	r2, [r7, #12]
 80145ec:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80145ee:	69fb      	ldr	r3, [r7, #28]
 80145f0:	68fa      	ldr	r2, [r7, #12]
 80145f2:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	69fa      	ldr	r2, [r7, #28]
 80145f8:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	6a3a      	ldr	r2, [r7, #32]
 80145fe:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8014600:	4b08      	ldr	r3, [pc, #32]	; (8014624 <_tx_semaphore_create+0x9c>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	3301      	adds	r3, #1
 8014606:	4a07      	ldr	r2, [pc, #28]	; (8014624 <_tx_semaphore_create+0x9c>)
 8014608:	6013      	str	r3, [r2, #0]
 801460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	f383 8810 	msr	PRIMASK, r3
}
 8014614:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8014616:	2300      	movs	r3, #0
}
 8014618:	4618      	mov	r0, r3
 801461a:	3728      	adds	r7, #40	; 0x28
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	53454d41 	.word	0x53454d41
 8014624:	2000aa48 	.word	0x2000aa48
 8014628:	2000aa38 	.word	0x2000aa38

0801462c <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b08e      	sub	sp, #56	; 0x38
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014636:	2300      	movs	r3, #0
 8014638:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801463a:	f3ef 8310 	mrs	r3, PRIMASK
 801463e:	623b      	str	r3, [r7, #32]
    return(posture);
 8014640:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014642:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014644:	b672      	cpsid	i
    return(int_posture);
 8014646:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8014648:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	689b      	ldr	r3, [r3, #8]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00a      	beq.n	8014668 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	689b      	ldr	r3, [r3, #8]
 8014656:	1e5a      	subs	r2, r3, #1
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	609a      	str	r2, [r3, #8]
 801465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014660:	69bb      	ldr	r3, [r7, #24]
 8014662:	f383 8810 	msr	PRIMASK, r3
}
 8014666:	e068      	b.n	801473a <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d05d      	beq.n	801472a <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801466e:	4b35      	ldr	r3, [pc, #212]	; (8014744 <_tx_semaphore_get+0x118>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d008      	beq.n	8014688 <_tx_semaphore_get+0x5c>
 8014676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014678:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801467a:	697b      	ldr	r3, [r7, #20]
 801467c:	f383 8810 	msr	PRIMASK, r3
}
 8014680:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8014682:	230d      	movs	r3, #13
 8014684:	637b      	str	r3, [r7, #52]	; 0x34
 8014686:	e058      	b.n	801473a <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014688:	4b2f      	ldr	r3, [pc, #188]	; (8014748 <_tx_semaphore_get+0x11c>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014690:	4a2e      	ldr	r2, [pc, #184]	; (801474c <_tx_semaphore_get+0x120>)
 8014692:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8014694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014696:	687a      	ldr	r2, [r7, #4]
 8014698:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801469c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80146a0:	1c5a      	adds	r2, r3, #1
 80146a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	691b      	ldr	r3, [r3, #16]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d109      	bne.n	80146c4 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146b4:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80146b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146ba:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80146bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146c0:	675a      	str	r2, [r3, #116]	; 0x74
 80146c2:	e011      	b.n	80146e8 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	68db      	ldr	r3, [r3, #12]
 80146c8:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80146ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146ce:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80146d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146d4:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80146d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146da:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80146dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146e0:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80146e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146e6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	691b      	ldr	r3, [r3, #16]
 80146ec:	1c5a      	adds	r2, r3, #1
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80146f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146f4:	2206      	movs	r2, #6
 80146f6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80146f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fa:	2201      	movs	r2, #1
 80146fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80146fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014700:	683a      	ldr	r2, [r7, #0]
 8014702:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014704:	4b0f      	ldr	r3, [pc, #60]	; (8014744 <_tx_semaphore_get+0x118>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	3301      	adds	r3, #1
 801470a:	4a0e      	ldr	r2, [pc, #56]	; (8014744 <_tx_semaphore_get+0x118>)
 801470c:	6013      	str	r3, [r2, #0]
 801470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014710:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	f383 8810 	msr	PRIMASK, r3
}
 8014718:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801471a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801471c:	f000 fdec 	bl	80152f8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014726:	637b      	str	r3, [r7, #52]	; 0x34
 8014728:	e007      	b.n	801473a <_tx_semaphore_get+0x10e>
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f383 8810 	msr	PRIMASK, r3
}
 8014734:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8014736:	230d      	movs	r3, #13
 8014738:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801473c:	4618      	mov	r0, r3
 801473e:	3738      	adds	r7, #56	; 0x38
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	2000aaf4 	.word	0x2000aaf4
 8014748:	2000aaf8 	.word	0x2000aaf8
 801474c:	08014491 	.word	0x08014491

08014750 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b08c      	sub	sp, #48	; 0x30
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014758:	f3ef 8310 	mrs	r3, PRIMASK
 801475c:	617b      	str	r3, [r7, #20]
    return(posture);
 801475e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014760:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014762:	b672      	cpsid	i
    return(int_posture);
 8014764:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8014766:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	691b      	ldr	r3, [r3, #16]
 801476c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 801476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014770:	2b00      	cmp	r3, #0
 8014772:	d114      	bne.n	801479e <_tx_semaphore_put+0x4e>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	689b      	ldr	r3, [r3, #8]
 8014778:	1c5a      	adds	r2, r3, #1
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	69db      	ldr	r3, [r3, #28]
 8014782:	61bb      	str	r3, [r7, #24]
 8014784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014786:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f383 8810 	msr	PRIMASK, r3
}
 801478e:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8014790:	69bb      	ldr	r3, [r7, #24]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d040      	beq.n	8014818 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	4798      	blx	r3
 801479c:	e03c      	b.n	8014818 <_tx_semaphore_put+0xc8>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80147a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a6:	3b01      	subs	r3, #1
 80147a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80147aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d103      	bne.n	80147b8 <_tx_semaphore_put+0x68>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2200      	movs	r2, #0
 80147b4:	60da      	str	r2, [r3, #12]
 80147b6:	e00e      	b.n	80147d6 <_tx_semaphore_put+0x86>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80147b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147bc:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6a3a      	ldr	r2, [r7, #32]
 80147c2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80147c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147c8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80147ca:	6a3b      	ldr	r3, [r7, #32]
 80147cc:	69fa      	ldr	r2, [r7, #28]
 80147ce:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	6a3a      	ldr	r2, [r7, #32]
 80147d4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147da:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80147dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147de:	2200      	movs	r2, #0
 80147e0:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	69db      	ldr	r3, [r3, #28]
 80147e6:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80147e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ea:	2200      	movs	r2, #0
 80147ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80147f0:	4b0c      	ldr	r3, [pc, #48]	; (8014824 <_tx_semaphore_put+0xd4>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	3301      	adds	r3, #1
 80147f6:	4a0b      	ldr	r2, [pc, #44]	; (8014824 <_tx_semaphore_put+0xd4>)
 80147f8:	6013      	str	r3, [r2, #0]
 80147fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147fc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	f383 8810 	msr	PRIMASK, r3
}
 8014804:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014808:	f000 fc76 	bl	80150f8 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d002      	beq.n	8014818 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8014812:	69bb      	ldr	r3, [r7, #24]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8014818:	2300      	movs	r3, #0
}
 801481a:	4618      	mov	r0, r3
 801481c:	3730      	adds	r7, #48	; 0x30
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	2000aaf4 	.word	0x2000aaf4

08014828 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b092      	sub	sp, #72	; 0x48
 801482c:	af00      	add	r7, sp, #0
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	60b9      	str	r1, [r7, #8]
 8014832:	607a      	str	r2, [r7, #4]
 8014834:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8014836:	2300      	movs	r3, #0
 8014838:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801483a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801483c:	21ef      	movs	r1, #239	; 0xef
 801483e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014840:	f002 f950 	bl	8016ae4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8014844:	22b4      	movs	r2, #180	; 0xb4
 8014846:	2100      	movs	r1, #0
 8014848:	68f8      	ldr	r0, [r7, #12]
 801484a:	f002 f94b 	bl	8016ae4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	68ba      	ldr	r2, [r7, #8]
 8014852:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	683a      	ldr	r2, [r7, #0]
 801485e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014864:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801486a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014870:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014876:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801487e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014884:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2220      	movs	r2, #32
 801488a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801488e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014890:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8014892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014894:	3b01      	subs	r3, #1
 8014896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014898:	4413      	add	r3, r2
 801489a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148a0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80148a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80148a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d007      	beq.n	80148ba <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2200      	movs	r2, #0
 80148ae:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2200      	movs	r2, #0
 80148b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80148b8:	e006      	b.n	80148c8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80148be:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80148c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2203      	movs	r2, #3
 80148cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	4a48      	ldr	r2, [pc, #288]	; (80149f4 <_tx_thread_create+0x1cc>)
 80148d2:	655a      	str	r2, [r3, #84]	; 0x54
 80148d4:	68fa      	ldr	r2, [r7, #12]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80148da:	4947      	ldr	r1, [pc, #284]	; (80149f8 <_tx_thread_create+0x1d0>)
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f7eb fd27 	bl	8000330 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148e2:	f3ef 8310 	mrs	r3, PRIMASK
 80148e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80148e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80148ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80148ec:	b672      	cpsid	i
    return(int_posture);
 80148ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80148f0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	4a41      	ldr	r2, [pc, #260]	; (80149fc <_tx_thread_create+0x1d4>)
 80148f6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80148f8:	4b41      	ldr	r3, [pc, #260]	; (8014a00 <_tx_thread_create+0x1d8>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d10b      	bne.n	8014918 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8014900:	4a40      	ldr	r2, [pc, #256]	; (8014a04 <_tx_thread_create+0x1dc>)
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	68fa      	ldr	r2, [r7, #12]
 801490a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	68fa      	ldr	r2, [r7, #12]
 8014912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8014916:	e016      	b.n	8014946 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8014918:	4b3a      	ldr	r3, [pc, #232]	; (8014a04 <_tx_thread_create+0x1dc>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014924:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8014926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014928:	68fa      	ldr	r2, [r7, #12]
 801492a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801493a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8014946:	4b2e      	ldr	r3, [pc, #184]	; (8014a00 <_tx_thread_create+0x1d8>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	3301      	adds	r3, #1
 801494c:	4a2c      	ldr	r2, [pc, #176]	; (8014a00 <_tx_thread_create+0x1d8>)
 801494e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014950:	4b2d      	ldr	r3, [pc, #180]	; (8014a08 <_tx_thread_create+0x1e0>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	3301      	adds	r3, #1
 8014956:	4a2c      	ldr	r2, [pc, #176]	; (8014a08 <_tx_thread_create+0x1e0>)
 8014958:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801495a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801495c:	2b01      	cmp	r3, #1
 801495e:	d129      	bne.n	80149b4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014960:	f3ef 8305 	mrs	r3, IPSR
 8014964:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8014966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8014968:	4b28      	ldr	r3, [pc, #160]	; (8014a0c <_tx_thread_create+0x1e4>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4313      	orrs	r3, r2
 801496e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014972:	d30d      	bcc.n	8014990 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8014974:	4b26      	ldr	r3, [pc, #152]	; (8014a10 <_tx_thread_create+0x1e8>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801497a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801497c:	2b00      	cmp	r3, #0
 801497e:	d009      	beq.n	8014994 <_tx_thread_create+0x16c>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8014980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014984:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8014986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801498a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801498c:	63da      	str	r2, [r3, #60]	; 0x3c
 801498e:	e001      	b.n	8014994 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8014990:	2300      	movs	r3, #0
 8014992:	647b      	str	r3, [r7, #68]	; 0x44
 8014994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014996:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	f383 8810 	msr	PRIMASK, r3
}
 801499e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f000 fba9 	bl	80150f8 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80149a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d01e      	beq.n	80149ea <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80149ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80149b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80149b2:	e01a      	b.n	80149ea <_tx_thread_create+0x1c2>
 80149b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	f383 8810 	msr	PRIMASK, r3
}
 80149be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80149c0:	f3ef 8310 	mrs	r3, PRIMASK
 80149c4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80149c6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80149c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80149ca:	b672      	cpsid	i
    return(int_posture);
 80149cc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80149ce:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80149d0:	4b0d      	ldr	r3, [pc, #52]	; (8014a08 <_tx_thread_create+0x1e0>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	3b01      	subs	r3, #1
 80149d6:	4a0c      	ldr	r2, [pc, #48]	; (8014a08 <_tx_thread_create+0x1e0>)
 80149d8:	6013      	str	r3, [r2, #0]
 80149da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149de:	69fb      	ldr	r3, [r7, #28]
 80149e0:	f383 8810 	msr	PRIMASK, r3
}
 80149e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80149e6:	f000 fb4d 	bl	8015084 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80149ea:	2300      	movs	r3, #0
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	3748      	adds	r7, #72	; 0x48
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	080155cd 	.word	0x080155cd
 80149f8:	08014ea5 	.word	0x08014ea5
 80149fc:	54485244 	.word	0x54485244
 8014a00:	2000aaec 	.word	0x2000aaec
 8014a04:	2000aae4 	.word	0x2000aae4
 8014a08:	2000aaf4 	.word	0x2000aaf4
 8014a0c:	20000094 	.word	0x20000094
 8014a10:	2000aafc 	.word	0x2000aafc

08014a14 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8014a14:	b480      	push	{r7}
 8014a16:	b08b      	sub	sp, #44	; 0x2c
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a20:	f3ef 8310 	mrs	r3, PRIMASK
 8014a24:	617b      	str	r3, [r7, #20]
    return(posture);
 8014a26:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014a28:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a2a:	b672      	cpsid	i
    return(int_posture);
 8014a2c:	693b      	ldr	r3, [r7, #16]
    
    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8014a2e:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d00b      	beq.n	8014a50 <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a3c:	2b02      	cmp	r3, #2
 8014a3e:	d007      	beq.n	8014a50 <_tx_thread_delete+0x3c>
 8014a40:	6a3b      	ldr	r3, [r7, #32]
 8014a42:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f383 8810 	msr	PRIMASK, r3
}
 8014a4a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8014a4c:	2311      	movs	r3, #17
 8014a4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8014a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d12d      	bne.n	8014ab2 <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8014a5c:	4b18      	ldr	r3, [pc, #96]	; (8014ac0 <_tx_thread_delete+0xac>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	3b01      	subs	r3, #1
 8014a62:	4a17      	ldr	r2, [pc, #92]	; (8014ac0 <_tx_thread_delete+0xac>)
 8014a64:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8014a66:	4b16      	ldr	r3, [pc, #88]	; (8014ac0 <_tx_thread_delete+0xac>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d103      	bne.n	8014a76 <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8014a6e:	4b15      	ldr	r3, [pc, #84]	; (8014ac4 <_tx_thread_delete+0xb0>)
 8014a70:	2200      	movs	r2, #0
 8014a72:	601a      	str	r2, [r3, #0]
 8014a74:	e017      	b.n	8014aa6 <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014a7c:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a84:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	69ba      	ldr	r2, [r7, #24]
 8014a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8014a8e:	69bb      	ldr	r3, [r7, #24]
 8014a90:	69fa      	ldr	r2, [r7, #28]
 8014a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8014a96:	4b0b      	ldr	r3, [pc, #44]	; (8014ac4 <_tx_thread_delete+0xb0>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d102      	bne.n	8014aa6 <_tx_thread_delete+0x92>
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8014aa0:	4a08      	ldr	r2, [pc, #32]	; (8014ac4 <_tx_thread_delete+0xb0>)
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	6013      	str	r3, [r2, #0]
 8014aa6:	6a3b      	ldr	r3, [r7, #32]
 8014aa8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	f383 8810 	msr	PRIMASK, r3
}
 8014ab0:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8014ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	372c      	adds	r7, #44	; 0x2c
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr
 8014ac0:	2000aaec 	.word	0x2000aaec
 8014ac4:	2000aae4 	.word	0x2000aae4

08014ac8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8014ac8:	b480      	push	{r7}
 8014aca:	b087      	sub	sp, #28
 8014acc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ace:	f3ef 8310 	mrs	r3, PRIMASK
 8014ad2:	60bb      	str	r3, [r7, #8]
    return(posture);
 8014ad4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8014ad6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ad8:	b672      	cpsid	i
    return(int_posture);
 8014ada:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8014adc:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014ade:	4b08      	ldr	r3, [pc, #32]	; (8014b00 <_tx_thread_identify+0x38>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	613b      	str	r3, [r7, #16]
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	f383 8810 	msr	PRIMASK, r3
}
 8014aee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8014af0:	693b      	ldr	r3, [r7, #16]
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	371c      	adds	r7, #28
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr
 8014afe:	bf00      	nop
 8014b00:	2000aaf8 	.word	0x2000aaf8

08014b04 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8014b04:	b480      	push	{r7}
 8014b06:	b089      	sub	sp, #36	; 0x24
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	60b9      	str	r1, [r7, #8]
 8014b0e:	607a      	str	r2, [r7, #4]
 8014b10:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b12:	f3ef 8310 	mrs	r3, PRIMASK
 8014b16:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014b18:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014b1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b1c:	b672      	cpsid	i
    return(int_posture);
 8014b1e:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8014b20:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d003      	beq.n	8014b30 <_tx_thread_info_get+0x2c>
    {
    
        *name =  thread_ptr -> tx_thread_name;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d003      	beq.n	8014b3e <_tx_thread_info_get+0x3a>
    {
    
        *state =  thread_ptr -> tx_thread_state;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d003      	beq.n	8014b4c <_tx_thread_info_get+0x48>
    {
    
        *run_count =  thread_ptr -> tx_thread_run_count;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	685a      	ldr	r2, [r3, #4]
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8014b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d004      	beq.n	8014b5c <_tx_thread_info_get+0x58>
    {
    
        *priority =  thread_ptr -> tx_thread_user_priority;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8014b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8014b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d004      	beq.n	8014b6c <_tx_thread_info_get+0x68>
    {
    
        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8014b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d003      	beq.n	8014b7a <_tx_thread_info_get+0x76>
    {
    
        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	699a      	ldr	r2, [r3, #24]
 8014b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8014b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d004      	beq.n	8014b8a <_tx_thread_info_get+0x86>
    {
    
        *next_thread =  thread_ptr -> tx_thread_created_next;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8014b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b88:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8014b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d003      	beq.n	8014b98 <_tx_thread_info_get+0x94>
    {
    
        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b96:	601a      	str	r2, [r3, #0]
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	f383 8810 	msr	PRIMASK, r3
}
 8014ba2:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8014ba4:	2300      	movs	r3, #0
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3724      	adds	r7, #36	; 0x24
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr
	...

08014bb4 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8014bb8:	4b13      	ldr	r3, [pc, #76]	; (8014c08 <_tx_thread_initialize+0x54>)
 8014bba:	2200      	movs	r2, #0
 8014bbc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8014bbe:	4b13      	ldr	r3, [pc, #76]	; (8014c0c <_tx_thread_initialize+0x58>)
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	601a      	str	r2, [r3, #0]
 8014bc4:	4b12      	ldr	r3, [pc, #72]	; (8014c10 <_tx_thread_initialize+0x5c>)
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014bca:	4b12      	ldr	r3, [pc, #72]	; (8014c14 <_tx_thread_initialize+0x60>)
 8014bcc:	2220      	movs	r2, #32
 8014bce:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8014bd0:	2280      	movs	r2, #128	; 0x80
 8014bd2:	2100      	movs	r1, #0
 8014bd4:	4810      	ldr	r0, [pc, #64]	; (8014c18 <_tx_thread_initialize+0x64>)
 8014bd6:	f001 ff85 	bl	8016ae4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8014bda:	4b10      	ldr	r3, [pc, #64]	; (8014c1c <_tx_thread_initialize+0x68>)
 8014bdc:	2200      	movs	r2, #0
 8014bde:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8014be0:	4b0f      	ldr	r3, [pc, #60]	; (8014c20 <_tx_thread_initialize+0x6c>)
 8014be2:	2200      	movs	r2, #0
 8014be4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8014be6:	4b0f      	ldr	r3, [pc, #60]	; (8014c24 <_tx_thread_initialize+0x70>)
 8014be8:	2200      	movs	r2, #0
 8014bea:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8014bec:	4b0e      	ldr	r3, [pc, #56]	; (8014c28 <_tx_thread_initialize+0x74>)
 8014bee:	2200      	movs	r2, #0
 8014bf0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#if defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE)
                            | (((ULONG) 1) << 7)
 8014bf2:	4b0e      	ldr	r3, [pc, #56]	; (8014c2c <_tx_thread_initialize+0x78>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f043 7384 	orr.w	r3, r3, #17301504	; 0x1080000
 8014bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    _tx_build_options =  _tx_build_options 
 8014bfe:	4a0b      	ldr	r2, [pc, #44]	; (8014c2c <_tx_thread_initialize+0x78>)
 8014c00:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8014c02:	bf00      	nop
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	2000aaf8 	.word	0x2000aaf8
 8014c0c:	2000aafc 	.word	0x2000aafc
 8014c10:	2000aae0 	.word	0x2000aae0
 8014c14:	2000ab00 	.word	0x2000ab00
 8014c18:	2000aa5c 	.word	0x2000aa5c
 8014c1c:	2000aae4 	.word	0x2000aae4
 8014c20:	2000aaec 	.word	0x2000aaec
 8014c24:	2000aaf4 	.word	0x2000aaf4
 8014c28:	2000aadc 	.word	0x2000aadc
 8014c2c:	2000aae8 	.word	0x2000aae8

08014c30 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b08c      	sub	sp, #48	; 0x30
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	60f8      	str	r0, [r7, #12]
 8014c38:	60b9      	str	r1, [r7, #8]
 8014c3a:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the 
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014c46:	68ba      	ldr	r2, [r7, #8]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d004      	beq.n	8014c56 <_tx_thread_preemption_change+0x26>
    {
    
        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d001      	beq.n	8014c56 <_tx_thread_preemption_change+0x26>
        {
        
            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8014c52:	2300      	movs	r3, #0
 8014c54:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c56:	f3ef 8310 	mrs	r3, PRIMASK
 8014c5a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8014c5e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c60:	b672      	cpsid	i
    return(int_posture);
 8014c62:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014c64:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014c6c:	68ba      	ldr	r2, [r7, #8]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d902      	bls.n	8014c78 <_tx_thread_preemption_change+0x48>
    {
            
        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8014c72:	2318      	movs	r3, #24
 8014c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c76:	e03e      	b.n	8014cf6 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	68ba      	ldr	r2, [r7, #8]
 8014c86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014c90:	68ba      	ldr	r2, [r7, #8]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d203      	bcs.n	8014c9e <_tx_thread_preemption_change+0x6e>
        {
    
            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	68ba      	ldr	r2, [r7, #8]
 8014c9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8014c9c:	e004      	b.n	8014ca8 <_tx_thread_preemption_change+0x78>
        }
        else
        {
    
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cac:	4b17      	ldr	r3, [pc, #92]	; (8014d0c <_tx_thread_preemption_change+0xdc>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d920      	bls.n	8014cf6 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8014cb4:	4b15      	ldr	r3, [pc, #84]	; (8014d0c <_tx_thread_preemption_change+0xdc>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	68ba      	ldr	r2, [r7, #8]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d91b      	bls.n	8014cf6 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8014cbe:	4b14      	ldr	r3, [pc, #80]	; (8014d10 <_tx_thread_preemption_change+0xe0>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	68fa      	ldr	r2, [r7, #12]
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d116      	bne.n	8014cf6 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8014cc8:	4b10      	ldr	r3, [pc, #64]	; (8014d0c <_tx_thread_preemption_change+0xdc>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	4a11      	ldr	r2, [pc, #68]	; (8014d14 <_tx_thread_preemption_change+0xe4>)
 8014cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cd2:	4a0f      	ldr	r2, [pc, #60]	; (8014d10 <_tx_thread_preemption_change+0xe0>)
 8014cd4:	6013      	str	r3, [r2, #0]
 8014cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	f383 8810 	msr	PRIMASK, r3
}
 8014ce0:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8014ce2:	f000 f9cf 	bl	8015084 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8014cea:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014cec:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014cee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014cf0:	b672      	cpsid	i
    return(int_posture);
 8014cf2:	69bb      	ldr	r3, [r7, #24]
                    
                    /* Disable interrupts.  */
                    TX_DISABLE
 8014cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cf8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	f383 8810 	msr	PRIMASK, r3
}
 8014d00:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
 8014d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3730      	adds	r7, #48	; 0x30
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	2000ab00 	.word	0x2000ab00
 8014d10:	2000aafc 	.word	0x2000aafc
 8014d14:	2000aa5c 	.word	0x2000aa5c

08014d18 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b08b      	sub	sp, #44	; 0x2c
 8014d1c:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014d1e:	4b2b      	ldr	r3, [pc, #172]	; (8014dcc <_tx_thread_relinquish+0xb4>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d24:	f3ef 8310 	mrs	r3, PRIMASK
 8014d28:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014d2a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014d2c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d2e:	b672      	cpsid	i
    return(int_posture);
 8014d30:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8014d32:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8014d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d36:	69db      	ldr	r3, [r3, #28]
 8014d38:	4a25      	ldr	r2, [pc, #148]	; (8014dd0 <_tx_thread_relinquish+0xb8>)
 8014d3a:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d40:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8014d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d44:	6a1b      	ldr	r3, [r3, #32]
 8014d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d009      	beq.n	8014d60 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 8014d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4e:	6a1a      	ldr	r2, [r3, #32]
 8014d50:	4920      	ldr	r1, [pc, #128]	; (8014dd4 <_tx_thread_relinquish+0xbc>)
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 8014d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5a:	6a1b      	ldr	r3, [r3, #32]
 8014d5c:	4a1e      	ldr	r2, [pc, #120]	; (8014dd8 <_tx_thread_relinquish+0xc0>)
 8014d5e:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 8014d60:	4b1e      	ldr	r3, [pc, #120]	; (8014ddc <_tx_thread_relinquish+0xc4>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	69fa      	ldr	r2, [r7, #28]
 8014d66:	429a      	cmp	r2, r3
 8014d68:	d906      	bls.n	8014d78 <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8014d6a:	4b1c      	ldr	r3, [pc, #112]	; (8014ddc <_tx_thread_relinquish+0xc4>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	4a19      	ldr	r2, [pc, #100]	; (8014dd4 <_tx_thread_relinquish+0xbc>)
 8014d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d74:	4a18      	ldr	r2, [pc, #96]	; (8014dd8 <_tx_thread_relinquish+0xc0>)
 8014d76:	6013      	str	r3, [r2, #0]
 8014d78:	6a3b      	ldr	r3, [r7, #32]
 8014d7a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	f383 8810 	msr	PRIMASK, r3
}
 8014d82:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 8014d84:	4b14      	ldr	r3, [pc, #80]	; (8014dd8 <_tx_thread_relinquish+0xc0>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d017      	beq.n	8014dbe <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014d8e:	4b14      	ldr	r3, [pc, #80]	; (8014de0 <_tx_thread_relinquish+0xc8>)
 8014d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d94:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d96:	f3ef 8305 	mrs	r3, IPSR
 8014d9a:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8014d9c:	68fb      	ldr	r3, [r7, #12]
    if (__get_ipsr_value() == 0)
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d10c      	bne.n	8014dbc <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014da2:	f3ef 8310 	mrs	r3, PRIMASK
 8014da6:	60bb      	str	r3, [r7, #8]
    return(posture);
 8014da8:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 8014daa:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014dac:	b662      	cpsie	i
}
 8014dae:	bf00      	nop
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	f383 8810 	msr	PRIMASK, r3
}
 8014dba:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8014dbc:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 8014dbe:	bf00      	nop
 8014dc0:	372c      	adds	r7, #44	; 0x2c
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	2000aaf8 	.word	0x2000aaf8
 8014dd0:	2000ab8c 	.word	0x2000ab8c
 8014dd4:	2000aa5c 	.word	0x2000aa5c
 8014dd8:	2000aafc 	.word	0x2000aafc
 8014ddc:	2000ab00 	.word	0x2000ab00
 8014de0:	e000ed04 	.word	0xe000ed04

08014de4 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b08c      	sub	sp, #48	; 0x30
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8014dec:	2300      	movs	r3, #0
 8014dee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014df0:	f3ef 8310 	mrs	r3, PRIMASK
 8014df4:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014df6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014df8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014dfa:	b672      	cpsid	i
    return(int_posture);
 8014dfc:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014dfe:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e04:	2b03      	cmp	r3, #3
 8014e06:	d12f      	bne.n	8014e68 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014e08:	f3ef 8305 	mrs	r3, IPSR
 8014e0c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014e0e:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8014e10:	4b21      	ldr	r3, [pc, #132]	; (8014e98 <_tx_thread_resume+0xb4>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	4313      	orrs	r3, r2
 8014e16:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014e1a:	d30d      	bcc.n	8014e38 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8014e1c:	4b1f      	ldr	r3, [pc, #124]	; (8014e9c <_tx_thread_resume+0xb8>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8014e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d009      	beq.n	8014e3c <_tx_thread_resume+0x58>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8014e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e2c:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8014e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e34:	63da      	str	r2, [r3, #60]	; 0x3c
 8014e36:	e001      	b.n	8014e3c <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8014e3c:	4b18      	ldr	r3, [pc, #96]	; (8014ea0 <_tx_thread_resume+0xbc>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	3301      	adds	r3, #1
 8014e42:	4a17      	ldr	r2, [pc, #92]	; (8014ea0 <_tx_thread_resume+0xbc>)
 8014e44:	6013      	str	r3, [r2, #0]
 8014e46:	6a3b      	ldr	r3, [r7, #32]
 8014e48:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	f383 8810 	msr	PRIMASK, r3
}
 8014e50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f000 f950 	bl	80150f8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8014e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d002      	beq.n	8014e64 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8014e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e62:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8014e64:	2300      	movs	r3, #0
 8014e66:	e012      	b.n	8014e8e <_tx_thread_resume+0xaa>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e6c:	2b01      	cmp	r3, #1
 8014e6e:	d105      	bne.n	8014e7c <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2200      	movs	r2, #0
 8014e74:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8014e76:	2319      	movs	r3, #25
 8014e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e7a:	e001      	b.n	8014e80 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8014e7c:	2312      	movs	r3, #18
 8014e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e80:	6a3b      	ldr	r3, [r7, #32]
 8014e82:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	f383 8810 	msr	PRIMASK, r3
}
 8014e8a:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8014e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3730      	adds	r7, #48	; 0x30
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	20000094 	.word	0x20000094
 8014e9c:	2000aafc 	.word	0x2000aafc
 8014ea0:	2000aaf4 	.word	0x2000aaf4

08014ea4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b08c      	sub	sp, #48	; 0x30
 8014ea8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014eaa:	4b33      	ldr	r3, [pc, #204]	; (8014f78 <_tx_thread_shell_entry+0xd4>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8014eb4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014eb6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014eb8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014eba:	b672      	cpsid	i
    return(int_posture);
 8014ebc:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 8014ebe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8014ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8014ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ecc:	69fb      	ldr	r3, [r7, #28]
 8014ece:	f383 8810 	msr	PRIMASK, r3
}
 8014ed2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8014ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d003      	beq.n	8014ee2 <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8014eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014edc:	2100      	movs	r1, #0
 8014ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ee0:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8014ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ee8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014eea:	4610      	mov	r0, r2
 8014eec:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8014eee:	4b23      	ldr	r3, [pc, #140]	; (8014f7c <_tx_thread_shell_entry+0xd8>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d003      	beq.n	8014efe <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8014ef6:	4b21      	ldr	r3, [pc, #132]	; (8014f7c <_tx_thread_shell_entry+0xd8>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014efc:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014efe:	f3ef 8310 	mrs	r3, PRIMASK
 8014f02:	607b      	str	r3, [r7, #4]
    return(posture);
 8014f04:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8014f06:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f08:	b672      	cpsid	i
    return(int_posture);
 8014f0a:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8014f0c:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8014f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014f14:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8014f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f18:	2201      	movs	r2, #1
 8014f1a:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f1e:	2201      	movs	r2, #1
 8014f20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f24:	2200      	movs	r2, #0
 8014f26:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014f28:	4b15      	ldr	r3, [pc, #84]	; (8014f80 <_tx_thread_shell_entry+0xdc>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	4a14      	ldr	r2, [pc, #80]	; (8014f80 <_tx_thread_shell_entry+0xdc>)
 8014f30:	6013      	str	r3, [r2, #0]
 8014f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f34:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	f383 8810 	msr	PRIMASK, r3
}
 8014f3c:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8014f3e:	f3ef 8314 	mrs	r3, CONTROL
 8014f42:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8014f44:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8014f46:	623b      	str	r3, [r7, #32]
 8014f48:	6a3b      	ldr	r3, [r7, #32]
 8014f4a:	f023 0304 	bic.w	r3, r3, #4
 8014f4e:	623b      	str	r3, [r7, #32]
 8014f50:	6a3b      	ldr	r3, [r7, #32]
 8014f52:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	f383 8814 	msr	CONTROL, r3
}
 8014f5a:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8014f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d003      	beq.n	8014f6a <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8014f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f64:	2101      	movs	r1, #1
 8014f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f68:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8014f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f6c:	f000 f9c4 	bl	80152f8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8014f70:	bf00      	nop
 8014f72:	3730      	adds	r7, #48	; 0x30
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	2000aaf8 	.word	0x2000aaf8
 8014f7c:	2000aadc 	.word	0x2000aadc
 8014f80:	2000aaf4 	.word	0x2000aaf4

08014f84 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b08e      	sub	sp, #56	; 0x38
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8014f90:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014f94:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f96:	b672      	cpsid	i
    return(int_posture);
 8014f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014f9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014f9c:	4b35      	ldr	r3, [pc, #212]	; (8015074 <_tx_thread_sleep+0xf0>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8014fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d108      	bne.n	8014fba <_tx_thread_sleep+0x36>
 8014fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014faa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fac:	6a3b      	ldr	r3, [r7, #32]
 8014fae:	f383 8810 	msr	PRIMASK, r3
}
 8014fb2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8014fb4:	2313      	movs	r3, #19
 8014fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8014fb8:	e056      	b.n	8015068 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014fba:	f3ef 8305 	mrs	r3, IPSR
 8014fbe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8014fc0:	69fa      	ldr	r2, [r7, #28]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014fc2:	4b2d      	ldr	r3, [pc, #180]	; (8015078 <_tx_thread_sleep+0xf4>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	4313      	orrs	r3, r2
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d008      	beq.n	8014fde <_tx_thread_sleep+0x5a>
 8014fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fd0:	69bb      	ldr	r3, [r7, #24]
 8014fd2:	f383 8810 	msr	PRIMASK, r3
}
 8014fd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8014fd8:	2313      	movs	r3, #19
 8014fda:	637b      	str	r3, [r7, #52]	; 0x34
 8014fdc:	e044      	b.n	8015068 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8014fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe0:	4a26      	ldr	r2, [pc, #152]	; (801507c <_tx_thread_sleep+0xf8>)
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	d108      	bne.n	8014ff8 <_tx_thread_sleep+0x74>
 8014fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	f383 8810 	msr	PRIMASK, r3
}
 8014ff0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8014ff2:	2313      	movs	r3, #19
 8014ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8014ff6:	e037      	b.n	8015068 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d108      	bne.n	8015010 <_tx_thread_sleep+0x8c>
 8014ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015000:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	f383 8810 	msr	PRIMASK, r3
}
 8015008:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801500a:	2300      	movs	r3, #0
 801500c:	637b      	str	r3, [r7, #52]	; 0x34
 801500e:	e02b      	b.n	8015068 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8015010:	4b1b      	ldr	r3, [pc, #108]	; (8015080 <_tx_thread_sleep+0xfc>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d008      	beq.n	801502a <_tx_thread_sleep+0xa6>
 8015018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f383 8810 	msr	PRIMASK, r3
}
 8015022:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8015024:	2313      	movs	r3, #19
 8015026:	637b      	str	r3, [r7, #52]	; 0x34
 8015028:	e01e      	b.n	8015068 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502c:	2204      	movs	r2, #4
 801502e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015032:	2201      	movs	r2, #1
 8015034:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8015036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015038:	2200      	movs	r2, #0
 801503a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015040:	687a      	ldr	r2, [r7, #4]
 8015042:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8015044:	4b0e      	ldr	r3, [pc, #56]	; (8015080 <_tx_thread_sleep+0xfc>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	3301      	adds	r3, #1
 801504a:	4a0d      	ldr	r2, [pc, #52]	; (8015080 <_tx_thread_sleep+0xfc>)
 801504c:	6013      	str	r3, [r2, #0]
 801504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015050:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	f383 8810 	msr	PRIMASK, r3
}
 8015058:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801505a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801505c:	f000 f94c 	bl	80152f8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8015060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015066:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 8015068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801506a:	4618      	mov	r0, r3
 801506c:	3738      	adds	r7, #56	; 0x38
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}
 8015072:	bf00      	nop
 8015074:	2000aaf8 	.word	0x2000aaf8
 8015078:	20000094 	.word	0x20000094
 801507c:	2000ab98 	.word	0x2000ab98
 8015080:	2000aaf4 	.word	0x2000aaf4

08015084 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8015084:	b480      	push	{r7}
 8015086:	b089      	sub	sp, #36	; 0x24
 8015088:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801508a:	4b17      	ldr	r3, [pc, #92]	; (80150e8 <_tx_thread_system_preempt_check+0x64>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d121      	bne.n	80150da <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8015096:	4b15      	ldr	r3, [pc, #84]	; (80150ec <_tx_thread_system_preempt_check+0x68>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801509c:	4b14      	ldr	r3, [pc, #80]	; (80150f0 <_tx_thread_system_preempt_check+0x6c>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80150a2:	69ba      	ldr	r2, [r7, #24]
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d017      	beq.n	80150da <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80150aa:	4b12      	ldr	r3, [pc, #72]	; (80150f4 <_tx_thread_system_preempt_check+0x70>)
 80150ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150b0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80150b2:	f3ef 8305 	mrs	r3, IPSR
 80150b6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80150b8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d10c      	bne.n	80150d8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80150be:	f3ef 8310 	mrs	r3, PRIMASK
 80150c2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80150c4:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 80150c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80150c8:	b662      	cpsie	i
}
 80150ca:	bf00      	nop
 80150cc:	68bb      	ldr	r3, [r7, #8]
 80150ce:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f383 8810 	msr	PRIMASK, r3
}
 80150d6:	bf00      	nop
}
 80150d8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80150da:	bf00      	nop
 80150dc:	3724      	adds	r7, #36	; 0x24
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	2000aaf4 	.word	0x2000aaf4
 80150ec:	2000aaf8 	.word	0x2000aaf8
 80150f0:	2000aafc 	.word	0x2000aafc
 80150f4:	e000ed04 	.word	0xe000ed04

080150f8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b096      	sub	sp, #88	; 0x58
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015100:	f3ef 8310 	mrs	r3, PRIMASK
 8015104:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8015106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8015108:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801510a:	b672      	cpsid	i
    return(int_posture);
 801510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801510e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015114:	2b00      	cmp	r3, #0
 8015116:	d005      	beq.n	8015124 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	334c      	adds	r3, #76	; 0x4c
 801511c:	4618      	mov	r0, r3
 801511e:	f000 fc69 	bl	80159f4 <_tx_timer_system_deactivate>
 8015122:	e002      	b.n	801512a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2200      	movs	r2, #0
 8015128:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801512a:	4b6c      	ldr	r3, [pc, #432]	; (80152dc <_tx_thread_system_resume+0x1e4>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	3b01      	subs	r3, #1
 8015130:	4a6a      	ldr	r2, [pc, #424]	; (80152dc <_tx_thread_system_resume+0x1e4>)
 8015132:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015138:	2b00      	cmp	r3, #0
 801513a:	f040 8083 	bne.w	8015244 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015142:	2b00      	cmp	r3, #0
 8015144:	f000 8097 	beq.w	8015276 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801514c:	2b00      	cmp	r3, #0
 801514e:	d172      	bne.n	8015236 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2200      	movs	r2, #0
 8015154:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801515a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801515c:	4a60      	ldr	r2, [pc, #384]	; (80152e0 <_tx_thread_system_resume+0x1e8>)
 801515e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015164:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8015166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015168:	2b00      	cmp	r3, #0
 801516a:	d154      	bne.n	8015216 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801516c:	495c      	ldr	r1, [pc, #368]	; (80152e0 <_tx_thread_system_resume+0x1e8>)
 801516e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	687a      	ldr	r2, [r7, #4]
 801517a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8015182:	2201      	movs	r2, #1
 8015184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015186:	fa02 f303 	lsl.w	r3, r2, r3
 801518a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801518c:	4b55      	ldr	r3, [pc, #340]	; (80152e4 <_tx_thread_system_resume+0x1ec>)
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015192:	4313      	orrs	r3, r2
 8015194:	4a53      	ldr	r2, [pc, #332]	; (80152e4 <_tx_thread_system_resume+0x1ec>)
 8015196:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8015198:	4b53      	ldr	r3, [pc, #332]	; (80152e8 <_tx_thread_system_resume+0x1f0>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801519e:	429a      	cmp	r2, r3
 80151a0:	d269      	bcs.n	8015276 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80151a2:	4a51      	ldr	r2, [pc, #324]	; (80152e8 <_tx_thread_system_resume+0x1f0>)
 80151a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151a6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80151a8:	4b50      	ldr	r3, [pc, #320]	; (80152ec <_tx_thread_system_resume+0x1f4>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80151ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d103      	bne.n	80151bc <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80151b4:	4a4d      	ldr	r2, [pc, #308]	; (80152ec <_tx_thread_system_resume+0x1f4>)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6013      	str	r3, [r2, #0]
 80151ba:	e05c      	b.n	8015276 <_tx_thread_system_resume+0x17e>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80151bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d257      	bcs.n	8015276 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80151c6:	4a49      	ldr	r2, [pc, #292]	; (80152ec <_tx_thread_system_resume+0x1f4>)
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6013      	str	r3, [r2, #0]
 80151cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80151d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d2:	f383 8810 	msr	PRIMASK, r3
}
 80151d6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80151d8:	4b40      	ldr	r3, [pc, #256]	; (80152dc <_tx_thread_system_resume+0x1e4>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80151de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d174      	bne.n	80152ce <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80151e4:	4b42      	ldr	r3, [pc, #264]	; (80152f0 <_tx_thread_system_resume+0x1f8>)
 80151e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151ea:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80151ec:	f3ef 8305 	mrs	r3, IPSR
 80151f0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80151f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d10c      	bne.n	8015212 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80151f8:	f3ef 8310 	mrs	r3, PRIMASK
 80151fc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80151fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8015200:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015202:	b662      	cpsie	i
}
 8015204:	bf00      	nop
 8015206:	6a3b      	ldr	r3, [r7, #32]
 8015208:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801520a:	69fb      	ldr	r3, [r7, #28]
 801520c:	f383 8810 	msr	PRIMASK, r3
}
 8015210:	bf00      	nop
}
 8015212:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8015214:	e05b      	b.n	80152ce <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8015216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801521a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801521c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8015222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015224:	687a      	ldr	r2, [r7, #4]
 8015226:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801522c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015232:	621a      	str	r2, [r3, #32]
 8015234:	e01f      	b.n	8015276 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2200      	movs	r2, #0
 801523a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2203      	movs	r2, #3
 8015240:	631a      	str	r2, [r3, #48]	; 0x30
 8015242:	e018      	b.n	8015276 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015248:	2b01      	cmp	r3, #1
 801524a:	d014      	beq.n	8015276 <_tx_thread_system_resume+0x17e>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015250:	2b02      	cmp	r3, #2
 8015252:	d010      	beq.n	8015276 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015258:	2b00      	cmp	r3, #0
 801525a:	d106      	bne.n	801526a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2200      	movs	r2, #0
 8015260:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2200      	movs	r2, #0
 8015266:	631a      	str	r2, [r3, #48]	; 0x30
 8015268:	e005      	b.n	8015276 <_tx_thread_system_resume+0x17e>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2200      	movs	r2, #0
 801526e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2203      	movs	r2, #3
 8015274:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015276:	4b1f      	ldr	r3, [pc, #124]	; (80152f4 <_tx_thread_system_resume+0x1fc>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	63bb      	str	r3, [r7, #56]	; 0x38
 801527c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801527e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015280:	69bb      	ldr	r3, [r7, #24]
 8015282:	f383 8810 	msr	PRIMASK, r3
}
 8015286:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015288:	4b18      	ldr	r3, [pc, #96]	; (80152ec <_tx_thread_system_resume+0x1f4>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801528e:	429a      	cmp	r2, r3
 8015290:	d020      	beq.n	80152d4 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015292:	4b12      	ldr	r3, [pc, #72]	; (80152dc <_tx_thread_system_resume+0x1e4>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8015298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801529a:	2b00      	cmp	r3, #0
 801529c:	d11a      	bne.n	80152d4 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801529e:	4b14      	ldr	r3, [pc, #80]	; (80152f0 <_tx_thread_system_resume+0x1f8>)
 80152a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152a4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80152a6:	f3ef 8305 	mrs	r3, IPSR
 80152aa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80152ac:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d10f      	bne.n	80152d2 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80152b2:	f3ef 8310 	mrs	r3, PRIMASK
 80152b6:	613b      	str	r3, [r7, #16]
    return(posture);
 80152b8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80152ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80152bc:	b662      	cpsie	i
}
 80152be:	bf00      	nop
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	f383 8810 	msr	PRIMASK, r3
}
 80152ca:	bf00      	nop
}
 80152cc:	e001      	b.n	80152d2 <_tx_thread_system_resume+0x1da>
                                return;
 80152ce:	bf00      	nop
 80152d0:	e000      	b.n	80152d4 <_tx_thread_system_resume+0x1dc>
 80152d2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80152d4:	3758      	adds	r7, #88	; 0x58
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	2000aaf4 	.word	0x2000aaf4
 80152e0:	2000aa5c 	.word	0x2000aa5c
 80152e4:	2000aae0 	.word	0x2000aae0
 80152e8:	2000ab00 	.word	0x2000ab00
 80152ec:	2000aafc 	.word	0x2000aafc
 80152f0:	e000ed04 	.word	0xe000ed04
 80152f4:	2000aaf8 	.word	0x2000aaf8

080152f8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b09e      	sub	sp, #120	; 0x78
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015300:	4b81      	ldr	r3, [pc, #516]	; (8015508 <_tx_thread_system_suspend+0x210>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015306:	f3ef 8310 	mrs	r3, PRIMASK
 801530a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801530c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801530e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8015310:	b672      	cpsid	i
    return(int_posture);
 8015312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8015314:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801531a:	429a      	cmp	r2, r3
 801531c:	d112      	bne.n	8015344 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015322:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8015324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015326:	2b00      	cmp	r3, #0
 8015328:	d008      	beq.n	801533c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015330:	d004      	beq.n	801533c <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	334c      	adds	r3, #76	; 0x4c
 8015336:	4618      	mov	r0, r3
 8015338:	f000 fafa 	bl	8015930 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	69db      	ldr	r3, [r3, #28]
 8015340:	4a72      	ldr	r2, [pc, #456]	; (801550c <_tx_thread_system_suspend+0x214>)
 8015342:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8015344:	4b72      	ldr	r3, [pc, #456]	; (8015510 <_tx_thread_system_suspend+0x218>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	3b01      	subs	r3, #1
 801534a:	4a71      	ldr	r2, [pc, #452]	; (8015510 <_tx_thread_system_suspend+0x218>)
 801534c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015352:	2b01      	cmp	r3, #1
 8015354:	f040 80a6 	bne.w	80154a4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2200      	movs	r2, #0
 801535c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015362:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6a1b      	ldr	r3, [r3, #32]
 8015368:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801536a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	429a      	cmp	r2, r3
 8015370:	d015      	beq.n	801539e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015376:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8015378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801537a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801537c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801537e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015380:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015382:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8015384:	4a63      	ldr	r2, [pc, #396]	; (8015514 <_tx_thread_system_suspend+0x21c>)
 8015386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	429a      	cmp	r2, r3
 8015390:	d157      	bne.n	8015442 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8015392:	4960      	ldr	r1, [pc, #384]	; (8015514 <_tx_thread_system_suspend+0x21c>)
 8015394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015396:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801539c:	e051      	b.n	8015442 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801539e:	4a5d      	ldr	r2, [pc, #372]	; (8015514 <_tx_thread_system_suspend+0x21c>)
 80153a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153a2:	2100      	movs	r1, #0
 80153a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80153a8:	2201      	movs	r2, #1
 80153aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153ac:	fa02 f303 	lsl.w	r3, r2, r3
 80153b0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80153b2:	4b59      	ldr	r3, [pc, #356]	; (8015518 <_tx_thread_system_suspend+0x220>)
 80153b4:	681a      	ldr	r2, [r3, #0]
 80153b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80153b8:	43db      	mvns	r3, r3
 80153ba:	4013      	ands	r3, r2
 80153bc:	4a56      	ldr	r2, [pc, #344]	; (8015518 <_tx_thread_system_suspend+0x220>)
 80153be:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80153c0:	2300      	movs	r3, #0
 80153c2:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80153c4:	4b54      	ldr	r3, [pc, #336]	; (8015518 <_tx_thread_system_suspend+0x220>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80153ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d12b      	bne.n	8015428 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80153d0:	4b52      	ldr	r3, [pc, #328]	; (801551c <_tx_thread_system_suspend+0x224>)
 80153d2:	2220      	movs	r2, #32
 80153d4:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80153d6:	4b52      	ldr	r3, [pc, #328]	; (8015520 <_tx_thread_system_suspend+0x228>)
 80153d8:	2200      	movs	r2, #0
 80153da:	601a      	str	r2, [r3, #0]
 80153dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80153de:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153e2:	f383 8810 	msr	PRIMASK, r3
}
 80153e6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80153e8:	4b49      	ldr	r3, [pc, #292]	; (8015510 <_tx_thread_system_suspend+0x218>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80153ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f040 8081 	bne.w	80154f8 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80153f6:	4b4b      	ldr	r3, [pc, #300]	; (8015524 <_tx_thread_system_suspend+0x22c>)
 80153f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80153fe:	f3ef 8305 	mrs	r3, IPSR
 8015402:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8015404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8015406:	2b00      	cmp	r3, #0
 8015408:	d10c      	bne.n	8015424 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801540a:	f3ef 8310 	mrs	r3, PRIMASK
 801540e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8015410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8015412:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015414:	b662      	cpsie	i
}
 8015416:	bf00      	nop
 8015418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801541a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541e:	f383 8810 	msr	PRIMASK, r3
}
 8015422:	bf00      	nop
}
 8015424:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8015426:	e067      	b.n	80154f8 <_tx_thread_system_suspend+0x200>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8015428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801542a:	fa93 f3a3 	rbit	r3, r3
 801542e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015432:	fab3 f383 	clz	r3, r3
 8015436:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8015438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801543a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801543c:	4413      	add	r3, r2
 801543e:	4a37      	ldr	r2, [pc, #220]	; (801551c <_tx_thread_system_suspend+0x224>)
 8015440:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8015442:	4b37      	ldr	r3, [pc, #220]	; (8015520 <_tx_thread_system_suspend+0x228>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	687a      	ldr	r2, [r7, #4]
 8015448:	429a      	cmp	r2, r3
 801544a:	d12b      	bne.n	80154a4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801544c:	4b33      	ldr	r3, [pc, #204]	; (801551c <_tx_thread_system_suspend+0x224>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4a30      	ldr	r2, [pc, #192]	; (8015514 <_tx_thread_system_suspend+0x21c>)
 8015452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015456:	4a32      	ldr	r2, [pc, #200]	; (8015520 <_tx_thread_system_suspend+0x228>)
 8015458:	6013      	str	r3, [r2, #0]
 801545a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801545c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015460:	f383 8810 	msr	PRIMASK, r3
}
 8015464:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015466:	4b2a      	ldr	r3, [pc, #168]	; (8015510 <_tx_thread_system_suspend+0x218>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 801546c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801546e:	2b00      	cmp	r3, #0
 8015470:	d144      	bne.n	80154fc <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015472:	4b2c      	ldr	r3, [pc, #176]	; (8015524 <_tx_thread_system_suspend+0x22c>)
 8015474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015478:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801547a:	f3ef 8305 	mrs	r3, IPSR
 801547e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8015480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8015482:	2b00      	cmp	r3, #0
 8015484:	d10c      	bne.n	80154a0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015486:	f3ef 8310 	mrs	r3, PRIMASK
 801548a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 801548e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015490:	b662      	cpsie	i
}
 8015492:	bf00      	nop
 8015494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015496:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015498:	6a3b      	ldr	r3, [r7, #32]
 801549a:	f383 8810 	msr	PRIMASK, r3
}
 801549e:	bf00      	nop
}
 80154a0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80154a2:	e02b      	b.n	80154fc <_tx_thread_system_suspend+0x204>
 80154a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80154a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	f383 8810 	msr	PRIMASK, r3
}
 80154ae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80154b0:	4b1b      	ldr	r3, [pc, #108]	; (8015520 <_tx_thread_system_suspend+0x228>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d022      	beq.n	8015500 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80154ba:	4b15      	ldr	r3, [pc, #84]	; (8015510 <_tx_thread_system_suspend+0x218>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80154c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d11c      	bne.n	8015500 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80154c6:	4b17      	ldr	r3, [pc, #92]	; (8015524 <_tx_thread_system_suspend+0x22c>)
 80154c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80154ce:	f3ef 8305 	mrs	r3, IPSR
 80154d2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80154d4:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d10c      	bne.n	80154f4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80154da:	f3ef 8310 	mrs	r3, PRIMASK
 80154de:	617b      	str	r3, [r7, #20]
    return(posture);
 80154e0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80154e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80154e4:	b662      	cpsie	i
}
 80154e6:	bf00      	nop
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	f383 8810 	msr	PRIMASK, r3
}
 80154f2:	bf00      	nop
}
 80154f4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80154f6:	e003      	b.n	8015500 <_tx_thread_system_suspend+0x208>
                return;
 80154f8:	bf00      	nop
 80154fa:	e002      	b.n	8015502 <_tx_thread_system_suspend+0x20a>
            return;
 80154fc:	bf00      	nop
 80154fe:	e000      	b.n	8015502 <_tx_thread_system_suspend+0x20a>
    return;
 8015500:	bf00      	nop
}
 8015502:	3778      	adds	r7, #120	; 0x78
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	2000aaf8 	.word	0x2000aaf8
 801550c:	2000ab8c 	.word	0x2000ab8c
 8015510:	2000aaf4 	.word	0x2000aaf4
 8015514:	2000aa5c 	.word	0x2000aa5c
 8015518:	2000aae0 	.word	0x2000aae0
 801551c:	2000ab00 	.word	0x2000ab00
 8015520:	2000aafc 	.word	0x2000aafc
 8015524:	e000ed04 	.word	0xe000ed04

08015528 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8015528:	b480      	push	{r7}
 801552a:	b087      	sub	sp, #28
 801552c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801552e:	4b21      	ldr	r3, [pc, #132]	; (80155b4 <_tx_thread_time_slice+0x8c>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015534:	f3ef 8310 	mrs	r3, PRIMASK
 8015538:	60fb      	str	r3, [r7, #12]
    return(posture);
 801553a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801553c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801553e:	b672      	cpsid	i
    return(int_posture);
 8015540:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8015542:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015544:	4b1c      	ldr	r3, [pc, #112]	; (80155b8 <_tx_thread_time_slice+0x90>)
 8015546:	2200      	movs	r2, #0
 8015548:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d024      	beq.n	801559a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015554:	2b00      	cmp	r3, #0
 8015556:	d120      	bne.n	801559a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	69da      	ldr	r2, [r3, #28]
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	699b      	ldr	r3, [r3, #24]
 8015564:	4a15      	ldr	r2, [pc, #84]	; (80155bc <_tx_thread_time_slice+0x94>)
 8015566:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	6a1b      	ldr	r3, [r3, #32]
 801556c:	697a      	ldr	r2, [r7, #20]
 801556e:	429a      	cmp	r2, r3
 8015570:	d013      	beq.n	801559a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801557a:	429a      	cmp	r2, r3
 801557c:	d10d      	bne.n	801559a <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015582:	697a      	ldr	r2, [r7, #20]
 8015584:	6a12      	ldr	r2, [r2, #32]
 8015586:	490e      	ldr	r1, [pc, #56]	; (80155c0 <_tx_thread_time_slice+0x98>)
 8015588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801558c:	4b0d      	ldr	r3, [pc, #52]	; (80155c4 <_tx_thread_time_slice+0x9c>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	4a0b      	ldr	r2, [pc, #44]	; (80155c0 <_tx_thread_time_slice+0x98>)
 8015592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015596:	4a0c      	ldr	r2, [pc, #48]	; (80155c8 <_tx_thread_time_slice+0xa0>)
 8015598:	6013      	str	r3, [r2, #0]
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	f383 8810 	msr	PRIMASK, r3
}
 80155a4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80155a6:	bf00      	nop
 80155a8:	371c      	adds	r7, #28
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr
 80155b2:	bf00      	nop
 80155b4:	2000aaf8 	.word	0x2000aaf8
 80155b8:	2000b064 	.word	0x2000b064
 80155bc:	2000ab8c 	.word	0x2000ab8c
 80155c0:	2000aa5c 	.word	0x2000aa5c
 80155c4:	2000ab00 	.word	0x2000ab00
 80155c8:	2000aafc 	.word	0x2000aafc

080155cc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b08a      	sub	sp, #40	; 0x28
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80155d8:	f3ef 8310 	mrs	r3, PRIMASK
 80155dc:	617b      	str	r3, [r7, #20]
    return(posture);
 80155de:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80155e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80155e2:	b672      	cpsid	i
    return(int_posture);
 80155e4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80155e6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80155e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155ec:	2b04      	cmp	r3, #4
 80155ee:	d10e      	bne.n	801560e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80155f0:	4b13      	ldr	r3, [pc, #76]	; (8015640 <_tx_thread_timeout+0x74>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	3301      	adds	r3, #1
 80155f6:	4a12      	ldr	r2, [pc, #72]	; (8015640 <_tx_thread_timeout+0x74>)
 80155f8:	6013      	str	r3, [r2, #0]
 80155fa:	6a3b      	ldr	r3, [r7, #32]
 80155fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	f383 8810 	msr	PRIMASK, r3
}
 8015604:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015608:	f7ff fd76 	bl	80150f8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801560c:	e013      	b.n	8015636 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015612:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8015614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801561a:	61bb      	str	r3, [r7, #24]
 801561c:	6a3b      	ldr	r3, [r7, #32]
 801561e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	f383 8810 	msr	PRIMASK, r3
}
 8015626:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8015628:	69fb      	ldr	r3, [r7, #28]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d003      	beq.n	8015636 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	69b9      	ldr	r1, [r7, #24]
 8015632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015634:	4798      	blx	r3
}
 8015636:	bf00      	nop
 8015638:	3728      	adds	r7, #40	; 0x28
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop
 8015640:	2000aaf4 	.word	0x2000aaf4

08015644 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b088      	sub	sp, #32
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801564c:	f3ef 8310 	mrs	r3, PRIMASK
 8015650:	617b      	str	r3, [r7, #20]
    return(posture);
 8015652:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8015654:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015656:	b672      	cpsid	i
    return(int_posture);
 8015658:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801565a:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6a1b      	ldr	r3, [r3, #32]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d002      	beq.n	801566a <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 8015664:	2317      	movs	r3, #23
 8015666:	61fb      	str	r3, [r7, #28]
 8015668:	e00d      	b.n	8015686 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d102      	bne.n	8015678 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 8015672:	2317      	movs	r3, #23
 8015674:	61fb      	str	r3, [r7, #28]
 8015676:	e006      	b.n	8015686 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	3308      	adds	r3, #8
 801567c:	4618      	mov	r0, r3
 801567e:	f000 f957 	bl	8015930 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 8015682:	2300      	movs	r3, #0
 8015684:	61fb      	str	r3, [r7, #28]
 8015686:	69bb      	ldr	r3, [r7, #24]
 8015688:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f383 8810 	msr	PRIMASK, r3
}
 8015690:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8015692:	69fb      	ldr	r3, [r7, #28]
}
 8015694:	4618      	mov	r0, r3
 8015696:	3720      	adds	r7, #32
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}

0801569c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b08a      	sub	sp, #40	; 0x28
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	60f8      	str	r0, [r7, #12]
 80156a4:	60b9      	str	r1, [r7, #8]
 80156a6:	607a      	str	r2, [r7, #4]
 80156a8:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 80156aa:	222c      	movs	r2, #44	; 0x2c
 80156ac:	2100      	movs	r1, #0
 80156ae:	68f8      	ldr	r0, [r7, #12]
 80156b0:	f001 fa18 	bl	8016ae4 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	68ba      	ldr	r2, [r7, #8]
 80156b8:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156be:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156c4:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	687a      	ldr	r2, [r7, #4]
 80156ca:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	683a      	ldr	r2, [r7, #0]
 80156d0:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80156d2:	f3ef 8310 	mrs	r3, PRIMASK
 80156d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80156d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80156da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80156dc:	b672      	cpsid	i
    return(int_posture);
 80156de:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80156e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	4a1c      	ldr	r2, [pc, #112]	; (8015758 <_tx_timer_create+0xbc>)
 80156e6:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 80156e8:	4b1c      	ldr	r3, [pc, #112]	; (801575c <_tx_timer_create+0xc0>)
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d109      	bne.n	8015704 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 80156f0:	4a1b      	ldr	r2, [pc, #108]	; (8015760 <_tx_timer_create+0xc4>)
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	68fa      	ldr	r2, [r7, #12]
 8015700:	629a      	str	r2, [r3, #40]	; 0x28
 8015702:	e011      	b.n	8015728 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8015704:	4b16      	ldr	r3, [pc, #88]	; (8015760 <_tx_timer_create+0xc4>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801570a:	6a3b      	ldr	r3, [r7, #32]
 801570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801570e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8015710:	6a3b      	ldr	r3, [r7, #32]
 8015712:	68fa      	ldr	r2, [r7, #12]
 8015714:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8015716:	69fb      	ldr	r3, [r7, #28]
 8015718:	68fa      	ldr	r2, [r7, #12]
 801571a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	69fa      	ldr	r2, [r7, #28]
 8015720:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	6a3a      	ldr	r2, [r7, #32]
 8015726:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8015728:	4b0c      	ldr	r3, [pc, #48]	; (801575c <_tx_timer_create+0xc0>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	3301      	adds	r3, #1
 801572e:	4a0b      	ldr	r2, [pc, #44]	; (801575c <_tx_timer_create+0xc0>)
 8015730:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8015732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015734:	2b01      	cmp	r3, #1
 8015736:	d104      	bne.n	8015742 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	3308      	adds	r3, #8
 801573c:	4618      	mov	r0, r3
 801573e:	f000 f8f7 	bl	8015930 <_tx_timer_system_activate>
 8015742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015744:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015746:	693b      	ldr	r3, [r7, #16]
 8015748:	f383 8810 	msr	PRIMASK, r3
}
 801574c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801574e:	2300      	movs	r3, #0
}
 8015750:	4618      	mov	r0, r3
 8015752:	3728      	adds	r7, #40	; 0x28
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	4154494d 	.word	0x4154494d
 801575c:	2000b060 	.word	0x2000b060
 8015760:	2000ac54 	.word	0x2000ac54

08015764 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b088      	sub	sp, #32
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801576c:	f3ef 8310 	mrs	r3, PRIMASK
 8015770:	613b      	str	r3, [r7, #16]
    return(posture);
 8015772:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8015774:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015776:	b672      	cpsid	i
    return(int_posture);
 8015778:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 801577a:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	6a1b      	ldr	r3, [r3, #32]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d004      	beq.n	801578e <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	3308      	adds	r3, #8
 8015788:	4618      	mov	r0, r3
 801578a:	f000 f933 	bl	80159f4 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2200      	movs	r2, #0
 8015792:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 8015794:	4b15      	ldr	r3, [pc, #84]	; (80157ec <_tx_timer_delete+0x88>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	3b01      	subs	r3, #1
 801579a:	4a14      	ldr	r2, [pc, #80]	; (80157ec <_tx_timer_delete+0x88>)
 801579c:	6013      	str	r3, [r2, #0]
    
    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801579e:	4b13      	ldr	r3, [pc, #76]	; (80157ec <_tx_timer_delete+0x88>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d103      	bne.n	80157ae <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 80157a6:	4b12      	ldr	r3, [pc, #72]	; (80157f0 <_tx_timer_delete+0x8c>)
 80157a8:	2200      	movs	r2, #0
 80157aa:	601a      	str	r2, [r3, #0]
 80157ac:	e013      	b.n	80157d6 <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b2:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157b8:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 80157ba:	69bb      	ldr	r3, [r7, #24]
 80157bc:	697a      	ldr	r2, [r7, #20]
 80157be:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	69ba      	ldr	r2, [r7, #24]
 80157c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 80157c6:	4b0a      	ldr	r3, [pc, #40]	; (80157f0 <_tx_timer_delete+0x8c>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d102      	bne.n	80157d6 <_tx_timer_delete+0x72>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 80157d0:	4a07      	ldr	r2, [pc, #28]	; (80157f0 <_tx_timer_delete+0x8c>)
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	6013      	str	r3, [r2, #0]
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	f383 8810 	msr	PRIMASK, r3
}
 80157e0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80157e2:	2300      	movs	r3, #0
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3720      	adds	r7, #32
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	2000b060 	.word	0x2000b060
 80157f0:	2000ac54 	.word	0x2000ac54

080157f4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80157fa:	f3ef 8310 	mrs	r3, PRIMASK
 80157fe:	607b      	str	r3, [r7, #4]
    return(posture);
 8015800:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8015802:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015804:	b672      	cpsid	i
    return(int_posture);
 8015806:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8015808:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801580a:	4b09      	ldr	r3, [pc, #36]	; (8015830 <_tx_timer_expiration_process+0x3c>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	3301      	adds	r3, #1
 8015810:	4a07      	ldr	r2, [pc, #28]	; (8015830 <_tx_timer_expiration_process+0x3c>)
 8015812:	6013      	str	r3, [r2, #0]
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	f383 8810 	msr	PRIMASK, r3
}
 801581e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8015820:	4804      	ldr	r0, [pc, #16]	; (8015834 <_tx_timer_expiration_process+0x40>)
 8015822:	f7ff fc69 	bl	80150f8 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8015826:	bf00      	nop
 8015828:	3710      	adds	r7, #16
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}
 801582e:	bf00      	nop
 8015830:	2000aaf4 	.word	0x2000aaf4
 8015834:	2000ab98 	.word	0x2000ab98

08015838 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8015838:	b590      	push	{r4, r7, lr}
 801583a:	b089      	sub	sp, #36	; 0x24
 801583c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801583e:	4b28      	ldr	r3, [pc, #160]	; (80158e0 <_tx_timer_initialize+0xa8>)
 8015840:	2200      	movs	r2, #0
 8015842:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8015844:	4b27      	ldr	r3, [pc, #156]	; (80158e4 <_tx_timer_initialize+0xac>)
 8015846:	2200      	movs	r2, #0
 8015848:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801584a:	4b27      	ldr	r3, [pc, #156]	; (80158e8 <_tx_timer_initialize+0xb0>)
 801584c:	2200      	movs	r2, #0
 801584e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8015850:	4b26      	ldr	r3, [pc, #152]	; (80158ec <_tx_timer_initialize+0xb4>)
 8015852:	2200      	movs	r2, #0
 8015854:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8015856:	4b26      	ldr	r3, [pc, #152]	; (80158f0 <_tx_timer_initialize+0xb8>)
 8015858:	2200      	movs	r2, #0
 801585a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801585c:	2280      	movs	r2, #128	; 0x80
 801585e:	2100      	movs	r1, #0
 8015860:	4824      	ldr	r0, [pc, #144]	; (80158f4 <_tx_timer_initialize+0xbc>)
 8015862:	f001 f93f 	bl	8016ae4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8015866:	4b24      	ldr	r3, [pc, #144]	; (80158f8 <_tx_timer_initialize+0xc0>)
 8015868:	4a22      	ldr	r2, [pc, #136]	; (80158f4 <_tx_timer_initialize+0xbc>)
 801586a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801586c:	4b23      	ldr	r3, [pc, #140]	; (80158fc <_tx_timer_initialize+0xc4>)
 801586e:	4a21      	ldr	r2, [pc, #132]	; (80158f4 <_tx_timer_initialize+0xbc>)
 8015870:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8015872:	4b23      	ldr	r3, [pc, #140]	; (8015900 <_tx_timer_initialize+0xc8>)
 8015874:	4a23      	ldr	r2, [pc, #140]	; (8015904 <_tx_timer_initialize+0xcc>)
 8015876:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8015878:	4b21      	ldr	r3, [pc, #132]	; (8015900 <_tx_timer_initialize+0xc8>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	3304      	adds	r3, #4
 801587e:	4a20      	ldr	r2, [pc, #128]	; (8015900 <_tx_timer_initialize+0xc8>)
 8015880:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8015882:	4b21      	ldr	r3, [pc, #132]	; (8015908 <_tx_timer_initialize+0xd0>)
 8015884:	4a21      	ldr	r2, [pc, #132]	; (801590c <_tx_timer_initialize+0xd4>)
 8015886:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8015888:	4b21      	ldr	r3, [pc, #132]	; (8015910 <_tx_timer_initialize+0xd8>)
 801588a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801588e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8015890:	4b20      	ldr	r3, [pc, #128]	; (8015914 <_tx_timer_initialize+0xdc>)
 8015892:	2200      	movs	r2, #0
 8015894:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8015896:	4b1c      	ldr	r3, [pc, #112]	; (8015908 <_tx_timer_initialize+0xd0>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	4a1d      	ldr	r2, [pc, #116]	; (8015910 <_tx_timer_initialize+0xd8>)
 801589c:	6812      	ldr	r2, [r2, #0]
 801589e:	491d      	ldr	r1, [pc, #116]	; (8015914 <_tx_timer_initialize+0xdc>)
 80158a0:	6809      	ldr	r1, [r1, #0]
 80158a2:	481c      	ldr	r0, [pc, #112]	; (8015914 <_tx_timer_initialize+0xdc>)
 80158a4:	6800      	ldr	r0, [r0, #0]
 80158a6:	2400      	movs	r4, #0
 80158a8:	9405      	str	r4, [sp, #20]
 80158aa:	2400      	movs	r4, #0
 80158ac:	9404      	str	r4, [sp, #16]
 80158ae:	9003      	str	r0, [sp, #12]
 80158b0:	9102      	str	r1, [sp, #8]
 80158b2:	9201      	str	r2, [sp, #4]
 80158b4:	9300      	str	r3, [sp, #0]
 80158b6:	4b18      	ldr	r3, [pc, #96]	; (8015918 <_tx_timer_initialize+0xe0>)
 80158b8:	4a18      	ldr	r2, [pc, #96]	; (801591c <_tx_timer_initialize+0xe4>)
 80158ba:	4919      	ldr	r1, [pc, #100]	; (8015920 <_tx_timer_initialize+0xe8>)
 80158bc:	4819      	ldr	r0, [pc, #100]	; (8015924 <_tx_timer_initialize+0xec>)
 80158be:	f7fe ffb3 	bl	8014828 <_tx_thread_create>
 80158c2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d1e5      	bne.n	8015896 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80158ca:	4b17      	ldr	r3, [pc, #92]	; (8015928 <_tx_timer_initialize+0xf0>)
 80158cc:	2200      	movs	r2, #0
 80158ce:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80158d0:	4b16      	ldr	r3, [pc, #88]	; (801592c <_tx_timer_initialize+0xf4>)
 80158d2:	2200      	movs	r2, #0
 80158d4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80158d6:	bf00      	nop
 80158d8:	370c      	adds	r7, #12
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd90      	pop	{r4, r7, pc}
 80158de:	bf00      	nop
 80158e0:	2000b068 	.word	0x2000b068
 80158e4:	2000ab8c 	.word	0x2000ab8c
 80158e8:	2000b064 	.word	0x2000b064
 80158ec:	2000ab88 	.word	0x2000ab88
 80158f0:	2000ac4c 	.word	0x2000ac4c
 80158f4:	2000ab08 	.word	0x2000ab08
 80158f8:	2000ac50 	.word	0x2000ac50
 80158fc:	2000ab04 	.word	0x2000ab04
 8015900:	2000ab94 	.word	0x2000ab94
 8015904:	2000ab84 	.word	0x2000ab84
 8015908:	2000b05c 	.word	0x2000b05c
 801590c:	2000ac5c 	.word	0x2000ac5c
 8015910:	2000ac58 	.word	0x2000ac58
 8015914:	2000ab90 	.word	0x2000ab90
 8015918:	4154494d 	.word	0x4154494d
 801591c:	08015a65 	.word	0x08015a65
 8015920:	08017e94 	.word	0x08017e94
 8015924:	2000ab98 	.word	0x2000ab98
 8015928:	2000ac54 	.word	0x2000ac54
 801592c:	2000b060 	.word	0x2000b060

08015930 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8015930:	b480      	push	{r7}
 8015932:	b089      	sub	sp, #36	; 0x24
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d04a      	beq.n	80159da <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801594a:	d046      	beq.n	80159da <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	699b      	ldr	r3, [r3, #24]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d142      	bne.n	80159da <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	2b20      	cmp	r3, #32
 8015958:	d902      	bls.n	8015960 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801595a:	231f      	movs	r3, #31
 801595c:	61bb      	str	r3, [r7, #24]
 801595e:	e002      	b.n	8015966 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	3b01      	subs	r3, #1
 8015964:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8015966:	4b20      	ldr	r3, [pc, #128]	; (80159e8 <_tx_timer_system_activate+0xb8>)
 8015968:	681a      	ldr	r2, [r3, #0]
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	009b      	lsls	r3, r3, #2
 801596e:	4413      	add	r3, r2
 8015970:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8015972:	4b1e      	ldr	r3, [pc, #120]	; (80159ec <_tx_timer_system_activate+0xbc>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	69fa      	ldr	r2, [r7, #28]
 8015978:	429a      	cmp	r2, r3
 801597a:	d30b      	bcc.n	8015994 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801597c:	4b1b      	ldr	r3, [pc, #108]	; (80159ec <_tx_timer_system_activate+0xbc>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	69fa      	ldr	r2, [r7, #28]
 8015982:	1ad3      	subs	r3, r2, r3
 8015984:	109b      	asrs	r3, r3, #2
 8015986:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8015988:	4b19      	ldr	r3, [pc, #100]	; (80159f0 <_tx_timer_system_activate+0xc0>)
 801598a:	681a      	ldr	r2, [r3, #0]
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	4413      	add	r3, r2
 8015992:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d109      	bne.n	80159b0 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	687a      	ldr	r2, [r7, #4]
 80159a0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80159a8:	69fb      	ldr	r3, [r7, #28]
 80159aa:	687a      	ldr	r2, [r7, #4]
 80159ac:	601a      	str	r2, [r3, #0]
 80159ae:	e011      	b.n	80159d4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80159b0:	69fb      	ldr	r3, [r7, #28]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	695b      	ldr	r3, [r3, #20]
 80159ba:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	687a      	ldr	r2, [r7, #4]
 80159c6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	68fa      	ldr	r2, [r7, #12]
 80159cc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	68ba      	ldr	r2, [r7, #8]
 80159d2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	69fa      	ldr	r2, [r7, #28]
 80159d8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80159da:	bf00      	nop
 80159dc:	3724      	adds	r7, #36	; 0x24
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr
 80159e6:	bf00      	nop
 80159e8:	2000ab04 	.word	0x2000ab04
 80159ec:	2000ab94 	.word	0x2000ab94
 80159f0:	2000ac50 	.word	0x2000ac50

080159f4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b087      	sub	sp, #28
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	699b      	ldr	r3, [r3, #24]
 8015a00:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d026      	beq.n	8015a56 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	691b      	ldr	r3, [r3, #16]
 8015a0c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d108      	bne.n	8015a28 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d117      	bne.n	8015a50 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	2200      	movs	r2, #0
 8015a24:	601a      	str	r2, [r3, #0]
 8015a26:	e013      	b.n	8015a50 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	695b      	ldr	r3, [r3, #20]
 8015a2c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	693a      	ldr	r2, [r7, #16]
 8015a38:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	429a      	cmp	r2, r3
 8015a42:	d105      	bne.n	8015a50 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	697a      	ldr	r2, [r7, #20]
 8015a48:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	693a      	ldr	r2, [r7, #16]
 8015a4e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2200      	movs	r2, #0
 8015a54:	619a      	str	r2, [r3, #24]
    }
}
 8015a56:	bf00      	nop
 8015a58:	371c      	adds	r7, #28
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a60:	4770      	bx	lr
	...

08015a64 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b098      	sub	sp, #96	; 0x60
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	4a73      	ldr	r2, [pc, #460]	; (8015c40 <_tx_timer_thread_entry+0x1dc>)
 8015a74:	4293      	cmp	r3, r2
 8015a76:	f040 80de 	bne.w	8015c36 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8015a7e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8015a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8015a82:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8015a84:	b672      	cpsid	i
    return(int_posture);
 8015a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8015a88:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8015a8a:	4b6e      	ldr	r3, [pc, #440]	; (8015c44 <_tx_timer_thread_entry+0x1e0>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d003      	beq.n	8015aa0 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	f107 020c 	add.w	r2, r7, #12
 8015a9e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8015aa0:	4b68      	ldr	r3, [pc, #416]	; (8015c44 <_tx_timer_thread_entry+0x1e0>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8015aa8:	4b66      	ldr	r3, [pc, #408]	; (8015c44 <_tx_timer_thread_entry+0x1e0>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	3304      	adds	r3, #4
 8015aae:	4a65      	ldr	r2, [pc, #404]	; (8015c44 <_tx_timer_thread_entry+0x1e0>)
 8015ab0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8015ab2:	4b64      	ldr	r3, [pc, #400]	; (8015c44 <_tx_timer_thread_entry+0x1e0>)
 8015ab4:	681a      	ldr	r2, [r3, #0]
 8015ab6:	4b64      	ldr	r3, [pc, #400]	; (8015c48 <_tx_timer_thread_entry+0x1e4>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d103      	bne.n	8015ac6 <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8015abe:	4b63      	ldr	r3, [pc, #396]	; (8015c4c <_tx_timer_thread_entry+0x1e8>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	4a60      	ldr	r2, [pc, #384]	; (8015c44 <_tx_timer_thread_entry+0x1e0>)
 8015ac4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8015ac6:	4b62      	ldr	r3, [pc, #392]	; (8015c50 <_tx_timer_thread_entry+0x1ec>)
 8015ac8:	2200      	movs	r2, #0
 8015aca:	601a      	str	r2, [r3, #0]
 8015acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ace:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad2:	f383 8810 	msr	PRIMASK, r3
}
 8015ad6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8015adc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8015ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8015ae0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8015ae2:	b672      	cpsid	i
    return(int_posture);
 8015ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8015ae6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8015ae8:	e07f      	b.n	8015bea <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	691b      	ldr	r3, [r3, #16]
 8015af2:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8015af4:	2300      	movs	r3, #0
 8015af6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8015af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d102      	bne.n	8015b06 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8015b00:	2300      	movs	r3, #0
 8015b02:	60fb      	str	r3, [r7, #12]
 8015b04:	e00e      	b.n	8015b24 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8015b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b08:	695b      	ldr	r3, [r3, #20]
 8015b0a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b10:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b16:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8015b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b1a:	f107 020c 	add.w	r2, r7, #12
 8015b1e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8015b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b22:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8015b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	2b20      	cmp	r3, #32
 8015b2a:	d911      	bls.n	8015b50 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8015b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8015b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b36:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b3e:	f107 0208 	add.w	r2, r7, #8
 8015b42:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8015b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b48:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8015b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b4c:	60bb      	str	r3, [r7, #8]
 8015b4e:	e01a      	b.n	8015b86 <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8015b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b52:	689b      	ldr	r3, [r3, #8]
 8015b54:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8015b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8015b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b5e:	685a      	ldr	r2, [r3, #4]
 8015b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b62:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8015b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d009      	beq.n	8015b80 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b6e:	f107 0208 	add.w	r2, r7, #8
 8015b72:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8015b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b78:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8015b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b7c:	60bb      	str	r3, [r7, #8]
 8015b7e:	e002      	b.n	8015b86 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8015b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b82:	2200      	movs	r2, #0
 8015b84:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8015b86:	4a33      	ldr	r2, [pc, #204]	; (8015c54 <_tx_timer_thread_entry+0x1f0>)
 8015b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b8a:	6013      	str	r3, [r2, #0]
 8015b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b92:	f383 8810 	msr	PRIMASK, r3
}
 8015b96:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8015b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d002      	beq.n	8015ba4 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 8015b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015ba0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015ba2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8015ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015bac:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8015bae:	b672      	cpsid	i
    return(int_posture);
 8015bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015bb2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8015bb4:	4b27      	ldr	r3, [pc, #156]	; (8015c54 <_tx_timer_thread_entry+0x1f0>)
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d105      	bne.n	8015bce <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8015bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8015bc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015bca:	f7ff feb1 	bl	8015930 <_tx_timer_system_activate>
 8015bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015bd0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	f383 8810 	msr	PRIMASK, r3
}
 8015bd8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015bda:	f3ef 8310 	mrs	r3, PRIMASK
 8015bde:	623b      	str	r3, [r7, #32]
    return(posture);
 8015be0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015be2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015be4:	b672      	cpsid	i
    return(int_posture);
 8015be6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015be8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f47f af7c 	bne.w	8015aea <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8015bf2:	4b17      	ldr	r3, [pc, #92]	; (8015c50 <_tx_timer_thread_entry+0x1ec>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d116      	bne.n	8015c28 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8015bfa:	4b17      	ldr	r3, [pc, #92]	; (8015c58 <_tx_timer_thread_entry+0x1f4>)
 8015bfc:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8015bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c00:	2203      	movs	r2, #3
 8015c02:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c06:	2201      	movs	r2, #1
 8015c08:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8015c0a:	4b14      	ldr	r3, [pc, #80]	; (8015c5c <_tx_timer_thread_entry+0x1f8>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	3301      	adds	r3, #1
 8015c10:	4a12      	ldr	r2, [pc, #72]	; (8015c5c <_tx_timer_thread_entry+0x1f8>)
 8015c12:	6013      	str	r3, [r2, #0]
 8015c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c18:	697b      	ldr	r3, [r7, #20]
 8015c1a:	f383 8810 	msr	PRIMASK, r3
}
 8015c1e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8015c20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015c22:	f7ff fb69 	bl	80152f8 <_tx_thread_system_suspend>
 8015c26:	e728      	b.n	8015a7a <_tx_timer_thread_entry+0x16>
 8015c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	f383 8810 	msr	PRIMASK, r3
}
 8015c32:	bf00      	nop
            TX_DISABLE
 8015c34:	e721      	b.n	8015a7a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8015c36:	bf00      	nop
 8015c38:	3760      	adds	r7, #96	; 0x60
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	4154494d 	.word	0x4154494d
 8015c44:	2000ab04 	.word	0x2000ab04
 8015c48:	2000ab94 	.word	0x2000ab94
 8015c4c:	2000ac50 	.word	0x2000ac50
 8015c50:	2000ab88 	.word	0x2000ab88
 8015c54:	2000ac4c 	.word	0x2000ac4c
 8015c58:	2000ab98 	.word	0x2000ab98
 8015c5c:	2000aaf4 	.word	0x2000aaf4

08015c60 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b08a      	sub	sp, #40	; 0x28
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	60b9      	str	r1, [r7, #8]
 8015c6a:	607a      	str	r2, [r7, #4]
 8015c6c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015c6e:	2300      	movs	r3, #0
 8015c70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d102      	bne.n	8015c7e <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015c78:	2302      	movs	r3, #2
 8015c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c7c:	e029      	b.n	8015cd2 <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	4a2d      	ldr	r2, [pc, #180]	; (8015d38 <_txe_byte_allocate+0xd8>)
 8015c84:	4293      	cmp	r3, r2
 8015c86:	d002      	beq.n	8015c8e <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015c88:	2302      	movs	r3, #2
 8015c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c8c:	e021      	b.n	8015cd2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8015c8e:	68bb      	ldr	r3, [r7, #8]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d102      	bne.n	8015c9a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015c94:	2303      	movs	r3, #3
 8015c96:	627b      	str	r3, [r7, #36]	; 0x24
 8015c98:	e01b      	b.n	8015cd2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d102      	bne.n	8015ca6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015ca0:	2305      	movs	r3, #5
 8015ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8015ca4:	e015      	b.n	8015cd2 <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	69db      	ldr	r3, [r3, #28]
 8015caa:	687a      	ldr	r2, [r7, #4]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d902      	bls.n	8015cb6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015cb0:	2305      	movs	r3, #5
 8015cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8015cb4:	e00d      	b.n	8015cd2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015cb6:	683b      	ldr	r3, [r7, #0]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00a      	beq.n	8015cd2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cbc:	f3ef 8305 	mrs	r3, IPSR
 8015cc0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015cc2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015cc4:	4b1d      	ldr	r3, [pc, #116]	; (8015d3c <_txe_byte_allocate+0xdc>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	4313      	orrs	r3, r2
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d001      	beq.n	8015cd2 <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015cce:	2304      	movs	r3, #4
 8015cd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8015cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d108      	bne.n	8015cea <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015cd8:	4b19      	ldr	r3, [pc, #100]	; (8015d40 <_txe_byte_allocate+0xe0>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8015cde:	6a3b      	ldr	r3, [r7, #32]
 8015ce0:	4a18      	ldr	r2, [pc, #96]	; (8015d44 <_txe_byte_allocate+0xe4>)
 8015ce2:	4293      	cmp	r3, r2
 8015ce4:	d101      	bne.n	8015cea <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015ce6:	2313      	movs	r3, #19
 8015ce8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8015cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d114      	bne.n	8015d1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cf0:	f3ef 8305 	mrs	r3, IPSR
 8015cf4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015cf6:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015cf8:	4b10      	ldr	r3, [pc, #64]	; (8015d3c <_txe_byte_allocate+0xdc>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	4313      	orrs	r3, r2
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d00b      	beq.n	8015d1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015d02:	f3ef 8305 	mrs	r3, IPSR
 8015d06:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015d08:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015d0a:	4b0c      	ldr	r3, [pc, #48]	; (8015d3c <_txe_byte_allocate+0xdc>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	4313      	orrs	r3, r2
 8015d10:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015d14:	d201      	bcs.n	8015d1a <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015d16:	2313      	movs	r3, #19
 8015d18:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d106      	bne.n	8015d2e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	687a      	ldr	r2, [r7, #4]
 8015d24:	68b9      	ldr	r1, [r7, #8]
 8015d26:	68f8      	ldr	r0, [r7, #12]
 8015d28:	f7fc fe16 	bl	8012958 <_tx_byte_allocate>
 8015d2c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8015d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3728      	adds	r7, #40	; 0x28
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	42595445 	.word	0x42595445
 8015d3c:	20000094 	.word	0x20000094
 8015d40:	2000aaf8 	.word	0x2000aaf8
 8015d44:	2000ab98 	.word	0x2000ab98

08015d48 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b092      	sub	sp, #72	; 0x48
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	607a      	str	r2, [r7, #4]
 8015d54:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015d56:	2300      	movs	r3, #0
 8015d58:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d102      	bne.n	8015d66 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d60:	2302      	movs	r3, #2
 8015d62:	647b      	str	r3, [r7, #68]	; 0x44
 8015d64:	e075      	b.n	8015e52 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8015d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d68:	2b34      	cmp	r3, #52	; 0x34
 8015d6a:	d002      	beq.n	8015d72 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d6c:	2302      	movs	r3, #2
 8015d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8015d70:	e06f      	b.n	8015e52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015d72:	f3ef 8310 	mrs	r3, PRIMASK
 8015d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015d7c:	b672      	cpsid	i
    return(int_posture);
 8015d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8015d80:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015d82:	4b3b      	ldr	r3, [pc, #236]	; (8015e70 <_txe_byte_pool_create+0x128>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	3301      	adds	r3, #1
 8015d88:	4a39      	ldr	r2, [pc, #228]	; (8015e70 <_txe_byte_pool_create+0x128>)
 8015d8a:	6013      	str	r3, [r2, #0]
 8015d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d8e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d92:	f383 8810 	msr	PRIMASK, r3
}
 8015d96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8015d98:	4b36      	ldr	r3, [pc, #216]	; (8015e74 <_txe_byte_pool_create+0x12c>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015d9e:	2300      	movs	r3, #0
 8015da0:	643b      	str	r3, [r7, #64]	; 0x40
 8015da2:	e009      	b.n	8015db8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8015da4:	68fa      	ldr	r2, [r7, #12]
 8015da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d00b      	beq.n	8015dc4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8015dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015db4:	3301      	adds	r3, #1
 8015db6:	643b      	str	r3, [r7, #64]	; 0x40
 8015db8:	4b2f      	ldr	r3, [pc, #188]	; (8015e78 <_txe_byte_pool_create+0x130>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d3f0      	bcc.n	8015da4 <_txe_byte_pool_create+0x5c>
 8015dc2:	e000      	b.n	8015dc6 <_txe_byte_pool_create+0x7e>
                break;
 8015dc4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8015dca:	623b      	str	r3, [r7, #32]
    return(posture);
 8015dcc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015dce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015dd0:	b672      	cpsid	i
    return(int_posture);
 8015dd2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015dd4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015dd6:	4b26      	ldr	r3, [pc, #152]	; (8015e70 <_txe_byte_pool_create+0x128>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	3b01      	subs	r3, #1
 8015ddc:	4a24      	ldr	r2, [pc, #144]	; (8015e70 <_txe_byte_pool_create+0x128>)
 8015dde:	6013      	str	r3, [r2, #0]
 8015de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de6:	f383 8810 	msr	PRIMASK, r3
}
 8015dea:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015dec:	f7ff f94a 	bl	8015084 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8015df0:	68fa      	ldr	r2, [r7, #12]
 8015df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d102      	bne.n	8015dfe <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8015df8:	2302      	movs	r3, #2
 8015dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8015dfc:	e029      	b.n	8015e52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d102      	bne.n	8015e0a <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8015e04:	2303      	movs	r3, #3
 8015e06:	647b      	str	r3, [r7, #68]	; 0x44
 8015e08:	e023      	b.n	8015e52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	2b63      	cmp	r3, #99	; 0x63
 8015e0e:	d802      	bhi.n	8015e16 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8015e10:	2305      	movs	r3, #5
 8015e12:	647b      	str	r3, [r7, #68]	; 0x44
 8015e14:	e01d      	b.n	8015e52 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015e16:	4b19      	ldr	r3, [pc, #100]	; (8015e7c <_txe_byte_pool_create+0x134>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e1e:	4a18      	ldr	r2, [pc, #96]	; (8015e80 <_txe_byte_pool_create+0x138>)
 8015e20:	4293      	cmp	r3, r2
 8015e22:	d101      	bne.n	8015e28 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015e24:	2313      	movs	r3, #19
 8015e26:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015e28:	f3ef 8305 	mrs	r3, IPSR
 8015e2c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015e2e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015e30:	4b14      	ldr	r3, [pc, #80]	; (8015e84 <_txe_byte_pool_create+0x13c>)
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	4313      	orrs	r3, r2
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d00b      	beq.n	8015e52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015e3a:	f3ef 8305 	mrs	r3, IPSR
 8015e3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015e40:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015e42:	4b10      	ldr	r3, [pc, #64]	; (8015e84 <_txe_byte_pool_create+0x13c>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	4313      	orrs	r3, r2
 8015e48:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015e4c:	d201      	bcs.n	8015e52 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015e4e:	2313      	movs	r3, #19
 8015e50:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d106      	bne.n	8015e66 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	687a      	ldr	r2, [r7, #4]
 8015e5c:	68b9      	ldr	r1, [r7, #8]
 8015e5e:	68f8      	ldr	r0, [r7, #12]
 8015e60:	f7fc febc 	bl	8012bdc <_tx_byte_pool_create>
 8015e64:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	3748      	adds	r7, #72	; 0x48
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}
 8015e70:	2000aaf4 	.word	0x2000aaf4
 8015e74:	2000aa3c 	.word	0x2000aa3c
 8015e78:	2000aa58 	.word	0x2000aa58
 8015e7c:	2000aaf8 	.word	0x2000aaf8
 8015e80:	2000ab98 	.word	0x2000ab98
 8015e84:	20000094 	.word	0x20000094

08015e88 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b092      	sub	sp, #72	; 0x48
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	60f8      	str	r0, [r7, #12]
 8015e90:	60b9      	str	r1, [r7, #8]
 8015e92:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015e94:	2300      	movs	r3, #0
 8015e96:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d102      	bne.n	8015ea4 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8015e9e:	2306      	movs	r3, #6
 8015ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8015ea2:	e069      	b.n	8015f78 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2b28      	cmp	r3, #40	; 0x28
 8015ea8:	d002      	beq.n	8015eb0 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8015eaa:	2306      	movs	r3, #6
 8015eac:	647b      	str	r3, [r7, #68]	; 0x44
 8015eae:	e063      	b.n	8015f78 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8015eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015eba:	b672      	cpsid	i
    return(int_posture);
 8015ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015ebe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015ec0:	4b34      	ldr	r3, [pc, #208]	; (8015f94 <_txe_event_flags_create+0x10c>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	4a33      	ldr	r2, [pc, #204]	; (8015f94 <_txe_event_flags_create+0x10c>)
 8015ec8:	6013      	str	r3, [r2, #0]
 8015eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ecc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed0:	f383 8810 	msr	PRIMASK, r3
}
 8015ed4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8015ed6:	4b30      	ldr	r3, [pc, #192]	; (8015f98 <_txe_event_flags_create+0x110>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8015edc:	2300      	movs	r3, #0
 8015ede:	643b      	str	r3, [r7, #64]	; 0x40
 8015ee0:	e009      	b.n	8015ef6 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8015ee2:	68fa      	ldr	r2, [r7, #12]
 8015ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d00b      	beq.n	8015f02 <_txe_event_flags_create+0x7a>
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8015eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eec:	699b      	ldr	r3, [r3, #24]
 8015eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8015ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ef2:	3301      	adds	r3, #1
 8015ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8015ef6:	4b29      	ldr	r3, [pc, #164]	; (8015f9c <_txe_event_flags_create+0x114>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d3f0      	bcc.n	8015ee2 <_txe_event_flags_create+0x5a>
 8015f00:	e000      	b.n	8015f04 <_txe_event_flags_create+0x7c>
                break;
 8015f02:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015f04:	f3ef 8310 	mrs	r3, PRIMASK
 8015f08:	623b      	str	r3, [r7, #32]
    return(posture);
 8015f0a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015f0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015f0e:	b672      	cpsid	i
    return(int_posture);
 8015f10:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015f12:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015f14:	4b1f      	ldr	r3, [pc, #124]	; (8015f94 <_txe_event_flags_create+0x10c>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	3b01      	subs	r3, #1
 8015f1a:	4a1e      	ldr	r2, [pc, #120]	; (8015f94 <_txe_event_flags_create+0x10c>)
 8015f1c:	6013      	str	r3, [r2, #0]
 8015f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f24:	f383 8810 	msr	PRIMASK, r3
}
 8015f28:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015f2a:	f7ff f8ab 	bl	8015084 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8015f2e:	68fa      	ldr	r2, [r7, #12]
 8015f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d102      	bne.n	8015f3c <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 8015f36:	2306      	movs	r3, #6
 8015f38:	647b      	str	r3, [r7, #68]	; 0x44
 8015f3a:	e01d      	b.n	8015f78 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015f3c:	4b18      	ldr	r3, [pc, #96]	; (8015fa0 <_txe_event_flags_create+0x118>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f44:	4a17      	ldr	r2, [pc, #92]	; (8015fa4 <_txe_event_flags_create+0x11c>)
 8015f46:	4293      	cmp	r3, r2
 8015f48:	d101      	bne.n	8015f4e <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015f4a:	2313      	movs	r3, #19
 8015f4c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f4e:	f3ef 8305 	mrs	r3, IPSR
 8015f52:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015f54:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015f56:	4b14      	ldr	r3, [pc, #80]	; (8015fa8 <_txe_event_flags_create+0x120>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	4313      	orrs	r3, r2
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00b      	beq.n	8015f78 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f60:	f3ef 8305 	mrs	r3, IPSR
 8015f64:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015f66:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015f68:	4b0f      	ldr	r3, [pc, #60]	; (8015fa8 <_txe_event_flags_create+0x120>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4313      	orrs	r3, r2
 8015f6e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015f72:	d201      	bcs.n	8015f78 <_txe_event_flags_create+0xf0>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015f74:	2313      	movs	r3, #19
 8015f76:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d104      	bne.n	8015f88 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8015f7e:	68b9      	ldr	r1, [r7, #8]
 8015f80:	68f8      	ldr	r0, [r7, #12]
 8015f82:	f7fd f855 	bl	8013030 <_tx_event_flags_create>
 8015f86:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3748      	adds	r7, #72	; 0x48
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	2000aaf4 	.word	0x2000aaf4
 8015f98:	2000aa28 	.word	0x2000aa28
 8015f9c:	2000aa4c 	.word	0x2000aa4c
 8015fa0:	2000aaf8 	.word	0x2000aaf8
 8015fa4:	2000ab98 	.word	0x2000ab98
 8015fa8:	20000094 	.word	0x20000094

08015fac <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b08a      	sub	sp, #40	; 0x28
 8015fb0:	af02      	add	r7, sp, #8
 8015fb2:	60f8      	str	r0, [r7, #12]
 8015fb4:	60b9      	str	r1, [r7, #8]
 8015fb6:	607a      	str	r2, [r7, #4]
 8015fb8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d102      	bne.n	8015fca <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8015fc4:	2306      	movs	r3, #6
 8015fc6:	61fb      	str	r3, [r7, #28]
 8015fc8:	e025      	b.n	8016016 <_txe_event_flags_get+0x6a>
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	4a1e      	ldr	r2, [pc, #120]	; (8016048 <_txe_event_flags_get+0x9c>)
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	d002      	beq.n	8015fda <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8015fd4:	2306      	movs	r3, #6
 8015fd6:	61fb      	str	r3, [r7, #28]
 8015fd8:	e01d      	b.n	8016016 <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d102      	bne.n	8015fe6 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015fe0:	2303      	movs	r3, #3
 8015fe2:	61fb      	str	r3, [r7, #28]
 8015fe4:	e017      	b.n	8016016 <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d014      	beq.n	8016016 <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015fec:	f3ef 8305 	mrs	r3, IPSR
 8015ff0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015ff2:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015ff4:	4b15      	ldr	r3, [pc, #84]	; (801604c <_txe_event_flags_get+0xa0>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	4313      	orrs	r3, r2
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d002      	beq.n	8016004 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015ffe:	2304      	movs	r3, #4
 8016000:	61fb      	str	r3, [r7, #28]
 8016002:	e008      	b.n	8016016 <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016004:	4b12      	ldr	r3, [pc, #72]	; (8016050 <_txe_event_flags_get+0xa4>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801600a:	69bb      	ldr	r3, [r7, #24]
 801600c:	4a11      	ldr	r2, [pc, #68]	; (8016054 <_txe_event_flags_get+0xa8>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d101      	bne.n	8016016 <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016012:	2304      	movs	r3, #4
 8016014:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8016016:	69fb      	ldr	r3, [r7, #28]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d104      	bne.n	8016026 <_txe_event_flags_get+0x7a>
    {
    
        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2b03      	cmp	r3, #3
 8016020:	d901      	bls.n	8016026 <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8016022:	2308      	movs	r3, #8
 8016024:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016026:	69fb      	ldr	r3, [r7, #28]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d108      	bne.n	801603e <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 801602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602e:	9300      	str	r3, [sp, #0]
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	68b9      	ldr	r1, [r7, #8]
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	f7fd f848 	bl	80130cc <_tx_event_flags_get>
 801603c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801603e:	69fb      	ldr	r3, [r7, #28]
}
 8016040:	4618      	mov	r0, r3
 8016042:	3720      	adds	r7, #32
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	4456444e 	.word	0x4456444e
 801604c:	20000094 	.word	0x20000094
 8016050:	2000aaf8 	.word	0x2000aaf8
 8016054:	2000ab98 	.word	0x2000ab98

08016058 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016064:	2300      	movs	r3, #0
 8016066:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d102      	bne.n	8016074 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801606e:	2306      	movs	r3, #6
 8016070:	617b      	str	r3, [r7, #20]
 8016072:	e00f      	b.n	8016094 <_txe_event_flags_set+0x3c>
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	4a0d      	ldr	r2, [pc, #52]	; (80160b0 <_txe_event_flags_set+0x58>)
 801607a:	4293      	cmp	r3, r2
 801607c:	d002      	beq.n	8016084 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801607e:	2306      	movs	r3, #6
 8016080:	617b      	str	r3, [r7, #20]
 8016082:	e007      	b.n	8016094 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2b02      	cmp	r3, #2
 8016088:	d004      	beq.n	8016094 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d001      	beq.n	8016094 <_txe_event_flags_set+0x3c>
            {
        
                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8016090:	2308      	movs	r3, #8
 8016092:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016094:	697b      	ldr	r3, [r7, #20]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d105      	bne.n	80160a6 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	68b9      	ldr	r1, [r7, #8]
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	f7fd f8f6 	bl	8013290 <_tx_event_flags_set>
 80160a4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80160a6:	697b      	ldr	r3, [r7, #20]
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3718      	adds	r7, #24
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}
 80160b0:	4456444e 	.word	0x4456444e

080160b4 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b092      	sub	sp, #72	; 0x48
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
 80160c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80160c2:	2300      	movs	r3, #0
 80160c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d102      	bne.n	80160d2 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80160cc:	231c      	movs	r3, #28
 80160ce:	647b      	str	r3, [r7, #68]	; 0x44
 80160d0:	e053      	b.n	801617a <_txe_mutex_create+0xc6>
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2b34      	cmp	r3, #52	; 0x34
 80160d6:	d002      	beq.n	80160de <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80160d8:	231c      	movs	r3, #28
 80160da:	647b      	str	r3, [r7, #68]	; 0x44
 80160dc:	e04d      	b.n	801617a <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80160de:	f3ef 8310 	mrs	r3, PRIMASK
 80160e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80160e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80160e6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80160e8:	b672      	cpsid	i
    return(int_posture);
 80160ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80160ec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80160ee:	4b3a      	ldr	r3, [pc, #232]	; (80161d8 <_txe_mutex_create+0x124>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	3301      	adds	r3, #1
 80160f4:	4a38      	ldr	r2, [pc, #224]	; (80161d8 <_txe_mutex_create+0x124>)
 80160f6:	6013      	str	r3, [r2, #0]
 80160f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160fa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80160fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160fe:	f383 8810 	msr	PRIMASK, r3
}
 8016102:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8016104:	4b35      	ldr	r3, [pc, #212]	; (80161dc <_txe_mutex_create+0x128>)
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801610a:	2300      	movs	r3, #0
 801610c:	643b      	str	r3, [r7, #64]	; 0x40
 801610e:	e009      	b.n	8016124 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016114:	429a      	cmp	r2, r3
 8016116:	d00b      	beq.n	8016130 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8016118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801611a:	6a1b      	ldr	r3, [r3, #32]
 801611c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801611e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016120:	3301      	adds	r3, #1
 8016122:	643b      	str	r3, [r7, #64]	; 0x40
 8016124:	4b2e      	ldr	r3, [pc, #184]	; (80161e0 <_txe_mutex_create+0x12c>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801612a:	429a      	cmp	r2, r3
 801612c:	d3f0      	bcc.n	8016110 <_txe_mutex_create+0x5c>
 801612e:	e000      	b.n	8016132 <_txe_mutex_create+0x7e>
                break;
 8016130:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016132:	f3ef 8310 	mrs	r3, PRIMASK
 8016136:	623b      	str	r3, [r7, #32]
    return(posture);
 8016138:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801613a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801613c:	b672      	cpsid	i
    return(int_posture);
 801613e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016140:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016142:	4b25      	ldr	r3, [pc, #148]	; (80161d8 <_txe_mutex_create+0x124>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	3b01      	subs	r3, #1
 8016148:	4a23      	ldr	r2, [pc, #140]	; (80161d8 <_txe_mutex_create+0x124>)
 801614a:	6013      	str	r3, [r2, #0]
 801614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801614e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016152:	f383 8810 	msr	PRIMASK, r3
}
 8016156:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016158:	f7fe ff94 	bl	8015084 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 801615c:	68fa      	ldr	r2, [r7, #12]
 801615e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016160:	429a      	cmp	r2, r3
 8016162:	d102      	bne.n	801616a <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8016164:	231c      	movs	r3, #28
 8016166:	647b      	str	r3, [r7, #68]	; 0x44
 8016168:	e007      	b.n	801617a <_txe_mutex_create+0xc6>
        }
        else
        {
        
            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2b01      	cmp	r3, #1
 801616e:	d004      	beq.n	801617a <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d001      	beq.n	801617a <_txe_mutex_create+0xc6>
                {
        
                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8016176:	231f      	movs	r3, #31
 8016178:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801617a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801617c:	2b00      	cmp	r3, #0
 801617e:	d11d      	bne.n	80161bc <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8016180:	4b18      	ldr	r3, [pc, #96]	; (80161e4 <_txe_mutex_create+0x130>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8016186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016188:	4a17      	ldr	r2, [pc, #92]	; (80161e8 <_txe_mutex_create+0x134>)
 801618a:	4293      	cmp	r3, r2
 801618c:	d101      	bne.n	8016192 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801618e:	2313      	movs	r3, #19
 8016190:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016192:	f3ef 8305 	mrs	r3, IPSR
 8016196:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016198:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801619a:	4b14      	ldr	r3, [pc, #80]	; (80161ec <_txe_mutex_create+0x138>)
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	4313      	orrs	r3, r2
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d00b      	beq.n	80161bc <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161a4:	f3ef 8305 	mrs	r3, IPSR
 80161a8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80161aa:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80161ac:	4b0f      	ldr	r3, [pc, #60]	; (80161ec <_txe_mutex_create+0x138>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	4313      	orrs	r3, r2
 80161b2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80161b6:	d201      	bcs.n	80161bc <_txe_mutex_create+0x108>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80161b8:	2313      	movs	r3, #19
 80161ba:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80161bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d105      	bne.n	80161ce <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	68b9      	ldr	r1, [r7, #8]
 80161c6:	68f8      	ldr	r0, [r7, #12]
 80161c8:	f7fd fbc0 	bl	801394c <_tx_mutex_create>
 80161cc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80161ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3748      	adds	r7, #72	; 0x48
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	2000aaf4 	.word	0x2000aaf4
 80161dc:	2000aa30 	.word	0x2000aa30
 80161e0:	2000aa2c 	.word	0x2000aa2c
 80161e4:	2000aaf8 	.word	0x2000aaf8
 80161e8:	2000ab98 	.word	0x2000ab98
 80161ec:	20000094 	.word	0x20000094

080161f0 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80161f8:	2300      	movs	r3, #0
 80161fa:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d102      	bne.n	8016208 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8016202:	231c      	movs	r3, #28
 8016204:	617b      	str	r3, [r7, #20]
 8016206:	e023      	b.n	8016250 <_txe_mutex_delete+0x60>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	4a13      	ldr	r2, [pc, #76]	; (801625c <_txe_mutex_delete+0x6c>)
 801620e:	4293      	cmp	r3, r2
 8016210:	d002      	beq.n	8016218 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8016212:	231c      	movs	r3, #28
 8016214:	617b      	str	r3, [r7, #20]
 8016216:	e01b      	b.n	8016250 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016218:	f3ef 8305 	mrs	r3, IPSR
 801621c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801621e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016220:	4b0f      	ldr	r3, [pc, #60]	; (8016260 <_txe_mutex_delete+0x70>)
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	4313      	orrs	r3, r2
 8016226:	2b00      	cmp	r3, #0
 8016228:	d002      	beq.n	8016230 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801622a:	2313      	movs	r3, #19
 801622c:	617b      	str	r3, [r7, #20]
 801622e:	e00f      	b.n	8016250 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8016230:	4b0c      	ldr	r3, [pc, #48]	; (8016264 <_txe_mutex_delete+0x74>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	4a0b      	ldr	r2, [pc, #44]	; (8016268 <_txe_mutex_delete+0x78>)
 801623a:	4293      	cmp	r3, r2
 801623c:	d101      	bne.n	8016242 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801623e:	2313      	movs	r3, #19
 8016240:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d103      	bne.n	8016250 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f7fd fbd9 	bl	8013a00 <_tx_mutex_delete>
 801624e:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8016250:	697b      	ldr	r3, [r7, #20]
}
 8016252:	4618      	mov	r0, r3
 8016254:	3718      	adds	r7, #24
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}
 801625a:	bf00      	nop
 801625c:	4d555445 	.word	0x4d555445
 8016260:	20000094 	.word	0x20000094
 8016264:	2000aaf8 	.word	0x2000aaf8
 8016268:	2000ab98 	.word	0x2000ab98

0801626c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b088      	sub	sp, #32
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
 8016274:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016276:	2300      	movs	r3, #0
 8016278:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d102      	bne.n	8016286 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8016280:	231c      	movs	r3, #28
 8016282:	61fb      	str	r3, [r7, #28]
 8016284:	e01f      	b.n	80162c6 <_txe_mutex_get+0x5a>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	4a21      	ldr	r2, [pc, #132]	; (8016310 <_txe_mutex_get+0xa4>)
 801628c:	4293      	cmp	r3, r2
 801628e:	d002      	beq.n	8016296 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8016290:	231c      	movs	r3, #28
 8016292:	61fb      	str	r3, [r7, #28]
 8016294:	e017      	b.n	80162c6 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016296:	683b      	ldr	r3, [r7, #0]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d014      	beq.n	80162c6 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801629c:	f3ef 8305 	mrs	r3, IPSR
 80162a0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80162a2:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80162a4:	4b1b      	ldr	r3, [pc, #108]	; (8016314 <_txe_mutex_get+0xa8>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4313      	orrs	r3, r2
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d002      	beq.n	80162b4 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80162ae:	2304      	movs	r3, #4
 80162b0:	61fb      	str	r3, [r7, #28]
 80162b2:	e008      	b.n	80162c6 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80162b4:	4b18      	ldr	r3, [pc, #96]	; (8016318 <_txe_mutex_get+0xac>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	4a17      	ldr	r2, [pc, #92]	; (801631c <_txe_mutex_get+0xb0>)
 80162be:	4293      	cmp	r3, r2
 80162c0:	d101      	bne.n	80162c6 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80162c2:	2304      	movs	r3, #4
 80162c4:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d114      	bne.n	80162f6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162cc:	f3ef 8305 	mrs	r3, IPSR
 80162d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80162d2:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80162d4:	4b0f      	ldr	r3, [pc, #60]	; (8016314 <_txe_mutex_get+0xa8>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	4313      	orrs	r3, r2
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d00b      	beq.n	80162f6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162de:	f3ef 8305 	mrs	r3, IPSR
 80162e2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80162e4:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80162e6:	4b0b      	ldr	r3, [pc, #44]	; (8016314 <_txe_mutex_get+0xa8>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4313      	orrs	r3, r2
 80162ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80162f0:	d201      	bcs.n	80162f6 <_txe_mutex_get+0x8a>
            {
        
                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80162f2:	2313      	movs	r3, #19
 80162f4:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d104      	bne.n	8016306 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80162fc:	6839      	ldr	r1, [r7, #0]
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f7fd fc28 	bl	8013b54 <_tx_mutex_get>
 8016304:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8016306:	69fb      	ldr	r3, [r7, #28]
}
 8016308:	4618      	mov	r0, r3
 801630a:	3720      	adds	r7, #32
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}
 8016310:	4d555445 	.word	0x4d555445
 8016314:	20000094 	.word	0x20000094
 8016318:	2000aaf8 	.word	0x2000aaf8
 801631c:	2000ab98 	.word	0x2000ab98

08016320 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b086      	sub	sp, #24
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016328:	2300      	movs	r3, #0
 801632a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d102      	bne.n	8016338 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8016332:	231c      	movs	r3, #28
 8016334:	617b      	str	r3, [r7, #20]
 8016336:	e01c      	b.n	8016372 <_txe_mutex_put+0x52>
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	4a13      	ldr	r2, [pc, #76]	; (801638c <_txe_mutex_put+0x6c>)
 801633e:	4293      	cmp	r3, r2
 8016340:	d002      	beq.n	8016348 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8016342:	231c      	movs	r3, #28
 8016344:	617b      	str	r3, [r7, #20]
 8016346:	e014      	b.n	8016372 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016348:	f3ef 8305 	mrs	r3, IPSR
 801634c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801634e:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016350:	4b0f      	ldr	r3, [pc, #60]	; (8016390 <_txe_mutex_put+0x70>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4313      	orrs	r3, r2
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00b      	beq.n	8016372 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801635a:	f3ef 8305 	mrs	r3, IPSR
 801635e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016360:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016362:	4b0b      	ldr	r3, [pc, #44]	; (8016390 <_txe_mutex_put+0x70>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4313      	orrs	r3, r2
 8016368:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801636c:	d201      	bcs.n	8016372 <_txe_mutex_put+0x52>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801636e:	2313      	movs	r3, #19
 8016370:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d103      	bne.n	8016380 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f7fd fe63 	bl	8014044 <_tx_mutex_put>
 801637e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8016380:	697b      	ldr	r3, [r7, #20]
}
 8016382:	4618      	mov	r0, r3
 8016384:	3718      	adds	r7, #24
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	4d555445 	.word	0x4d555445
 8016390:	20000094 	.word	0x20000094

08016394 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b092      	sub	sp, #72	; 0x48
 8016398:	af00      	add	r7, sp, #0
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	60b9      	str	r1, [r7, #8]
 801639e:	607a      	str	r2, [r7, #4]
 80163a0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80163a2:	2300      	movs	r3, #0
 80163a4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d102      	bne.n	80163b2 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80163ac:	230c      	movs	r3, #12
 80163ae:	647b      	str	r3, [r7, #68]	; 0x44
 80163b0:	e054      	b.n	801645c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	2b20      	cmp	r3, #32
 80163b6:	d002      	beq.n	80163be <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80163b8:	230c      	movs	r3, #12
 80163ba:	647b      	str	r3, [r7, #68]	; 0x44
 80163bc:	e04e      	b.n	801645c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80163be:	f3ef 8310 	mrs	r3, PRIMASK
 80163c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80163c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80163c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80163c8:	b672      	cpsid	i
    return(int_posture);
 80163ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80163cc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80163ce:	4b36      	ldr	r3, [pc, #216]	; (80164a8 <_txe_semaphore_create+0x114>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	3301      	adds	r3, #1
 80163d4:	4a34      	ldr	r2, [pc, #208]	; (80164a8 <_txe_semaphore_create+0x114>)
 80163d6:	6013      	str	r3, [r2, #0]
 80163d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163da:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80163dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163de:	f383 8810 	msr	PRIMASK, r3
}
 80163e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80163e4:	4b31      	ldr	r3, [pc, #196]	; (80164ac <_txe_semaphore_create+0x118>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80163ea:	2300      	movs	r3, #0
 80163ec:	643b      	str	r3, [r7, #64]	; 0x40
 80163ee:	e009      	b.n	8016404 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80163f0:	68fa      	ldr	r2, [r7, #12]
 80163f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d00b      	beq.n	8016410 <_txe_semaphore_create+0x7c>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80163f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163fa:	695b      	ldr	r3, [r3, #20]
 80163fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80163fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016400:	3301      	adds	r3, #1
 8016402:	643b      	str	r3, [r7, #64]	; 0x40
 8016404:	4b2a      	ldr	r3, [pc, #168]	; (80164b0 <_txe_semaphore_create+0x11c>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801640a:	429a      	cmp	r2, r3
 801640c:	d3f0      	bcc.n	80163f0 <_txe_semaphore_create+0x5c>
 801640e:	e000      	b.n	8016412 <_txe_semaphore_create+0x7e>
                break;
 8016410:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016412:	f3ef 8310 	mrs	r3, PRIMASK
 8016416:	623b      	str	r3, [r7, #32]
    return(posture);
 8016418:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801641a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801641c:	b672      	cpsid	i
    return(int_posture);
 801641e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016420:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016422:	4b21      	ldr	r3, [pc, #132]	; (80164a8 <_txe_semaphore_create+0x114>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	3b01      	subs	r3, #1
 8016428:	4a1f      	ldr	r2, [pc, #124]	; (80164a8 <_txe_semaphore_create+0x114>)
 801642a:	6013      	str	r3, [r2, #0]
 801642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801642e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016432:	f383 8810 	msr	PRIMASK, r3
}
 8016436:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016438:	f7fe fe24 	bl	8015084 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 801643c:	68fa      	ldr	r2, [r7, #12]
 801643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016440:	429a      	cmp	r2, r3
 8016442:	d102      	bne.n	801644a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8016444:	230c      	movs	r3, #12
 8016446:	647b      	str	r3, [r7, #68]	; 0x44
 8016448:	e008      	b.n	801645c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801644a:	4b1a      	ldr	r3, [pc, #104]	; (80164b4 <_txe_semaphore_create+0x120>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016452:	4a19      	ldr	r2, [pc, #100]	; (80164b8 <_txe_semaphore_create+0x124>)
 8016454:	4293      	cmp	r3, r2
 8016456:	d101      	bne.n	801645c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016458:	2313      	movs	r3, #19
 801645a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801645c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801645e:	2b00      	cmp	r3, #0
 8016460:	d114      	bne.n	801648c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016462:	f3ef 8305 	mrs	r3, IPSR
 8016466:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016468:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801646a:	4b14      	ldr	r3, [pc, #80]	; (80164bc <_txe_semaphore_create+0x128>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	4313      	orrs	r3, r2
 8016470:	2b00      	cmp	r3, #0
 8016472:	d00b      	beq.n	801648c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016474:	f3ef 8305 	mrs	r3, IPSR
 8016478:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801647a:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801647c:	4b0f      	ldr	r3, [pc, #60]	; (80164bc <_txe_semaphore_create+0x128>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4313      	orrs	r3, r2
 8016482:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016486:	d201      	bcs.n	801648c <_txe_semaphore_create+0xf8>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016488:	2313      	movs	r3, #19
 801648a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801648c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801648e:	2b00      	cmp	r3, #0
 8016490:	d105      	bne.n	801649e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8016492:	687a      	ldr	r2, [r7, #4]
 8016494:	68b9      	ldr	r1, [r7, #8]
 8016496:	68f8      	ldr	r0, [r7, #12]
 8016498:	f7fe f876 	bl	8014588 <_tx_semaphore_create>
 801649c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801649e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3748      	adds	r7, #72	; 0x48
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}
 80164a8:	2000aaf4 	.word	0x2000aaf4
 80164ac:	2000aa38 	.word	0x2000aa38
 80164b0:	2000aa48 	.word	0x2000aa48
 80164b4:	2000aaf8 	.word	0x2000aaf8
 80164b8:	2000ab98 	.word	0x2000ab98
 80164bc:	20000094 	.word	0x20000094

080164c0 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b086      	sub	sp, #24
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80164ca:	2300      	movs	r3, #0
 80164cc:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d102      	bne.n	80164da <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80164d4:	230c      	movs	r3, #12
 80164d6:	617b      	str	r3, [r7, #20]
 80164d8:	e01f      	b.n	801651a <_txe_semaphore_get+0x5a>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	4a15      	ldr	r2, [pc, #84]	; (8016534 <_txe_semaphore_get+0x74>)
 80164e0:	4293      	cmp	r3, r2
 80164e2:	d002      	beq.n	80164ea <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80164e4:	230c      	movs	r3, #12
 80164e6:	617b      	str	r3, [r7, #20]
 80164e8:	e017      	b.n	801651a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d014      	beq.n	801651a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80164f0:	f3ef 8305 	mrs	r3, IPSR
 80164f4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80164f6:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80164f8:	4b0f      	ldr	r3, [pc, #60]	; (8016538 <_txe_semaphore_get+0x78>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	4313      	orrs	r3, r2
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d002      	beq.n	8016508 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016502:	2304      	movs	r3, #4
 8016504:	617b      	str	r3, [r7, #20]
 8016506:	e008      	b.n	801651a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016508:	4b0c      	ldr	r3, [pc, #48]	; (801653c <_txe_semaphore_get+0x7c>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	4a0b      	ldr	r2, [pc, #44]	; (8016540 <_txe_semaphore_get+0x80>)
 8016512:	4293      	cmp	r3, r2
 8016514:	d101      	bne.n	801651a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016516:	2304      	movs	r3, #4
 8016518:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d104      	bne.n	801652a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8016520:	6839      	ldr	r1, [r7, #0]
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f7fe f882 	bl	801462c <_tx_semaphore_get>
 8016528:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801652a:	697b      	ldr	r3, [r7, #20]
}
 801652c:	4618      	mov	r0, r3
 801652e:	3718      	adds	r7, #24
 8016530:	46bd      	mov	sp, r7
 8016532:	bd80      	pop	{r7, pc}
 8016534:	53454d41 	.word	0x53454d41
 8016538:	20000094 	.word	0x20000094
 801653c:	2000aaf8 	.word	0x2000aaf8
 8016540:	2000ab98 	.word	0x2000ab98

08016544 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b084      	sub	sp, #16
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d102      	bne.n	8016558 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016552:	230c      	movs	r3, #12
 8016554:	60fb      	str	r3, [r7, #12]
 8016556:	e00b      	b.n	8016570 <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	4a07      	ldr	r2, [pc, #28]	; (801657c <_txe_semaphore_put+0x38>)
 801655e:	4293      	cmp	r3, r2
 8016560:	d002      	beq.n	8016568 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016562:	230c      	movs	r3, #12
 8016564:	60fb      	str	r3, [r7, #12]
 8016566:	e003      	b.n	8016570 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f7fe f8f1 	bl	8014750 <_tx_semaphore_put>
 801656e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8016570:	68fb      	ldr	r3, [r7, #12]
}
 8016572:	4618      	mov	r0, r3
 8016574:	3710      	adds	r7, #16
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop
 801657c:	53454d41 	.word	0x53454d41

08016580 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b09a      	sub	sp, #104	; 0x68
 8016584:	af06      	add	r7, sp, #24
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	607a      	str	r2, [r7, #4]
 801658c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801658e:	2300      	movs	r3, #0
 8016590:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d102      	bne.n	801659e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016598:	230e      	movs	r3, #14
 801659a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801659c:	e0bb      	b.n	8016716 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801659e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80165a0:	2bb4      	cmp	r3, #180	; 0xb4
 80165a2:	d002      	beq.n	80165aa <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80165a4:	230e      	movs	r3, #14
 80165a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80165a8:	e0b5      	b.n	8016716 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80165aa:	f3ef 8310 	mrs	r3, PRIMASK
 80165ae:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80165b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80165b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80165b4:	b672      	cpsid	i
    return(int_posture);
 80165b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80165b8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80165ba:	4b64      	ldr	r3, [pc, #400]	; (801674c <_txe_thread_create+0x1cc>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	3301      	adds	r3, #1
 80165c0:	4a62      	ldr	r2, [pc, #392]	; (801674c <_txe_thread_create+0x1cc>)
 80165c2:	6013      	str	r3, [r2, #0]
 80165c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80165c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ca:	f383 8810 	msr	PRIMASK, r3
}
 80165ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80165d0:	2300      	movs	r3, #0
 80165d2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80165d4:	4b5e      	ldr	r3, [pc, #376]	; (8016750 <_txe_thread_create+0x1d0>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80165da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80165dc:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80165de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80165e0:	3b01      	subs	r3, #1
 80165e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165e4:	4413      	add	r3, r2
 80165e6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80165e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ea:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80165ec:	2300      	movs	r3, #0
 80165ee:	647b      	str	r3, [r7, #68]	; 0x44
 80165f0:	e02b      	b.n	801664a <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80165f2:	68fa      	ldr	r2, [r7, #12]
 80165f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d101      	bne.n	80165fe <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80165fa:	2301      	movs	r3, #1
 80165fc:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80165fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016600:	2b01      	cmp	r3, #1
 8016602:	d028      	beq.n	8016656 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8016604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016606:	68db      	ldr	r3, [r3, #12]
 8016608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801660a:	429a      	cmp	r2, r3
 801660c:	d308      	bcc.n	8016620 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801660e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016610:	691b      	ldr	r3, [r3, #16]
 8016612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016614:	429a      	cmp	r2, r3
 8016616:	d203      	bcs.n	8016620 <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016618:	2300      	movs	r3, #0
 801661a:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801661c:	2301      	movs	r3, #1
 801661e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8016620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016622:	68db      	ldr	r3, [r3, #12]
 8016624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016626:	429a      	cmp	r2, r3
 8016628:	d308      	bcc.n	801663c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801662a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801662c:	691b      	ldr	r3, [r3, #16]
 801662e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016630:	429a      	cmp	r2, r3
 8016632:	d203      	bcs.n	801663c <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016634:	2300      	movs	r3, #0
 8016636:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016638:	2301      	movs	r3, #1
 801663a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801663c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016642:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016646:	3301      	adds	r3, #1
 8016648:	647b      	str	r3, [r7, #68]	; 0x44
 801664a:	4b42      	ldr	r3, [pc, #264]	; (8016754 <_txe_thread_create+0x1d4>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016650:	429a      	cmp	r2, r3
 8016652:	d3ce      	bcc.n	80165f2 <_txe_thread_create+0x72>
 8016654:	e000      	b.n	8016658 <_txe_thread_create+0xd8>
                break;
 8016656:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016658:	f3ef 8310 	mrs	r3, PRIMASK
 801665c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801665e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8016660:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016662:	b672      	cpsid	i
    return(int_posture);
 8016664:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016666:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016668:	4b38      	ldr	r3, [pc, #224]	; (801674c <_txe_thread_create+0x1cc>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	3b01      	subs	r3, #1
 801666e:	4a37      	ldr	r2, [pc, #220]	; (801674c <_txe_thread_create+0x1cc>)
 8016670:	6013      	str	r3, [r2, #0]
 8016672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016674:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016676:	6a3b      	ldr	r3, [r7, #32]
 8016678:	f383 8810 	msr	PRIMASK, r3
}
 801667c:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801667e:	f7fe fd01 	bl	8015084 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016686:	429a      	cmp	r2, r3
 8016688:	d102      	bne.n	8016690 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801668a:	230e      	movs	r3, #14
 801668c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801668e:	e042      	b.n	8016716 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8016690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016692:	2b00      	cmp	r3, #0
 8016694:	d102      	bne.n	801669c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016696:	2303      	movs	r3, #3
 8016698:	64fb      	str	r3, [r7, #76]	; 0x4c
 801669a:	e03c      	b.n	8016716 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d102      	bne.n	80166a8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80166a2:	2303      	movs	r3, #3
 80166a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166a6:	e036      	b.n	8016716 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80166a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80166aa:	2bc7      	cmp	r3, #199	; 0xc7
 80166ac:	d802      	bhi.n	80166b4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80166ae:	2305      	movs	r3, #5
 80166b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166b2:	e030      	b.n	8016716 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80166b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80166b6:	2b1f      	cmp	r3, #31
 80166b8:	d902      	bls.n	80166c0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80166ba:	230f      	movs	r3, #15
 80166bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166be:	e02a      	b.n	8016716 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80166c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80166c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d902      	bls.n	80166ce <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80166c8:	2318      	movs	r3, #24
 80166ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166cc:	e023      	b.n	8016716 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80166ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166d0:	2b01      	cmp	r3, #1
 80166d2:	d902      	bls.n	80166da <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80166d4:	2310      	movs	r3, #16
 80166d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166d8:	e01d      	b.n	8016716 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80166da:	4b1f      	ldr	r3, [pc, #124]	; (8016758 <_txe_thread_create+0x1d8>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80166e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e2:	4a1e      	ldr	r2, [pc, #120]	; (801675c <_txe_thread_create+0x1dc>)
 80166e4:	4293      	cmp	r3, r2
 80166e6:	d101      	bne.n	80166ec <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80166e8:	2313      	movs	r3, #19
 80166ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80166ec:	f3ef 8305 	mrs	r3, IPSR
 80166f0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80166f2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80166f4:	4b1a      	ldr	r3, [pc, #104]	; (8016760 <_txe_thread_create+0x1e0>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	4313      	orrs	r3, r2
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d00b      	beq.n	8016716 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80166fe:	f3ef 8305 	mrs	r3, IPSR
 8016702:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016704:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016706:	4b16      	ldr	r3, [pc, #88]	; (8016760 <_txe_thread_create+0x1e0>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	4313      	orrs	r3, r2
 801670c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016710:	d201      	bcs.n	8016716 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8016712:	2313      	movs	r3, #19
 8016714:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016718:	2b00      	cmp	r3, #0
 801671a:	d112      	bne.n	8016742 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801671e:	9305      	str	r3, [sp, #20]
 8016720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016722:	9304      	str	r3, [sp, #16]
 8016724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016726:	9303      	str	r3, [sp, #12]
 8016728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801672a:	9302      	str	r3, [sp, #8]
 801672c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801672e:	9301      	str	r3, [sp, #4]
 8016730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016732:	9300      	str	r3, [sp, #0]
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	68b9      	ldr	r1, [r7, #8]
 801673a:	68f8      	ldr	r0, [r7, #12]
 801673c:	f7fe f874 	bl	8014828 <_tx_thread_create>
 8016740:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8016742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016744:	4618      	mov	r0, r3
 8016746:	3750      	adds	r7, #80	; 0x50
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	2000aaf4 	.word	0x2000aaf4
 8016750:	2000aae4 	.word	0x2000aae4
 8016754:	2000aaec 	.word	0x2000aaec
 8016758:	2000aaf8 	.word	0x2000aaf8
 801675c:	2000ab98 	.word	0x2000ab98
 8016760:	20000094 	.word	0x20000094

08016764 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b084      	sub	sp, #16
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801676c:	f3ef 8305 	mrs	r3, IPSR
 8016770:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8016772:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016774:	4b0f      	ldr	r3, [pc, #60]	; (80167b4 <_txe_thread_delete+0x50>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	4313      	orrs	r3, r2
 801677a:	2b00      	cmp	r3, #0
 801677c:	d002      	beq.n	8016784 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801677e:	2313      	movs	r3, #19
 8016780:	60fb      	str	r3, [r7, #12]
 8016782:	e011      	b.n	80167a8 <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d102      	bne.n	8016790 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801678a:	230e      	movs	r3, #14
 801678c:	60fb      	str	r3, [r7, #12]
 801678e:	e00b      	b.n	80167a8 <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	4a08      	ldr	r2, [pc, #32]	; (80167b8 <_txe_thread_delete+0x54>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d002      	beq.n	80167a0 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801679a:	230e      	movs	r3, #14
 801679c:	60fb      	str	r3, [r7, #12]
 801679e:	e003      	b.n	80167a8 <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f7fe f937 	bl	8014a14 <_tx_thread_delete>
 80167a6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80167a8:	68fb      	ldr	r3, [r7, #12]
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3710      	adds	r7, #16
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	20000094 	.word	0x20000094
 80167b8:	54485244 	.word	0x54485244

080167bc <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80167c2:	4b0a      	ldr	r3, [pc, #40]	; (80167ec <_txe_thread_relinquish+0x30>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d00a      	beq.n	80167e4 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80167ce:	f3ef 8305 	mrs	r3, IPSR
 80167d2:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 80167d4:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80167d6:	4b06      	ldr	r3, [pc, #24]	; (80167f0 <_txe_thread_relinquish+0x34>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	4313      	orrs	r3, r2
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d101      	bne.n	80167e4 <_txe_thread_relinquish+0x28>
        {
        
            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 80167e0:	f7fe fa9a 	bl	8014d18 <_tx_thread_relinquish>
        }
    }
}
 80167e4:	bf00      	nop
 80167e6:	3708      	adds	r7, #8
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	2000aaf8 	.word	0x2000aaf8
 80167f0:	20000094 	.word	0x20000094

080167f4 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b084      	sub	sp, #16
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d102      	bne.n	8016808 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016802:	230e      	movs	r3, #14
 8016804:	60fb      	str	r3, [r7, #12]
 8016806:	e00b      	b.n	8016820 <_txe_thread_resume+0x2c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	4a07      	ldr	r2, [pc, #28]	; (801682c <_txe_thread_resume+0x38>)
 801680e:	4293      	cmp	r3, r2
 8016810:	d002      	beq.n	8016818 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016812:	230e      	movs	r3, #14
 8016814:	60fb      	str	r3, [r7, #12]
 8016816:	e003      	b.n	8016820 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f7fe fae3 	bl	8014de4 <_tx_thread_resume>
 801681e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8016820:	68fb      	ldr	r3, [r7, #12]
}
 8016822:	4618      	mov	r0, r3
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	54485244 	.word	0x54485244

08016830 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b084      	sub	sp, #16
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d102      	bne.n	8016844 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801683e:	2315      	movs	r3, #21
 8016840:	60fb      	str	r3, [r7, #12]
 8016842:	e00b      	b.n	801685c <_txe_timer_activate+0x2c>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	4a07      	ldr	r2, [pc, #28]	; (8016868 <_txe_timer_activate+0x38>)
 801684a:	4293      	cmp	r3, r2
 801684c:	d002      	beq.n	8016854 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801684e:	2315      	movs	r3, #21
 8016850:	60fb      	str	r3, [r7, #12]
 8016852:	e003      	b.n	801685c <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f7fe fef5 	bl	8015644 <_tx_timer_activate>
 801685a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801685c:	68fb      	ldr	r3, [r7, #12]
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	4154494d 	.word	0x4154494d

0801686c <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b096      	sub	sp, #88	; 0x58
 8016870:	af04      	add	r7, sp, #16
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
 8016878:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801687a:	2300      	movs	r3, #0
 801687c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d102      	bne.n	801688a <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8016884:	2315      	movs	r3, #21
 8016886:	647b      	str	r3, [r7, #68]	; 0x44
 8016888:	e059      	b.n	801693e <_txe_timer_create+0xd2>
    }
    
    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 801688a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801688c:	2b2c      	cmp	r3, #44	; 0x2c
 801688e:	d002      	beq.n	8016896 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8016890:	2315      	movs	r3, #21
 8016892:	647b      	str	r3, [r7, #68]	; 0x44
 8016894:	e053      	b.n	801693e <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016896:	f3ef 8310 	mrs	r3, PRIMASK
 801689a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801689e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80168a0:	b672      	cpsid	i
    return(int_posture);
 80168a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80168a4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80168a6:	4b41      	ldr	r3, [pc, #260]	; (80169ac <_txe_timer_create+0x140>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	3301      	adds	r3, #1
 80168ac:	4a3f      	ldr	r2, [pc, #252]	; (80169ac <_txe_timer_create+0x140>)
 80168ae:	6013      	str	r3, [r2, #0]
 80168b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168b2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80168b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b6:	f383 8810 	msr	PRIMASK, r3
}
 80168ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 80168bc:	4b3c      	ldr	r3, [pc, #240]	; (80169b0 <_txe_timer_create+0x144>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 80168c2:	2300      	movs	r3, #0
 80168c4:	643b      	str	r3, [r7, #64]	; 0x40
 80168c6:	e009      	b.n	80168dc <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 80168c8:	68fa      	ldr	r2, [r7, #12]
 80168ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d00b      	beq.n	80168e8 <_txe_timer_create+0x7c>
            }
            else
            {
        
                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 80168d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 80168d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168d8:	3301      	adds	r3, #1
 80168da:	643b      	str	r3, [r7, #64]	; 0x40
 80168dc:	4b35      	ldr	r3, [pc, #212]	; (80169b4 <_txe_timer_create+0x148>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d3f0      	bcc.n	80168c8 <_txe_timer_create+0x5c>
 80168e6:	e000      	b.n	80168ea <_txe_timer_create+0x7e>
                break;
 80168e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80168ea:	f3ef 8310 	mrs	r3, PRIMASK
 80168ee:	623b      	str	r3, [r7, #32]
    return(posture);
 80168f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80168f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80168f4:	b672      	cpsid	i
    return(int_posture);
 80168f6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80168f8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80168fa:	4b2c      	ldr	r3, [pc, #176]	; (80169ac <_txe_timer_create+0x140>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	3b01      	subs	r3, #1
 8016900:	4a2a      	ldr	r2, [pc, #168]	; (80169ac <_txe_timer_create+0x140>)
 8016902:	6013      	str	r3, [r2, #0]
 8016904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016906:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801690a:	f383 8810 	msr	PRIMASK, r3
}
 801690e:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016910:	f7fe fbb8 	bl	8015084 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 8016914:	68fa      	ldr	r2, [r7, #12]
 8016916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016918:	429a      	cmp	r2, r3
 801691a:	d102      	bne.n	8016922 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 801691c:	2315      	movs	r3, #21
 801691e:	647b      	str	r3, [r7, #68]	; 0x44
 8016920:	e00d      	b.n	801693e <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 8016922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016924:	2b00      	cmp	r3, #0
 8016926:	d102      	bne.n	801692e <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 8016928:	2316      	movs	r3, #22
 801692a:	647b      	str	r3, [r7, #68]	; 0x44
 801692c:	e007      	b.n	801693e <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 801692e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016930:	2b01      	cmp	r3, #1
 8016932:	d004      	beq.n	801693e <_txe_timer_create+0xd2>
            {
    
                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 8016934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016936:	2b00      	cmp	r3, #0
 8016938:	d001      	beq.n	801693e <_txe_timer_create+0xd2>
                {
        
                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 801693a:	2317      	movs	r3, #23
 801693c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801693e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016940:	2b00      	cmp	r3, #0
 8016942:	d11d      	bne.n	8016980 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8016944:	4b1c      	ldr	r3, [pc, #112]	; (80169b8 <_txe_timer_create+0x14c>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801694c:	4a1b      	ldr	r2, [pc, #108]	; (80169bc <_txe_timer_create+0x150>)
 801694e:	4293      	cmp	r3, r2
 8016950:	d101      	bne.n	8016956 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8016952:	2313      	movs	r3, #19
 8016954:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016956:	f3ef 8305 	mrs	r3, IPSR
 801695a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801695c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801695e:	4b18      	ldr	r3, [pc, #96]	; (80169c0 <_txe_timer_create+0x154>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	4313      	orrs	r3, r2
 8016964:	2b00      	cmp	r3, #0
 8016966:	d00b      	beq.n	8016980 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016968:	f3ef 8305 	mrs	r3, IPSR
 801696c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801696e:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016970:	4b13      	ldr	r3, [pc, #76]	; (80169c0 <_txe_timer_create+0x154>)
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	4313      	orrs	r3, r2
 8016976:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801697a:	d201      	bcs.n	8016980 <_txe_timer_create+0x114>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801697c:	2313      	movs	r3, #19
 801697e:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016982:	2b00      	cmp	r3, #0
 8016984:	d10c      	bne.n	80169a0 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 8016986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016988:	9302      	str	r3, [sp, #8]
 801698a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801698c:	9301      	str	r3, [sp, #4]
 801698e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016990:	9300      	str	r3, [sp, #0]
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	687a      	ldr	r2, [r7, #4]
 8016996:	68b9      	ldr	r1, [r7, #8]
 8016998:	68f8      	ldr	r0, [r7, #12]
 801699a:	f7fe fe7f 	bl	801569c <_tx_timer_create>
 801699e:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 80169a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3748      	adds	r7, #72	; 0x48
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
 80169aa:	bf00      	nop
 80169ac:	2000aaf4 	.word	0x2000aaf4
 80169b0:	2000ac54 	.word	0x2000ac54
 80169b4:	2000b060 	.word	0x2000b060
 80169b8:	2000aaf8 	.word	0x2000aaf8
 80169bc:	2000ab98 	.word	0x2000ab98
 80169c0:	20000094 	.word	0x20000094

080169c4 <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b086      	sub	sp, #24
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80169cc:	2300      	movs	r3, #0
 80169ce:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d102      	bne.n	80169dc <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80169d6:	2315      	movs	r3, #21
 80169d8:	617b      	str	r3, [r7, #20]
 80169da:	e023      	b.n	8016a24 <_txe_timer_delete+0x60>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	4a13      	ldr	r2, [pc, #76]	; (8016a30 <_txe_timer_delete+0x6c>)
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d002      	beq.n	80169ec <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80169e6:	2315      	movs	r3, #21
 80169e8:	617b      	str	r3, [r7, #20]
 80169ea:	e01b      	b.n	8016a24 <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80169ec:	f3ef 8305 	mrs	r3, IPSR
 80169f0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80169f2:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80169f4:	4b0f      	ldr	r3, [pc, #60]	; (8016a34 <_txe_timer_delete+0x70>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	4313      	orrs	r3, r2
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d002      	beq.n	8016a04 <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80169fe:	2313      	movs	r3, #19
 8016a00:	617b      	str	r3, [r7, #20]
 8016a02:	e00f      	b.n	8016a24 <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8016a04:	4b0c      	ldr	r3, [pc, #48]	; (8016a38 <_txe_timer_delete+0x74>)
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8016a0a:	693b      	ldr	r3, [r7, #16]
 8016a0c:	4a0b      	ldr	r2, [pc, #44]	; (8016a3c <_txe_timer_delete+0x78>)
 8016a0e:	4293      	cmp	r3, r2
 8016a10:	d101      	bne.n	8016a16 <_txe_timer_delete+0x52>
        {
        
            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8016a12:	2313      	movs	r3, #19
 8016a14:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8016a16:	697b      	ldr	r3, [r7, #20]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d103      	bne.n	8016a24 <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f7fe fea1 	bl	8015764 <_tx_timer_delete>
 8016a22:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8016a24:	697b      	ldr	r3, [r7, #20]
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3718      	adds	r7, #24
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}
 8016a2e:	bf00      	nop
 8016a30:	4154494d 	.word	0x4154494d
 8016a34:	20000094 	.word	0x20000094
 8016a38:	2000aaf8 	.word	0x2000aaf8
 8016a3c:	2000ab98 	.word	0x2000ab98

08016a40 <__errno>:
 8016a40:	4b01      	ldr	r3, [pc, #4]	; (8016a48 <__errno+0x8>)
 8016a42:	6818      	ldr	r0, [r3, #0]
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop
 8016a48:	20000098 	.word	0x20000098

08016a4c <__libc_init_array>:
 8016a4c:	b570      	push	{r4, r5, r6, lr}
 8016a4e:	4d0d      	ldr	r5, [pc, #52]	; (8016a84 <__libc_init_array+0x38>)
 8016a50:	4c0d      	ldr	r4, [pc, #52]	; (8016a88 <__libc_init_array+0x3c>)
 8016a52:	1b64      	subs	r4, r4, r5
 8016a54:	10a4      	asrs	r4, r4, #2
 8016a56:	2600      	movs	r6, #0
 8016a58:	42a6      	cmp	r6, r4
 8016a5a:	d109      	bne.n	8016a70 <__libc_init_array+0x24>
 8016a5c:	4d0b      	ldr	r5, [pc, #44]	; (8016a8c <__libc_init_array+0x40>)
 8016a5e:	4c0c      	ldr	r4, [pc, #48]	; (8016a90 <__libc_init_array+0x44>)
 8016a60:	f001 f8d8 	bl	8017c14 <_init>
 8016a64:	1b64      	subs	r4, r4, r5
 8016a66:	10a4      	asrs	r4, r4, #2
 8016a68:	2600      	movs	r6, #0
 8016a6a:	42a6      	cmp	r6, r4
 8016a6c:	d105      	bne.n	8016a7a <__libc_init_array+0x2e>
 8016a6e:	bd70      	pop	{r4, r5, r6, pc}
 8016a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a74:	4798      	blx	r3
 8016a76:	3601      	adds	r6, #1
 8016a78:	e7ee      	b.n	8016a58 <__libc_init_array+0xc>
 8016a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a7e:	4798      	blx	r3
 8016a80:	3601      	adds	r6, #1
 8016a82:	e7f2      	b.n	8016a6a <__libc_init_array+0x1e>
 8016a84:	0801801c 	.word	0x0801801c
 8016a88:	0801801c 	.word	0x0801801c
 8016a8c:	0801801c 	.word	0x0801801c
 8016a90:	08018020 	.word	0x08018020

08016a94 <memcpy>:
 8016a94:	440a      	add	r2, r1
 8016a96:	4291      	cmp	r1, r2
 8016a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a9c:	d100      	bne.n	8016aa0 <memcpy+0xc>
 8016a9e:	4770      	bx	lr
 8016aa0:	b510      	push	{r4, lr}
 8016aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016aaa:	4291      	cmp	r1, r2
 8016aac:	d1f9      	bne.n	8016aa2 <memcpy+0xe>
 8016aae:	bd10      	pop	{r4, pc}

08016ab0 <memmove>:
 8016ab0:	4288      	cmp	r0, r1
 8016ab2:	b510      	push	{r4, lr}
 8016ab4:	eb01 0402 	add.w	r4, r1, r2
 8016ab8:	d902      	bls.n	8016ac0 <memmove+0x10>
 8016aba:	4284      	cmp	r4, r0
 8016abc:	4623      	mov	r3, r4
 8016abe:	d807      	bhi.n	8016ad0 <memmove+0x20>
 8016ac0:	1e43      	subs	r3, r0, #1
 8016ac2:	42a1      	cmp	r1, r4
 8016ac4:	d008      	beq.n	8016ad8 <memmove+0x28>
 8016ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ace:	e7f8      	b.n	8016ac2 <memmove+0x12>
 8016ad0:	4402      	add	r2, r0
 8016ad2:	4601      	mov	r1, r0
 8016ad4:	428a      	cmp	r2, r1
 8016ad6:	d100      	bne.n	8016ada <memmove+0x2a>
 8016ad8:	bd10      	pop	{r4, pc}
 8016ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ae2:	e7f7      	b.n	8016ad4 <memmove+0x24>

08016ae4 <memset>:
 8016ae4:	4402      	add	r2, r0
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	4293      	cmp	r3, r2
 8016aea:	d100      	bne.n	8016aee <memset+0xa>
 8016aec:	4770      	bx	lr
 8016aee:	f803 1b01 	strb.w	r1, [r3], #1
 8016af2:	e7f9      	b.n	8016ae8 <memset+0x4>

08016af4 <iprintf>:
 8016af4:	b40f      	push	{r0, r1, r2, r3}
 8016af6:	4b0a      	ldr	r3, [pc, #40]	; (8016b20 <iprintf+0x2c>)
 8016af8:	b513      	push	{r0, r1, r4, lr}
 8016afa:	681c      	ldr	r4, [r3, #0]
 8016afc:	b124      	cbz	r4, 8016b08 <iprintf+0x14>
 8016afe:	69a3      	ldr	r3, [r4, #24]
 8016b00:	b913      	cbnz	r3, 8016b08 <iprintf+0x14>
 8016b02:	4620      	mov	r0, r4
 8016b04:	f000 fabc 	bl	8017080 <__sinit>
 8016b08:	ab05      	add	r3, sp, #20
 8016b0a:	9a04      	ldr	r2, [sp, #16]
 8016b0c:	68a1      	ldr	r1, [r4, #8]
 8016b0e:	9301      	str	r3, [sp, #4]
 8016b10:	4620      	mov	r0, r4
 8016b12:	f000 fca7 	bl	8017464 <_vfiprintf_r>
 8016b16:	b002      	add	sp, #8
 8016b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b1c:	b004      	add	sp, #16
 8016b1e:	4770      	bx	lr
 8016b20:	20000098 	.word	0x20000098

08016b24 <_puts_r>:
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	460e      	mov	r6, r1
 8016b28:	4605      	mov	r5, r0
 8016b2a:	b118      	cbz	r0, 8016b34 <_puts_r+0x10>
 8016b2c:	6983      	ldr	r3, [r0, #24]
 8016b2e:	b90b      	cbnz	r3, 8016b34 <_puts_r+0x10>
 8016b30:	f000 faa6 	bl	8017080 <__sinit>
 8016b34:	69ab      	ldr	r3, [r5, #24]
 8016b36:	68ac      	ldr	r4, [r5, #8]
 8016b38:	b913      	cbnz	r3, 8016b40 <_puts_r+0x1c>
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	f000 faa0 	bl	8017080 <__sinit>
 8016b40:	4b2c      	ldr	r3, [pc, #176]	; (8016bf4 <_puts_r+0xd0>)
 8016b42:	429c      	cmp	r4, r3
 8016b44:	d120      	bne.n	8016b88 <_puts_r+0x64>
 8016b46:	686c      	ldr	r4, [r5, #4]
 8016b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b4a:	07db      	lsls	r3, r3, #31
 8016b4c:	d405      	bmi.n	8016b5a <_puts_r+0x36>
 8016b4e:	89a3      	ldrh	r3, [r4, #12]
 8016b50:	0598      	lsls	r0, r3, #22
 8016b52:	d402      	bmi.n	8016b5a <_puts_r+0x36>
 8016b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b56:	f000 fb43 	bl	80171e0 <__retarget_lock_acquire_recursive>
 8016b5a:	89a3      	ldrh	r3, [r4, #12]
 8016b5c:	0719      	lsls	r1, r3, #28
 8016b5e:	d51d      	bpl.n	8016b9c <_puts_r+0x78>
 8016b60:	6923      	ldr	r3, [r4, #16]
 8016b62:	b1db      	cbz	r3, 8016b9c <_puts_r+0x78>
 8016b64:	3e01      	subs	r6, #1
 8016b66:	68a3      	ldr	r3, [r4, #8]
 8016b68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016b6c:	3b01      	subs	r3, #1
 8016b6e:	60a3      	str	r3, [r4, #8]
 8016b70:	bb39      	cbnz	r1, 8016bc2 <_puts_r+0x9e>
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	da38      	bge.n	8016be8 <_puts_r+0xc4>
 8016b76:	4622      	mov	r2, r4
 8016b78:	210a      	movs	r1, #10
 8016b7a:	4628      	mov	r0, r5
 8016b7c:	f000 f888 	bl	8016c90 <__swbuf_r>
 8016b80:	3001      	adds	r0, #1
 8016b82:	d011      	beq.n	8016ba8 <_puts_r+0x84>
 8016b84:	250a      	movs	r5, #10
 8016b86:	e011      	b.n	8016bac <_puts_r+0x88>
 8016b88:	4b1b      	ldr	r3, [pc, #108]	; (8016bf8 <_puts_r+0xd4>)
 8016b8a:	429c      	cmp	r4, r3
 8016b8c:	d101      	bne.n	8016b92 <_puts_r+0x6e>
 8016b8e:	68ac      	ldr	r4, [r5, #8]
 8016b90:	e7da      	b.n	8016b48 <_puts_r+0x24>
 8016b92:	4b1a      	ldr	r3, [pc, #104]	; (8016bfc <_puts_r+0xd8>)
 8016b94:	429c      	cmp	r4, r3
 8016b96:	bf08      	it	eq
 8016b98:	68ec      	ldreq	r4, [r5, #12]
 8016b9a:	e7d5      	b.n	8016b48 <_puts_r+0x24>
 8016b9c:	4621      	mov	r1, r4
 8016b9e:	4628      	mov	r0, r5
 8016ba0:	f000 f8c8 	bl	8016d34 <__swsetup_r>
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d0dd      	beq.n	8016b64 <_puts_r+0x40>
 8016ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8016bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bae:	07da      	lsls	r2, r3, #31
 8016bb0:	d405      	bmi.n	8016bbe <_puts_r+0x9a>
 8016bb2:	89a3      	ldrh	r3, [r4, #12]
 8016bb4:	059b      	lsls	r3, r3, #22
 8016bb6:	d402      	bmi.n	8016bbe <_puts_r+0x9a>
 8016bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bba:	f000 fb12 	bl	80171e2 <__retarget_lock_release_recursive>
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	bd70      	pop	{r4, r5, r6, pc}
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	da04      	bge.n	8016bd0 <_puts_r+0xac>
 8016bc6:	69a2      	ldr	r2, [r4, #24]
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	dc06      	bgt.n	8016bda <_puts_r+0xb6>
 8016bcc:	290a      	cmp	r1, #10
 8016bce:	d004      	beq.n	8016bda <_puts_r+0xb6>
 8016bd0:	6823      	ldr	r3, [r4, #0]
 8016bd2:	1c5a      	adds	r2, r3, #1
 8016bd4:	6022      	str	r2, [r4, #0]
 8016bd6:	7019      	strb	r1, [r3, #0]
 8016bd8:	e7c5      	b.n	8016b66 <_puts_r+0x42>
 8016bda:	4622      	mov	r2, r4
 8016bdc:	4628      	mov	r0, r5
 8016bde:	f000 f857 	bl	8016c90 <__swbuf_r>
 8016be2:	3001      	adds	r0, #1
 8016be4:	d1bf      	bne.n	8016b66 <_puts_r+0x42>
 8016be6:	e7df      	b.n	8016ba8 <_puts_r+0x84>
 8016be8:	6823      	ldr	r3, [r4, #0]
 8016bea:	250a      	movs	r5, #10
 8016bec:	1c5a      	adds	r2, r3, #1
 8016bee:	6022      	str	r2, [r4, #0]
 8016bf0:	701d      	strb	r5, [r3, #0]
 8016bf2:	e7db      	b.n	8016bac <_puts_r+0x88>
 8016bf4:	08017fa0 	.word	0x08017fa0
 8016bf8:	08017fc0 	.word	0x08017fc0
 8016bfc:	08017f80 	.word	0x08017f80

08016c00 <puts>:
 8016c00:	4b02      	ldr	r3, [pc, #8]	; (8016c0c <puts+0xc>)
 8016c02:	4601      	mov	r1, r0
 8016c04:	6818      	ldr	r0, [r3, #0]
 8016c06:	f7ff bf8d 	b.w	8016b24 <_puts_r>
 8016c0a:	bf00      	nop
 8016c0c:	20000098 	.word	0x20000098

08016c10 <rand>:
 8016c10:	4b17      	ldr	r3, [pc, #92]	; (8016c70 <rand+0x60>)
 8016c12:	b510      	push	{r4, lr}
 8016c14:	681c      	ldr	r4, [r3, #0]
 8016c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016c18:	b9b3      	cbnz	r3, 8016c48 <rand+0x38>
 8016c1a:	2018      	movs	r0, #24
 8016c1c:	f000 fb46 	bl	80172ac <malloc>
 8016c20:	63a0      	str	r0, [r4, #56]	; 0x38
 8016c22:	b928      	cbnz	r0, 8016c30 <rand+0x20>
 8016c24:	4602      	mov	r2, r0
 8016c26:	4b13      	ldr	r3, [pc, #76]	; (8016c74 <rand+0x64>)
 8016c28:	4813      	ldr	r0, [pc, #76]	; (8016c78 <rand+0x68>)
 8016c2a:	214e      	movs	r1, #78	; 0x4e
 8016c2c:	f000 f8f0 	bl	8016e10 <__assert_func>
 8016c30:	4a12      	ldr	r2, [pc, #72]	; (8016c7c <rand+0x6c>)
 8016c32:	4b13      	ldr	r3, [pc, #76]	; (8016c80 <rand+0x70>)
 8016c34:	e9c0 2300 	strd	r2, r3, [r0]
 8016c38:	4b12      	ldr	r3, [pc, #72]	; (8016c84 <rand+0x74>)
 8016c3a:	6083      	str	r3, [r0, #8]
 8016c3c:	230b      	movs	r3, #11
 8016c3e:	8183      	strh	r3, [r0, #12]
 8016c40:	2201      	movs	r2, #1
 8016c42:	2300      	movs	r3, #0
 8016c44:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016c48:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016c4a:	480f      	ldr	r0, [pc, #60]	; (8016c88 <rand+0x78>)
 8016c4c:	690a      	ldr	r2, [r1, #16]
 8016c4e:	694b      	ldr	r3, [r1, #20]
 8016c50:	4c0e      	ldr	r4, [pc, #56]	; (8016c8c <rand+0x7c>)
 8016c52:	4350      	muls	r0, r2
 8016c54:	fb04 0003 	mla	r0, r4, r3, r0
 8016c58:	fba2 3404 	umull	r3, r4, r2, r4
 8016c5c:	1c5a      	adds	r2, r3, #1
 8016c5e:	4404      	add	r4, r0
 8016c60:	f144 0000 	adc.w	r0, r4, #0
 8016c64:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016c68:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016c6c:	bd10      	pop	{r4, pc}
 8016c6e:	bf00      	nop
 8016c70:	20000098 	.word	0x20000098
 8016c74:	08017ecc 	.word	0x08017ecc
 8016c78:	08017ee3 	.word	0x08017ee3
 8016c7c:	abcd330e 	.word	0xabcd330e
 8016c80:	e66d1234 	.word	0xe66d1234
 8016c84:	0005deec 	.word	0x0005deec
 8016c88:	5851f42d 	.word	0x5851f42d
 8016c8c:	4c957f2d 	.word	0x4c957f2d

08016c90 <__swbuf_r>:
 8016c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c92:	460e      	mov	r6, r1
 8016c94:	4614      	mov	r4, r2
 8016c96:	4605      	mov	r5, r0
 8016c98:	b118      	cbz	r0, 8016ca2 <__swbuf_r+0x12>
 8016c9a:	6983      	ldr	r3, [r0, #24]
 8016c9c:	b90b      	cbnz	r3, 8016ca2 <__swbuf_r+0x12>
 8016c9e:	f000 f9ef 	bl	8017080 <__sinit>
 8016ca2:	4b21      	ldr	r3, [pc, #132]	; (8016d28 <__swbuf_r+0x98>)
 8016ca4:	429c      	cmp	r4, r3
 8016ca6:	d12b      	bne.n	8016d00 <__swbuf_r+0x70>
 8016ca8:	686c      	ldr	r4, [r5, #4]
 8016caa:	69a3      	ldr	r3, [r4, #24]
 8016cac:	60a3      	str	r3, [r4, #8]
 8016cae:	89a3      	ldrh	r3, [r4, #12]
 8016cb0:	071a      	lsls	r2, r3, #28
 8016cb2:	d52f      	bpl.n	8016d14 <__swbuf_r+0x84>
 8016cb4:	6923      	ldr	r3, [r4, #16]
 8016cb6:	b36b      	cbz	r3, 8016d14 <__swbuf_r+0x84>
 8016cb8:	6923      	ldr	r3, [r4, #16]
 8016cba:	6820      	ldr	r0, [r4, #0]
 8016cbc:	1ac0      	subs	r0, r0, r3
 8016cbe:	6963      	ldr	r3, [r4, #20]
 8016cc0:	b2f6      	uxtb	r6, r6
 8016cc2:	4283      	cmp	r3, r0
 8016cc4:	4637      	mov	r7, r6
 8016cc6:	dc04      	bgt.n	8016cd2 <__swbuf_r+0x42>
 8016cc8:	4621      	mov	r1, r4
 8016cca:	4628      	mov	r0, r5
 8016ccc:	f000 f944 	bl	8016f58 <_fflush_r>
 8016cd0:	bb30      	cbnz	r0, 8016d20 <__swbuf_r+0x90>
 8016cd2:	68a3      	ldr	r3, [r4, #8]
 8016cd4:	3b01      	subs	r3, #1
 8016cd6:	60a3      	str	r3, [r4, #8]
 8016cd8:	6823      	ldr	r3, [r4, #0]
 8016cda:	1c5a      	adds	r2, r3, #1
 8016cdc:	6022      	str	r2, [r4, #0]
 8016cde:	701e      	strb	r6, [r3, #0]
 8016ce0:	6963      	ldr	r3, [r4, #20]
 8016ce2:	3001      	adds	r0, #1
 8016ce4:	4283      	cmp	r3, r0
 8016ce6:	d004      	beq.n	8016cf2 <__swbuf_r+0x62>
 8016ce8:	89a3      	ldrh	r3, [r4, #12]
 8016cea:	07db      	lsls	r3, r3, #31
 8016cec:	d506      	bpl.n	8016cfc <__swbuf_r+0x6c>
 8016cee:	2e0a      	cmp	r6, #10
 8016cf0:	d104      	bne.n	8016cfc <__swbuf_r+0x6c>
 8016cf2:	4621      	mov	r1, r4
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	f000 f92f 	bl	8016f58 <_fflush_r>
 8016cfa:	b988      	cbnz	r0, 8016d20 <__swbuf_r+0x90>
 8016cfc:	4638      	mov	r0, r7
 8016cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d00:	4b0a      	ldr	r3, [pc, #40]	; (8016d2c <__swbuf_r+0x9c>)
 8016d02:	429c      	cmp	r4, r3
 8016d04:	d101      	bne.n	8016d0a <__swbuf_r+0x7a>
 8016d06:	68ac      	ldr	r4, [r5, #8]
 8016d08:	e7cf      	b.n	8016caa <__swbuf_r+0x1a>
 8016d0a:	4b09      	ldr	r3, [pc, #36]	; (8016d30 <__swbuf_r+0xa0>)
 8016d0c:	429c      	cmp	r4, r3
 8016d0e:	bf08      	it	eq
 8016d10:	68ec      	ldreq	r4, [r5, #12]
 8016d12:	e7ca      	b.n	8016caa <__swbuf_r+0x1a>
 8016d14:	4621      	mov	r1, r4
 8016d16:	4628      	mov	r0, r5
 8016d18:	f000 f80c 	bl	8016d34 <__swsetup_r>
 8016d1c:	2800      	cmp	r0, #0
 8016d1e:	d0cb      	beq.n	8016cb8 <__swbuf_r+0x28>
 8016d20:	f04f 37ff 	mov.w	r7, #4294967295
 8016d24:	e7ea      	b.n	8016cfc <__swbuf_r+0x6c>
 8016d26:	bf00      	nop
 8016d28:	08017fa0 	.word	0x08017fa0
 8016d2c:	08017fc0 	.word	0x08017fc0
 8016d30:	08017f80 	.word	0x08017f80

08016d34 <__swsetup_r>:
 8016d34:	4b32      	ldr	r3, [pc, #200]	; (8016e00 <__swsetup_r+0xcc>)
 8016d36:	b570      	push	{r4, r5, r6, lr}
 8016d38:	681d      	ldr	r5, [r3, #0]
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	460c      	mov	r4, r1
 8016d3e:	b125      	cbz	r5, 8016d4a <__swsetup_r+0x16>
 8016d40:	69ab      	ldr	r3, [r5, #24]
 8016d42:	b913      	cbnz	r3, 8016d4a <__swsetup_r+0x16>
 8016d44:	4628      	mov	r0, r5
 8016d46:	f000 f99b 	bl	8017080 <__sinit>
 8016d4a:	4b2e      	ldr	r3, [pc, #184]	; (8016e04 <__swsetup_r+0xd0>)
 8016d4c:	429c      	cmp	r4, r3
 8016d4e:	d10f      	bne.n	8016d70 <__swsetup_r+0x3c>
 8016d50:	686c      	ldr	r4, [r5, #4]
 8016d52:	89a3      	ldrh	r3, [r4, #12]
 8016d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d58:	0719      	lsls	r1, r3, #28
 8016d5a:	d42c      	bmi.n	8016db6 <__swsetup_r+0x82>
 8016d5c:	06dd      	lsls	r5, r3, #27
 8016d5e:	d411      	bmi.n	8016d84 <__swsetup_r+0x50>
 8016d60:	2309      	movs	r3, #9
 8016d62:	6033      	str	r3, [r6, #0]
 8016d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016d68:	81a3      	strh	r3, [r4, #12]
 8016d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d6e:	e03e      	b.n	8016dee <__swsetup_r+0xba>
 8016d70:	4b25      	ldr	r3, [pc, #148]	; (8016e08 <__swsetup_r+0xd4>)
 8016d72:	429c      	cmp	r4, r3
 8016d74:	d101      	bne.n	8016d7a <__swsetup_r+0x46>
 8016d76:	68ac      	ldr	r4, [r5, #8]
 8016d78:	e7eb      	b.n	8016d52 <__swsetup_r+0x1e>
 8016d7a:	4b24      	ldr	r3, [pc, #144]	; (8016e0c <__swsetup_r+0xd8>)
 8016d7c:	429c      	cmp	r4, r3
 8016d7e:	bf08      	it	eq
 8016d80:	68ec      	ldreq	r4, [r5, #12]
 8016d82:	e7e6      	b.n	8016d52 <__swsetup_r+0x1e>
 8016d84:	0758      	lsls	r0, r3, #29
 8016d86:	d512      	bpl.n	8016dae <__swsetup_r+0x7a>
 8016d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d8a:	b141      	cbz	r1, 8016d9e <__swsetup_r+0x6a>
 8016d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d90:	4299      	cmp	r1, r3
 8016d92:	d002      	beq.n	8016d9a <__swsetup_r+0x66>
 8016d94:	4630      	mov	r0, r6
 8016d96:	f000 fa91 	bl	80172bc <_free_r>
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8016d9e:	89a3      	ldrh	r3, [r4, #12]
 8016da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016da4:	81a3      	strh	r3, [r4, #12]
 8016da6:	2300      	movs	r3, #0
 8016da8:	6063      	str	r3, [r4, #4]
 8016daa:	6923      	ldr	r3, [r4, #16]
 8016dac:	6023      	str	r3, [r4, #0]
 8016dae:	89a3      	ldrh	r3, [r4, #12]
 8016db0:	f043 0308 	orr.w	r3, r3, #8
 8016db4:	81a3      	strh	r3, [r4, #12]
 8016db6:	6923      	ldr	r3, [r4, #16]
 8016db8:	b94b      	cbnz	r3, 8016dce <__swsetup_r+0x9a>
 8016dba:	89a3      	ldrh	r3, [r4, #12]
 8016dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016dc4:	d003      	beq.n	8016dce <__swsetup_r+0x9a>
 8016dc6:	4621      	mov	r1, r4
 8016dc8:	4630      	mov	r0, r6
 8016dca:	f000 fa2f 	bl	801722c <__smakebuf_r>
 8016dce:	89a0      	ldrh	r0, [r4, #12]
 8016dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016dd4:	f010 0301 	ands.w	r3, r0, #1
 8016dd8:	d00a      	beq.n	8016df0 <__swsetup_r+0xbc>
 8016dda:	2300      	movs	r3, #0
 8016ddc:	60a3      	str	r3, [r4, #8]
 8016dde:	6963      	ldr	r3, [r4, #20]
 8016de0:	425b      	negs	r3, r3
 8016de2:	61a3      	str	r3, [r4, #24]
 8016de4:	6923      	ldr	r3, [r4, #16]
 8016de6:	b943      	cbnz	r3, 8016dfa <__swsetup_r+0xc6>
 8016de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016dec:	d1ba      	bne.n	8016d64 <__swsetup_r+0x30>
 8016dee:	bd70      	pop	{r4, r5, r6, pc}
 8016df0:	0781      	lsls	r1, r0, #30
 8016df2:	bf58      	it	pl
 8016df4:	6963      	ldrpl	r3, [r4, #20]
 8016df6:	60a3      	str	r3, [r4, #8]
 8016df8:	e7f4      	b.n	8016de4 <__swsetup_r+0xb0>
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	e7f7      	b.n	8016dee <__swsetup_r+0xba>
 8016dfe:	bf00      	nop
 8016e00:	20000098 	.word	0x20000098
 8016e04:	08017fa0 	.word	0x08017fa0
 8016e08:	08017fc0 	.word	0x08017fc0
 8016e0c:	08017f80 	.word	0x08017f80

08016e10 <__assert_func>:
 8016e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016e12:	4614      	mov	r4, r2
 8016e14:	461a      	mov	r2, r3
 8016e16:	4b09      	ldr	r3, [pc, #36]	; (8016e3c <__assert_func+0x2c>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	4605      	mov	r5, r0
 8016e1c:	68d8      	ldr	r0, [r3, #12]
 8016e1e:	b14c      	cbz	r4, 8016e34 <__assert_func+0x24>
 8016e20:	4b07      	ldr	r3, [pc, #28]	; (8016e40 <__assert_func+0x30>)
 8016e22:	9100      	str	r1, [sp, #0]
 8016e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016e28:	4906      	ldr	r1, [pc, #24]	; (8016e44 <__assert_func+0x34>)
 8016e2a:	462b      	mov	r3, r5
 8016e2c:	f000 f9a6 	bl	801717c <fiprintf>
 8016e30:	f000 fe42 	bl	8017ab8 <abort>
 8016e34:	4b04      	ldr	r3, [pc, #16]	; (8016e48 <__assert_func+0x38>)
 8016e36:	461c      	mov	r4, r3
 8016e38:	e7f3      	b.n	8016e22 <__assert_func+0x12>
 8016e3a:	bf00      	nop
 8016e3c:	20000098 	.word	0x20000098
 8016e40:	08017f42 	.word	0x08017f42
 8016e44:	08017f4f 	.word	0x08017f4f
 8016e48:	08017f7d 	.word	0x08017f7d

08016e4c <__sflush_r>:
 8016e4c:	898a      	ldrh	r2, [r1, #12]
 8016e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e52:	4605      	mov	r5, r0
 8016e54:	0710      	lsls	r0, r2, #28
 8016e56:	460c      	mov	r4, r1
 8016e58:	d458      	bmi.n	8016f0c <__sflush_r+0xc0>
 8016e5a:	684b      	ldr	r3, [r1, #4]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	dc05      	bgt.n	8016e6c <__sflush_r+0x20>
 8016e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	dc02      	bgt.n	8016e6c <__sflush_r+0x20>
 8016e66:	2000      	movs	r0, #0
 8016e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e6e:	2e00      	cmp	r6, #0
 8016e70:	d0f9      	beq.n	8016e66 <__sflush_r+0x1a>
 8016e72:	2300      	movs	r3, #0
 8016e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e78:	682f      	ldr	r7, [r5, #0]
 8016e7a:	602b      	str	r3, [r5, #0]
 8016e7c:	d032      	beq.n	8016ee4 <__sflush_r+0x98>
 8016e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e80:	89a3      	ldrh	r3, [r4, #12]
 8016e82:	075a      	lsls	r2, r3, #29
 8016e84:	d505      	bpl.n	8016e92 <__sflush_r+0x46>
 8016e86:	6863      	ldr	r3, [r4, #4]
 8016e88:	1ac0      	subs	r0, r0, r3
 8016e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e8c:	b10b      	cbz	r3, 8016e92 <__sflush_r+0x46>
 8016e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e90:	1ac0      	subs	r0, r0, r3
 8016e92:	2300      	movs	r3, #0
 8016e94:	4602      	mov	r2, r0
 8016e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e98:	6a21      	ldr	r1, [r4, #32]
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	47b0      	blx	r6
 8016e9e:	1c43      	adds	r3, r0, #1
 8016ea0:	89a3      	ldrh	r3, [r4, #12]
 8016ea2:	d106      	bne.n	8016eb2 <__sflush_r+0x66>
 8016ea4:	6829      	ldr	r1, [r5, #0]
 8016ea6:	291d      	cmp	r1, #29
 8016ea8:	d82c      	bhi.n	8016f04 <__sflush_r+0xb8>
 8016eaa:	4a2a      	ldr	r2, [pc, #168]	; (8016f54 <__sflush_r+0x108>)
 8016eac:	40ca      	lsrs	r2, r1
 8016eae:	07d6      	lsls	r6, r2, #31
 8016eb0:	d528      	bpl.n	8016f04 <__sflush_r+0xb8>
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	6062      	str	r2, [r4, #4]
 8016eb6:	04d9      	lsls	r1, r3, #19
 8016eb8:	6922      	ldr	r2, [r4, #16]
 8016eba:	6022      	str	r2, [r4, #0]
 8016ebc:	d504      	bpl.n	8016ec8 <__sflush_r+0x7c>
 8016ebe:	1c42      	adds	r2, r0, #1
 8016ec0:	d101      	bne.n	8016ec6 <__sflush_r+0x7a>
 8016ec2:	682b      	ldr	r3, [r5, #0]
 8016ec4:	b903      	cbnz	r3, 8016ec8 <__sflush_r+0x7c>
 8016ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8016ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016eca:	602f      	str	r7, [r5, #0]
 8016ecc:	2900      	cmp	r1, #0
 8016ece:	d0ca      	beq.n	8016e66 <__sflush_r+0x1a>
 8016ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ed4:	4299      	cmp	r1, r3
 8016ed6:	d002      	beq.n	8016ede <__sflush_r+0x92>
 8016ed8:	4628      	mov	r0, r5
 8016eda:	f000 f9ef 	bl	80172bc <_free_r>
 8016ede:	2000      	movs	r0, #0
 8016ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8016ee2:	e7c1      	b.n	8016e68 <__sflush_r+0x1c>
 8016ee4:	6a21      	ldr	r1, [r4, #32]
 8016ee6:	2301      	movs	r3, #1
 8016ee8:	4628      	mov	r0, r5
 8016eea:	47b0      	blx	r6
 8016eec:	1c41      	adds	r1, r0, #1
 8016eee:	d1c7      	bne.n	8016e80 <__sflush_r+0x34>
 8016ef0:	682b      	ldr	r3, [r5, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d0c4      	beq.n	8016e80 <__sflush_r+0x34>
 8016ef6:	2b1d      	cmp	r3, #29
 8016ef8:	d001      	beq.n	8016efe <__sflush_r+0xb2>
 8016efa:	2b16      	cmp	r3, #22
 8016efc:	d101      	bne.n	8016f02 <__sflush_r+0xb6>
 8016efe:	602f      	str	r7, [r5, #0]
 8016f00:	e7b1      	b.n	8016e66 <__sflush_r+0x1a>
 8016f02:	89a3      	ldrh	r3, [r4, #12]
 8016f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f08:	81a3      	strh	r3, [r4, #12]
 8016f0a:	e7ad      	b.n	8016e68 <__sflush_r+0x1c>
 8016f0c:	690f      	ldr	r7, [r1, #16]
 8016f0e:	2f00      	cmp	r7, #0
 8016f10:	d0a9      	beq.n	8016e66 <__sflush_r+0x1a>
 8016f12:	0793      	lsls	r3, r2, #30
 8016f14:	680e      	ldr	r6, [r1, #0]
 8016f16:	bf08      	it	eq
 8016f18:	694b      	ldreq	r3, [r1, #20]
 8016f1a:	600f      	str	r7, [r1, #0]
 8016f1c:	bf18      	it	ne
 8016f1e:	2300      	movne	r3, #0
 8016f20:	eba6 0807 	sub.w	r8, r6, r7
 8016f24:	608b      	str	r3, [r1, #8]
 8016f26:	f1b8 0f00 	cmp.w	r8, #0
 8016f2a:	dd9c      	ble.n	8016e66 <__sflush_r+0x1a>
 8016f2c:	6a21      	ldr	r1, [r4, #32]
 8016f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f30:	4643      	mov	r3, r8
 8016f32:	463a      	mov	r2, r7
 8016f34:	4628      	mov	r0, r5
 8016f36:	47b0      	blx	r6
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	dc06      	bgt.n	8016f4a <__sflush_r+0xfe>
 8016f3c:	89a3      	ldrh	r3, [r4, #12]
 8016f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f42:	81a3      	strh	r3, [r4, #12]
 8016f44:	f04f 30ff 	mov.w	r0, #4294967295
 8016f48:	e78e      	b.n	8016e68 <__sflush_r+0x1c>
 8016f4a:	4407      	add	r7, r0
 8016f4c:	eba8 0800 	sub.w	r8, r8, r0
 8016f50:	e7e9      	b.n	8016f26 <__sflush_r+0xda>
 8016f52:	bf00      	nop
 8016f54:	20400001 	.word	0x20400001

08016f58 <_fflush_r>:
 8016f58:	b538      	push	{r3, r4, r5, lr}
 8016f5a:	690b      	ldr	r3, [r1, #16]
 8016f5c:	4605      	mov	r5, r0
 8016f5e:	460c      	mov	r4, r1
 8016f60:	b913      	cbnz	r3, 8016f68 <_fflush_r+0x10>
 8016f62:	2500      	movs	r5, #0
 8016f64:	4628      	mov	r0, r5
 8016f66:	bd38      	pop	{r3, r4, r5, pc}
 8016f68:	b118      	cbz	r0, 8016f72 <_fflush_r+0x1a>
 8016f6a:	6983      	ldr	r3, [r0, #24]
 8016f6c:	b90b      	cbnz	r3, 8016f72 <_fflush_r+0x1a>
 8016f6e:	f000 f887 	bl	8017080 <__sinit>
 8016f72:	4b14      	ldr	r3, [pc, #80]	; (8016fc4 <_fflush_r+0x6c>)
 8016f74:	429c      	cmp	r4, r3
 8016f76:	d11b      	bne.n	8016fb0 <_fflush_r+0x58>
 8016f78:	686c      	ldr	r4, [r5, #4]
 8016f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d0ef      	beq.n	8016f62 <_fflush_r+0xa>
 8016f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f84:	07d0      	lsls	r0, r2, #31
 8016f86:	d404      	bmi.n	8016f92 <_fflush_r+0x3a>
 8016f88:	0599      	lsls	r1, r3, #22
 8016f8a:	d402      	bmi.n	8016f92 <_fflush_r+0x3a>
 8016f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f8e:	f000 f927 	bl	80171e0 <__retarget_lock_acquire_recursive>
 8016f92:	4628      	mov	r0, r5
 8016f94:	4621      	mov	r1, r4
 8016f96:	f7ff ff59 	bl	8016e4c <__sflush_r>
 8016f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f9c:	07da      	lsls	r2, r3, #31
 8016f9e:	4605      	mov	r5, r0
 8016fa0:	d4e0      	bmi.n	8016f64 <_fflush_r+0xc>
 8016fa2:	89a3      	ldrh	r3, [r4, #12]
 8016fa4:	059b      	lsls	r3, r3, #22
 8016fa6:	d4dd      	bmi.n	8016f64 <_fflush_r+0xc>
 8016fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016faa:	f000 f91a 	bl	80171e2 <__retarget_lock_release_recursive>
 8016fae:	e7d9      	b.n	8016f64 <_fflush_r+0xc>
 8016fb0:	4b05      	ldr	r3, [pc, #20]	; (8016fc8 <_fflush_r+0x70>)
 8016fb2:	429c      	cmp	r4, r3
 8016fb4:	d101      	bne.n	8016fba <_fflush_r+0x62>
 8016fb6:	68ac      	ldr	r4, [r5, #8]
 8016fb8:	e7df      	b.n	8016f7a <_fflush_r+0x22>
 8016fba:	4b04      	ldr	r3, [pc, #16]	; (8016fcc <_fflush_r+0x74>)
 8016fbc:	429c      	cmp	r4, r3
 8016fbe:	bf08      	it	eq
 8016fc0:	68ec      	ldreq	r4, [r5, #12]
 8016fc2:	e7da      	b.n	8016f7a <_fflush_r+0x22>
 8016fc4:	08017fa0 	.word	0x08017fa0
 8016fc8:	08017fc0 	.word	0x08017fc0
 8016fcc:	08017f80 	.word	0x08017f80

08016fd0 <std>:
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	b510      	push	{r4, lr}
 8016fd4:	4604      	mov	r4, r0
 8016fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8016fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016fde:	6083      	str	r3, [r0, #8]
 8016fe0:	8181      	strh	r1, [r0, #12]
 8016fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8016fe4:	81c2      	strh	r2, [r0, #14]
 8016fe6:	6183      	str	r3, [r0, #24]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	2208      	movs	r2, #8
 8016fec:	305c      	adds	r0, #92	; 0x5c
 8016fee:	f7ff fd79 	bl	8016ae4 <memset>
 8016ff2:	4b05      	ldr	r3, [pc, #20]	; (8017008 <std+0x38>)
 8016ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8016ff6:	4b05      	ldr	r3, [pc, #20]	; (801700c <std+0x3c>)
 8016ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8016ffa:	4b05      	ldr	r3, [pc, #20]	; (8017010 <std+0x40>)
 8016ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016ffe:	4b05      	ldr	r3, [pc, #20]	; (8017014 <std+0x44>)
 8017000:	6224      	str	r4, [r4, #32]
 8017002:	6323      	str	r3, [r4, #48]	; 0x30
 8017004:	bd10      	pop	{r4, pc}
 8017006:	bf00      	nop
 8017008:	08017a0d 	.word	0x08017a0d
 801700c:	08017a2f 	.word	0x08017a2f
 8017010:	08017a67 	.word	0x08017a67
 8017014:	08017a8b 	.word	0x08017a8b

08017018 <_cleanup_r>:
 8017018:	4901      	ldr	r1, [pc, #4]	; (8017020 <_cleanup_r+0x8>)
 801701a:	f000 b8c1 	b.w	80171a0 <_fwalk_reent>
 801701e:	bf00      	nop
 8017020:	08016f59 	.word	0x08016f59

08017024 <__sfmoreglue>:
 8017024:	b570      	push	{r4, r5, r6, lr}
 8017026:	1e4a      	subs	r2, r1, #1
 8017028:	2568      	movs	r5, #104	; 0x68
 801702a:	4355      	muls	r5, r2
 801702c:	460e      	mov	r6, r1
 801702e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017032:	f000 f993 	bl	801735c <_malloc_r>
 8017036:	4604      	mov	r4, r0
 8017038:	b140      	cbz	r0, 801704c <__sfmoreglue+0x28>
 801703a:	2100      	movs	r1, #0
 801703c:	e9c0 1600 	strd	r1, r6, [r0]
 8017040:	300c      	adds	r0, #12
 8017042:	60a0      	str	r0, [r4, #8]
 8017044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017048:	f7ff fd4c 	bl	8016ae4 <memset>
 801704c:	4620      	mov	r0, r4
 801704e:	bd70      	pop	{r4, r5, r6, pc}

08017050 <__sfp_lock_acquire>:
 8017050:	4801      	ldr	r0, [pc, #4]	; (8017058 <__sfp_lock_acquire+0x8>)
 8017052:	f000 b8c5 	b.w	80171e0 <__retarget_lock_acquire_recursive>
 8017056:	bf00      	nop
 8017058:	2000b074 	.word	0x2000b074

0801705c <__sfp_lock_release>:
 801705c:	4801      	ldr	r0, [pc, #4]	; (8017064 <__sfp_lock_release+0x8>)
 801705e:	f000 b8c0 	b.w	80171e2 <__retarget_lock_release_recursive>
 8017062:	bf00      	nop
 8017064:	2000b074 	.word	0x2000b074

08017068 <__sinit_lock_acquire>:
 8017068:	4801      	ldr	r0, [pc, #4]	; (8017070 <__sinit_lock_acquire+0x8>)
 801706a:	f000 b8b9 	b.w	80171e0 <__retarget_lock_acquire_recursive>
 801706e:	bf00      	nop
 8017070:	2000b06f 	.word	0x2000b06f

08017074 <__sinit_lock_release>:
 8017074:	4801      	ldr	r0, [pc, #4]	; (801707c <__sinit_lock_release+0x8>)
 8017076:	f000 b8b4 	b.w	80171e2 <__retarget_lock_release_recursive>
 801707a:	bf00      	nop
 801707c:	2000b06f 	.word	0x2000b06f

08017080 <__sinit>:
 8017080:	b510      	push	{r4, lr}
 8017082:	4604      	mov	r4, r0
 8017084:	f7ff fff0 	bl	8017068 <__sinit_lock_acquire>
 8017088:	69a3      	ldr	r3, [r4, #24]
 801708a:	b11b      	cbz	r3, 8017094 <__sinit+0x14>
 801708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017090:	f7ff bff0 	b.w	8017074 <__sinit_lock_release>
 8017094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017098:	6523      	str	r3, [r4, #80]	; 0x50
 801709a:	4b13      	ldr	r3, [pc, #76]	; (80170e8 <__sinit+0x68>)
 801709c:	4a13      	ldr	r2, [pc, #76]	; (80170ec <__sinit+0x6c>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80170a2:	42a3      	cmp	r3, r4
 80170a4:	bf04      	itt	eq
 80170a6:	2301      	moveq	r3, #1
 80170a8:	61a3      	streq	r3, [r4, #24]
 80170aa:	4620      	mov	r0, r4
 80170ac:	f000 f820 	bl	80170f0 <__sfp>
 80170b0:	6060      	str	r0, [r4, #4]
 80170b2:	4620      	mov	r0, r4
 80170b4:	f000 f81c 	bl	80170f0 <__sfp>
 80170b8:	60a0      	str	r0, [r4, #8]
 80170ba:	4620      	mov	r0, r4
 80170bc:	f000 f818 	bl	80170f0 <__sfp>
 80170c0:	2200      	movs	r2, #0
 80170c2:	60e0      	str	r0, [r4, #12]
 80170c4:	2104      	movs	r1, #4
 80170c6:	6860      	ldr	r0, [r4, #4]
 80170c8:	f7ff ff82 	bl	8016fd0 <std>
 80170cc:	68a0      	ldr	r0, [r4, #8]
 80170ce:	2201      	movs	r2, #1
 80170d0:	2109      	movs	r1, #9
 80170d2:	f7ff ff7d 	bl	8016fd0 <std>
 80170d6:	68e0      	ldr	r0, [r4, #12]
 80170d8:	2202      	movs	r2, #2
 80170da:	2112      	movs	r1, #18
 80170dc:	f7ff ff78 	bl	8016fd0 <std>
 80170e0:	2301      	movs	r3, #1
 80170e2:	61a3      	str	r3, [r4, #24]
 80170e4:	e7d2      	b.n	801708c <__sinit+0xc>
 80170e6:	bf00      	nop
 80170e8:	08017ec8 	.word	0x08017ec8
 80170ec:	08017019 	.word	0x08017019

080170f0 <__sfp>:
 80170f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f2:	4607      	mov	r7, r0
 80170f4:	f7ff ffac 	bl	8017050 <__sfp_lock_acquire>
 80170f8:	4b1e      	ldr	r3, [pc, #120]	; (8017174 <__sfp+0x84>)
 80170fa:	681e      	ldr	r6, [r3, #0]
 80170fc:	69b3      	ldr	r3, [r6, #24]
 80170fe:	b913      	cbnz	r3, 8017106 <__sfp+0x16>
 8017100:	4630      	mov	r0, r6
 8017102:	f7ff ffbd 	bl	8017080 <__sinit>
 8017106:	3648      	adds	r6, #72	; 0x48
 8017108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801710c:	3b01      	subs	r3, #1
 801710e:	d503      	bpl.n	8017118 <__sfp+0x28>
 8017110:	6833      	ldr	r3, [r6, #0]
 8017112:	b30b      	cbz	r3, 8017158 <__sfp+0x68>
 8017114:	6836      	ldr	r6, [r6, #0]
 8017116:	e7f7      	b.n	8017108 <__sfp+0x18>
 8017118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801711c:	b9d5      	cbnz	r5, 8017154 <__sfp+0x64>
 801711e:	4b16      	ldr	r3, [pc, #88]	; (8017178 <__sfp+0x88>)
 8017120:	60e3      	str	r3, [r4, #12]
 8017122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017126:	6665      	str	r5, [r4, #100]	; 0x64
 8017128:	f000 f859 	bl	80171de <__retarget_lock_init_recursive>
 801712c:	f7ff ff96 	bl	801705c <__sfp_lock_release>
 8017130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017138:	6025      	str	r5, [r4, #0]
 801713a:	61a5      	str	r5, [r4, #24]
 801713c:	2208      	movs	r2, #8
 801713e:	4629      	mov	r1, r5
 8017140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017144:	f7ff fcce 	bl	8016ae4 <memset>
 8017148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801714c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017150:	4620      	mov	r0, r4
 8017152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017154:	3468      	adds	r4, #104	; 0x68
 8017156:	e7d9      	b.n	801710c <__sfp+0x1c>
 8017158:	2104      	movs	r1, #4
 801715a:	4638      	mov	r0, r7
 801715c:	f7ff ff62 	bl	8017024 <__sfmoreglue>
 8017160:	4604      	mov	r4, r0
 8017162:	6030      	str	r0, [r6, #0]
 8017164:	2800      	cmp	r0, #0
 8017166:	d1d5      	bne.n	8017114 <__sfp+0x24>
 8017168:	f7ff ff78 	bl	801705c <__sfp_lock_release>
 801716c:	230c      	movs	r3, #12
 801716e:	603b      	str	r3, [r7, #0]
 8017170:	e7ee      	b.n	8017150 <__sfp+0x60>
 8017172:	bf00      	nop
 8017174:	08017ec8 	.word	0x08017ec8
 8017178:	ffff0001 	.word	0xffff0001

0801717c <fiprintf>:
 801717c:	b40e      	push	{r1, r2, r3}
 801717e:	b503      	push	{r0, r1, lr}
 8017180:	4601      	mov	r1, r0
 8017182:	ab03      	add	r3, sp, #12
 8017184:	4805      	ldr	r0, [pc, #20]	; (801719c <fiprintf+0x20>)
 8017186:	f853 2b04 	ldr.w	r2, [r3], #4
 801718a:	6800      	ldr	r0, [r0, #0]
 801718c:	9301      	str	r3, [sp, #4]
 801718e:	f000 f969 	bl	8017464 <_vfiprintf_r>
 8017192:	b002      	add	sp, #8
 8017194:	f85d eb04 	ldr.w	lr, [sp], #4
 8017198:	b003      	add	sp, #12
 801719a:	4770      	bx	lr
 801719c:	20000098 	.word	0x20000098

080171a0 <_fwalk_reent>:
 80171a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171a4:	4606      	mov	r6, r0
 80171a6:	4688      	mov	r8, r1
 80171a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80171ac:	2700      	movs	r7, #0
 80171ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171b2:	f1b9 0901 	subs.w	r9, r9, #1
 80171b6:	d505      	bpl.n	80171c4 <_fwalk_reent+0x24>
 80171b8:	6824      	ldr	r4, [r4, #0]
 80171ba:	2c00      	cmp	r4, #0
 80171bc:	d1f7      	bne.n	80171ae <_fwalk_reent+0xe>
 80171be:	4638      	mov	r0, r7
 80171c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171c4:	89ab      	ldrh	r3, [r5, #12]
 80171c6:	2b01      	cmp	r3, #1
 80171c8:	d907      	bls.n	80171da <_fwalk_reent+0x3a>
 80171ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171ce:	3301      	adds	r3, #1
 80171d0:	d003      	beq.n	80171da <_fwalk_reent+0x3a>
 80171d2:	4629      	mov	r1, r5
 80171d4:	4630      	mov	r0, r6
 80171d6:	47c0      	blx	r8
 80171d8:	4307      	orrs	r7, r0
 80171da:	3568      	adds	r5, #104	; 0x68
 80171dc:	e7e9      	b.n	80171b2 <_fwalk_reent+0x12>

080171de <__retarget_lock_init_recursive>:
 80171de:	4770      	bx	lr

080171e0 <__retarget_lock_acquire_recursive>:
 80171e0:	4770      	bx	lr

080171e2 <__retarget_lock_release_recursive>:
 80171e2:	4770      	bx	lr

080171e4 <__swhatbuf_r>:
 80171e4:	b570      	push	{r4, r5, r6, lr}
 80171e6:	460e      	mov	r6, r1
 80171e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171ec:	2900      	cmp	r1, #0
 80171ee:	b096      	sub	sp, #88	; 0x58
 80171f0:	4614      	mov	r4, r2
 80171f2:	461d      	mov	r5, r3
 80171f4:	da07      	bge.n	8017206 <__swhatbuf_r+0x22>
 80171f6:	2300      	movs	r3, #0
 80171f8:	602b      	str	r3, [r5, #0]
 80171fa:	89b3      	ldrh	r3, [r6, #12]
 80171fc:	061a      	lsls	r2, r3, #24
 80171fe:	d410      	bmi.n	8017222 <__swhatbuf_r+0x3e>
 8017200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017204:	e00e      	b.n	8017224 <__swhatbuf_r+0x40>
 8017206:	466a      	mov	r2, sp
 8017208:	f000 fc6e 	bl	8017ae8 <_fstat_r>
 801720c:	2800      	cmp	r0, #0
 801720e:	dbf2      	blt.n	80171f6 <__swhatbuf_r+0x12>
 8017210:	9a01      	ldr	r2, [sp, #4]
 8017212:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017216:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801721a:	425a      	negs	r2, r3
 801721c:	415a      	adcs	r2, r3
 801721e:	602a      	str	r2, [r5, #0]
 8017220:	e7ee      	b.n	8017200 <__swhatbuf_r+0x1c>
 8017222:	2340      	movs	r3, #64	; 0x40
 8017224:	2000      	movs	r0, #0
 8017226:	6023      	str	r3, [r4, #0]
 8017228:	b016      	add	sp, #88	; 0x58
 801722a:	bd70      	pop	{r4, r5, r6, pc}

0801722c <__smakebuf_r>:
 801722c:	898b      	ldrh	r3, [r1, #12]
 801722e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017230:	079d      	lsls	r5, r3, #30
 8017232:	4606      	mov	r6, r0
 8017234:	460c      	mov	r4, r1
 8017236:	d507      	bpl.n	8017248 <__smakebuf_r+0x1c>
 8017238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801723c:	6023      	str	r3, [r4, #0]
 801723e:	6123      	str	r3, [r4, #16]
 8017240:	2301      	movs	r3, #1
 8017242:	6163      	str	r3, [r4, #20]
 8017244:	b002      	add	sp, #8
 8017246:	bd70      	pop	{r4, r5, r6, pc}
 8017248:	ab01      	add	r3, sp, #4
 801724a:	466a      	mov	r2, sp
 801724c:	f7ff ffca 	bl	80171e4 <__swhatbuf_r>
 8017250:	9900      	ldr	r1, [sp, #0]
 8017252:	4605      	mov	r5, r0
 8017254:	4630      	mov	r0, r6
 8017256:	f000 f881 	bl	801735c <_malloc_r>
 801725a:	b948      	cbnz	r0, 8017270 <__smakebuf_r+0x44>
 801725c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017260:	059a      	lsls	r2, r3, #22
 8017262:	d4ef      	bmi.n	8017244 <__smakebuf_r+0x18>
 8017264:	f023 0303 	bic.w	r3, r3, #3
 8017268:	f043 0302 	orr.w	r3, r3, #2
 801726c:	81a3      	strh	r3, [r4, #12]
 801726e:	e7e3      	b.n	8017238 <__smakebuf_r+0xc>
 8017270:	4b0d      	ldr	r3, [pc, #52]	; (80172a8 <__smakebuf_r+0x7c>)
 8017272:	62b3      	str	r3, [r6, #40]	; 0x28
 8017274:	89a3      	ldrh	r3, [r4, #12]
 8017276:	6020      	str	r0, [r4, #0]
 8017278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801727c:	81a3      	strh	r3, [r4, #12]
 801727e:	9b00      	ldr	r3, [sp, #0]
 8017280:	6163      	str	r3, [r4, #20]
 8017282:	9b01      	ldr	r3, [sp, #4]
 8017284:	6120      	str	r0, [r4, #16]
 8017286:	b15b      	cbz	r3, 80172a0 <__smakebuf_r+0x74>
 8017288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801728c:	4630      	mov	r0, r6
 801728e:	f000 fc3d 	bl	8017b0c <_isatty_r>
 8017292:	b128      	cbz	r0, 80172a0 <__smakebuf_r+0x74>
 8017294:	89a3      	ldrh	r3, [r4, #12]
 8017296:	f023 0303 	bic.w	r3, r3, #3
 801729a:	f043 0301 	orr.w	r3, r3, #1
 801729e:	81a3      	strh	r3, [r4, #12]
 80172a0:	89a0      	ldrh	r0, [r4, #12]
 80172a2:	4305      	orrs	r5, r0
 80172a4:	81a5      	strh	r5, [r4, #12]
 80172a6:	e7cd      	b.n	8017244 <__smakebuf_r+0x18>
 80172a8:	08017019 	.word	0x08017019

080172ac <malloc>:
 80172ac:	4b02      	ldr	r3, [pc, #8]	; (80172b8 <malloc+0xc>)
 80172ae:	4601      	mov	r1, r0
 80172b0:	6818      	ldr	r0, [r3, #0]
 80172b2:	f000 b853 	b.w	801735c <_malloc_r>
 80172b6:	bf00      	nop
 80172b8:	20000098 	.word	0x20000098

080172bc <_free_r>:
 80172bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172be:	2900      	cmp	r1, #0
 80172c0:	d048      	beq.n	8017354 <_free_r+0x98>
 80172c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172c6:	9001      	str	r0, [sp, #4]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	f1a1 0404 	sub.w	r4, r1, #4
 80172ce:	bfb8      	it	lt
 80172d0:	18e4      	addlt	r4, r4, r3
 80172d2:	f000 fc3d 	bl	8017b50 <__malloc_lock>
 80172d6:	4a20      	ldr	r2, [pc, #128]	; (8017358 <_free_r+0x9c>)
 80172d8:	9801      	ldr	r0, [sp, #4]
 80172da:	6813      	ldr	r3, [r2, #0]
 80172dc:	4615      	mov	r5, r2
 80172de:	b933      	cbnz	r3, 80172ee <_free_r+0x32>
 80172e0:	6063      	str	r3, [r4, #4]
 80172e2:	6014      	str	r4, [r2, #0]
 80172e4:	b003      	add	sp, #12
 80172e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172ea:	f000 bc37 	b.w	8017b5c <__malloc_unlock>
 80172ee:	42a3      	cmp	r3, r4
 80172f0:	d90b      	bls.n	801730a <_free_r+0x4e>
 80172f2:	6821      	ldr	r1, [r4, #0]
 80172f4:	1862      	adds	r2, r4, r1
 80172f6:	4293      	cmp	r3, r2
 80172f8:	bf04      	itt	eq
 80172fa:	681a      	ldreq	r2, [r3, #0]
 80172fc:	685b      	ldreq	r3, [r3, #4]
 80172fe:	6063      	str	r3, [r4, #4]
 8017300:	bf04      	itt	eq
 8017302:	1852      	addeq	r2, r2, r1
 8017304:	6022      	streq	r2, [r4, #0]
 8017306:	602c      	str	r4, [r5, #0]
 8017308:	e7ec      	b.n	80172e4 <_free_r+0x28>
 801730a:	461a      	mov	r2, r3
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	b10b      	cbz	r3, 8017314 <_free_r+0x58>
 8017310:	42a3      	cmp	r3, r4
 8017312:	d9fa      	bls.n	801730a <_free_r+0x4e>
 8017314:	6811      	ldr	r1, [r2, #0]
 8017316:	1855      	adds	r5, r2, r1
 8017318:	42a5      	cmp	r5, r4
 801731a:	d10b      	bne.n	8017334 <_free_r+0x78>
 801731c:	6824      	ldr	r4, [r4, #0]
 801731e:	4421      	add	r1, r4
 8017320:	1854      	adds	r4, r2, r1
 8017322:	42a3      	cmp	r3, r4
 8017324:	6011      	str	r1, [r2, #0]
 8017326:	d1dd      	bne.n	80172e4 <_free_r+0x28>
 8017328:	681c      	ldr	r4, [r3, #0]
 801732a:	685b      	ldr	r3, [r3, #4]
 801732c:	6053      	str	r3, [r2, #4]
 801732e:	4421      	add	r1, r4
 8017330:	6011      	str	r1, [r2, #0]
 8017332:	e7d7      	b.n	80172e4 <_free_r+0x28>
 8017334:	d902      	bls.n	801733c <_free_r+0x80>
 8017336:	230c      	movs	r3, #12
 8017338:	6003      	str	r3, [r0, #0]
 801733a:	e7d3      	b.n	80172e4 <_free_r+0x28>
 801733c:	6825      	ldr	r5, [r4, #0]
 801733e:	1961      	adds	r1, r4, r5
 8017340:	428b      	cmp	r3, r1
 8017342:	bf04      	itt	eq
 8017344:	6819      	ldreq	r1, [r3, #0]
 8017346:	685b      	ldreq	r3, [r3, #4]
 8017348:	6063      	str	r3, [r4, #4]
 801734a:	bf04      	itt	eq
 801734c:	1949      	addeq	r1, r1, r5
 801734e:	6021      	streq	r1, [r4, #0]
 8017350:	6054      	str	r4, [r2, #4]
 8017352:	e7c7      	b.n	80172e4 <_free_r+0x28>
 8017354:	b003      	add	sp, #12
 8017356:	bd30      	pop	{r4, r5, pc}
 8017358:	20007efc 	.word	0x20007efc

0801735c <_malloc_r>:
 801735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801735e:	1ccd      	adds	r5, r1, #3
 8017360:	f025 0503 	bic.w	r5, r5, #3
 8017364:	3508      	adds	r5, #8
 8017366:	2d0c      	cmp	r5, #12
 8017368:	bf38      	it	cc
 801736a:	250c      	movcc	r5, #12
 801736c:	2d00      	cmp	r5, #0
 801736e:	4606      	mov	r6, r0
 8017370:	db01      	blt.n	8017376 <_malloc_r+0x1a>
 8017372:	42a9      	cmp	r1, r5
 8017374:	d903      	bls.n	801737e <_malloc_r+0x22>
 8017376:	230c      	movs	r3, #12
 8017378:	6033      	str	r3, [r6, #0]
 801737a:	2000      	movs	r0, #0
 801737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801737e:	f000 fbe7 	bl	8017b50 <__malloc_lock>
 8017382:	4921      	ldr	r1, [pc, #132]	; (8017408 <_malloc_r+0xac>)
 8017384:	680a      	ldr	r2, [r1, #0]
 8017386:	4614      	mov	r4, r2
 8017388:	b99c      	cbnz	r4, 80173b2 <_malloc_r+0x56>
 801738a:	4f20      	ldr	r7, [pc, #128]	; (801740c <_malloc_r+0xb0>)
 801738c:	683b      	ldr	r3, [r7, #0]
 801738e:	b923      	cbnz	r3, 801739a <_malloc_r+0x3e>
 8017390:	4621      	mov	r1, r4
 8017392:	4630      	mov	r0, r6
 8017394:	f000 fb2a 	bl	80179ec <_sbrk_r>
 8017398:	6038      	str	r0, [r7, #0]
 801739a:	4629      	mov	r1, r5
 801739c:	4630      	mov	r0, r6
 801739e:	f000 fb25 	bl	80179ec <_sbrk_r>
 80173a2:	1c43      	adds	r3, r0, #1
 80173a4:	d123      	bne.n	80173ee <_malloc_r+0x92>
 80173a6:	230c      	movs	r3, #12
 80173a8:	6033      	str	r3, [r6, #0]
 80173aa:	4630      	mov	r0, r6
 80173ac:	f000 fbd6 	bl	8017b5c <__malloc_unlock>
 80173b0:	e7e3      	b.n	801737a <_malloc_r+0x1e>
 80173b2:	6823      	ldr	r3, [r4, #0]
 80173b4:	1b5b      	subs	r3, r3, r5
 80173b6:	d417      	bmi.n	80173e8 <_malloc_r+0x8c>
 80173b8:	2b0b      	cmp	r3, #11
 80173ba:	d903      	bls.n	80173c4 <_malloc_r+0x68>
 80173bc:	6023      	str	r3, [r4, #0]
 80173be:	441c      	add	r4, r3
 80173c0:	6025      	str	r5, [r4, #0]
 80173c2:	e004      	b.n	80173ce <_malloc_r+0x72>
 80173c4:	6863      	ldr	r3, [r4, #4]
 80173c6:	42a2      	cmp	r2, r4
 80173c8:	bf0c      	ite	eq
 80173ca:	600b      	streq	r3, [r1, #0]
 80173cc:	6053      	strne	r3, [r2, #4]
 80173ce:	4630      	mov	r0, r6
 80173d0:	f000 fbc4 	bl	8017b5c <__malloc_unlock>
 80173d4:	f104 000b 	add.w	r0, r4, #11
 80173d8:	1d23      	adds	r3, r4, #4
 80173da:	f020 0007 	bic.w	r0, r0, #7
 80173de:	1ac2      	subs	r2, r0, r3
 80173e0:	d0cc      	beq.n	801737c <_malloc_r+0x20>
 80173e2:	1a1b      	subs	r3, r3, r0
 80173e4:	50a3      	str	r3, [r4, r2]
 80173e6:	e7c9      	b.n	801737c <_malloc_r+0x20>
 80173e8:	4622      	mov	r2, r4
 80173ea:	6864      	ldr	r4, [r4, #4]
 80173ec:	e7cc      	b.n	8017388 <_malloc_r+0x2c>
 80173ee:	1cc4      	adds	r4, r0, #3
 80173f0:	f024 0403 	bic.w	r4, r4, #3
 80173f4:	42a0      	cmp	r0, r4
 80173f6:	d0e3      	beq.n	80173c0 <_malloc_r+0x64>
 80173f8:	1a21      	subs	r1, r4, r0
 80173fa:	4630      	mov	r0, r6
 80173fc:	f000 faf6 	bl	80179ec <_sbrk_r>
 8017400:	3001      	adds	r0, #1
 8017402:	d1dd      	bne.n	80173c0 <_malloc_r+0x64>
 8017404:	e7cf      	b.n	80173a6 <_malloc_r+0x4a>
 8017406:	bf00      	nop
 8017408:	20007efc 	.word	0x20007efc
 801740c:	20007f00 	.word	0x20007f00

08017410 <__sfputc_r>:
 8017410:	6893      	ldr	r3, [r2, #8]
 8017412:	3b01      	subs	r3, #1
 8017414:	2b00      	cmp	r3, #0
 8017416:	b410      	push	{r4}
 8017418:	6093      	str	r3, [r2, #8]
 801741a:	da08      	bge.n	801742e <__sfputc_r+0x1e>
 801741c:	6994      	ldr	r4, [r2, #24]
 801741e:	42a3      	cmp	r3, r4
 8017420:	db01      	blt.n	8017426 <__sfputc_r+0x16>
 8017422:	290a      	cmp	r1, #10
 8017424:	d103      	bne.n	801742e <__sfputc_r+0x1e>
 8017426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801742a:	f7ff bc31 	b.w	8016c90 <__swbuf_r>
 801742e:	6813      	ldr	r3, [r2, #0]
 8017430:	1c58      	adds	r0, r3, #1
 8017432:	6010      	str	r0, [r2, #0]
 8017434:	7019      	strb	r1, [r3, #0]
 8017436:	4608      	mov	r0, r1
 8017438:	f85d 4b04 	ldr.w	r4, [sp], #4
 801743c:	4770      	bx	lr

0801743e <__sfputs_r>:
 801743e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017440:	4606      	mov	r6, r0
 8017442:	460f      	mov	r7, r1
 8017444:	4614      	mov	r4, r2
 8017446:	18d5      	adds	r5, r2, r3
 8017448:	42ac      	cmp	r4, r5
 801744a:	d101      	bne.n	8017450 <__sfputs_r+0x12>
 801744c:	2000      	movs	r0, #0
 801744e:	e007      	b.n	8017460 <__sfputs_r+0x22>
 8017450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017454:	463a      	mov	r2, r7
 8017456:	4630      	mov	r0, r6
 8017458:	f7ff ffda 	bl	8017410 <__sfputc_r>
 801745c:	1c43      	adds	r3, r0, #1
 801745e:	d1f3      	bne.n	8017448 <__sfputs_r+0xa>
 8017460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017464 <_vfiprintf_r>:
 8017464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017468:	460d      	mov	r5, r1
 801746a:	b09d      	sub	sp, #116	; 0x74
 801746c:	4614      	mov	r4, r2
 801746e:	4698      	mov	r8, r3
 8017470:	4606      	mov	r6, r0
 8017472:	b118      	cbz	r0, 801747c <_vfiprintf_r+0x18>
 8017474:	6983      	ldr	r3, [r0, #24]
 8017476:	b90b      	cbnz	r3, 801747c <_vfiprintf_r+0x18>
 8017478:	f7ff fe02 	bl	8017080 <__sinit>
 801747c:	4b89      	ldr	r3, [pc, #548]	; (80176a4 <_vfiprintf_r+0x240>)
 801747e:	429d      	cmp	r5, r3
 8017480:	d11b      	bne.n	80174ba <_vfiprintf_r+0x56>
 8017482:	6875      	ldr	r5, [r6, #4]
 8017484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017486:	07d9      	lsls	r1, r3, #31
 8017488:	d405      	bmi.n	8017496 <_vfiprintf_r+0x32>
 801748a:	89ab      	ldrh	r3, [r5, #12]
 801748c:	059a      	lsls	r2, r3, #22
 801748e:	d402      	bmi.n	8017496 <_vfiprintf_r+0x32>
 8017490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017492:	f7ff fea5 	bl	80171e0 <__retarget_lock_acquire_recursive>
 8017496:	89ab      	ldrh	r3, [r5, #12]
 8017498:	071b      	lsls	r3, r3, #28
 801749a:	d501      	bpl.n	80174a0 <_vfiprintf_r+0x3c>
 801749c:	692b      	ldr	r3, [r5, #16]
 801749e:	b9eb      	cbnz	r3, 80174dc <_vfiprintf_r+0x78>
 80174a0:	4629      	mov	r1, r5
 80174a2:	4630      	mov	r0, r6
 80174a4:	f7ff fc46 	bl	8016d34 <__swsetup_r>
 80174a8:	b1c0      	cbz	r0, 80174dc <_vfiprintf_r+0x78>
 80174aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174ac:	07dc      	lsls	r4, r3, #31
 80174ae:	d50e      	bpl.n	80174ce <_vfiprintf_r+0x6a>
 80174b0:	f04f 30ff 	mov.w	r0, #4294967295
 80174b4:	b01d      	add	sp, #116	; 0x74
 80174b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174ba:	4b7b      	ldr	r3, [pc, #492]	; (80176a8 <_vfiprintf_r+0x244>)
 80174bc:	429d      	cmp	r5, r3
 80174be:	d101      	bne.n	80174c4 <_vfiprintf_r+0x60>
 80174c0:	68b5      	ldr	r5, [r6, #8]
 80174c2:	e7df      	b.n	8017484 <_vfiprintf_r+0x20>
 80174c4:	4b79      	ldr	r3, [pc, #484]	; (80176ac <_vfiprintf_r+0x248>)
 80174c6:	429d      	cmp	r5, r3
 80174c8:	bf08      	it	eq
 80174ca:	68f5      	ldreq	r5, [r6, #12]
 80174cc:	e7da      	b.n	8017484 <_vfiprintf_r+0x20>
 80174ce:	89ab      	ldrh	r3, [r5, #12]
 80174d0:	0598      	lsls	r0, r3, #22
 80174d2:	d4ed      	bmi.n	80174b0 <_vfiprintf_r+0x4c>
 80174d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174d6:	f7ff fe84 	bl	80171e2 <__retarget_lock_release_recursive>
 80174da:	e7e9      	b.n	80174b0 <_vfiprintf_r+0x4c>
 80174dc:	2300      	movs	r3, #0
 80174de:	9309      	str	r3, [sp, #36]	; 0x24
 80174e0:	2320      	movs	r3, #32
 80174e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80174ea:	2330      	movs	r3, #48	; 0x30
 80174ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80176b0 <_vfiprintf_r+0x24c>
 80174f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174f4:	f04f 0901 	mov.w	r9, #1
 80174f8:	4623      	mov	r3, r4
 80174fa:	469a      	mov	sl, r3
 80174fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017500:	b10a      	cbz	r2, 8017506 <_vfiprintf_r+0xa2>
 8017502:	2a25      	cmp	r2, #37	; 0x25
 8017504:	d1f9      	bne.n	80174fa <_vfiprintf_r+0x96>
 8017506:	ebba 0b04 	subs.w	fp, sl, r4
 801750a:	d00b      	beq.n	8017524 <_vfiprintf_r+0xc0>
 801750c:	465b      	mov	r3, fp
 801750e:	4622      	mov	r2, r4
 8017510:	4629      	mov	r1, r5
 8017512:	4630      	mov	r0, r6
 8017514:	f7ff ff93 	bl	801743e <__sfputs_r>
 8017518:	3001      	adds	r0, #1
 801751a:	f000 80aa 	beq.w	8017672 <_vfiprintf_r+0x20e>
 801751e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017520:	445a      	add	r2, fp
 8017522:	9209      	str	r2, [sp, #36]	; 0x24
 8017524:	f89a 3000 	ldrb.w	r3, [sl]
 8017528:	2b00      	cmp	r3, #0
 801752a:	f000 80a2 	beq.w	8017672 <_vfiprintf_r+0x20e>
 801752e:	2300      	movs	r3, #0
 8017530:	f04f 32ff 	mov.w	r2, #4294967295
 8017534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017538:	f10a 0a01 	add.w	sl, sl, #1
 801753c:	9304      	str	r3, [sp, #16]
 801753e:	9307      	str	r3, [sp, #28]
 8017540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017544:	931a      	str	r3, [sp, #104]	; 0x68
 8017546:	4654      	mov	r4, sl
 8017548:	2205      	movs	r2, #5
 801754a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801754e:	4858      	ldr	r0, [pc, #352]	; (80176b0 <_vfiprintf_r+0x24c>)
 8017550:	f7e8 ff6e 	bl	8000430 <memchr>
 8017554:	9a04      	ldr	r2, [sp, #16]
 8017556:	b9d8      	cbnz	r0, 8017590 <_vfiprintf_r+0x12c>
 8017558:	06d1      	lsls	r1, r2, #27
 801755a:	bf44      	itt	mi
 801755c:	2320      	movmi	r3, #32
 801755e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017562:	0713      	lsls	r3, r2, #28
 8017564:	bf44      	itt	mi
 8017566:	232b      	movmi	r3, #43	; 0x2b
 8017568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801756c:	f89a 3000 	ldrb.w	r3, [sl]
 8017570:	2b2a      	cmp	r3, #42	; 0x2a
 8017572:	d015      	beq.n	80175a0 <_vfiprintf_r+0x13c>
 8017574:	9a07      	ldr	r2, [sp, #28]
 8017576:	4654      	mov	r4, sl
 8017578:	2000      	movs	r0, #0
 801757a:	f04f 0c0a 	mov.w	ip, #10
 801757e:	4621      	mov	r1, r4
 8017580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017584:	3b30      	subs	r3, #48	; 0x30
 8017586:	2b09      	cmp	r3, #9
 8017588:	d94e      	bls.n	8017628 <_vfiprintf_r+0x1c4>
 801758a:	b1b0      	cbz	r0, 80175ba <_vfiprintf_r+0x156>
 801758c:	9207      	str	r2, [sp, #28]
 801758e:	e014      	b.n	80175ba <_vfiprintf_r+0x156>
 8017590:	eba0 0308 	sub.w	r3, r0, r8
 8017594:	fa09 f303 	lsl.w	r3, r9, r3
 8017598:	4313      	orrs	r3, r2
 801759a:	9304      	str	r3, [sp, #16]
 801759c:	46a2      	mov	sl, r4
 801759e:	e7d2      	b.n	8017546 <_vfiprintf_r+0xe2>
 80175a0:	9b03      	ldr	r3, [sp, #12]
 80175a2:	1d19      	adds	r1, r3, #4
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	9103      	str	r1, [sp, #12]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	bfbb      	ittet	lt
 80175ac:	425b      	neglt	r3, r3
 80175ae:	f042 0202 	orrlt.w	r2, r2, #2
 80175b2:	9307      	strge	r3, [sp, #28]
 80175b4:	9307      	strlt	r3, [sp, #28]
 80175b6:	bfb8      	it	lt
 80175b8:	9204      	strlt	r2, [sp, #16]
 80175ba:	7823      	ldrb	r3, [r4, #0]
 80175bc:	2b2e      	cmp	r3, #46	; 0x2e
 80175be:	d10c      	bne.n	80175da <_vfiprintf_r+0x176>
 80175c0:	7863      	ldrb	r3, [r4, #1]
 80175c2:	2b2a      	cmp	r3, #42	; 0x2a
 80175c4:	d135      	bne.n	8017632 <_vfiprintf_r+0x1ce>
 80175c6:	9b03      	ldr	r3, [sp, #12]
 80175c8:	1d1a      	adds	r2, r3, #4
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	9203      	str	r2, [sp, #12]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	bfb8      	it	lt
 80175d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80175d6:	3402      	adds	r4, #2
 80175d8:	9305      	str	r3, [sp, #20]
 80175da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80176c0 <_vfiprintf_r+0x25c>
 80175de:	7821      	ldrb	r1, [r4, #0]
 80175e0:	2203      	movs	r2, #3
 80175e2:	4650      	mov	r0, sl
 80175e4:	f7e8 ff24 	bl	8000430 <memchr>
 80175e8:	b140      	cbz	r0, 80175fc <_vfiprintf_r+0x198>
 80175ea:	2340      	movs	r3, #64	; 0x40
 80175ec:	eba0 000a 	sub.w	r0, r0, sl
 80175f0:	fa03 f000 	lsl.w	r0, r3, r0
 80175f4:	9b04      	ldr	r3, [sp, #16]
 80175f6:	4303      	orrs	r3, r0
 80175f8:	3401      	adds	r4, #1
 80175fa:	9304      	str	r3, [sp, #16]
 80175fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017600:	482c      	ldr	r0, [pc, #176]	; (80176b4 <_vfiprintf_r+0x250>)
 8017602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017606:	2206      	movs	r2, #6
 8017608:	f7e8 ff12 	bl	8000430 <memchr>
 801760c:	2800      	cmp	r0, #0
 801760e:	d03f      	beq.n	8017690 <_vfiprintf_r+0x22c>
 8017610:	4b29      	ldr	r3, [pc, #164]	; (80176b8 <_vfiprintf_r+0x254>)
 8017612:	bb1b      	cbnz	r3, 801765c <_vfiprintf_r+0x1f8>
 8017614:	9b03      	ldr	r3, [sp, #12]
 8017616:	3307      	adds	r3, #7
 8017618:	f023 0307 	bic.w	r3, r3, #7
 801761c:	3308      	adds	r3, #8
 801761e:	9303      	str	r3, [sp, #12]
 8017620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017622:	443b      	add	r3, r7
 8017624:	9309      	str	r3, [sp, #36]	; 0x24
 8017626:	e767      	b.n	80174f8 <_vfiprintf_r+0x94>
 8017628:	fb0c 3202 	mla	r2, ip, r2, r3
 801762c:	460c      	mov	r4, r1
 801762e:	2001      	movs	r0, #1
 8017630:	e7a5      	b.n	801757e <_vfiprintf_r+0x11a>
 8017632:	2300      	movs	r3, #0
 8017634:	3401      	adds	r4, #1
 8017636:	9305      	str	r3, [sp, #20]
 8017638:	4619      	mov	r1, r3
 801763a:	f04f 0c0a 	mov.w	ip, #10
 801763e:	4620      	mov	r0, r4
 8017640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017644:	3a30      	subs	r2, #48	; 0x30
 8017646:	2a09      	cmp	r2, #9
 8017648:	d903      	bls.n	8017652 <_vfiprintf_r+0x1ee>
 801764a:	2b00      	cmp	r3, #0
 801764c:	d0c5      	beq.n	80175da <_vfiprintf_r+0x176>
 801764e:	9105      	str	r1, [sp, #20]
 8017650:	e7c3      	b.n	80175da <_vfiprintf_r+0x176>
 8017652:	fb0c 2101 	mla	r1, ip, r1, r2
 8017656:	4604      	mov	r4, r0
 8017658:	2301      	movs	r3, #1
 801765a:	e7f0      	b.n	801763e <_vfiprintf_r+0x1da>
 801765c:	ab03      	add	r3, sp, #12
 801765e:	9300      	str	r3, [sp, #0]
 8017660:	462a      	mov	r2, r5
 8017662:	4b16      	ldr	r3, [pc, #88]	; (80176bc <_vfiprintf_r+0x258>)
 8017664:	a904      	add	r1, sp, #16
 8017666:	4630      	mov	r0, r6
 8017668:	f3af 8000 	nop.w
 801766c:	4607      	mov	r7, r0
 801766e:	1c78      	adds	r0, r7, #1
 8017670:	d1d6      	bne.n	8017620 <_vfiprintf_r+0x1bc>
 8017672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017674:	07d9      	lsls	r1, r3, #31
 8017676:	d405      	bmi.n	8017684 <_vfiprintf_r+0x220>
 8017678:	89ab      	ldrh	r3, [r5, #12]
 801767a:	059a      	lsls	r2, r3, #22
 801767c:	d402      	bmi.n	8017684 <_vfiprintf_r+0x220>
 801767e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017680:	f7ff fdaf 	bl	80171e2 <__retarget_lock_release_recursive>
 8017684:	89ab      	ldrh	r3, [r5, #12]
 8017686:	065b      	lsls	r3, r3, #25
 8017688:	f53f af12 	bmi.w	80174b0 <_vfiprintf_r+0x4c>
 801768c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801768e:	e711      	b.n	80174b4 <_vfiprintf_r+0x50>
 8017690:	ab03      	add	r3, sp, #12
 8017692:	9300      	str	r3, [sp, #0]
 8017694:	462a      	mov	r2, r5
 8017696:	4b09      	ldr	r3, [pc, #36]	; (80176bc <_vfiprintf_r+0x258>)
 8017698:	a904      	add	r1, sp, #16
 801769a:	4630      	mov	r0, r6
 801769c:	f000 f880 	bl	80177a0 <_printf_i>
 80176a0:	e7e4      	b.n	801766c <_vfiprintf_r+0x208>
 80176a2:	bf00      	nop
 80176a4:	08017fa0 	.word	0x08017fa0
 80176a8:	08017fc0 	.word	0x08017fc0
 80176ac:	08017f80 	.word	0x08017f80
 80176b0:	08017fe0 	.word	0x08017fe0
 80176b4:	08017fea 	.word	0x08017fea
 80176b8:	00000000 	.word	0x00000000
 80176bc:	0801743f 	.word	0x0801743f
 80176c0:	08017fe6 	.word	0x08017fe6

080176c4 <_printf_common>:
 80176c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176c8:	4616      	mov	r6, r2
 80176ca:	4699      	mov	r9, r3
 80176cc:	688a      	ldr	r2, [r1, #8]
 80176ce:	690b      	ldr	r3, [r1, #16]
 80176d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80176d4:	4293      	cmp	r3, r2
 80176d6:	bfb8      	it	lt
 80176d8:	4613      	movlt	r3, r2
 80176da:	6033      	str	r3, [r6, #0]
 80176dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80176e0:	4607      	mov	r7, r0
 80176e2:	460c      	mov	r4, r1
 80176e4:	b10a      	cbz	r2, 80176ea <_printf_common+0x26>
 80176e6:	3301      	adds	r3, #1
 80176e8:	6033      	str	r3, [r6, #0]
 80176ea:	6823      	ldr	r3, [r4, #0]
 80176ec:	0699      	lsls	r1, r3, #26
 80176ee:	bf42      	ittt	mi
 80176f0:	6833      	ldrmi	r3, [r6, #0]
 80176f2:	3302      	addmi	r3, #2
 80176f4:	6033      	strmi	r3, [r6, #0]
 80176f6:	6825      	ldr	r5, [r4, #0]
 80176f8:	f015 0506 	ands.w	r5, r5, #6
 80176fc:	d106      	bne.n	801770c <_printf_common+0x48>
 80176fe:	f104 0a19 	add.w	sl, r4, #25
 8017702:	68e3      	ldr	r3, [r4, #12]
 8017704:	6832      	ldr	r2, [r6, #0]
 8017706:	1a9b      	subs	r3, r3, r2
 8017708:	42ab      	cmp	r3, r5
 801770a:	dc26      	bgt.n	801775a <_printf_common+0x96>
 801770c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017710:	1e13      	subs	r3, r2, #0
 8017712:	6822      	ldr	r2, [r4, #0]
 8017714:	bf18      	it	ne
 8017716:	2301      	movne	r3, #1
 8017718:	0692      	lsls	r2, r2, #26
 801771a:	d42b      	bmi.n	8017774 <_printf_common+0xb0>
 801771c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017720:	4649      	mov	r1, r9
 8017722:	4638      	mov	r0, r7
 8017724:	47c0      	blx	r8
 8017726:	3001      	adds	r0, #1
 8017728:	d01e      	beq.n	8017768 <_printf_common+0xa4>
 801772a:	6823      	ldr	r3, [r4, #0]
 801772c:	68e5      	ldr	r5, [r4, #12]
 801772e:	6832      	ldr	r2, [r6, #0]
 8017730:	f003 0306 	and.w	r3, r3, #6
 8017734:	2b04      	cmp	r3, #4
 8017736:	bf08      	it	eq
 8017738:	1aad      	subeq	r5, r5, r2
 801773a:	68a3      	ldr	r3, [r4, #8]
 801773c:	6922      	ldr	r2, [r4, #16]
 801773e:	bf0c      	ite	eq
 8017740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017744:	2500      	movne	r5, #0
 8017746:	4293      	cmp	r3, r2
 8017748:	bfc4      	itt	gt
 801774a:	1a9b      	subgt	r3, r3, r2
 801774c:	18ed      	addgt	r5, r5, r3
 801774e:	2600      	movs	r6, #0
 8017750:	341a      	adds	r4, #26
 8017752:	42b5      	cmp	r5, r6
 8017754:	d11a      	bne.n	801778c <_printf_common+0xc8>
 8017756:	2000      	movs	r0, #0
 8017758:	e008      	b.n	801776c <_printf_common+0xa8>
 801775a:	2301      	movs	r3, #1
 801775c:	4652      	mov	r2, sl
 801775e:	4649      	mov	r1, r9
 8017760:	4638      	mov	r0, r7
 8017762:	47c0      	blx	r8
 8017764:	3001      	adds	r0, #1
 8017766:	d103      	bne.n	8017770 <_printf_common+0xac>
 8017768:	f04f 30ff 	mov.w	r0, #4294967295
 801776c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017770:	3501      	adds	r5, #1
 8017772:	e7c6      	b.n	8017702 <_printf_common+0x3e>
 8017774:	18e1      	adds	r1, r4, r3
 8017776:	1c5a      	adds	r2, r3, #1
 8017778:	2030      	movs	r0, #48	; 0x30
 801777a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801777e:	4422      	add	r2, r4
 8017780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017788:	3302      	adds	r3, #2
 801778a:	e7c7      	b.n	801771c <_printf_common+0x58>
 801778c:	2301      	movs	r3, #1
 801778e:	4622      	mov	r2, r4
 8017790:	4649      	mov	r1, r9
 8017792:	4638      	mov	r0, r7
 8017794:	47c0      	blx	r8
 8017796:	3001      	adds	r0, #1
 8017798:	d0e6      	beq.n	8017768 <_printf_common+0xa4>
 801779a:	3601      	adds	r6, #1
 801779c:	e7d9      	b.n	8017752 <_printf_common+0x8e>
	...

080177a0 <_printf_i>:
 80177a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177a4:	460c      	mov	r4, r1
 80177a6:	4691      	mov	r9, r2
 80177a8:	7e27      	ldrb	r7, [r4, #24]
 80177aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80177ac:	2f78      	cmp	r7, #120	; 0x78
 80177ae:	4680      	mov	r8, r0
 80177b0:	469a      	mov	sl, r3
 80177b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80177b6:	d807      	bhi.n	80177c8 <_printf_i+0x28>
 80177b8:	2f62      	cmp	r7, #98	; 0x62
 80177ba:	d80a      	bhi.n	80177d2 <_printf_i+0x32>
 80177bc:	2f00      	cmp	r7, #0
 80177be:	f000 80d8 	beq.w	8017972 <_printf_i+0x1d2>
 80177c2:	2f58      	cmp	r7, #88	; 0x58
 80177c4:	f000 80a3 	beq.w	801790e <_printf_i+0x16e>
 80177c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80177cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80177d0:	e03a      	b.n	8017848 <_printf_i+0xa8>
 80177d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80177d6:	2b15      	cmp	r3, #21
 80177d8:	d8f6      	bhi.n	80177c8 <_printf_i+0x28>
 80177da:	a001      	add	r0, pc, #4	; (adr r0, 80177e0 <_printf_i+0x40>)
 80177dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80177e0:	08017839 	.word	0x08017839
 80177e4:	0801784d 	.word	0x0801784d
 80177e8:	080177c9 	.word	0x080177c9
 80177ec:	080177c9 	.word	0x080177c9
 80177f0:	080177c9 	.word	0x080177c9
 80177f4:	080177c9 	.word	0x080177c9
 80177f8:	0801784d 	.word	0x0801784d
 80177fc:	080177c9 	.word	0x080177c9
 8017800:	080177c9 	.word	0x080177c9
 8017804:	080177c9 	.word	0x080177c9
 8017808:	080177c9 	.word	0x080177c9
 801780c:	08017959 	.word	0x08017959
 8017810:	0801787d 	.word	0x0801787d
 8017814:	0801793b 	.word	0x0801793b
 8017818:	080177c9 	.word	0x080177c9
 801781c:	080177c9 	.word	0x080177c9
 8017820:	0801797b 	.word	0x0801797b
 8017824:	080177c9 	.word	0x080177c9
 8017828:	0801787d 	.word	0x0801787d
 801782c:	080177c9 	.word	0x080177c9
 8017830:	080177c9 	.word	0x080177c9
 8017834:	08017943 	.word	0x08017943
 8017838:	680b      	ldr	r3, [r1, #0]
 801783a:	1d1a      	adds	r2, r3, #4
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	600a      	str	r2, [r1, #0]
 8017840:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017848:	2301      	movs	r3, #1
 801784a:	e0a3      	b.n	8017994 <_printf_i+0x1f4>
 801784c:	6825      	ldr	r5, [r4, #0]
 801784e:	6808      	ldr	r0, [r1, #0]
 8017850:	062e      	lsls	r6, r5, #24
 8017852:	f100 0304 	add.w	r3, r0, #4
 8017856:	d50a      	bpl.n	801786e <_printf_i+0xce>
 8017858:	6805      	ldr	r5, [r0, #0]
 801785a:	600b      	str	r3, [r1, #0]
 801785c:	2d00      	cmp	r5, #0
 801785e:	da03      	bge.n	8017868 <_printf_i+0xc8>
 8017860:	232d      	movs	r3, #45	; 0x2d
 8017862:	426d      	negs	r5, r5
 8017864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017868:	485e      	ldr	r0, [pc, #376]	; (80179e4 <_printf_i+0x244>)
 801786a:	230a      	movs	r3, #10
 801786c:	e019      	b.n	80178a2 <_printf_i+0x102>
 801786e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017872:	6805      	ldr	r5, [r0, #0]
 8017874:	600b      	str	r3, [r1, #0]
 8017876:	bf18      	it	ne
 8017878:	b22d      	sxthne	r5, r5
 801787a:	e7ef      	b.n	801785c <_printf_i+0xbc>
 801787c:	680b      	ldr	r3, [r1, #0]
 801787e:	6825      	ldr	r5, [r4, #0]
 8017880:	1d18      	adds	r0, r3, #4
 8017882:	6008      	str	r0, [r1, #0]
 8017884:	0628      	lsls	r0, r5, #24
 8017886:	d501      	bpl.n	801788c <_printf_i+0xec>
 8017888:	681d      	ldr	r5, [r3, #0]
 801788a:	e002      	b.n	8017892 <_printf_i+0xf2>
 801788c:	0669      	lsls	r1, r5, #25
 801788e:	d5fb      	bpl.n	8017888 <_printf_i+0xe8>
 8017890:	881d      	ldrh	r5, [r3, #0]
 8017892:	4854      	ldr	r0, [pc, #336]	; (80179e4 <_printf_i+0x244>)
 8017894:	2f6f      	cmp	r7, #111	; 0x6f
 8017896:	bf0c      	ite	eq
 8017898:	2308      	moveq	r3, #8
 801789a:	230a      	movne	r3, #10
 801789c:	2100      	movs	r1, #0
 801789e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80178a2:	6866      	ldr	r6, [r4, #4]
 80178a4:	60a6      	str	r6, [r4, #8]
 80178a6:	2e00      	cmp	r6, #0
 80178a8:	bfa2      	ittt	ge
 80178aa:	6821      	ldrge	r1, [r4, #0]
 80178ac:	f021 0104 	bicge.w	r1, r1, #4
 80178b0:	6021      	strge	r1, [r4, #0]
 80178b2:	b90d      	cbnz	r5, 80178b8 <_printf_i+0x118>
 80178b4:	2e00      	cmp	r6, #0
 80178b6:	d04d      	beq.n	8017954 <_printf_i+0x1b4>
 80178b8:	4616      	mov	r6, r2
 80178ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80178be:	fb03 5711 	mls	r7, r3, r1, r5
 80178c2:	5dc7      	ldrb	r7, [r0, r7]
 80178c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80178c8:	462f      	mov	r7, r5
 80178ca:	42bb      	cmp	r3, r7
 80178cc:	460d      	mov	r5, r1
 80178ce:	d9f4      	bls.n	80178ba <_printf_i+0x11a>
 80178d0:	2b08      	cmp	r3, #8
 80178d2:	d10b      	bne.n	80178ec <_printf_i+0x14c>
 80178d4:	6823      	ldr	r3, [r4, #0]
 80178d6:	07df      	lsls	r7, r3, #31
 80178d8:	d508      	bpl.n	80178ec <_printf_i+0x14c>
 80178da:	6923      	ldr	r3, [r4, #16]
 80178dc:	6861      	ldr	r1, [r4, #4]
 80178de:	4299      	cmp	r1, r3
 80178e0:	bfde      	ittt	le
 80178e2:	2330      	movle	r3, #48	; 0x30
 80178e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80178e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80178ec:	1b92      	subs	r2, r2, r6
 80178ee:	6122      	str	r2, [r4, #16]
 80178f0:	f8cd a000 	str.w	sl, [sp]
 80178f4:	464b      	mov	r3, r9
 80178f6:	aa03      	add	r2, sp, #12
 80178f8:	4621      	mov	r1, r4
 80178fa:	4640      	mov	r0, r8
 80178fc:	f7ff fee2 	bl	80176c4 <_printf_common>
 8017900:	3001      	adds	r0, #1
 8017902:	d14c      	bne.n	801799e <_printf_i+0x1fe>
 8017904:	f04f 30ff 	mov.w	r0, #4294967295
 8017908:	b004      	add	sp, #16
 801790a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801790e:	4835      	ldr	r0, [pc, #212]	; (80179e4 <_printf_i+0x244>)
 8017910:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017914:	6823      	ldr	r3, [r4, #0]
 8017916:	680e      	ldr	r6, [r1, #0]
 8017918:	061f      	lsls	r7, r3, #24
 801791a:	f856 5b04 	ldr.w	r5, [r6], #4
 801791e:	600e      	str	r6, [r1, #0]
 8017920:	d514      	bpl.n	801794c <_printf_i+0x1ac>
 8017922:	07d9      	lsls	r1, r3, #31
 8017924:	bf44      	itt	mi
 8017926:	f043 0320 	orrmi.w	r3, r3, #32
 801792a:	6023      	strmi	r3, [r4, #0]
 801792c:	b91d      	cbnz	r5, 8017936 <_printf_i+0x196>
 801792e:	6823      	ldr	r3, [r4, #0]
 8017930:	f023 0320 	bic.w	r3, r3, #32
 8017934:	6023      	str	r3, [r4, #0]
 8017936:	2310      	movs	r3, #16
 8017938:	e7b0      	b.n	801789c <_printf_i+0xfc>
 801793a:	6823      	ldr	r3, [r4, #0]
 801793c:	f043 0320 	orr.w	r3, r3, #32
 8017940:	6023      	str	r3, [r4, #0]
 8017942:	2378      	movs	r3, #120	; 0x78
 8017944:	4828      	ldr	r0, [pc, #160]	; (80179e8 <_printf_i+0x248>)
 8017946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801794a:	e7e3      	b.n	8017914 <_printf_i+0x174>
 801794c:	065e      	lsls	r6, r3, #25
 801794e:	bf48      	it	mi
 8017950:	b2ad      	uxthmi	r5, r5
 8017952:	e7e6      	b.n	8017922 <_printf_i+0x182>
 8017954:	4616      	mov	r6, r2
 8017956:	e7bb      	b.n	80178d0 <_printf_i+0x130>
 8017958:	680b      	ldr	r3, [r1, #0]
 801795a:	6826      	ldr	r6, [r4, #0]
 801795c:	6960      	ldr	r0, [r4, #20]
 801795e:	1d1d      	adds	r5, r3, #4
 8017960:	600d      	str	r5, [r1, #0]
 8017962:	0635      	lsls	r5, r6, #24
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	d501      	bpl.n	801796c <_printf_i+0x1cc>
 8017968:	6018      	str	r0, [r3, #0]
 801796a:	e002      	b.n	8017972 <_printf_i+0x1d2>
 801796c:	0671      	lsls	r1, r6, #25
 801796e:	d5fb      	bpl.n	8017968 <_printf_i+0x1c8>
 8017970:	8018      	strh	r0, [r3, #0]
 8017972:	2300      	movs	r3, #0
 8017974:	6123      	str	r3, [r4, #16]
 8017976:	4616      	mov	r6, r2
 8017978:	e7ba      	b.n	80178f0 <_printf_i+0x150>
 801797a:	680b      	ldr	r3, [r1, #0]
 801797c:	1d1a      	adds	r2, r3, #4
 801797e:	600a      	str	r2, [r1, #0]
 8017980:	681e      	ldr	r6, [r3, #0]
 8017982:	6862      	ldr	r2, [r4, #4]
 8017984:	2100      	movs	r1, #0
 8017986:	4630      	mov	r0, r6
 8017988:	f7e8 fd52 	bl	8000430 <memchr>
 801798c:	b108      	cbz	r0, 8017992 <_printf_i+0x1f2>
 801798e:	1b80      	subs	r0, r0, r6
 8017990:	6060      	str	r0, [r4, #4]
 8017992:	6863      	ldr	r3, [r4, #4]
 8017994:	6123      	str	r3, [r4, #16]
 8017996:	2300      	movs	r3, #0
 8017998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801799c:	e7a8      	b.n	80178f0 <_printf_i+0x150>
 801799e:	6923      	ldr	r3, [r4, #16]
 80179a0:	4632      	mov	r2, r6
 80179a2:	4649      	mov	r1, r9
 80179a4:	4640      	mov	r0, r8
 80179a6:	47d0      	blx	sl
 80179a8:	3001      	adds	r0, #1
 80179aa:	d0ab      	beq.n	8017904 <_printf_i+0x164>
 80179ac:	6823      	ldr	r3, [r4, #0]
 80179ae:	079b      	lsls	r3, r3, #30
 80179b0:	d413      	bmi.n	80179da <_printf_i+0x23a>
 80179b2:	68e0      	ldr	r0, [r4, #12]
 80179b4:	9b03      	ldr	r3, [sp, #12]
 80179b6:	4298      	cmp	r0, r3
 80179b8:	bfb8      	it	lt
 80179ba:	4618      	movlt	r0, r3
 80179bc:	e7a4      	b.n	8017908 <_printf_i+0x168>
 80179be:	2301      	movs	r3, #1
 80179c0:	4632      	mov	r2, r6
 80179c2:	4649      	mov	r1, r9
 80179c4:	4640      	mov	r0, r8
 80179c6:	47d0      	blx	sl
 80179c8:	3001      	adds	r0, #1
 80179ca:	d09b      	beq.n	8017904 <_printf_i+0x164>
 80179cc:	3501      	adds	r5, #1
 80179ce:	68e3      	ldr	r3, [r4, #12]
 80179d0:	9903      	ldr	r1, [sp, #12]
 80179d2:	1a5b      	subs	r3, r3, r1
 80179d4:	42ab      	cmp	r3, r5
 80179d6:	dcf2      	bgt.n	80179be <_printf_i+0x21e>
 80179d8:	e7eb      	b.n	80179b2 <_printf_i+0x212>
 80179da:	2500      	movs	r5, #0
 80179dc:	f104 0619 	add.w	r6, r4, #25
 80179e0:	e7f5      	b.n	80179ce <_printf_i+0x22e>
 80179e2:	bf00      	nop
 80179e4:	08017ff1 	.word	0x08017ff1
 80179e8:	08018002 	.word	0x08018002

080179ec <_sbrk_r>:
 80179ec:	b538      	push	{r3, r4, r5, lr}
 80179ee:	4d06      	ldr	r5, [pc, #24]	; (8017a08 <_sbrk_r+0x1c>)
 80179f0:	2300      	movs	r3, #0
 80179f2:	4604      	mov	r4, r0
 80179f4:	4608      	mov	r0, r1
 80179f6:	602b      	str	r3, [r5, #0]
 80179f8:	f7e9 fb20 	bl	800103c <_sbrk>
 80179fc:	1c43      	adds	r3, r0, #1
 80179fe:	d102      	bne.n	8017a06 <_sbrk_r+0x1a>
 8017a00:	682b      	ldr	r3, [r5, #0]
 8017a02:	b103      	cbz	r3, 8017a06 <_sbrk_r+0x1a>
 8017a04:	6023      	str	r3, [r4, #0]
 8017a06:	bd38      	pop	{r3, r4, r5, pc}
 8017a08:	2000b078 	.word	0x2000b078

08017a0c <__sread>:
 8017a0c:	b510      	push	{r4, lr}
 8017a0e:	460c      	mov	r4, r1
 8017a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a14:	f000 f8a8 	bl	8017b68 <_read_r>
 8017a18:	2800      	cmp	r0, #0
 8017a1a:	bfab      	itete	ge
 8017a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8017a20:	181b      	addge	r3, r3, r0
 8017a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017a26:	bfac      	ite	ge
 8017a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8017a2a:	81a3      	strhlt	r3, [r4, #12]
 8017a2c:	bd10      	pop	{r4, pc}

08017a2e <__swrite>:
 8017a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a32:	461f      	mov	r7, r3
 8017a34:	898b      	ldrh	r3, [r1, #12]
 8017a36:	05db      	lsls	r3, r3, #23
 8017a38:	4605      	mov	r5, r0
 8017a3a:	460c      	mov	r4, r1
 8017a3c:	4616      	mov	r6, r2
 8017a3e:	d505      	bpl.n	8017a4c <__swrite+0x1e>
 8017a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a44:	2302      	movs	r3, #2
 8017a46:	2200      	movs	r2, #0
 8017a48:	f000 f870 	bl	8017b2c <_lseek_r>
 8017a4c:	89a3      	ldrh	r3, [r4, #12]
 8017a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a56:	81a3      	strh	r3, [r4, #12]
 8017a58:	4632      	mov	r2, r6
 8017a5a:	463b      	mov	r3, r7
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a62:	f000 b817 	b.w	8017a94 <_write_r>

08017a66 <__sseek>:
 8017a66:	b510      	push	{r4, lr}
 8017a68:	460c      	mov	r4, r1
 8017a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a6e:	f000 f85d 	bl	8017b2c <_lseek_r>
 8017a72:	1c43      	adds	r3, r0, #1
 8017a74:	89a3      	ldrh	r3, [r4, #12]
 8017a76:	bf15      	itete	ne
 8017a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017a82:	81a3      	strheq	r3, [r4, #12]
 8017a84:	bf18      	it	ne
 8017a86:	81a3      	strhne	r3, [r4, #12]
 8017a88:	bd10      	pop	{r4, pc}

08017a8a <__sclose>:
 8017a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a8e:	f000 b81b 	b.w	8017ac8 <_close_r>
	...

08017a94 <_write_r>:
 8017a94:	b538      	push	{r3, r4, r5, lr}
 8017a96:	4d07      	ldr	r5, [pc, #28]	; (8017ab4 <_write_r+0x20>)
 8017a98:	4604      	mov	r4, r0
 8017a9a:	4608      	mov	r0, r1
 8017a9c:	4611      	mov	r1, r2
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	602a      	str	r2, [r5, #0]
 8017aa2:	461a      	mov	r2, r3
 8017aa4:	f7e9 fa79 	bl	8000f9a <_write>
 8017aa8:	1c43      	adds	r3, r0, #1
 8017aaa:	d102      	bne.n	8017ab2 <_write_r+0x1e>
 8017aac:	682b      	ldr	r3, [r5, #0]
 8017aae:	b103      	cbz	r3, 8017ab2 <_write_r+0x1e>
 8017ab0:	6023      	str	r3, [r4, #0]
 8017ab2:	bd38      	pop	{r3, r4, r5, pc}
 8017ab4:	2000b078 	.word	0x2000b078

08017ab8 <abort>:
 8017ab8:	b508      	push	{r3, lr}
 8017aba:	2006      	movs	r0, #6
 8017abc:	f000 f88e 	bl	8017bdc <raise>
 8017ac0:	2001      	movs	r0, #1
 8017ac2:	f7e9 fa43 	bl	8000f4c <_exit>
	...

08017ac8 <_close_r>:
 8017ac8:	b538      	push	{r3, r4, r5, lr}
 8017aca:	4d06      	ldr	r5, [pc, #24]	; (8017ae4 <_close_r+0x1c>)
 8017acc:	2300      	movs	r3, #0
 8017ace:	4604      	mov	r4, r0
 8017ad0:	4608      	mov	r0, r1
 8017ad2:	602b      	str	r3, [r5, #0]
 8017ad4:	f7e9 fa7d 	bl	8000fd2 <_close>
 8017ad8:	1c43      	adds	r3, r0, #1
 8017ada:	d102      	bne.n	8017ae2 <_close_r+0x1a>
 8017adc:	682b      	ldr	r3, [r5, #0]
 8017ade:	b103      	cbz	r3, 8017ae2 <_close_r+0x1a>
 8017ae0:	6023      	str	r3, [r4, #0]
 8017ae2:	bd38      	pop	{r3, r4, r5, pc}
 8017ae4:	2000b078 	.word	0x2000b078

08017ae8 <_fstat_r>:
 8017ae8:	b538      	push	{r3, r4, r5, lr}
 8017aea:	4d07      	ldr	r5, [pc, #28]	; (8017b08 <_fstat_r+0x20>)
 8017aec:	2300      	movs	r3, #0
 8017aee:	4604      	mov	r4, r0
 8017af0:	4608      	mov	r0, r1
 8017af2:	4611      	mov	r1, r2
 8017af4:	602b      	str	r3, [r5, #0]
 8017af6:	f7e9 fa78 	bl	8000fea <_fstat>
 8017afa:	1c43      	adds	r3, r0, #1
 8017afc:	d102      	bne.n	8017b04 <_fstat_r+0x1c>
 8017afe:	682b      	ldr	r3, [r5, #0]
 8017b00:	b103      	cbz	r3, 8017b04 <_fstat_r+0x1c>
 8017b02:	6023      	str	r3, [r4, #0]
 8017b04:	bd38      	pop	{r3, r4, r5, pc}
 8017b06:	bf00      	nop
 8017b08:	2000b078 	.word	0x2000b078

08017b0c <_isatty_r>:
 8017b0c:	b538      	push	{r3, r4, r5, lr}
 8017b0e:	4d06      	ldr	r5, [pc, #24]	; (8017b28 <_isatty_r+0x1c>)
 8017b10:	2300      	movs	r3, #0
 8017b12:	4604      	mov	r4, r0
 8017b14:	4608      	mov	r0, r1
 8017b16:	602b      	str	r3, [r5, #0]
 8017b18:	f7e9 fa77 	bl	800100a <_isatty>
 8017b1c:	1c43      	adds	r3, r0, #1
 8017b1e:	d102      	bne.n	8017b26 <_isatty_r+0x1a>
 8017b20:	682b      	ldr	r3, [r5, #0]
 8017b22:	b103      	cbz	r3, 8017b26 <_isatty_r+0x1a>
 8017b24:	6023      	str	r3, [r4, #0]
 8017b26:	bd38      	pop	{r3, r4, r5, pc}
 8017b28:	2000b078 	.word	0x2000b078

08017b2c <_lseek_r>:
 8017b2c:	b538      	push	{r3, r4, r5, lr}
 8017b2e:	4d07      	ldr	r5, [pc, #28]	; (8017b4c <_lseek_r+0x20>)
 8017b30:	4604      	mov	r4, r0
 8017b32:	4608      	mov	r0, r1
 8017b34:	4611      	mov	r1, r2
 8017b36:	2200      	movs	r2, #0
 8017b38:	602a      	str	r2, [r5, #0]
 8017b3a:	461a      	mov	r2, r3
 8017b3c:	f7e9 fa70 	bl	8001020 <_lseek>
 8017b40:	1c43      	adds	r3, r0, #1
 8017b42:	d102      	bne.n	8017b4a <_lseek_r+0x1e>
 8017b44:	682b      	ldr	r3, [r5, #0]
 8017b46:	b103      	cbz	r3, 8017b4a <_lseek_r+0x1e>
 8017b48:	6023      	str	r3, [r4, #0]
 8017b4a:	bd38      	pop	{r3, r4, r5, pc}
 8017b4c:	2000b078 	.word	0x2000b078

08017b50 <__malloc_lock>:
 8017b50:	4801      	ldr	r0, [pc, #4]	; (8017b58 <__malloc_lock+0x8>)
 8017b52:	f7ff bb45 	b.w	80171e0 <__retarget_lock_acquire_recursive>
 8017b56:	bf00      	nop
 8017b58:	2000b070 	.word	0x2000b070

08017b5c <__malloc_unlock>:
 8017b5c:	4801      	ldr	r0, [pc, #4]	; (8017b64 <__malloc_unlock+0x8>)
 8017b5e:	f7ff bb40 	b.w	80171e2 <__retarget_lock_release_recursive>
 8017b62:	bf00      	nop
 8017b64:	2000b070 	.word	0x2000b070

08017b68 <_read_r>:
 8017b68:	b538      	push	{r3, r4, r5, lr}
 8017b6a:	4d07      	ldr	r5, [pc, #28]	; (8017b88 <_read_r+0x20>)
 8017b6c:	4604      	mov	r4, r0
 8017b6e:	4608      	mov	r0, r1
 8017b70:	4611      	mov	r1, r2
 8017b72:	2200      	movs	r2, #0
 8017b74:	602a      	str	r2, [r5, #0]
 8017b76:	461a      	mov	r2, r3
 8017b78:	f7e9 f9f2 	bl	8000f60 <_read>
 8017b7c:	1c43      	adds	r3, r0, #1
 8017b7e:	d102      	bne.n	8017b86 <_read_r+0x1e>
 8017b80:	682b      	ldr	r3, [r5, #0]
 8017b82:	b103      	cbz	r3, 8017b86 <_read_r+0x1e>
 8017b84:	6023      	str	r3, [r4, #0]
 8017b86:	bd38      	pop	{r3, r4, r5, pc}
 8017b88:	2000b078 	.word	0x2000b078

08017b8c <_raise_r>:
 8017b8c:	291f      	cmp	r1, #31
 8017b8e:	b538      	push	{r3, r4, r5, lr}
 8017b90:	4604      	mov	r4, r0
 8017b92:	460d      	mov	r5, r1
 8017b94:	d904      	bls.n	8017ba0 <_raise_r+0x14>
 8017b96:	2316      	movs	r3, #22
 8017b98:	6003      	str	r3, [r0, #0]
 8017b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017b9e:	bd38      	pop	{r3, r4, r5, pc}
 8017ba0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ba2:	b112      	cbz	r2, 8017baa <_raise_r+0x1e>
 8017ba4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ba8:	b94b      	cbnz	r3, 8017bbe <_raise_r+0x32>
 8017baa:	4620      	mov	r0, r4
 8017bac:	f000 f830 	bl	8017c10 <_getpid_r>
 8017bb0:	462a      	mov	r2, r5
 8017bb2:	4601      	mov	r1, r0
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bba:	f000 b817 	b.w	8017bec <_kill_r>
 8017bbe:	2b01      	cmp	r3, #1
 8017bc0:	d00a      	beq.n	8017bd8 <_raise_r+0x4c>
 8017bc2:	1c59      	adds	r1, r3, #1
 8017bc4:	d103      	bne.n	8017bce <_raise_r+0x42>
 8017bc6:	2316      	movs	r3, #22
 8017bc8:	6003      	str	r3, [r0, #0]
 8017bca:	2001      	movs	r0, #1
 8017bcc:	e7e7      	b.n	8017b9e <_raise_r+0x12>
 8017bce:	2400      	movs	r4, #0
 8017bd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017bd4:	4628      	mov	r0, r5
 8017bd6:	4798      	blx	r3
 8017bd8:	2000      	movs	r0, #0
 8017bda:	e7e0      	b.n	8017b9e <_raise_r+0x12>

08017bdc <raise>:
 8017bdc:	4b02      	ldr	r3, [pc, #8]	; (8017be8 <raise+0xc>)
 8017bde:	4601      	mov	r1, r0
 8017be0:	6818      	ldr	r0, [r3, #0]
 8017be2:	f7ff bfd3 	b.w	8017b8c <_raise_r>
 8017be6:	bf00      	nop
 8017be8:	20000098 	.word	0x20000098

08017bec <_kill_r>:
 8017bec:	b538      	push	{r3, r4, r5, lr}
 8017bee:	4d07      	ldr	r5, [pc, #28]	; (8017c0c <_kill_r+0x20>)
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	4608      	mov	r0, r1
 8017bf6:	4611      	mov	r1, r2
 8017bf8:	602b      	str	r3, [r5, #0]
 8017bfa:	f7e9 f997 	bl	8000f2c <_kill>
 8017bfe:	1c43      	adds	r3, r0, #1
 8017c00:	d102      	bne.n	8017c08 <_kill_r+0x1c>
 8017c02:	682b      	ldr	r3, [r5, #0]
 8017c04:	b103      	cbz	r3, 8017c08 <_kill_r+0x1c>
 8017c06:	6023      	str	r3, [r4, #0]
 8017c08:	bd38      	pop	{r3, r4, r5, pc}
 8017c0a:	bf00      	nop
 8017c0c:	2000b078 	.word	0x2000b078

08017c10 <_getpid_r>:
 8017c10:	f7e9 b984 	b.w	8000f1c <_getpid>

08017c14 <_init>:
 8017c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c16:	bf00      	nop
 8017c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c1a:	bc08      	pop	{r3}
 8017c1c:	469e      	mov	lr, r3
 8017c1e:	4770      	bx	lr

08017c20 <_fini>:
 8017c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c22:	bf00      	nop
 8017c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c26:	bc08      	pop	{r3}
 8017c28:	469e      	mov	lr, r3
 8017c2a:	4770      	bx	lr
